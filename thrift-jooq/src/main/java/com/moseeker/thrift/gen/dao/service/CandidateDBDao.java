/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-04-19")
public class CandidateDBDao {

  public interface Iface {

    public com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO getCandidateRemark(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException;

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> listCandidateRemarks(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws com.moseeker.thrift.gen.dao.struct.CURDException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO saveCandidateRemark(com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO candidateRemark) throws com.moseeker.thrift.gen.dao.struct.CURDException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO updateCandidateRemark(com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO candidateRemark) throws com.moseeker.thrift.gen.dao.struct.CURDException, org.apache.thrift.TException;

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> updateCandidateRemarks(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> candidateRemarks) throws com.moseeker.thrift.gen.dao.struct.CURDException, org.apache.thrift.TException;

    public void deleteCandidateRemark(int id) throws com.moseeker.thrift.gen.dao.struct.CURDException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO getCandidateCompany(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException;

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO> listCandidateCompanys(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO saveCandidateCompanys(com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO candidateCompany) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO updateCandidateCompanys(com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO candidateCompany) throws org.apache.thrift.TException;

    public void deleteCandidateCompany(int id) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.dao.struct.CandidatePositionDO getCandidatePosition(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException;

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> listCandidatePositions(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException;

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> listCandidatePositionsByPositionIDUserID(java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>> companyPositionIds) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.dao.struct.CandidatePositionDO updateCandidatePosition(com.moseeker.thrift.gen.dao.struct.CandidatePositionDO candidatePosition) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.dao.struct.CandidatePositionDO saveCandidatePosition(com.moseeker.thrift.gen.dao.struct.CandidatePositionDO candidatePosition) throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException;

    public void deleteCandidatePositions(int userId, int positionId) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO getCandidatePositionShareRecord(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException;

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO> listCandidatePositionShareRecord(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO updateCandidatePositionShareRecord(com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO candidatePositionShareRecord) throws org.apache.thrift.TException;

    public void deleteCandidatePositionShareRecord(int id) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO getCandidateRecomRecord(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException;

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> listCandidateRecomRecord(int postUserId, java.lang.String clickTime, java.util.List<java.lang.Integer> recoms) throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException;

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> listCandidateRecomRecordExceptId(int id, int postUserId, java.lang.String clickTime, java.util.List<java.lang.Integer> recoms) throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException;

    public int countCandidateRecomRecordCustom(int postUserId, java.lang.String clickTime, java.util.List<java.lang.Integer> recoms) throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException;

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> listCandidateRecomRecords(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException;

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> listCandidateRecomRecordsForApplied(int userId, int pageNo, int pageSize) throws org.apache.thrift.TException;

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> listInterestedCandidateRecomRecord(int userId, int pageNo, int pageSize) throws org.apache.thrift.TException;

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> listCandidateRecomRecordsByPositionSetAndPresenteeId(java.util.Set<java.lang.Integer> positionIdSet, int presenteeId, int pageNo, int pageSize) throws org.apache.thrift.TException;

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO> listCandidateRecomRecordSorting(java.util.List<java.lang.Integer> postUserId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public int countCandidateRecomRecord(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException;

    public int countCandidateRecomRecordDistinctPresentee(int postUserId) throws org.apache.thrift.TException;

    public int countAppliedCandidateRecomRecord(int userId) throws org.apache.thrift.TException;

    public int countInterestedCandidateRecomRecord(int userId) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO updateCandidateRecomRecords(com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO candidateRecomRecord) throws org.apache.thrift.TException;

    public void deleteCandidateRecomRecords(int id) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO getCandidateShareChain(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException;

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO> listCandidateShareChain(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO updateCandidateShareChain(com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO candidateShareChain) throws org.apache.thrift.TException;

    public void deleteCandidateShareChain(int id) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO getCandidateSuggestPosition(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException;

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO> listCandidateSuggestPosition(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO updateCandidateSuggestPosition(com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO candidateSuggestPosition) throws org.apache.thrift.TException;

    public void deleteCandidateSuggestPosition(int id) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getCandidateRemark(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> resultHandler) throws org.apache.thrift.TException;

    public void listCandidateRemarks(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>> resultHandler) throws org.apache.thrift.TException;

    public void saveCandidateRemark(com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO candidateRemark, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> resultHandler) throws org.apache.thrift.TException;

    public void updateCandidateRemark(com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO candidateRemark, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> resultHandler) throws org.apache.thrift.TException;

    public void updateCandidateRemarks(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> candidateRemarks, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>> resultHandler) throws org.apache.thrift.TException;

    public void deleteCandidateRemark(int id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void getCandidateCompany(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO> resultHandler) throws org.apache.thrift.TException;

    public void listCandidateCompanys(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO>> resultHandler) throws org.apache.thrift.TException;

    public void saveCandidateCompanys(com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO candidateCompany, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO> resultHandler) throws org.apache.thrift.TException;

    public void updateCandidateCompanys(com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO candidateCompany, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO> resultHandler) throws org.apache.thrift.TException;

    public void deleteCandidateCompany(int id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void getCandidatePosition(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> resultHandler) throws org.apache.thrift.TException;

    public void listCandidatePositions(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO>> resultHandler) throws org.apache.thrift.TException;

    public void listCandidatePositionsByPositionIDUserID(java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>> companyPositionIds, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO>> resultHandler) throws org.apache.thrift.TException;

    public void updateCandidatePosition(com.moseeker.thrift.gen.dao.struct.CandidatePositionDO candidatePosition, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> resultHandler) throws org.apache.thrift.TException;

    public void saveCandidatePosition(com.moseeker.thrift.gen.dao.struct.CandidatePositionDO candidatePosition, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> resultHandler) throws org.apache.thrift.TException;

    public void deleteCandidatePositions(int userId, int positionId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void getCandidatePositionShareRecord(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO> resultHandler) throws org.apache.thrift.TException;

    public void listCandidatePositionShareRecord(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO>> resultHandler) throws org.apache.thrift.TException;

    public void updateCandidatePositionShareRecord(com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO candidatePositionShareRecord, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO> resultHandler) throws org.apache.thrift.TException;

    public void deleteCandidatePositionShareRecord(int id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void getCandidateRecomRecord(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> resultHandler) throws org.apache.thrift.TException;

    public void listCandidateRecomRecord(int postUserId, java.lang.String clickTime, java.util.List<java.lang.Integer> recoms, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> resultHandler) throws org.apache.thrift.TException;

    public void listCandidateRecomRecordExceptId(int id, int postUserId, java.lang.String clickTime, java.util.List<java.lang.Integer> recoms, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> resultHandler) throws org.apache.thrift.TException;

    public void countCandidateRecomRecordCustom(int postUserId, java.lang.String clickTime, java.util.List<java.lang.Integer> recoms, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void listCandidateRecomRecords(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> resultHandler) throws org.apache.thrift.TException;

    public void listCandidateRecomRecordsForApplied(int userId, int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> resultHandler) throws org.apache.thrift.TException;

    public void listInterestedCandidateRecomRecord(int userId, int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> resultHandler) throws org.apache.thrift.TException;

    public void listCandidateRecomRecordsByPositionSetAndPresenteeId(java.util.Set<java.lang.Integer> positionIdSet, int presenteeId, int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> resultHandler) throws org.apache.thrift.TException;

    public void listCandidateRecomRecordSorting(java.util.List<java.lang.Integer> postUserId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO>> resultHandler) throws org.apache.thrift.TException;

    public void countCandidateRecomRecord(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void countCandidateRecomRecordDistinctPresentee(int postUserId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void countAppliedCandidateRecomRecord(int userId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void countInterestedCandidateRecomRecord(int userId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void updateCandidateRecomRecords(com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO candidateRecomRecord, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> resultHandler) throws org.apache.thrift.TException;

    public void deleteCandidateRecomRecords(int id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void getCandidateShareChain(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO> resultHandler) throws org.apache.thrift.TException;

    public void listCandidateShareChain(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO>> resultHandler) throws org.apache.thrift.TException;

    public void updateCandidateShareChain(com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO candidateShareChain, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO> resultHandler) throws org.apache.thrift.TException;

    public void deleteCandidateShareChain(int id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void getCandidateSuggestPosition(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO> resultHandler) throws org.apache.thrift.TException;

    public void listCandidateSuggestPosition(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO>> resultHandler) throws org.apache.thrift.TException;

    public void updateCandidateSuggestPosition(com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO candidateSuggestPosition, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO> resultHandler) throws org.apache.thrift.TException;

    public void deleteCandidateSuggestPosition(int id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO getCandidateRemark(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      send_getCandidateRemark(query);
      return recv_getCandidateRemark();
    }

    public void send_getCandidateRemark(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      getCandidateRemark_args args = new getCandidateRemark_args();
      args.setQuery(query);
      sendBase("getCandidateRemark", args);
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO recv_getCandidateRemark() throws org.apache.thrift.TException
    {
      getCandidateRemark_result result = new getCandidateRemark_result();
      receiveBase(result, "getCandidateRemark");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCandidateRemark failed: unknown result");
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> listCandidateRemarks(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws com.moseeker.thrift.gen.dao.struct.CURDException, org.apache.thrift.TException
    {
      send_listCandidateRemarks(query);
      return recv_listCandidateRemarks();
    }

    public void send_listCandidateRemarks(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      listCandidateRemarks_args args = new listCandidateRemarks_args();
      args.setQuery(query);
      sendBase("listCandidateRemarks", args);
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> recv_listCandidateRemarks() throws com.moseeker.thrift.gen.dao.struct.CURDException, org.apache.thrift.TException
    {
      listCandidateRemarks_result result = new listCandidateRemarks_result();
      receiveBase(result, "listCandidateRemarks");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listCandidateRemarks failed: unknown result");
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO saveCandidateRemark(com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO candidateRemark) throws com.moseeker.thrift.gen.dao.struct.CURDException, org.apache.thrift.TException
    {
      send_saveCandidateRemark(candidateRemark);
      return recv_saveCandidateRemark();
    }

    public void send_saveCandidateRemark(com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO candidateRemark) throws org.apache.thrift.TException
    {
      saveCandidateRemark_args args = new saveCandidateRemark_args();
      args.setCandidateRemark(candidateRemark);
      sendBase("saveCandidateRemark", args);
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO recv_saveCandidateRemark() throws com.moseeker.thrift.gen.dao.struct.CURDException, org.apache.thrift.TException
    {
      saveCandidateRemark_result result = new saveCandidateRemark_result();
      receiveBase(result, "saveCandidateRemark");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveCandidateRemark failed: unknown result");
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO updateCandidateRemark(com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO candidateRemark) throws com.moseeker.thrift.gen.dao.struct.CURDException, org.apache.thrift.TException
    {
      send_updateCandidateRemark(candidateRemark);
      return recv_updateCandidateRemark();
    }

    public void send_updateCandidateRemark(com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO candidateRemark) throws org.apache.thrift.TException
    {
      updateCandidateRemark_args args = new updateCandidateRemark_args();
      args.setCandidateRemark(candidateRemark);
      sendBase("updateCandidateRemark", args);
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO recv_updateCandidateRemark() throws com.moseeker.thrift.gen.dao.struct.CURDException, org.apache.thrift.TException
    {
      updateCandidateRemark_result result = new updateCandidateRemark_result();
      receiveBase(result, "updateCandidateRemark");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateCandidateRemark failed: unknown result");
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> updateCandidateRemarks(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> candidateRemarks) throws com.moseeker.thrift.gen.dao.struct.CURDException, org.apache.thrift.TException
    {
      send_updateCandidateRemarks(candidateRemarks);
      return recv_updateCandidateRemarks();
    }

    public void send_updateCandidateRemarks(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> candidateRemarks) throws org.apache.thrift.TException
    {
      updateCandidateRemarks_args args = new updateCandidateRemarks_args();
      args.setCandidateRemarks(candidateRemarks);
      sendBase("updateCandidateRemarks", args);
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> recv_updateCandidateRemarks() throws com.moseeker.thrift.gen.dao.struct.CURDException, org.apache.thrift.TException
    {
      updateCandidateRemarks_result result = new updateCandidateRemarks_result();
      receiveBase(result, "updateCandidateRemarks");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateCandidateRemarks failed: unknown result");
    }

    public void deleteCandidateRemark(int id) throws com.moseeker.thrift.gen.dao.struct.CURDException, org.apache.thrift.TException
    {
      send_deleteCandidateRemark(id);
      recv_deleteCandidateRemark();
    }

    public void send_deleteCandidateRemark(int id) throws org.apache.thrift.TException
    {
      deleteCandidateRemark_args args = new deleteCandidateRemark_args();
      args.setId(id);
      sendBase("deleteCandidateRemark", args);
    }

    public void recv_deleteCandidateRemark() throws com.moseeker.thrift.gen.dao.struct.CURDException, org.apache.thrift.TException
    {
      deleteCandidateRemark_result result = new deleteCandidateRemark_result();
      receiveBase(result, "deleteCandidateRemark");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO getCandidateCompany(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      send_getCandidateCompany(query);
      return recv_getCandidateCompany();
    }

    public void send_getCandidateCompany(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      getCandidateCompany_args args = new getCandidateCompany_args();
      args.setQuery(query);
      sendBase("getCandidateCompany", args);
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO recv_getCandidateCompany() throws org.apache.thrift.TException
    {
      getCandidateCompany_result result = new getCandidateCompany_result();
      receiveBase(result, "getCandidateCompany");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCandidateCompany failed: unknown result");
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO> listCandidateCompanys(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      send_listCandidateCompanys(query);
      return recv_listCandidateCompanys();
    }

    public void send_listCandidateCompanys(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      listCandidateCompanys_args args = new listCandidateCompanys_args();
      args.setQuery(query);
      sendBase("listCandidateCompanys", args);
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO> recv_listCandidateCompanys() throws org.apache.thrift.TException
    {
      listCandidateCompanys_result result = new listCandidateCompanys_result();
      receiveBase(result, "listCandidateCompanys");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listCandidateCompanys failed: unknown result");
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO saveCandidateCompanys(com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO candidateCompany) throws org.apache.thrift.TException
    {
      send_saveCandidateCompanys(candidateCompany);
      return recv_saveCandidateCompanys();
    }

    public void send_saveCandidateCompanys(com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO candidateCompany) throws org.apache.thrift.TException
    {
      saveCandidateCompanys_args args = new saveCandidateCompanys_args();
      args.setCandidateCompany(candidateCompany);
      sendBase("saveCandidateCompanys", args);
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO recv_saveCandidateCompanys() throws org.apache.thrift.TException
    {
      saveCandidateCompanys_result result = new saveCandidateCompanys_result();
      receiveBase(result, "saveCandidateCompanys");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveCandidateCompanys failed: unknown result");
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO updateCandidateCompanys(com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO candidateCompany) throws org.apache.thrift.TException
    {
      send_updateCandidateCompanys(candidateCompany);
      return recv_updateCandidateCompanys();
    }

    public void send_updateCandidateCompanys(com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO candidateCompany) throws org.apache.thrift.TException
    {
      updateCandidateCompanys_args args = new updateCandidateCompanys_args();
      args.setCandidateCompany(candidateCompany);
      sendBase("updateCandidateCompanys", args);
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO recv_updateCandidateCompanys() throws org.apache.thrift.TException
    {
      updateCandidateCompanys_result result = new updateCandidateCompanys_result();
      receiveBase(result, "updateCandidateCompanys");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateCandidateCompanys failed: unknown result");
    }

    public void deleteCandidateCompany(int id) throws org.apache.thrift.TException
    {
      send_deleteCandidateCompany(id);
      recv_deleteCandidateCompany();
    }

    public void send_deleteCandidateCompany(int id) throws org.apache.thrift.TException
    {
      deleteCandidateCompany_args args = new deleteCandidateCompany_args();
      args.setId(id);
      sendBase("deleteCandidateCompany", args);
    }

    public void recv_deleteCandidateCompany() throws org.apache.thrift.TException
    {
      deleteCandidateCompany_result result = new deleteCandidateCompany_result();
      receiveBase(result, "deleteCandidateCompany");
      return;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidatePositionDO getCandidatePosition(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      send_getCandidatePosition(query);
      return recv_getCandidatePosition();
    }

    public void send_getCandidatePosition(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      getCandidatePosition_args args = new getCandidatePosition_args();
      args.setQuery(query);
      sendBase("getCandidatePosition", args);
    }

    public com.moseeker.thrift.gen.dao.struct.CandidatePositionDO recv_getCandidatePosition() throws org.apache.thrift.TException
    {
      getCandidatePosition_result result = new getCandidatePosition_result();
      receiveBase(result, "getCandidatePosition");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCandidatePosition failed: unknown result");
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> listCandidatePositions(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      send_listCandidatePositions(query);
      return recv_listCandidatePositions();
    }

    public void send_listCandidatePositions(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      listCandidatePositions_args args = new listCandidatePositions_args();
      args.setQuery(query);
      sendBase("listCandidatePositions", args);
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> recv_listCandidatePositions() throws org.apache.thrift.TException
    {
      listCandidatePositions_result result = new listCandidatePositions_result();
      receiveBase(result, "listCandidatePositions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listCandidatePositions failed: unknown result");
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> listCandidatePositionsByPositionIDUserID(java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>> companyPositionIds) throws org.apache.thrift.TException
    {
      send_listCandidatePositionsByPositionIDUserID(companyPositionIds);
      return recv_listCandidatePositionsByPositionIDUserID();
    }

    public void send_listCandidatePositionsByPositionIDUserID(java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>> companyPositionIds) throws org.apache.thrift.TException
    {
      listCandidatePositionsByPositionIDUserID_args args = new listCandidatePositionsByPositionIDUserID_args();
      args.setCompanyPositionIds(companyPositionIds);
      sendBase("listCandidatePositionsByPositionIDUserID", args);
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> recv_listCandidatePositionsByPositionIDUserID() throws org.apache.thrift.TException
    {
      listCandidatePositionsByPositionIDUserID_result result = new listCandidatePositionsByPositionIDUserID_result();
      receiveBase(result, "listCandidatePositionsByPositionIDUserID");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listCandidatePositionsByPositionIDUserID failed: unknown result");
    }

    public com.moseeker.thrift.gen.dao.struct.CandidatePositionDO updateCandidatePosition(com.moseeker.thrift.gen.dao.struct.CandidatePositionDO candidatePosition) throws org.apache.thrift.TException
    {
      send_updateCandidatePosition(candidatePosition);
      return recv_updateCandidatePosition();
    }

    public void send_updateCandidatePosition(com.moseeker.thrift.gen.dao.struct.CandidatePositionDO candidatePosition) throws org.apache.thrift.TException
    {
      updateCandidatePosition_args args = new updateCandidatePosition_args();
      args.setCandidatePosition(candidatePosition);
      sendBase("updateCandidatePosition", args);
    }

    public com.moseeker.thrift.gen.dao.struct.CandidatePositionDO recv_updateCandidatePosition() throws org.apache.thrift.TException
    {
      updateCandidatePosition_result result = new updateCandidatePosition_result();
      receiveBase(result, "updateCandidatePosition");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateCandidatePosition failed: unknown result");
    }

    public com.moseeker.thrift.gen.dao.struct.CandidatePositionDO saveCandidatePosition(com.moseeker.thrift.gen.dao.struct.CandidatePositionDO candidatePosition) throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException
    {
      send_saveCandidatePosition(candidatePosition);
      return recv_saveCandidatePosition();
    }

    public void send_saveCandidatePosition(com.moseeker.thrift.gen.dao.struct.CandidatePositionDO candidatePosition) throws org.apache.thrift.TException
    {
      saveCandidatePosition_args args = new saveCandidatePosition_args();
      args.setCandidatePosition(candidatePosition);
      sendBase("saveCandidatePosition", args);
    }

    public com.moseeker.thrift.gen.dao.struct.CandidatePositionDO recv_saveCandidatePosition() throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException
    {
      saveCandidatePosition_result result = new saveCandidatePosition_result();
      receiveBase(result, "saveCandidatePosition");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveCandidatePosition failed: unknown result");
    }

    public void deleteCandidatePositions(int userId, int positionId) throws org.apache.thrift.TException
    {
      send_deleteCandidatePositions(userId, positionId);
      recv_deleteCandidatePositions();
    }

    public void send_deleteCandidatePositions(int userId, int positionId) throws org.apache.thrift.TException
    {
      deleteCandidatePositions_args args = new deleteCandidatePositions_args();
      args.setUserId(userId);
      args.setPositionId(positionId);
      sendBase("deleteCandidatePositions", args);
    }

    public void recv_deleteCandidatePositions() throws org.apache.thrift.TException
    {
      deleteCandidatePositions_result result = new deleteCandidatePositions_result();
      receiveBase(result, "deleteCandidatePositions");
      return;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO getCandidatePositionShareRecord(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      send_getCandidatePositionShareRecord(query);
      return recv_getCandidatePositionShareRecord();
    }

    public void send_getCandidatePositionShareRecord(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      getCandidatePositionShareRecord_args args = new getCandidatePositionShareRecord_args();
      args.setQuery(query);
      sendBase("getCandidatePositionShareRecord", args);
    }

    public com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO recv_getCandidatePositionShareRecord() throws org.apache.thrift.TException
    {
      getCandidatePositionShareRecord_result result = new getCandidatePositionShareRecord_result();
      receiveBase(result, "getCandidatePositionShareRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCandidatePositionShareRecord failed: unknown result");
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO> listCandidatePositionShareRecord(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      send_listCandidatePositionShareRecord(query);
      return recv_listCandidatePositionShareRecord();
    }

    public void send_listCandidatePositionShareRecord(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      listCandidatePositionShareRecord_args args = new listCandidatePositionShareRecord_args();
      args.setQuery(query);
      sendBase("listCandidatePositionShareRecord", args);
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO> recv_listCandidatePositionShareRecord() throws org.apache.thrift.TException
    {
      listCandidatePositionShareRecord_result result = new listCandidatePositionShareRecord_result();
      receiveBase(result, "listCandidatePositionShareRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listCandidatePositionShareRecord failed: unknown result");
    }

    public com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO updateCandidatePositionShareRecord(com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO candidatePositionShareRecord) throws org.apache.thrift.TException
    {
      send_updateCandidatePositionShareRecord(candidatePositionShareRecord);
      return recv_updateCandidatePositionShareRecord();
    }

    public void send_updateCandidatePositionShareRecord(com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO candidatePositionShareRecord) throws org.apache.thrift.TException
    {
      updateCandidatePositionShareRecord_args args = new updateCandidatePositionShareRecord_args();
      args.setCandidatePositionShareRecord(candidatePositionShareRecord);
      sendBase("updateCandidatePositionShareRecord", args);
    }

    public com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO recv_updateCandidatePositionShareRecord() throws org.apache.thrift.TException
    {
      updateCandidatePositionShareRecord_result result = new updateCandidatePositionShareRecord_result();
      receiveBase(result, "updateCandidatePositionShareRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateCandidatePositionShareRecord failed: unknown result");
    }

    public void deleteCandidatePositionShareRecord(int id) throws org.apache.thrift.TException
    {
      send_deleteCandidatePositionShareRecord(id);
      recv_deleteCandidatePositionShareRecord();
    }

    public void send_deleteCandidatePositionShareRecord(int id) throws org.apache.thrift.TException
    {
      deleteCandidatePositionShareRecord_args args = new deleteCandidatePositionShareRecord_args();
      args.setId(id);
      sendBase("deleteCandidatePositionShareRecord", args);
    }

    public void recv_deleteCandidatePositionShareRecord() throws org.apache.thrift.TException
    {
      deleteCandidatePositionShareRecord_result result = new deleteCandidatePositionShareRecord_result();
      receiveBase(result, "deleteCandidatePositionShareRecord");
      return;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO getCandidateRecomRecord(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      send_getCandidateRecomRecord(query);
      return recv_getCandidateRecomRecord();
    }

    public void send_getCandidateRecomRecord(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      getCandidateRecomRecord_args args = new getCandidateRecomRecord_args();
      args.setQuery(query);
      sendBase("getCandidateRecomRecord", args);
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO recv_getCandidateRecomRecord() throws org.apache.thrift.TException
    {
      getCandidateRecomRecord_result result = new getCandidateRecomRecord_result();
      receiveBase(result, "getCandidateRecomRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCandidateRecomRecord failed: unknown result");
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> listCandidateRecomRecord(int postUserId, java.lang.String clickTime, java.util.List<java.lang.Integer> recoms) throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException
    {
      send_listCandidateRecomRecord(postUserId, clickTime, recoms);
      return recv_listCandidateRecomRecord();
    }

    public void send_listCandidateRecomRecord(int postUserId, java.lang.String clickTime, java.util.List<java.lang.Integer> recoms) throws org.apache.thrift.TException
    {
      listCandidateRecomRecord_args args = new listCandidateRecomRecord_args();
      args.setPostUserId(postUserId);
      args.setClickTime(clickTime);
      args.setRecoms(recoms);
      sendBase("listCandidateRecomRecord", args);
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> recv_listCandidateRecomRecord() throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException
    {
      listCandidateRecomRecord_result result = new listCandidateRecomRecord_result();
      receiveBase(result, "listCandidateRecomRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listCandidateRecomRecord failed: unknown result");
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> listCandidateRecomRecordExceptId(int id, int postUserId, java.lang.String clickTime, java.util.List<java.lang.Integer> recoms) throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException
    {
      send_listCandidateRecomRecordExceptId(id, postUserId, clickTime, recoms);
      return recv_listCandidateRecomRecordExceptId();
    }

    public void send_listCandidateRecomRecordExceptId(int id, int postUserId, java.lang.String clickTime, java.util.List<java.lang.Integer> recoms) throws org.apache.thrift.TException
    {
      listCandidateRecomRecordExceptId_args args = new listCandidateRecomRecordExceptId_args();
      args.setId(id);
      args.setPostUserId(postUserId);
      args.setClickTime(clickTime);
      args.setRecoms(recoms);
      sendBase("listCandidateRecomRecordExceptId", args);
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> recv_listCandidateRecomRecordExceptId() throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException
    {
      listCandidateRecomRecordExceptId_result result = new listCandidateRecomRecordExceptId_result();
      receiveBase(result, "listCandidateRecomRecordExceptId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listCandidateRecomRecordExceptId failed: unknown result");
    }

    public int countCandidateRecomRecordCustom(int postUserId, java.lang.String clickTime, java.util.List<java.lang.Integer> recoms) throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException
    {
      send_countCandidateRecomRecordCustom(postUserId, clickTime, recoms);
      return recv_countCandidateRecomRecordCustom();
    }

    public void send_countCandidateRecomRecordCustom(int postUserId, java.lang.String clickTime, java.util.List<java.lang.Integer> recoms) throws org.apache.thrift.TException
    {
      countCandidateRecomRecordCustom_args args = new countCandidateRecomRecordCustom_args();
      args.setPostUserId(postUserId);
      args.setClickTime(clickTime);
      args.setRecoms(recoms);
      sendBase("countCandidateRecomRecordCustom", args);
    }

    public int recv_countCandidateRecomRecordCustom() throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException
    {
      countCandidateRecomRecordCustom_result result = new countCandidateRecomRecordCustom_result();
      receiveBase(result, "countCandidateRecomRecordCustom");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countCandidateRecomRecordCustom failed: unknown result");
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> listCandidateRecomRecords(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      send_listCandidateRecomRecords(query);
      return recv_listCandidateRecomRecords();
    }

    public void send_listCandidateRecomRecords(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      listCandidateRecomRecords_args args = new listCandidateRecomRecords_args();
      args.setQuery(query);
      sendBase("listCandidateRecomRecords", args);
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> recv_listCandidateRecomRecords() throws org.apache.thrift.TException
    {
      listCandidateRecomRecords_result result = new listCandidateRecomRecords_result();
      receiveBase(result, "listCandidateRecomRecords");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listCandidateRecomRecords failed: unknown result");
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> listCandidateRecomRecordsForApplied(int userId, int pageNo, int pageSize) throws org.apache.thrift.TException
    {
      send_listCandidateRecomRecordsForApplied(userId, pageNo, pageSize);
      return recv_listCandidateRecomRecordsForApplied();
    }

    public void send_listCandidateRecomRecordsForApplied(int userId, int pageNo, int pageSize) throws org.apache.thrift.TException
    {
      listCandidateRecomRecordsForApplied_args args = new listCandidateRecomRecordsForApplied_args();
      args.setUserId(userId);
      args.setPageNo(pageNo);
      args.setPageSize(pageSize);
      sendBase("listCandidateRecomRecordsForApplied", args);
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> recv_listCandidateRecomRecordsForApplied() throws org.apache.thrift.TException
    {
      listCandidateRecomRecordsForApplied_result result = new listCandidateRecomRecordsForApplied_result();
      receiveBase(result, "listCandidateRecomRecordsForApplied");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listCandidateRecomRecordsForApplied failed: unknown result");
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> listInterestedCandidateRecomRecord(int userId, int pageNo, int pageSize) throws org.apache.thrift.TException
    {
      send_listInterestedCandidateRecomRecord(userId, pageNo, pageSize);
      return recv_listInterestedCandidateRecomRecord();
    }

    public void send_listInterestedCandidateRecomRecord(int userId, int pageNo, int pageSize) throws org.apache.thrift.TException
    {
      listInterestedCandidateRecomRecord_args args = new listInterestedCandidateRecomRecord_args();
      args.setUserId(userId);
      args.setPageNo(pageNo);
      args.setPageSize(pageSize);
      sendBase("listInterestedCandidateRecomRecord", args);
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> recv_listInterestedCandidateRecomRecord() throws org.apache.thrift.TException
    {
      listInterestedCandidateRecomRecord_result result = new listInterestedCandidateRecomRecord_result();
      receiveBase(result, "listInterestedCandidateRecomRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listInterestedCandidateRecomRecord failed: unknown result");
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> listCandidateRecomRecordsByPositionSetAndPresenteeId(java.util.Set<java.lang.Integer> positionIdSet, int presenteeId, int pageNo, int pageSize) throws org.apache.thrift.TException
    {
      send_listCandidateRecomRecordsByPositionSetAndPresenteeId(positionIdSet, presenteeId, pageNo, pageSize);
      return recv_listCandidateRecomRecordsByPositionSetAndPresenteeId();
    }

    public void send_listCandidateRecomRecordsByPositionSetAndPresenteeId(java.util.Set<java.lang.Integer> positionIdSet, int presenteeId, int pageNo, int pageSize) throws org.apache.thrift.TException
    {
      listCandidateRecomRecordsByPositionSetAndPresenteeId_args args = new listCandidateRecomRecordsByPositionSetAndPresenteeId_args();
      args.setPositionIdSet(positionIdSet);
      args.setPresenteeId(presenteeId);
      args.setPageNo(pageNo);
      args.setPageSize(pageSize);
      sendBase("listCandidateRecomRecordsByPositionSetAndPresenteeId", args);
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> recv_listCandidateRecomRecordsByPositionSetAndPresenteeId() throws org.apache.thrift.TException
    {
      listCandidateRecomRecordsByPositionSetAndPresenteeId_result result = new listCandidateRecomRecordsByPositionSetAndPresenteeId_result();
      receiveBase(result, "listCandidateRecomRecordsByPositionSetAndPresenteeId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listCandidateRecomRecordsByPositionSetAndPresenteeId failed: unknown result");
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO> listCandidateRecomRecordSorting(java.util.List<java.lang.Integer> postUserId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_listCandidateRecomRecordSorting(postUserId);
      return recv_listCandidateRecomRecordSorting();
    }

    public void send_listCandidateRecomRecordSorting(java.util.List<java.lang.Integer> postUserId) throws org.apache.thrift.TException
    {
      listCandidateRecomRecordSorting_args args = new listCandidateRecomRecordSorting_args();
      args.setPostUserId(postUserId);
      sendBase("listCandidateRecomRecordSorting", args);
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO> recv_listCandidateRecomRecordSorting() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      listCandidateRecomRecordSorting_result result = new listCandidateRecomRecordSorting_result();
      receiveBase(result, "listCandidateRecomRecordSorting");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listCandidateRecomRecordSorting failed: unknown result");
    }

    public int countCandidateRecomRecord(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      send_countCandidateRecomRecord(query);
      return recv_countCandidateRecomRecord();
    }

    public void send_countCandidateRecomRecord(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      countCandidateRecomRecord_args args = new countCandidateRecomRecord_args();
      args.setQuery(query);
      sendBase("countCandidateRecomRecord", args);
    }

    public int recv_countCandidateRecomRecord() throws org.apache.thrift.TException
    {
      countCandidateRecomRecord_result result = new countCandidateRecomRecord_result();
      receiveBase(result, "countCandidateRecomRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countCandidateRecomRecord failed: unknown result");
    }

    public int countCandidateRecomRecordDistinctPresentee(int postUserId) throws org.apache.thrift.TException
    {
      send_countCandidateRecomRecordDistinctPresentee(postUserId);
      return recv_countCandidateRecomRecordDistinctPresentee();
    }

    public void send_countCandidateRecomRecordDistinctPresentee(int postUserId) throws org.apache.thrift.TException
    {
      countCandidateRecomRecordDistinctPresentee_args args = new countCandidateRecomRecordDistinctPresentee_args();
      args.setPostUserId(postUserId);
      sendBase("countCandidateRecomRecordDistinctPresentee", args);
    }

    public int recv_countCandidateRecomRecordDistinctPresentee() throws org.apache.thrift.TException
    {
      countCandidateRecomRecordDistinctPresentee_result result = new countCandidateRecomRecordDistinctPresentee_result();
      receiveBase(result, "countCandidateRecomRecordDistinctPresentee");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countCandidateRecomRecordDistinctPresentee failed: unknown result");
    }

    public int countAppliedCandidateRecomRecord(int userId) throws org.apache.thrift.TException
    {
      send_countAppliedCandidateRecomRecord(userId);
      return recv_countAppliedCandidateRecomRecord();
    }

    public void send_countAppliedCandidateRecomRecord(int userId) throws org.apache.thrift.TException
    {
      countAppliedCandidateRecomRecord_args args = new countAppliedCandidateRecomRecord_args();
      args.setUserId(userId);
      sendBase("countAppliedCandidateRecomRecord", args);
    }

    public int recv_countAppliedCandidateRecomRecord() throws org.apache.thrift.TException
    {
      countAppliedCandidateRecomRecord_result result = new countAppliedCandidateRecomRecord_result();
      receiveBase(result, "countAppliedCandidateRecomRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countAppliedCandidateRecomRecord failed: unknown result");
    }

    public int countInterestedCandidateRecomRecord(int userId) throws org.apache.thrift.TException
    {
      send_countInterestedCandidateRecomRecord(userId);
      return recv_countInterestedCandidateRecomRecord();
    }

    public void send_countInterestedCandidateRecomRecord(int userId) throws org.apache.thrift.TException
    {
      countInterestedCandidateRecomRecord_args args = new countInterestedCandidateRecomRecord_args();
      args.setUserId(userId);
      sendBase("countInterestedCandidateRecomRecord", args);
    }

    public int recv_countInterestedCandidateRecomRecord() throws org.apache.thrift.TException
    {
      countInterestedCandidateRecomRecord_result result = new countInterestedCandidateRecomRecord_result();
      receiveBase(result, "countInterestedCandidateRecomRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countInterestedCandidateRecomRecord failed: unknown result");
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO updateCandidateRecomRecords(com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO candidateRecomRecord) throws org.apache.thrift.TException
    {
      send_updateCandidateRecomRecords(candidateRecomRecord);
      return recv_updateCandidateRecomRecords();
    }

    public void send_updateCandidateRecomRecords(com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO candidateRecomRecord) throws org.apache.thrift.TException
    {
      updateCandidateRecomRecords_args args = new updateCandidateRecomRecords_args();
      args.setCandidateRecomRecord(candidateRecomRecord);
      sendBase("updateCandidateRecomRecords", args);
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO recv_updateCandidateRecomRecords() throws org.apache.thrift.TException
    {
      updateCandidateRecomRecords_result result = new updateCandidateRecomRecords_result();
      receiveBase(result, "updateCandidateRecomRecords");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateCandidateRecomRecords failed: unknown result");
    }

    public void deleteCandidateRecomRecords(int id) throws org.apache.thrift.TException
    {
      send_deleteCandidateRecomRecords(id);
      recv_deleteCandidateRecomRecords();
    }

    public void send_deleteCandidateRecomRecords(int id) throws org.apache.thrift.TException
    {
      deleteCandidateRecomRecords_args args = new deleteCandidateRecomRecords_args();
      args.setId(id);
      sendBase("deleteCandidateRecomRecords", args);
    }

    public void recv_deleteCandidateRecomRecords() throws org.apache.thrift.TException
    {
      deleteCandidateRecomRecords_result result = new deleteCandidateRecomRecords_result();
      receiveBase(result, "deleteCandidateRecomRecords");
      return;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO getCandidateShareChain(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      send_getCandidateShareChain(query);
      return recv_getCandidateShareChain();
    }

    public void send_getCandidateShareChain(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      getCandidateShareChain_args args = new getCandidateShareChain_args();
      args.setQuery(query);
      sendBase("getCandidateShareChain", args);
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO recv_getCandidateShareChain() throws org.apache.thrift.TException
    {
      getCandidateShareChain_result result = new getCandidateShareChain_result();
      receiveBase(result, "getCandidateShareChain");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCandidateShareChain failed: unknown result");
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO> listCandidateShareChain(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      send_listCandidateShareChain(query);
      return recv_listCandidateShareChain();
    }

    public void send_listCandidateShareChain(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      listCandidateShareChain_args args = new listCandidateShareChain_args();
      args.setQuery(query);
      sendBase("listCandidateShareChain", args);
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO> recv_listCandidateShareChain() throws org.apache.thrift.TException
    {
      listCandidateShareChain_result result = new listCandidateShareChain_result();
      receiveBase(result, "listCandidateShareChain");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listCandidateShareChain failed: unknown result");
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO updateCandidateShareChain(com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO candidateShareChain) throws org.apache.thrift.TException
    {
      send_updateCandidateShareChain(candidateShareChain);
      return recv_updateCandidateShareChain();
    }

    public void send_updateCandidateShareChain(com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO candidateShareChain) throws org.apache.thrift.TException
    {
      updateCandidateShareChain_args args = new updateCandidateShareChain_args();
      args.setCandidateShareChain(candidateShareChain);
      sendBase("updateCandidateShareChain", args);
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO recv_updateCandidateShareChain() throws org.apache.thrift.TException
    {
      updateCandidateShareChain_result result = new updateCandidateShareChain_result();
      receiveBase(result, "updateCandidateShareChain");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateCandidateShareChain failed: unknown result");
    }

    public void deleteCandidateShareChain(int id) throws org.apache.thrift.TException
    {
      send_deleteCandidateShareChain(id);
      recv_deleteCandidateShareChain();
    }

    public void send_deleteCandidateShareChain(int id) throws org.apache.thrift.TException
    {
      deleteCandidateShareChain_args args = new deleteCandidateShareChain_args();
      args.setId(id);
      sendBase("deleteCandidateShareChain", args);
    }

    public void recv_deleteCandidateShareChain() throws org.apache.thrift.TException
    {
      deleteCandidateShareChain_result result = new deleteCandidateShareChain_result();
      receiveBase(result, "deleteCandidateShareChain");
      return;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO getCandidateSuggestPosition(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      send_getCandidateSuggestPosition(query);
      return recv_getCandidateSuggestPosition();
    }

    public void send_getCandidateSuggestPosition(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      getCandidateSuggestPosition_args args = new getCandidateSuggestPosition_args();
      args.setQuery(query);
      sendBase("getCandidateSuggestPosition", args);
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO recv_getCandidateSuggestPosition() throws org.apache.thrift.TException
    {
      getCandidateSuggestPosition_result result = new getCandidateSuggestPosition_result();
      receiveBase(result, "getCandidateSuggestPosition");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCandidateSuggestPosition failed: unknown result");
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO> listCandidateSuggestPosition(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      send_listCandidateSuggestPosition(query);
      return recv_listCandidateSuggestPosition();
    }

    public void send_listCandidateSuggestPosition(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      listCandidateSuggestPosition_args args = new listCandidateSuggestPosition_args();
      args.setQuery(query);
      sendBase("listCandidateSuggestPosition", args);
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO> recv_listCandidateSuggestPosition() throws org.apache.thrift.TException
    {
      listCandidateSuggestPosition_result result = new listCandidateSuggestPosition_result();
      receiveBase(result, "listCandidateSuggestPosition");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listCandidateSuggestPosition failed: unknown result");
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO updateCandidateSuggestPosition(com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO candidateSuggestPosition) throws org.apache.thrift.TException
    {
      send_updateCandidateSuggestPosition(candidateSuggestPosition);
      return recv_updateCandidateSuggestPosition();
    }

    public void send_updateCandidateSuggestPosition(com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO candidateSuggestPosition) throws org.apache.thrift.TException
    {
      updateCandidateSuggestPosition_args args = new updateCandidateSuggestPosition_args();
      args.setCandidateSuggestPosition(candidateSuggestPosition);
      sendBase("updateCandidateSuggestPosition", args);
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO recv_updateCandidateSuggestPosition() throws org.apache.thrift.TException
    {
      updateCandidateSuggestPosition_result result = new updateCandidateSuggestPosition_result();
      receiveBase(result, "updateCandidateSuggestPosition");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateCandidateSuggestPosition failed: unknown result");
    }

    public void deleteCandidateSuggestPosition(int id) throws org.apache.thrift.TException
    {
      send_deleteCandidateSuggestPosition(id);
      recv_deleteCandidateSuggestPosition();
    }

    public void send_deleteCandidateSuggestPosition(int id) throws org.apache.thrift.TException
    {
      deleteCandidateSuggestPosition_args args = new deleteCandidateSuggestPosition_args();
      args.setId(id);
      sendBase("deleteCandidateSuggestPosition", args);
    }

    public void recv_deleteCandidateSuggestPosition() throws org.apache.thrift.TException
    {
      deleteCandidateSuggestPosition_result result = new deleteCandidateSuggestPosition_result();
      receiveBase(result, "deleteCandidateSuggestPosition");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getCandidateRemark(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCandidateRemark_call method_call = new getCandidateRemark_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCandidateRemark_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> {
      private com.moseeker.thrift.gen.common.struct.CommonQuery query;
      public getCandidateRemark_call(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCandidateRemark", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCandidateRemark_args args = new getCandidateRemark_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCandidateRemark();
      }
    }

    public void listCandidateRemarks(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listCandidateRemarks_call method_call = new listCandidateRemarks_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listCandidateRemarks_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>> {
      private com.moseeker.thrift.gen.common.struct.CommonQuery query;
      public listCandidateRemarks_call(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listCandidateRemarks", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listCandidateRemarks_args args = new listCandidateRemarks_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> getResult() throws com.moseeker.thrift.gen.dao.struct.CURDException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listCandidateRemarks();
      }
    }

    public void saveCandidateRemark(com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO candidateRemark, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveCandidateRemark_call method_call = new saveCandidateRemark_call(candidateRemark, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveCandidateRemark_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> {
      private com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO candidateRemark;
      public saveCandidateRemark_call(com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO candidateRemark, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.candidateRemark = candidateRemark;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveCandidateRemark", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveCandidateRemark_args args = new saveCandidateRemark_args();
        args.setCandidateRemark(candidateRemark);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO getResult() throws com.moseeker.thrift.gen.dao.struct.CURDException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveCandidateRemark();
      }
    }

    public void updateCandidateRemark(com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO candidateRemark, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateCandidateRemark_call method_call = new updateCandidateRemark_call(candidateRemark, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateCandidateRemark_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> {
      private com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO candidateRemark;
      public updateCandidateRemark_call(com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO candidateRemark, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.candidateRemark = candidateRemark;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateCandidateRemark", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateCandidateRemark_args args = new updateCandidateRemark_args();
        args.setCandidateRemark(candidateRemark);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO getResult() throws com.moseeker.thrift.gen.dao.struct.CURDException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateCandidateRemark();
      }
    }

    public void updateCandidateRemarks(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> candidateRemarks, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateCandidateRemarks_call method_call = new updateCandidateRemarks_call(candidateRemarks, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateCandidateRemarks_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>> {
      private java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> candidateRemarks;
      public updateCandidateRemarks_call(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> candidateRemarks, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.candidateRemarks = candidateRemarks;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateCandidateRemarks", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateCandidateRemarks_args args = new updateCandidateRemarks_args();
        args.setCandidateRemarks(candidateRemarks);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> getResult() throws com.moseeker.thrift.gen.dao.struct.CURDException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateCandidateRemarks();
      }
    }

    public void deleteCandidateRemark(int id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteCandidateRemark_call method_call = new deleteCandidateRemark_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteCandidateRemark_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int id;
      public deleteCandidateRemark_call(int id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteCandidateRemark", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteCandidateRemark_args args = new deleteCandidateRemark_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws com.moseeker.thrift.gen.dao.struct.CURDException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void getCandidateCompany(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCandidateCompany_call method_call = new getCandidateCompany_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCandidateCompany_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO> {
      private com.moseeker.thrift.gen.common.struct.CommonQuery query;
      public getCandidateCompany_call(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCandidateCompany", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCandidateCompany_args args = new getCandidateCompany_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCandidateCompany();
      }
    }

    public void listCandidateCompanys(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listCandidateCompanys_call method_call = new listCandidateCompanys_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listCandidateCompanys_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO>> {
      private com.moseeker.thrift.gen.common.struct.CommonQuery query;
      public listCandidateCompanys_call(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listCandidateCompanys", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listCandidateCompanys_args args = new listCandidateCompanys_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listCandidateCompanys();
      }
    }

    public void saveCandidateCompanys(com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO candidateCompany, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveCandidateCompanys_call method_call = new saveCandidateCompanys_call(candidateCompany, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveCandidateCompanys_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO> {
      private com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO candidateCompany;
      public saveCandidateCompanys_call(com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO candidateCompany, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.candidateCompany = candidateCompany;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveCandidateCompanys", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveCandidateCompanys_args args = new saveCandidateCompanys_args();
        args.setCandidateCompany(candidateCompany);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveCandidateCompanys();
      }
    }

    public void updateCandidateCompanys(com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO candidateCompany, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateCandidateCompanys_call method_call = new updateCandidateCompanys_call(candidateCompany, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateCandidateCompanys_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO> {
      private com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO candidateCompany;
      public updateCandidateCompanys_call(com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO candidateCompany, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.candidateCompany = candidateCompany;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateCandidateCompanys", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateCandidateCompanys_args args = new updateCandidateCompanys_args();
        args.setCandidateCompany(candidateCompany);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateCandidateCompanys();
      }
    }

    public void deleteCandidateCompany(int id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteCandidateCompany_call method_call = new deleteCandidateCompany_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteCandidateCompany_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int id;
      public deleteCandidateCompany_call(int id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteCandidateCompany", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteCandidateCompany_args args = new deleteCandidateCompany_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void getCandidatePosition(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCandidatePosition_call method_call = new getCandidatePosition_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCandidatePosition_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> {
      private com.moseeker.thrift.gen.common.struct.CommonQuery query;
      public getCandidatePosition_call(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCandidatePosition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCandidatePosition_args args = new getCandidatePosition_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.dao.struct.CandidatePositionDO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCandidatePosition();
      }
    }

    public void listCandidatePositions(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listCandidatePositions_call method_call = new listCandidatePositions_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listCandidatePositions_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO>> {
      private com.moseeker.thrift.gen.common.struct.CommonQuery query;
      public listCandidatePositions_call(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listCandidatePositions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listCandidatePositions_args args = new listCandidatePositions_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listCandidatePositions();
      }
    }

    public void listCandidatePositionsByPositionIDUserID(java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>> companyPositionIds, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listCandidatePositionsByPositionIDUserID_call method_call = new listCandidatePositionsByPositionIDUserID_call(companyPositionIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listCandidatePositionsByPositionIDUserID_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO>> {
      private java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>> companyPositionIds;
      public listCandidatePositionsByPositionIDUserID_call(java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>> companyPositionIds, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.companyPositionIds = companyPositionIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listCandidatePositionsByPositionIDUserID", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listCandidatePositionsByPositionIDUserID_args args = new listCandidatePositionsByPositionIDUserID_args();
        args.setCompanyPositionIds(companyPositionIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listCandidatePositionsByPositionIDUserID();
      }
    }

    public void updateCandidatePosition(com.moseeker.thrift.gen.dao.struct.CandidatePositionDO candidatePosition, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateCandidatePosition_call method_call = new updateCandidatePosition_call(candidatePosition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateCandidatePosition_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> {
      private com.moseeker.thrift.gen.dao.struct.CandidatePositionDO candidatePosition;
      public updateCandidatePosition_call(com.moseeker.thrift.gen.dao.struct.CandidatePositionDO candidatePosition, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.candidatePosition = candidatePosition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateCandidatePosition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateCandidatePosition_args args = new updateCandidatePosition_args();
        args.setCandidatePosition(candidatePosition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.dao.struct.CandidatePositionDO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateCandidatePosition();
      }
    }

    public void saveCandidatePosition(com.moseeker.thrift.gen.dao.struct.CandidatePositionDO candidatePosition, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveCandidatePosition_call method_call = new saveCandidatePosition_call(candidatePosition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveCandidatePosition_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> {
      private com.moseeker.thrift.gen.dao.struct.CandidatePositionDO candidatePosition;
      public saveCandidatePosition_call(com.moseeker.thrift.gen.dao.struct.CandidatePositionDO candidatePosition, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.candidatePosition = candidatePosition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveCandidatePosition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveCandidatePosition_args args = new saveCandidatePosition_args();
        args.setCandidatePosition(candidatePosition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.dao.struct.CandidatePositionDO getResult() throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveCandidatePosition();
      }
    }

    public void deleteCandidatePositions(int userId, int positionId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteCandidatePositions_call method_call = new deleteCandidatePositions_call(userId, positionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteCandidatePositions_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int userId;
      private int positionId;
      public deleteCandidatePositions_call(int userId, int positionId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.positionId = positionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteCandidatePositions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteCandidatePositions_args args = new deleteCandidatePositions_args();
        args.setUserId(userId);
        args.setPositionId(positionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void getCandidatePositionShareRecord(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCandidatePositionShareRecord_call method_call = new getCandidatePositionShareRecord_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCandidatePositionShareRecord_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO> {
      private com.moseeker.thrift.gen.common.struct.CommonQuery query;
      public getCandidatePositionShareRecord_call(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCandidatePositionShareRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCandidatePositionShareRecord_args args = new getCandidatePositionShareRecord_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCandidatePositionShareRecord();
      }
    }

    public void listCandidatePositionShareRecord(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listCandidatePositionShareRecord_call method_call = new listCandidatePositionShareRecord_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listCandidatePositionShareRecord_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO>> {
      private com.moseeker.thrift.gen.common.struct.CommonQuery query;
      public listCandidatePositionShareRecord_call(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listCandidatePositionShareRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listCandidatePositionShareRecord_args args = new listCandidatePositionShareRecord_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listCandidatePositionShareRecord();
      }
    }

    public void updateCandidatePositionShareRecord(com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO candidatePositionShareRecord, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateCandidatePositionShareRecord_call method_call = new updateCandidatePositionShareRecord_call(candidatePositionShareRecord, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateCandidatePositionShareRecord_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO> {
      private com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO candidatePositionShareRecord;
      public updateCandidatePositionShareRecord_call(com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO candidatePositionShareRecord, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.candidatePositionShareRecord = candidatePositionShareRecord;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateCandidatePositionShareRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateCandidatePositionShareRecord_args args = new updateCandidatePositionShareRecord_args();
        args.setCandidatePositionShareRecord(candidatePositionShareRecord);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateCandidatePositionShareRecord();
      }
    }

    public void deleteCandidatePositionShareRecord(int id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteCandidatePositionShareRecord_call method_call = new deleteCandidatePositionShareRecord_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteCandidatePositionShareRecord_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int id;
      public deleteCandidatePositionShareRecord_call(int id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteCandidatePositionShareRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteCandidatePositionShareRecord_args args = new deleteCandidatePositionShareRecord_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void getCandidateRecomRecord(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCandidateRecomRecord_call method_call = new getCandidateRecomRecord_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCandidateRecomRecord_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> {
      private com.moseeker.thrift.gen.common.struct.CommonQuery query;
      public getCandidateRecomRecord_call(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCandidateRecomRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCandidateRecomRecord_args args = new getCandidateRecomRecord_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCandidateRecomRecord();
      }
    }

    public void listCandidateRecomRecord(int postUserId, java.lang.String clickTime, java.util.List<java.lang.Integer> recoms, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listCandidateRecomRecord_call method_call = new listCandidateRecomRecord_call(postUserId, clickTime, recoms, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listCandidateRecomRecord_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> {
      private int postUserId;
      private java.lang.String clickTime;
      private java.util.List<java.lang.Integer> recoms;
      public listCandidateRecomRecord_call(int postUserId, java.lang.String clickTime, java.util.List<java.lang.Integer> recoms, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.postUserId = postUserId;
        this.clickTime = clickTime;
        this.recoms = recoms;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listCandidateRecomRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listCandidateRecomRecord_args args = new listCandidateRecomRecord_args();
        args.setPostUserId(postUserId);
        args.setClickTime(clickTime);
        args.setRecoms(recoms);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> getResult() throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listCandidateRecomRecord();
      }
    }

    public void listCandidateRecomRecordExceptId(int id, int postUserId, java.lang.String clickTime, java.util.List<java.lang.Integer> recoms, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listCandidateRecomRecordExceptId_call method_call = new listCandidateRecomRecordExceptId_call(id, postUserId, clickTime, recoms, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listCandidateRecomRecordExceptId_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> {
      private int id;
      private int postUserId;
      private java.lang.String clickTime;
      private java.util.List<java.lang.Integer> recoms;
      public listCandidateRecomRecordExceptId_call(int id, int postUserId, java.lang.String clickTime, java.util.List<java.lang.Integer> recoms, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.postUserId = postUserId;
        this.clickTime = clickTime;
        this.recoms = recoms;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listCandidateRecomRecordExceptId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listCandidateRecomRecordExceptId_args args = new listCandidateRecomRecordExceptId_args();
        args.setId(id);
        args.setPostUserId(postUserId);
        args.setClickTime(clickTime);
        args.setRecoms(recoms);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> getResult() throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listCandidateRecomRecordExceptId();
      }
    }

    public void countCandidateRecomRecordCustom(int postUserId, java.lang.String clickTime, java.util.List<java.lang.Integer> recoms, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countCandidateRecomRecordCustom_call method_call = new countCandidateRecomRecordCustom_call(postUserId, clickTime, recoms, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countCandidateRecomRecordCustom_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private int postUserId;
      private java.lang.String clickTime;
      private java.util.List<java.lang.Integer> recoms;
      public countCandidateRecomRecordCustom_call(int postUserId, java.lang.String clickTime, java.util.List<java.lang.Integer> recoms, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.postUserId = postUserId;
        this.clickTime = clickTime;
        this.recoms = recoms;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countCandidateRecomRecordCustom", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countCandidateRecomRecordCustom_args args = new countCandidateRecomRecordCustom_args();
        args.setPostUserId(postUserId);
        args.setClickTime(clickTime);
        args.setRecoms(recoms);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws com.moseeker.thrift.gen.common.struct.CURDException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countCandidateRecomRecordCustom();
      }
    }

    public void listCandidateRecomRecords(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listCandidateRecomRecords_call method_call = new listCandidateRecomRecords_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listCandidateRecomRecords_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> {
      private com.moseeker.thrift.gen.common.struct.CommonQuery query;
      public listCandidateRecomRecords_call(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listCandidateRecomRecords", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listCandidateRecomRecords_args args = new listCandidateRecomRecords_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listCandidateRecomRecords();
      }
    }

    public void listCandidateRecomRecordsForApplied(int userId, int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listCandidateRecomRecordsForApplied_call method_call = new listCandidateRecomRecordsForApplied_call(userId, pageNo, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listCandidateRecomRecordsForApplied_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> {
      private int userId;
      private int pageNo;
      private int pageSize;
      public listCandidateRecomRecordsForApplied_call(int userId, int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.pageNo = pageNo;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listCandidateRecomRecordsForApplied", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listCandidateRecomRecordsForApplied_args args = new listCandidateRecomRecordsForApplied_args();
        args.setUserId(userId);
        args.setPageNo(pageNo);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listCandidateRecomRecordsForApplied();
      }
    }

    public void listInterestedCandidateRecomRecord(int userId, int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listInterestedCandidateRecomRecord_call method_call = new listInterestedCandidateRecomRecord_call(userId, pageNo, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listInterestedCandidateRecomRecord_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> {
      private int userId;
      private int pageNo;
      private int pageSize;
      public listInterestedCandidateRecomRecord_call(int userId, int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.pageNo = pageNo;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listInterestedCandidateRecomRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listInterestedCandidateRecomRecord_args args = new listInterestedCandidateRecomRecord_args();
        args.setUserId(userId);
        args.setPageNo(pageNo);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listInterestedCandidateRecomRecord();
      }
    }

    public void listCandidateRecomRecordsByPositionSetAndPresenteeId(java.util.Set<java.lang.Integer> positionIdSet, int presenteeId, int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listCandidateRecomRecordsByPositionSetAndPresenteeId_call method_call = new listCandidateRecomRecordsByPositionSetAndPresenteeId_call(positionIdSet, presenteeId, pageNo, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listCandidateRecomRecordsByPositionSetAndPresenteeId_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> {
      private java.util.Set<java.lang.Integer> positionIdSet;
      private int presenteeId;
      private int pageNo;
      private int pageSize;
      public listCandidateRecomRecordsByPositionSetAndPresenteeId_call(java.util.Set<java.lang.Integer> positionIdSet, int presenteeId, int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.positionIdSet = positionIdSet;
        this.presenteeId = presenteeId;
        this.pageNo = pageNo;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listCandidateRecomRecordsByPositionSetAndPresenteeId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listCandidateRecomRecordsByPositionSetAndPresenteeId_args args = new listCandidateRecomRecordsByPositionSetAndPresenteeId_args();
        args.setPositionIdSet(positionIdSet);
        args.setPresenteeId(presenteeId);
        args.setPageNo(pageNo);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listCandidateRecomRecordsByPositionSetAndPresenteeId();
      }
    }

    public void listCandidateRecomRecordSorting(java.util.List<java.lang.Integer> postUserId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listCandidateRecomRecordSorting_call method_call = new listCandidateRecomRecordSorting_call(postUserId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listCandidateRecomRecordSorting_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO>> {
      private java.util.List<java.lang.Integer> postUserId;
      public listCandidateRecomRecordSorting_call(java.util.List<java.lang.Integer> postUserId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.postUserId = postUserId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listCandidateRecomRecordSorting", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listCandidateRecomRecordSorting_args args = new listCandidateRecomRecordSorting_args();
        args.setPostUserId(postUserId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO> getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listCandidateRecomRecordSorting();
      }
    }

    public void countCandidateRecomRecord(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countCandidateRecomRecord_call method_call = new countCandidateRecomRecord_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countCandidateRecomRecord_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private com.moseeker.thrift.gen.common.struct.CommonQuery query;
      public countCandidateRecomRecord_call(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countCandidateRecomRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countCandidateRecomRecord_args args = new countCandidateRecomRecord_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countCandidateRecomRecord();
      }
    }

    public void countCandidateRecomRecordDistinctPresentee(int postUserId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countCandidateRecomRecordDistinctPresentee_call method_call = new countCandidateRecomRecordDistinctPresentee_call(postUserId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countCandidateRecomRecordDistinctPresentee_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private int postUserId;
      public countCandidateRecomRecordDistinctPresentee_call(int postUserId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.postUserId = postUserId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countCandidateRecomRecordDistinctPresentee", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countCandidateRecomRecordDistinctPresentee_args args = new countCandidateRecomRecordDistinctPresentee_args();
        args.setPostUserId(postUserId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countCandidateRecomRecordDistinctPresentee();
      }
    }

    public void countAppliedCandidateRecomRecord(int userId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countAppliedCandidateRecomRecord_call method_call = new countAppliedCandidateRecomRecord_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countAppliedCandidateRecomRecord_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private int userId;
      public countAppliedCandidateRecomRecord_call(int userId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countAppliedCandidateRecomRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countAppliedCandidateRecomRecord_args args = new countAppliedCandidateRecomRecord_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countAppliedCandidateRecomRecord();
      }
    }

    public void countInterestedCandidateRecomRecord(int userId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countInterestedCandidateRecomRecord_call method_call = new countInterestedCandidateRecomRecord_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countInterestedCandidateRecomRecord_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private int userId;
      public countInterestedCandidateRecomRecord_call(int userId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countInterestedCandidateRecomRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countInterestedCandidateRecomRecord_args args = new countInterestedCandidateRecomRecord_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countInterestedCandidateRecomRecord();
      }
    }

    public void updateCandidateRecomRecords(com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO candidateRecomRecord, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateCandidateRecomRecords_call method_call = new updateCandidateRecomRecords_call(candidateRecomRecord, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateCandidateRecomRecords_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> {
      private com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO candidateRecomRecord;
      public updateCandidateRecomRecords_call(com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO candidateRecomRecord, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.candidateRecomRecord = candidateRecomRecord;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateCandidateRecomRecords", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateCandidateRecomRecords_args args = new updateCandidateRecomRecords_args();
        args.setCandidateRecomRecord(candidateRecomRecord);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateCandidateRecomRecords();
      }
    }

    public void deleteCandidateRecomRecords(int id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteCandidateRecomRecords_call method_call = new deleteCandidateRecomRecords_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteCandidateRecomRecords_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int id;
      public deleteCandidateRecomRecords_call(int id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteCandidateRecomRecords", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteCandidateRecomRecords_args args = new deleteCandidateRecomRecords_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void getCandidateShareChain(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCandidateShareChain_call method_call = new getCandidateShareChain_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCandidateShareChain_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO> {
      private com.moseeker.thrift.gen.common.struct.CommonQuery query;
      public getCandidateShareChain_call(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCandidateShareChain", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCandidateShareChain_args args = new getCandidateShareChain_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCandidateShareChain();
      }
    }

    public void listCandidateShareChain(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listCandidateShareChain_call method_call = new listCandidateShareChain_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listCandidateShareChain_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO>> {
      private com.moseeker.thrift.gen.common.struct.CommonQuery query;
      public listCandidateShareChain_call(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listCandidateShareChain", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listCandidateShareChain_args args = new listCandidateShareChain_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listCandidateShareChain();
      }
    }

    public void updateCandidateShareChain(com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO candidateShareChain, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateCandidateShareChain_call method_call = new updateCandidateShareChain_call(candidateShareChain, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateCandidateShareChain_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO> {
      private com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO candidateShareChain;
      public updateCandidateShareChain_call(com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO candidateShareChain, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.candidateShareChain = candidateShareChain;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateCandidateShareChain", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateCandidateShareChain_args args = new updateCandidateShareChain_args();
        args.setCandidateShareChain(candidateShareChain);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateCandidateShareChain();
      }
    }

    public void deleteCandidateShareChain(int id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteCandidateShareChain_call method_call = new deleteCandidateShareChain_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteCandidateShareChain_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int id;
      public deleteCandidateShareChain_call(int id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteCandidateShareChain", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteCandidateShareChain_args args = new deleteCandidateShareChain_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void getCandidateSuggestPosition(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCandidateSuggestPosition_call method_call = new getCandidateSuggestPosition_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCandidateSuggestPosition_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO> {
      private com.moseeker.thrift.gen.common.struct.CommonQuery query;
      public getCandidateSuggestPosition_call(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCandidateSuggestPosition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCandidateSuggestPosition_args args = new getCandidateSuggestPosition_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCandidateSuggestPosition();
      }
    }

    public void listCandidateSuggestPosition(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listCandidateSuggestPosition_call method_call = new listCandidateSuggestPosition_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listCandidateSuggestPosition_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO>> {
      private com.moseeker.thrift.gen.common.struct.CommonQuery query;
      public listCandidateSuggestPosition_call(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listCandidateSuggestPosition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listCandidateSuggestPosition_args args = new listCandidateSuggestPosition_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listCandidateSuggestPosition();
      }
    }

    public void updateCandidateSuggestPosition(com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO candidateSuggestPosition, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateCandidateSuggestPosition_call method_call = new updateCandidateSuggestPosition_call(candidateSuggestPosition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateCandidateSuggestPosition_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO> {
      private com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO candidateSuggestPosition;
      public updateCandidateSuggestPosition_call(com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO candidateSuggestPosition, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.candidateSuggestPosition = candidateSuggestPosition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateCandidateSuggestPosition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateCandidateSuggestPosition_args args = new updateCandidateSuggestPosition_args();
        args.setCandidateSuggestPosition(candidateSuggestPosition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateCandidateSuggestPosition();
      }
    }

    public void deleteCandidateSuggestPosition(int id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteCandidateSuggestPosition_call method_call = new deleteCandidateSuggestPosition_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteCandidateSuggestPosition_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int id;
      public deleteCandidateSuggestPosition_call(int id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteCandidateSuggestPosition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteCandidateSuggestPosition_args args = new deleteCandidateSuggestPosition_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getCandidateRemark", new getCandidateRemark());
      processMap.put("listCandidateRemarks", new listCandidateRemarks());
      processMap.put("saveCandidateRemark", new saveCandidateRemark());
      processMap.put("updateCandidateRemark", new updateCandidateRemark());
      processMap.put("updateCandidateRemarks", new updateCandidateRemarks());
      processMap.put("deleteCandidateRemark", new deleteCandidateRemark());
      processMap.put("getCandidateCompany", new getCandidateCompany());
      processMap.put("listCandidateCompanys", new listCandidateCompanys());
      processMap.put("saveCandidateCompanys", new saveCandidateCompanys());
      processMap.put("updateCandidateCompanys", new updateCandidateCompanys());
      processMap.put("deleteCandidateCompany", new deleteCandidateCompany());
      processMap.put("getCandidatePosition", new getCandidatePosition());
      processMap.put("listCandidatePositions", new listCandidatePositions());
      processMap.put("listCandidatePositionsByPositionIDUserID", new listCandidatePositionsByPositionIDUserID());
      processMap.put("updateCandidatePosition", new updateCandidatePosition());
      processMap.put("saveCandidatePosition", new saveCandidatePosition());
      processMap.put("deleteCandidatePositions", new deleteCandidatePositions());
      processMap.put("getCandidatePositionShareRecord", new getCandidatePositionShareRecord());
      processMap.put("listCandidatePositionShareRecord", new listCandidatePositionShareRecord());
      processMap.put("updateCandidatePositionShareRecord", new updateCandidatePositionShareRecord());
      processMap.put("deleteCandidatePositionShareRecord", new deleteCandidatePositionShareRecord());
      processMap.put("getCandidateRecomRecord", new getCandidateRecomRecord());
      processMap.put("listCandidateRecomRecord", new listCandidateRecomRecord());
      processMap.put("listCandidateRecomRecordExceptId", new listCandidateRecomRecordExceptId());
      processMap.put("countCandidateRecomRecordCustom", new countCandidateRecomRecordCustom());
      processMap.put("listCandidateRecomRecords", new listCandidateRecomRecords());
      processMap.put("listCandidateRecomRecordsForApplied", new listCandidateRecomRecordsForApplied());
      processMap.put("listInterestedCandidateRecomRecord", new listInterestedCandidateRecomRecord());
      processMap.put("listCandidateRecomRecordsByPositionSetAndPresenteeId", new listCandidateRecomRecordsByPositionSetAndPresenteeId());
      processMap.put("listCandidateRecomRecordSorting", new listCandidateRecomRecordSorting());
      processMap.put("countCandidateRecomRecord", new countCandidateRecomRecord());
      processMap.put("countCandidateRecomRecordDistinctPresentee", new countCandidateRecomRecordDistinctPresentee());
      processMap.put("countAppliedCandidateRecomRecord", new countAppliedCandidateRecomRecord());
      processMap.put("countInterestedCandidateRecomRecord", new countInterestedCandidateRecomRecord());
      processMap.put("updateCandidateRecomRecords", new updateCandidateRecomRecords());
      processMap.put("deleteCandidateRecomRecords", new deleteCandidateRecomRecords());
      processMap.put("getCandidateShareChain", new getCandidateShareChain());
      processMap.put("listCandidateShareChain", new listCandidateShareChain());
      processMap.put("updateCandidateShareChain", new updateCandidateShareChain());
      processMap.put("deleteCandidateShareChain", new deleteCandidateShareChain());
      processMap.put("getCandidateSuggestPosition", new getCandidateSuggestPosition());
      processMap.put("listCandidateSuggestPosition", new listCandidateSuggestPosition());
      processMap.put("updateCandidateSuggestPosition", new updateCandidateSuggestPosition());
      processMap.put("deleteCandidateSuggestPosition", new deleteCandidateSuggestPosition());
      return processMap;
    }

    public static class getCandidateRemark<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCandidateRemark_args> {
      public getCandidateRemark() {
        super("getCandidateRemark");
      }

      public getCandidateRemark_args getEmptyArgsInstance() {
        return new getCandidateRemark_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCandidateRemark_result getResult(I iface, getCandidateRemark_args args) throws org.apache.thrift.TException {
        getCandidateRemark_result result = new getCandidateRemark_result();
        result.success = iface.getCandidateRemark(args.query);
        return result;
      }
    }

    public static class listCandidateRemarks<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listCandidateRemarks_args> {
      public listCandidateRemarks() {
        super("listCandidateRemarks");
      }

      public listCandidateRemarks_args getEmptyArgsInstance() {
        return new listCandidateRemarks_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listCandidateRemarks_result getResult(I iface, listCandidateRemarks_args args) throws org.apache.thrift.TException {
        listCandidateRemarks_result result = new listCandidateRemarks_result();
        try {
          result.success = iface.listCandidateRemarks(args.query);
        } catch (com.moseeker.thrift.gen.dao.struct.CURDException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class saveCandidateRemark<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveCandidateRemark_args> {
      public saveCandidateRemark() {
        super("saveCandidateRemark");
      }

      public saveCandidateRemark_args getEmptyArgsInstance() {
        return new saveCandidateRemark_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveCandidateRemark_result getResult(I iface, saveCandidateRemark_args args) throws org.apache.thrift.TException {
        saveCandidateRemark_result result = new saveCandidateRemark_result();
        try {
          result.success = iface.saveCandidateRemark(args.candidateRemark);
        } catch (com.moseeker.thrift.gen.dao.struct.CURDException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateCandidateRemark<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateCandidateRemark_args> {
      public updateCandidateRemark() {
        super("updateCandidateRemark");
      }

      public updateCandidateRemark_args getEmptyArgsInstance() {
        return new updateCandidateRemark_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateCandidateRemark_result getResult(I iface, updateCandidateRemark_args args) throws org.apache.thrift.TException {
        updateCandidateRemark_result result = new updateCandidateRemark_result();
        try {
          result.success = iface.updateCandidateRemark(args.candidateRemark);
        } catch (com.moseeker.thrift.gen.dao.struct.CURDException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateCandidateRemarks<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateCandidateRemarks_args> {
      public updateCandidateRemarks() {
        super("updateCandidateRemarks");
      }

      public updateCandidateRemarks_args getEmptyArgsInstance() {
        return new updateCandidateRemarks_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateCandidateRemarks_result getResult(I iface, updateCandidateRemarks_args args) throws org.apache.thrift.TException {
        updateCandidateRemarks_result result = new updateCandidateRemarks_result();
        try {
          result.success = iface.updateCandidateRemarks(args.candidateRemarks);
        } catch (com.moseeker.thrift.gen.dao.struct.CURDException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class deleteCandidateRemark<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteCandidateRemark_args> {
      public deleteCandidateRemark() {
        super("deleteCandidateRemark");
      }

      public deleteCandidateRemark_args getEmptyArgsInstance() {
        return new deleteCandidateRemark_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteCandidateRemark_result getResult(I iface, deleteCandidateRemark_args args) throws org.apache.thrift.TException {
        deleteCandidateRemark_result result = new deleteCandidateRemark_result();
        try {
          iface.deleteCandidateRemark(args.id);
        } catch (com.moseeker.thrift.gen.dao.struct.CURDException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getCandidateCompany<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCandidateCompany_args> {
      public getCandidateCompany() {
        super("getCandidateCompany");
      }

      public getCandidateCompany_args getEmptyArgsInstance() {
        return new getCandidateCompany_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCandidateCompany_result getResult(I iface, getCandidateCompany_args args) throws org.apache.thrift.TException {
        getCandidateCompany_result result = new getCandidateCompany_result();
        result.success = iface.getCandidateCompany(args.query);
        return result;
      }
    }

    public static class listCandidateCompanys<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listCandidateCompanys_args> {
      public listCandidateCompanys() {
        super("listCandidateCompanys");
      }

      public listCandidateCompanys_args getEmptyArgsInstance() {
        return new listCandidateCompanys_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listCandidateCompanys_result getResult(I iface, listCandidateCompanys_args args) throws org.apache.thrift.TException {
        listCandidateCompanys_result result = new listCandidateCompanys_result();
        result.success = iface.listCandidateCompanys(args.query);
        return result;
      }
    }

    public static class saveCandidateCompanys<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveCandidateCompanys_args> {
      public saveCandidateCompanys() {
        super("saveCandidateCompanys");
      }

      public saveCandidateCompanys_args getEmptyArgsInstance() {
        return new saveCandidateCompanys_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveCandidateCompanys_result getResult(I iface, saveCandidateCompanys_args args) throws org.apache.thrift.TException {
        saveCandidateCompanys_result result = new saveCandidateCompanys_result();
        result.success = iface.saveCandidateCompanys(args.candidateCompany);
        return result;
      }
    }

    public static class updateCandidateCompanys<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateCandidateCompanys_args> {
      public updateCandidateCompanys() {
        super("updateCandidateCompanys");
      }

      public updateCandidateCompanys_args getEmptyArgsInstance() {
        return new updateCandidateCompanys_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateCandidateCompanys_result getResult(I iface, updateCandidateCompanys_args args) throws org.apache.thrift.TException {
        updateCandidateCompanys_result result = new updateCandidateCompanys_result();
        result.success = iface.updateCandidateCompanys(args.candidateCompany);
        return result;
      }
    }

    public static class deleteCandidateCompany<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteCandidateCompany_args> {
      public deleteCandidateCompany() {
        super("deleteCandidateCompany");
      }

      public deleteCandidateCompany_args getEmptyArgsInstance() {
        return new deleteCandidateCompany_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteCandidateCompany_result getResult(I iface, deleteCandidateCompany_args args) throws org.apache.thrift.TException {
        deleteCandidateCompany_result result = new deleteCandidateCompany_result();
        iface.deleteCandidateCompany(args.id);
        return result;
      }
    }

    public static class getCandidatePosition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCandidatePosition_args> {
      public getCandidatePosition() {
        super("getCandidatePosition");
      }

      public getCandidatePosition_args getEmptyArgsInstance() {
        return new getCandidatePosition_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCandidatePosition_result getResult(I iface, getCandidatePosition_args args) throws org.apache.thrift.TException {
        getCandidatePosition_result result = new getCandidatePosition_result();
        result.success = iface.getCandidatePosition(args.query);
        return result;
      }
    }

    public static class listCandidatePositions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listCandidatePositions_args> {
      public listCandidatePositions() {
        super("listCandidatePositions");
      }

      public listCandidatePositions_args getEmptyArgsInstance() {
        return new listCandidatePositions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listCandidatePositions_result getResult(I iface, listCandidatePositions_args args) throws org.apache.thrift.TException {
        listCandidatePositions_result result = new listCandidatePositions_result();
        result.success = iface.listCandidatePositions(args.query);
        return result;
      }
    }

    public static class listCandidatePositionsByPositionIDUserID<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listCandidatePositionsByPositionIDUserID_args> {
      public listCandidatePositionsByPositionIDUserID() {
        super("listCandidatePositionsByPositionIDUserID");
      }

      public listCandidatePositionsByPositionIDUserID_args getEmptyArgsInstance() {
        return new listCandidatePositionsByPositionIDUserID_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listCandidatePositionsByPositionIDUserID_result getResult(I iface, listCandidatePositionsByPositionIDUserID_args args) throws org.apache.thrift.TException {
        listCandidatePositionsByPositionIDUserID_result result = new listCandidatePositionsByPositionIDUserID_result();
        result.success = iface.listCandidatePositionsByPositionIDUserID(args.companyPositionIds);
        return result;
      }
    }

    public static class updateCandidatePosition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateCandidatePosition_args> {
      public updateCandidatePosition() {
        super("updateCandidatePosition");
      }

      public updateCandidatePosition_args getEmptyArgsInstance() {
        return new updateCandidatePosition_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateCandidatePosition_result getResult(I iface, updateCandidatePosition_args args) throws org.apache.thrift.TException {
        updateCandidatePosition_result result = new updateCandidatePosition_result();
        result.success = iface.updateCandidatePosition(args.candidatePosition);
        return result;
      }
    }

    public static class saveCandidatePosition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveCandidatePosition_args> {
      public saveCandidatePosition() {
        super("saveCandidatePosition");
      }

      public saveCandidatePosition_args getEmptyArgsInstance() {
        return new saveCandidatePosition_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveCandidatePosition_result getResult(I iface, saveCandidatePosition_args args) throws org.apache.thrift.TException {
        saveCandidatePosition_result result = new saveCandidatePosition_result();
        try {
          result.success = iface.saveCandidatePosition(args.candidatePosition);
        } catch (com.moseeker.thrift.gen.common.struct.CURDException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class deleteCandidatePositions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteCandidatePositions_args> {
      public deleteCandidatePositions() {
        super("deleteCandidatePositions");
      }

      public deleteCandidatePositions_args getEmptyArgsInstance() {
        return new deleteCandidatePositions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteCandidatePositions_result getResult(I iface, deleteCandidatePositions_args args) throws org.apache.thrift.TException {
        deleteCandidatePositions_result result = new deleteCandidatePositions_result();
        iface.deleteCandidatePositions(args.userId, args.positionId);
        return result;
      }
    }

    public static class getCandidatePositionShareRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCandidatePositionShareRecord_args> {
      public getCandidatePositionShareRecord() {
        super("getCandidatePositionShareRecord");
      }

      public getCandidatePositionShareRecord_args getEmptyArgsInstance() {
        return new getCandidatePositionShareRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCandidatePositionShareRecord_result getResult(I iface, getCandidatePositionShareRecord_args args) throws org.apache.thrift.TException {
        getCandidatePositionShareRecord_result result = new getCandidatePositionShareRecord_result();
        result.success = iface.getCandidatePositionShareRecord(args.query);
        return result;
      }
    }

    public static class listCandidatePositionShareRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listCandidatePositionShareRecord_args> {
      public listCandidatePositionShareRecord() {
        super("listCandidatePositionShareRecord");
      }

      public listCandidatePositionShareRecord_args getEmptyArgsInstance() {
        return new listCandidatePositionShareRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listCandidatePositionShareRecord_result getResult(I iface, listCandidatePositionShareRecord_args args) throws org.apache.thrift.TException {
        listCandidatePositionShareRecord_result result = new listCandidatePositionShareRecord_result();
        result.success = iface.listCandidatePositionShareRecord(args.query);
        return result;
      }
    }

    public static class updateCandidatePositionShareRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateCandidatePositionShareRecord_args> {
      public updateCandidatePositionShareRecord() {
        super("updateCandidatePositionShareRecord");
      }

      public updateCandidatePositionShareRecord_args getEmptyArgsInstance() {
        return new updateCandidatePositionShareRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateCandidatePositionShareRecord_result getResult(I iface, updateCandidatePositionShareRecord_args args) throws org.apache.thrift.TException {
        updateCandidatePositionShareRecord_result result = new updateCandidatePositionShareRecord_result();
        result.success = iface.updateCandidatePositionShareRecord(args.candidatePositionShareRecord);
        return result;
      }
    }

    public static class deleteCandidatePositionShareRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteCandidatePositionShareRecord_args> {
      public deleteCandidatePositionShareRecord() {
        super("deleteCandidatePositionShareRecord");
      }

      public deleteCandidatePositionShareRecord_args getEmptyArgsInstance() {
        return new deleteCandidatePositionShareRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteCandidatePositionShareRecord_result getResult(I iface, deleteCandidatePositionShareRecord_args args) throws org.apache.thrift.TException {
        deleteCandidatePositionShareRecord_result result = new deleteCandidatePositionShareRecord_result();
        iface.deleteCandidatePositionShareRecord(args.id);
        return result;
      }
    }

    public static class getCandidateRecomRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCandidateRecomRecord_args> {
      public getCandidateRecomRecord() {
        super("getCandidateRecomRecord");
      }

      public getCandidateRecomRecord_args getEmptyArgsInstance() {
        return new getCandidateRecomRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCandidateRecomRecord_result getResult(I iface, getCandidateRecomRecord_args args) throws org.apache.thrift.TException {
        getCandidateRecomRecord_result result = new getCandidateRecomRecord_result();
        result.success = iface.getCandidateRecomRecord(args.query);
        return result;
      }
    }

    public static class listCandidateRecomRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listCandidateRecomRecord_args> {
      public listCandidateRecomRecord() {
        super("listCandidateRecomRecord");
      }

      public listCandidateRecomRecord_args getEmptyArgsInstance() {
        return new listCandidateRecomRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listCandidateRecomRecord_result getResult(I iface, listCandidateRecomRecord_args args) throws org.apache.thrift.TException {
        listCandidateRecomRecord_result result = new listCandidateRecomRecord_result();
        try {
          result.success = iface.listCandidateRecomRecord(args.postUserId, args.clickTime, args.recoms);
        } catch (com.moseeker.thrift.gen.common.struct.CURDException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class listCandidateRecomRecordExceptId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listCandidateRecomRecordExceptId_args> {
      public listCandidateRecomRecordExceptId() {
        super("listCandidateRecomRecordExceptId");
      }

      public listCandidateRecomRecordExceptId_args getEmptyArgsInstance() {
        return new listCandidateRecomRecordExceptId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listCandidateRecomRecordExceptId_result getResult(I iface, listCandidateRecomRecordExceptId_args args) throws org.apache.thrift.TException {
        listCandidateRecomRecordExceptId_result result = new listCandidateRecomRecordExceptId_result();
        try {
          result.success = iface.listCandidateRecomRecordExceptId(args.id, args.postUserId, args.clickTime, args.recoms);
        } catch (com.moseeker.thrift.gen.common.struct.CURDException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class countCandidateRecomRecordCustom<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countCandidateRecomRecordCustom_args> {
      public countCandidateRecomRecordCustom() {
        super("countCandidateRecomRecordCustom");
      }

      public countCandidateRecomRecordCustom_args getEmptyArgsInstance() {
        return new countCandidateRecomRecordCustom_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public countCandidateRecomRecordCustom_result getResult(I iface, countCandidateRecomRecordCustom_args args) throws org.apache.thrift.TException {
        countCandidateRecomRecordCustom_result result = new countCandidateRecomRecordCustom_result();
        try {
          result.success = iface.countCandidateRecomRecordCustom(args.postUserId, args.clickTime, args.recoms);
          result.setSuccessIsSet(true);
        } catch (com.moseeker.thrift.gen.common.struct.CURDException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class listCandidateRecomRecords<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listCandidateRecomRecords_args> {
      public listCandidateRecomRecords() {
        super("listCandidateRecomRecords");
      }

      public listCandidateRecomRecords_args getEmptyArgsInstance() {
        return new listCandidateRecomRecords_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listCandidateRecomRecords_result getResult(I iface, listCandidateRecomRecords_args args) throws org.apache.thrift.TException {
        listCandidateRecomRecords_result result = new listCandidateRecomRecords_result();
        result.success = iface.listCandidateRecomRecords(args.query);
        return result;
      }
    }

    public static class listCandidateRecomRecordsForApplied<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listCandidateRecomRecordsForApplied_args> {
      public listCandidateRecomRecordsForApplied() {
        super("listCandidateRecomRecordsForApplied");
      }

      public listCandidateRecomRecordsForApplied_args getEmptyArgsInstance() {
        return new listCandidateRecomRecordsForApplied_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listCandidateRecomRecordsForApplied_result getResult(I iface, listCandidateRecomRecordsForApplied_args args) throws org.apache.thrift.TException {
        listCandidateRecomRecordsForApplied_result result = new listCandidateRecomRecordsForApplied_result();
        result.success = iface.listCandidateRecomRecordsForApplied(args.userId, args.pageNo, args.pageSize);
        return result;
      }
    }

    public static class listInterestedCandidateRecomRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listInterestedCandidateRecomRecord_args> {
      public listInterestedCandidateRecomRecord() {
        super("listInterestedCandidateRecomRecord");
      }

      public listInterestedCandidateRecomRecord_args getEmptyArgsInstance() {
        return new listInterestedCandidateRecomRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listInterestedCandidateRecomRecord_result getResult(I iface, listInterestedCandidateRecomRecord_args args) throws org.apache.thrift.TException {
        listInterestedCandidateRecomRecord_result result = new listInterestedCandidateRecomRecord_result();
        result.success = iface.listInterestedCandidateRecomRecord(args.userId, args.pageNo, args.pageSize);
        return result;
      }
    }

    public static class listCandidateRecomRecordsByPositionSetAndPresenteeId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listCandidateRecomRecordsByPositionSetAndPresenteeId_args> {
      public listCandidateRecomRecordsByPositionSetAndPresenteeId() {
        super("listCandidateRecomRecordsByPositionSetAndPresenteeId");
      }

      public listCandidateRecomRecordsByPositionSetAndPresenteeId_args getEmptyArgsInstance() {
        return new listCandidateRecomRecordsByPositionSetAndPresenteeId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listCandidateRecomRecordsByPositionSetAndPresenteeId_result getResult(I iface, listCandidateRecomRecordsByPositionSetAndPresenteeId_args args) throws org.apache.thrift.TException {
        listCandidateRecomRecordsByPositionSetAndPresenteeId_result result = new listCandidateRecomRecordsByPositionSetAndPresenteeId_result();
        result.success = iface.listCandidateRecomRecordsByPositionSetAndPresenteeId(args.positionIdSet, args.presenteeId, args.pageNo, args.pageSize);
        return result;
      }
    }

    public static class listCandidateRecomRecordSorting<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listCandidateRecomRecordSorting_args> {
      public listCandidateRecomRecordSorting() {
        super("listCandidateRecomRecordSorting");
      }

      public listCandidateRecomRecordSorting_args getEmptyArgsInstance() {
        return new listCandidateRecomRecordSorting_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listCandidateRecomRecordSorting_result getResult(I iface, listCandidateRecomRecordSorting_args args) throws org.apache.thrift.TException {
        listCandidateRecomRecordSorting_result result = new listCandidateRecomRecordSorting_result();
        try {
          result.success = iface.listCandidateRecomRecordSorting(args.postUserId);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class countCandidateRecomRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countCandidateRecomRecord_args> {
      public countCandidateRecomRecord() {
        super("countCandidateRecomRecord");
      }

      public countCandidateRecomRecord_args getEmptyArgsInstance() {
        return new countCandidateRecomRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public countCandidateRecomRecord_result getResult(I iface, countCandidateRecomRecord_args args) throws org.apache.thrift.TException {
        countCandidateRecomRecord_result result = new countCandidateRecomRecord_result();
        result.success = iface.countCandidateRecomRecord(args.query);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class countCandidateRecomRecordDistinctPresentee<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countCandidateRecomRecordDistinctPresentee_args> {
      public countCandidateRecomRecordDistinctPresentee() {
        super("countCandidateRecomRecordDistinctPresentee");
      }

      public countCandidateRecomRecordDistinctPresentee_args getEmptyArgsInstance() {
        return new countCandidateRecomRecordDistinctPresentee_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public countCandidateRecomRecordDistinctPresentee_result getResult(I iface, countCandidateRecomRecordDistinctPresentee_args args) throws org.apache.thrift.TException {
        countCandidateRecomRecordDistinctPresentee_result result = new countCandidateRecomRecordDistinctPresentee_result();
        result.success = iface.countCandidateRecomRecordDistinctPresentee(args.postUserId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class countAppliedCandidateRecomRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countAppliedCandidateRecomRecord_args> {
      public countAppliedCandidateRecomRecord() {
        super("countAppliedCandidateRecomRecord");
      }

      public countAppliedCandidateRecomRecord_args getEmptyArgsInstance() {
        return new countAppliedCandidateRecomRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public countAppliedCandidateRecomRecord_result getResult(I iface, countAppliedCandidateRecomRecord_args args) throws org.apache.thrift.TException {
        countAppliedCandidateRecomRecord_result result = new countAppliedCandidateRecomRecord_result();
        result.success = iface.countAppliedCandidateRecomRecord(args.userId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class countInterestedCandidateRecomRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countInterestedCandidateRecomRecord_args> {
      public countInterestedCandidateRecomRecord() {
        super("countInterestedCandidateRecomRecord");
      }

      public countInterestedCandidateRecomRecord_args getEmptyArgsInstance() {
        return new countInterestedCandidateRecomRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public countInterestedCandidateRecomRecord_result getResult(I iface, countInterestedCandidateRecomRecord_args args) throws org.apache.thrift.TException {
        countInterestedCandidateRecomRecord_result result = new countInterestedCandidateRecomRecord_result();
        result.success = iface.countInterestedCandidateRecomRecord(args.userId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateCandidateRecomRecords<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateCandidateRecomRecords_args> {
      public updateCandidateRecomRecords() {
        super("updateCandidateRecomRecords");
      }

      public updateCandidateRecomRecords_args getEmptyArgsInstance() {
        return new updateCandidateRecomRecords_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateCandidateRecomRecords_result getResult(I iface, updateCandidateRecomRecords_args args) throws org.apache.thrift.TException {
        updateCandidateRecomRecords_result result = new updateCandidateRecomRecords_result();
        result.success = iface.updateCandidateRecomRecords(args.candidateRecomRecord);
        return result;
      }
    }

    public static class deleteCandidateRecomRecords<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteCandidateRecomRecords_args> {
      public deleteCandidateRecomRecords() {
        super("deleteCandidateRecomRecords");
      }

      public deleteCandidateRecomRecords_args getEmptyArgsInstance() {
        return new deleteCandidateRecomRecords_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteCandidateRecomRecords_result getResult(I iface, deleteCandidateRecomRecords_args args) throws org.apache.thrift.TException {
        deleteCandidateRecomRecords_result result = new deleteCandidateRecomRecords_result();
        iface.deleteCandidateRecomRecords(args.id);
        return result;
      }
    }

    public static class getCandidateShareChain<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCandidateShareChain_args> {
      public getCandidateShareChain() {
        super("getCandidateShareChain");
      }

      public getCandidateShareChain_args getEmptyArgsInstance() {
        return new getCandidateShareChain_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCandidateShareChain_result getResult(I iface, getCandidateShareChain_args args) throws org.apache.thrift.TException {
        getCandidateShareChain_result result = new getCandidateShareChain_result();
        result.success = iface.getCandidateShareChain(args.query);
        return result;
      }
    }

    public static class listCandidateShareChain<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listCandidateShareChain_args> {
      public listCandidateShareChain() {
        super("listCandidateShareChain");
      }

      public listCandidateShareChain_args getEmptyArgsInstance() {
        return new listCandidateShareChain_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listCandidateShareChain_result getResult(I iface, listCandidateShareChain_args args) throws org.apache.thrift.TException {
        listCandidateShareChain_result result = new listCandidateShareChain_result();
        result.success = iface.listCandidateShareChain(args.query);
        return result;
      }
    }

    public static class updateCandidateShareChain<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateCandidateShareChain_args> {
      public updateCandidateShareChain() {
        super("updateCandidateShareChain");
      }

      public updateCandidateShareChain_args getEmptyArgsInstance() {
        return new updateCandidateShareChain_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateCandidateShareChain_result getResult(I iface, updateCandidateShareChain_args args) throws org.apache.thrift.TException {
        updateCandidateShareChain_result result = new updateCandidateShareChain_result();
        result.success = iface.updateCandidateShareChain(args.candidateShareChain);
        return result;
      }
    }

    public static class deleteCandidateShareChain<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteCandidateShareChain_args> {
      public deleteCandidateShareChain() {
        super("deleteCandidateShareChain");
      }

      public deleteCandidateShareChain_args getEmptyArgsInstance() {
        return new deleteCandidateShareChain_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteCandidateShareChain_result getResult(I iface, deleteCandidateShareChain_args args) throws org.apache.thrift.TException {
        deleteCandidateShareChain_result result = new deleteCandidateShareChain_result();
        iface.deleteCandidateShareChain(args.id);
        return result;
      }
    }

    public static class getCandidateSuggestPosition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCandidateSuggestPosition_args> {
      public getCandidateSuggestPosition() {
        super("getCandidateSuggestPosition");
      }

      public getCandidateSuggestPosition_args getEmptyArgsInstance() {
        return new getCandidateSuggestPosition_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCandidateSuggestPosition_result getResult(I iface, getCandidateSuggestPosition_args args) throws org.apache.thrift.TException {
        getCandidateSuggestPosition_result result = new getCandidateSuggestPosition_result();
        result.success = iface.getCandidateSuggestPosition(args.query);
        return result;
      }
    }

    public static class listCandidateSuggestPosition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listCandidateSuggestPosition_args> {
      public listCandidateSuggestPosition() {
        super("listCandidateSuggestPosition");
      }

      public listCandidateSuggestPosition_args getEmptyArgsInstance() {
        return new listCandidateSuggestPosition_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listCandidateSuggestPosition_result getResult(I iface, listCandidateSuggestPosition_args args) throws org.apache.thrift.TException {
        listCandidateSuggestPosition_result result = new listCandidateSuggestPosition_result();
        result.success = iface.listCandidateSuggestPosition(args.query);
        return result;
      }
    }

    public static class updateCandidateSuggestPosition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateCandidateSuggestPosition_args> {
      public updateCandidateSuggestPosition() {
        super("updateCandidateSuggestPosition");
      }

      public updateCandidateSuggestPosition_args getEmptyArgsInstance() {
        return new updateCandidateSuggestPosition_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateCandidateSuggestPosition_result getResult(I iface, updateCandidateSuggestPosition_args args) throws org.apache.thrift.TException {
        updateCandidateSuggestPosition_result result = new updateCandidateSuggestPosition_result();
        result.success = iface.updateCandidateSuggestPosition(args.candidateSuggestPosition);
        return result;
      }
    }

    public static class deleteCandidateSuggestPosition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteCandidateSuggestPosition_args> {
      public deleteCandidateSuggestPosition() {
        super("deleteCandidateSuggestPosition");
      }

      public deleteCandidateSuggestPosition_args getEmptyArgsInstance() {
        return new deleteCandidateSuggestPosition_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteCandidateSuggestPosition_result getResult(I iface, deleteCandidateSuggestPosition_args args) throws org.apache.thrift.TException {
        deleteCandidateSuggestPosition_result result = new deleteCandidateSuggestPosition_result();
        iface.deleteCandidateSuggestPosition(args.id);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getCandidateRemark", new getCandidateRemark());
      processMap.put("listCandidateRemarks", new listCandidateRemarks());
      processMap.put("saveCandidateRemark", new saveCandidateRemark());
      processMap.put("updateCandidateRemark", new updateCandidateRemark());
      processMap.put("updateCandidateRemarks", new updateCandidateRemarks());
      processMap.put("deleteCandidateRemark", new deleteCandidateRemark());
      processMap.put("getCandidateCompany", new getCandidateCompany());
      processMap.put("listCandidateCompanys", new listCandidateCompanys());
      processMap.put("saveCandidateCompanys", new saveCandidateCompanys());
      processMap.put("updateCandidateCompanys", new updateCandidateCompanys());
      processMap.put("deleteCandidateCompany", new deleteCandidateCompany());
      processMap.put("getCandidatePosition", new getCandidatePosition());
      processMap.put("listCandidatePositions", new listCandidatePositions());
      processMap.put("listCandidatePositionsByPositionIDUserID", new listCandidatePositionsByPositionIDUserID());
      processMap.put("updateCandidatePosition", new updateCandidatePosition());
      processMap.put("saveCandidatePosition", new saveCandidatePosition());
      processMap.put("deleteCandidatePositions", new deleteCandidatePositions());
      processMap.put("getCandidatePositionShareRecord", new getCandidatePositionShareRecord());
      processMap.put("listCandidatePositionShareRecord", new listCandidatePositionShareRecord());
      processMap.put("updateCandidatePositionShareRecord", new updateCandidatePositionShareRecord());
      processMap.put("deleteCandidatePositionShareRecord", new deleteCandidatePositionShareRecord());
      processMap.put("getCandidateRecomRecord", new getCandidateRecomRecord());
      processMap.put("listCandidateRecomRecord", new listCandidateRecomRecord());
      processMap.put("listCandidateRecomRecordExceptId", new listCandidateRecomRecordExceptId());
      processMap.put("countCandidateRecomRecordCustom", new countCandidateRecomRecordCustom());
      processMap.put("listCandidateRecomRecords", new listCandidateRecomRecords());
      processMap.put("listCandidateRecomRecordsForApplied", new listCandidateRecomRecordsForApplied());
      processMap.put("listInterestedCandidateRecomRecord", new listInterestedCandidateRecomRecord());
      processMap.put("listCandidateRecomRecordsByPositionSetAndPresenteeId", new listCandidateRecomRecordsByPositionSetAndPresenteeId());
      processMap.put("listCandidateRecomRecordSorting", new listCandidateRecomRecordSorting());
      processMap.put("countCandidateRecomRecord", new countCandidateRecomRecord());
      processMap.put("countCandidateRecomRecordDistinctPresentee", new countCandidateRecomRecordDistinctPresentee());
      processMap.put("countAppliedCandidateRecomRecord", new countAppliedCandidateRecomRecord());
      processMap.put("countInterestedCandidateRecomRecord", new countInterestedCandidateRecomRecord());
      processMap.put("updateCandidateRecomRecords", new updateCandidateRecomRecords());
      processMap.put("deleteCandidateRecomRecords", new deleteCandidateRecomRecords());
      processMap.put("getCandidateShareChain", new getCandidateShareChain());
      processMap.put("listCandidateShareChain", new listCandidateShareChain());
      processMap.put("updateCandidateShareChain", new updateCandidateShareChain());
      processMap.put("deleteCandidateShareChain", new deleteCandidateShareChain());
      processMap.put("getCandidateSuggestPosition", new getCandidateSuggestPosition());
      processMap.put("listCandidateSuggestPosition", new listCandidateSuggestPosition());
      processMap.put("updateCandidateSuggestPosition", new updateCandidateSuggestPosition());
      processMap.put("deleteCandidateSuggestPosition", new deleteCandidateSuggestPosition());
      return processMap;
    }

    public static class getCandidateRemark<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCandidateRemark_args, com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> {
      public getCandidateRemark() {
        super("getCandidateRemark");
      }

      public getCandidateRemark_args getEmptyArgsInstance() {
        return new getCandidateRemark_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>() { 
          public void onComplete(com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO o) {
            getCandidateRemark_result result = new getCandidateRemark_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getCandidateRemark_result result = new getCandidateRemark_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCandidateRemark_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> resultHandler) throws org.apache.thrift.TException {
        iface.getCandidateRemark(args.query,resultHandler);
      }
    }

    public static class listCandidateRemarks<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listCandidateRemarks_args, java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>> {
      public listCandidateRemarks() {
        super("listCandidateRemarks");
      }

      public listCandidateRemarks_args getEmptyArgsInstance() {
        return new listCandidateRemarks_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>>() { 
          public void onComplete(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> o) {
            listCandidateRemarks_result result = new listCandidateRemarks_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listCandidateRemarks_result result = new listCandidateRemarks_result();
            if (e instanceof com.moseeker.thrift.gen.dao.struct.CURDException) {
              result.e = (com.moseeker.thrift.gen.dao.struct.CURDException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listCandidateRemarks_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>> resultHandler) throws org.apache.thrift.TException {
        iface.listCandidateRemarks(args.query,resultHandler);
      }
    }

    public static class saveCandidateRemark<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveCandidateRemark_args, com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> {
      public saveCandidateRemark() {
        super("saveCandidateRemark");
      }

      public saveCandidateRemark_args getEmptyArgsInstance() {
        return new saveCandidateRemark_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>() { 
          public void onComplete(com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO o) {
            saveCandidateRemark_result result = new saveCandidateRemark_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            saveCandidateRemark_result result = new saveCandidateRemark_result();
            if (e instanceof com.moseeker.thrift.gen.dao.struct.CURDException) {
              result.e = (com.moseeker.thrift.gen.dao.struct.CURDException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveCandidateRemark_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> resultHandler) throws org.apache.thrift.TException {
        iface.saveCandidateRemark(args.candidateRemark,resultHandler);
      }
    }

    public static class updateCandidateRemark<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateCandidateRemark_args, com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> {
      public updateCandidateRemark() {
        super("updateCandidateRemark");
      }

      public updateCandidateRemark_args getEmptyArgsInstance() {
        return new updateCandidateRemark_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>() { 
          public void onComplete(com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO o) {
            updateCandidateRemark_result result = new updateCandidateRemark_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateCandidateRemark_result result = new updateCandidateRemark_result();
            if (e instanceof com.moseeker.thrift.gen.dao.struct.CURDException) {
              result.e = (com.moseeker.thrift.gen.dao.struct.CURDException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateCandidateRemark_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> resultHandler) throws org.apache.thrift.TException {
        iface.updateCandidateRemark(args.candidateRemark,resultHandler);
      }
    }

    public static class updateCandidateRemarks<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateCandidateRemarks_args, java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>> {
      public updateCandidateRemarks() {
        super("updateCandidateRemarks");
      }

      public updateCandidateRemarks_args getEmptyArgsInstance() {
        return new updateCandidateRemarks_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>>() { 
          public void onComplete(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> o) {
            updateCandidateRemarks_result result = new updateCandidateRemarks_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateCandidateRemarks_result result = new updateCandidateRemarks_result();
            if (e instanceof com.moseeker.thrift.gen.dao.struct.CURDException) {
              result.e = (com.moseeker.thrift.gen.dao.struct.CURDException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateCandidateRemarks_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>> resultHandler) throws org.apache.thrift.TException {
        iface.updateCandidateRemarks(args.candidateRemarks,resultHandler);
      }
    }

    public static class deleteCandidateRemark<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteCandidateRemark_args, Void> {
      public deleteCandidateRemark() {
        super("deleteCandidateRemark");
      }

      public deleteCandidateRemark_args getEmptyArgsInstance() {
        return new deleteCandidateRemark_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteCandidateRemark_result result = new deleteCandidateRemark_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteCandidateRemark_result result = new deleteCandidateRemark_result();
            if (e instanceof com.moseeker.thrift.gen.dao.struct.CURDException) {
              result.e = (com.moseeker.thrift.gen.dao.struct.CURDException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteCandidateRemark_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.deleteCandidateRemark(args.id,resultHandler);
      }
    }

    public static class getCandidateCompany<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCandidateCompany_args, com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO> {
      public getCandidateCompany() {
        super("getCandidateCompany");
      }

      public getCandidateCompany_args getEmptyArgsInstance() {
        return new getCandidateCompany_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO>() { 
          public void onComplete(com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO o) {
            getCandidateCompany_result result = new getCandidateCompany_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getCandidateCompany_result result = new getCandidateCompany_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCandidateCompany_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO> resultHandler) throws org.apache.thrift.TException {
        iface.getCandidateCompany(args.query,resultHandler);
      }
    }

    public static class listCandidateCompanys<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listCandidateCompanys_args, java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO>> {
      public listCandidateCompanys() {
        super("listCandidateCompanys");
      }

      public listCandidateCompanys_args getEmptyArgsInstance() {
        return new listCandidateCompanys_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO>>() { 
          public void onComplete(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO> o) {
            listCandidateCompanys_result result = new listCandidateCompanys_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listCandidateCompanys_result result = new listCandidateCompanys_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listCandidateCompanys_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO>> resultHandler) throws org.apache.thrift.TException {
        iface.listCandidateCompanys(args.query,resultHandler);
      }
    }

    public static class saveCandidateCompanys<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveCandidateCompanys_args, com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO> {
      public saveCandidateCompanys() {
        super("saveCandidateCompanys");
      }

      public saveCandidateCompanys_args getEmptyArgsInstance() {
        return new saveCandidateCompanys_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO>() { 
          public void onComplete(com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO o) {
            saveCandidateCompanys_result result = new saveCandidateCompanys_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            saveCandidateCompanys_result result = new saveCandidateCompanys_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveCandidateCompanys_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO> resultHandler) throws org.apache.thrift.TException {
        iface.saveCandidateCompanys(args.candidateCompany,resultHandler);
      }
    }

    public static class updateCandidateCompanys<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateCandidateCompanys_args, com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO> {
      public updateCandidateCompanys() {
        super("updateCandidateCompanys");
      }

      public updateCandidateCompanys_args getEmptyArgsInstance() {
        return new updateCandidateCompanys_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO>() { 
          public void onComplete(com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO o) {
            updateCandidateCompanys_result result = new updateCandidateCompanys_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateCandidateCompanys_result result = new updateCandidateCompanys_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateCandidateCompanys_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO> resultHandler) throws org.apache.thrift.TException {
        iface.updateCandidateCompanys(args.candidateCompany,resultHandler);
      }
    }

    public static class deleteCandidateCompany<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteCandidateCompany_args, Void> {
      public deleteCandidateCompany() {
        super("deleteCandidateCompany");
      }

      public deleteCandidateCompany_args getEmptyArgsInstance() {
        return new deleteCandidateCompany_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteCandidateCompany_result result = new deleteCandidateCompany_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteCandidateCompany_result result = new deleteCandidateCompany_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteCandidateCompany_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.deleteCandidateCompany(args.id,resultHandler);
      }
    }

    public static class getCandidatePosition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCandidatePosition_args, com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> {
      public getCandidatePosition() {
        super("getCandidatePosition");
      }

      public getCandidatePosition_args getEmptyArgsInstance() {
        return new getCandidatePosition_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO>() { 
          public void onComplete(com.moseeker.thrift.gen.dao.struct.CandidatePositionDO o) {
            getCandidatePosition_result result = new getCandidatePosition_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getCandidatePosition_result result = new getCandidatePosition_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCandidatePosition_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> resultHandler) throws org.apache.thrift.TException {
        iface.getCandidatePosition(args.query,resultHandler);
      }
    }

    public static class listCandidatePositions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listCandidatePositions_args, java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO>> {
      public listCandidatePositions() {
        super("listCandidatePositions");
      }

      public listCandidatePositions_args getEmptyArgsInstance() {
        return new listCandidatePositions_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO>>() { 
          public void onComplete(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> o) {
            listCandidatePositions_result result = new listCandidatePositions_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listCandidatePositions_result result = new listCandidatePositions_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listCandidatePositions_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO>> resultHandler) throws org.apache.thrift.TException {
        iface.listCandidatePositions(args.query,resultHandler);
      }
    }

    public static class listCandidatePositionsByPositionIDUserID<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listCandidatePositionsByPositionIDUserID_args, java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO>> {
      public listCandidatePositionsByPositionIDUserID() {
        super("listCandidatePositionsByPositionIDUserID");
      }

      public listCandidatePositionsByPositionIDUserID_args getEmptyArgsInstance() {
        return new listCandidatePositionsByPositionIDUserID_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO>>() { 
          public void onComplete(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> o) {
            listCandidatePositionsByPositionIDUserID_result result = new listCandidatePositionsByPositionIDUserID_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listCandidatePositionsByPositionIDUserID_result result = new listCandidatePositionsByPositionIDUserID_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listCandidatePositionsByPositionIDUserID_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO>> resultHandler) throws org.apache.thrift.TException {
        iface.listCandidatePositionsByPositionIDUserID(args.companyPositionIds,resultHandler);
      }
    }

    public static class updateCandidatePosition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateCandidatePosition_args, com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> {
      public updateCandidatePosition() {
        super("updateCandidatePosition");
      }

      public updateCandidatePosition_args getEmptyArgsInstance() {
        return new updateCandidatePosition_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO>() { 
          public void onComplete(com.moseeker.thrift.gen.dao.struct.CandidatePositionDO o) {
            updateCandidatePosition_result result = new updateCandidatePosition_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateCandidatePosition_result result = new updateCandidatePosition_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateCandidatePosition_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> resultHandler) throws org.apache.thrift.TException {
        iface.updateCandidatePosition(args.candidatePosition,resultHandler);
      }
    }

    public static class saveCandidatePosition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveCandidatePosition_args, com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> {
      public saveCandidatePosition() {
        super("saveCandidatePosition");
      }

      public saveCandidatePosition_args getEmptyArgsInstance() {
        return new saveCandidatePosition_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO>() { 
          public void onComplete(com.moseeker.thrift.gen.dao.struct.CandidatePositionDO o) {
            saveCandidatePosition_result result = new saveCandidatePosition_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            saveCandidatePosition_result result = new saveCandidatePosition_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.CURDException) {
              result.e = (com.moseeker.thrift.gen.common.struct.CURDException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveCandidatePosition_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> resultHandler) throws org.apache.thrift.TException {
        iface.saveCandidatePosition(args.candidatePosition,resultHandler);
      }
    }

    public static class deleteCandidatePositions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteCandidatePositions_args, Void> {
      public deleteCandidatePositions() {
        super("deleteCandidatePositions");
      }

      public deleteCandidatePositions_args getEmptyArgsInstance() {
        return new deleteCandidatePositions_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteCandidatePositions_result result = new deleteCandidatePositions_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteCandidatePositions_result result = new deleteCandidatePositions_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteCandidatePositions_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.deleteCandidatePositions(args.userId, args.positionId,resultHandler);
      }
    }

    public static class getCandidatePositionShareRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCandidatePositionShareRecord_args, com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO> {
      public getCandidatePositionShareRecord() {
        super("getCandidatePositionShareRecord");
      }

      public getCandidatePositionShareRecord_args getEmptyArgsInstance() {
        return new getCandidatePositionShareRecord_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO>() { 
          public void onComplete(com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO o) {
            getCandidatePositionShareRecord_result result = new getCandidatePositionShareRecord_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getCandidatePositionShareRecord_result result = new getCandidatePositionShareRecord_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCandidatePositionShareRecord_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO> resultHandler) throws org.apache.thrift.TException {
        iface.getCandidatePositionShareRecord(args.query,resultHandler);
      }
    }

    public static class listCandidatePositionShareRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listCandidatePositionShareRecord_args, java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO>> {
      public listCandidatePositionShareRecord() {
        super("listCandidatePositionShareRecord");
      }

      public listCandidatePositionShareRecord_args getEmptyArgsInstance() {
        return new listCandidatePositionShareRecord_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO>>() { 
          public void onComplete(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO> o) {
            listCandidatePositionShareRecord_result result = new listCandidatePositionShareRecord_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listCandidatePositionShareRecord_result result = new listCandidatePositionShareRecord_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listCandidatePositionShareRecord_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO>> resultHandler) throws org.apache.thrift.TException {
        iface.listCandidatePositionShareRecord(args.query,resultHandler);
      }
    }

    public static class updateCandidatePositionShareRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateCandidatePositionShareRecord_args, com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO> {
      public updateCandidatePositionShareRecord() {
        super("updateCandidatePositionShareRecord");
      }

      public updateCandidatePositionShareRecord_args getEmptyArgsInstance() {
        return new updateCandidatePositionShareRecord_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO>() { 
          public void onComplete(com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO o) {
            updateCandidatePositionShareRecord_result result = new updateCandidatePositionShareRecord_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateCandidatePositionShareRecord_result result = new updateCandidatePositionShareRecord_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateCandidatePositionShareRecord_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO> resultHandler) throws org.apache.thrift.TException {
        iface.updateCandidatePositionShareRecord(args.candidatePositionShareRecord,resultHandler);
      }
    }

    public static class deleteCandidatePositionShareRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteCandidatePositionShareRecord_args, Void> {
      public deleteCandidatePositionShareRecord() {
        super("deleteCandidatePositionShareRecord");
      }

      public deleteCandidatePositionShareRecord_args getEmptyArgsInstance() {
        return new deleteCandidatePositionShareRecord_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteCandidatePositionShareRecord_result result = new deleteCandidatePositionShareRecord_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteCandidatePositionShareRecord_result result = new deleteCandidatePositionShareRecord_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteCandidatePositionShareRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.deleteCandidatePositionShareRecord(args.id,resultHandler);
      }
    }

    public static class getCandidateRecomRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCandidateRecomRecord_args, com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> {
      public getCandidateRecomRecord() {
        super("getCandidateRecomRecord");
      }

      public getCandidateRecomRecord_args getEmptyArgsInstance() {
        return new getCandidateRecomRecord_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>() { 
          public void onComplete(com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO o) {
            getCandidateRecomRecord_result result = new getCandidateRecomRecord_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getCandidateRecomRecord_result result = new getCandidateRecomRecord_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCandidateRecomRecord_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> resultHandler) throws org.apache.thrift.TException {
        iface.getCandidateRecomRecord(args.query,resultHandler);
      }
    }

    public static class listCandidateRecomRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listCandidateRecomRecord_args, java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> {
      public listCandidateRecomRecord() {
        super("listCandidateRecomRecord");
      }

      public listCandidateRecomRecord_args getEmptyArgsInstance() {
        return new listCandidateRecomRecord_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>>() { 
          public void onComplete(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> o) {
            listCandidateRecomRecord_result result = new listCandidateRecomRecord_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listCandidateRecomRecord_result result = new listCandidateRecomRecord_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.CURDException) {
              result.e = (com.moseeker.thrift.gen.common.struct.CURDException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listCandidateRecomRecord_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> resultHandler) throws org.apache.thrift.TException {
        iface.listCandidateRecomRecord(args.postUserId, args.clickTime, args.recoms,resultHandler);
      }
    }

    public static class listCandidateRecomRecordExceptId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listCandidateRecomRecordExceptId_args, java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> {
      public listCandidateRecomRecordExceptId() {
        super("listCandidateRecomRecordExceptId");
      }

      public listCandidateRecomRecordExceptId_args getEmptyArgsInstance() {
        return new listCandidateRecomRecordExceptId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>>() { 
          public void onComplete(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> o) {
            listCandidateRecomRecordExceptId_result result = new listCandidateRecomRecordExceptId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listCandidateRecomRecordExceptId_result result = new listCandidateRecomRecordExceptId_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.CURDException) {
              result.e = (com.moseeker.thrift.gen.common.struct.CURDException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listCandidateRecomRecordExceptId_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> resultHandler) throws org.apache.thrift.TException {
        iface.listCandidateRecomRecordExceptId(args.id, args.postUserId, args.clickTime, args.recoms,resultHandler);
      }
    }

    public static class countCandidateRecomRecordCustom<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countCandidateRecomRecordCustom_args, java.lang.Integer> {
      public countCandidateRecomRecordCustom() {
        super("countCandidateRecomRecordCustom");
      }

      public countCandidateRecomRecordCustom_args getEmptyArgsInstance() {
        return new countCandidateRecomRecordCustom_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            countCandidateRecomRecordCustom_result result = new countCandidateRecomRecordCustom_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            countCandidateRecomRecordCustom_result result = new countCandidateRecomRecordCustom_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.CURDException) {
              result.e = (com.moseeker.thrift.gen.common.struct.CURDException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countCandidateRecomRecordCustom_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.countCandidateRecomRecordCustom(args.postUserId, args.clickTime, args.recoms,resultHandler);
      }
    }

    public static class listCandidateRecomRecords<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listCandidateRecomRecords_args, java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> {
      public listCandidateRecomRecords() {
        super("listCandidateRecomRecords");
      }

      public listCandidateRecomRecords_args getEmptyArgsInstance() {
        return new listCandidateRecomRecords_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>>() { 
          public void onComplete(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> o) {
            listCandidateRecomRecords_result result = new listCandidateRecomRecords_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listCandidateRecomRecords_result result = new listCandidateRecomRecords_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listCandidateRecomRecords_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> resultHandler) throws org.apache.thrift.TException {
        iface.listCandidateRecomRecords(args.query,resultHandler);
      }
    }

    public static class listCandidateRecomRecordsForApplied<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listCandidateRecomRecordsForApplied_args, java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> {
      public listCandidateRecomRecordsForApplied() {
        super("listCandidateRecomRecordsForApplied");
      }

      public listCandidateRecomRecordsForApplied_args getEmptyArgsInstance() {
        return new listCandidateRecomRecordsForApplied_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>>() { 
          public void onComplete(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> o) {
            listCandidateRecomRecordsForApplied_result result = new listCandidateRecomRecordsForApplied_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listCandidateRecomRecordsForApplied_result result = new listCandidateRecomRecordsForApplied_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listCandidateRecomRecordsForApplied_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> resultHandler) throws org.apache.thrift.TException {
        iface.listCandidateRecomRecordsForApplied(args.userId, args.pageNo, args.pageSize,resultHandler);
      }
    }

    public static class listInterestedCandidateRecomRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listInterestedCandidateRecomRecord_args, java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> {
      public listInterestedCandidateRecomRecord() {
        super("listInterestedCandidateRecomRecord");
      }

      public listInterestedCandidateRecomRecord_args getEmptyArgsInstance() {
        return new listInterestedCandidateRecomRecord_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>>() { 
          public void onComplete(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> o) {
            listInterestedCandidateRecomRecord_result result = new listInterestedCandidateRecomRecord_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listInterestedCandidateRecomRecord_result result = new listInterestedCandidateRecomRecord_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listInterestedCandidateRecomRecord_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> resultHandler) throws org.apache.thrift.TException {
        iface.listInterestedCandidateRecomRecord(args.userId, args.pageNo, args.pageSize,resultHandler);
      }
    }

    public static class listCandidateRecomRecordsByPositionSetAndPresenteeId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listCandidateRecomRecordsByPositionSetAndPresenteeId_args, java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> {
      public listCandidateRecomRecordsByPositionSetAndPresenteeId() {
        super("listCandidateRecomRecordsByPositionSetAndPresenteeId");
      }

      public listCandidateRecomRecordsByPositionSetAndPresenteeId_args getEmptyArgsInstance() {
        return new listCandidateRecomRecordsByPositionSetAndPresenteeId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>>() { 
          public void onComplete(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> o) {
            listCandidateRecomRecordsByPositionSetAndPresenteeId_result result = new listCandidateRecomRecordsByPositionSetAndPresenteeId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listCandidateRecomRecordsByPositionSetAndPresenteeId_result result = new listCandidateRecomRecordsByPositionSetAndPresenteeId_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listCandidateRecomRecordsByPositionSetAndPresenteeId_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>> resultHandler) throws org.apache.thrift.TException {
        iface.listCandidateRecomRecordsByPositionSetAndPresenteeId(args.positionIdSet, args.presenteeId, args.pageNo, args.pageSize,resultHandler);
      }
    }

    public static class listCandidateRecomRecordSorting<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listCandidateRecomRecordSorting_args, java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO>> {
      public listCandidateRecomRecordSorting() {
        super("listCandidateRecomRecordSorting");
      }

      public listCandidateRecomRecordSorting_args getEmptyArgsInstance() {
        return new listCandidateRecomRecordSorting_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO>>() { 
          public void onComplete(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO> o) {
            listCandidateRecomRecordSorting_result result = new listCandidateRecomRecordSorting_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listCandidateRecomRecordSorting_result result = new listCandidateRecomRecordSorting_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listCandidateRecomRecordSorting_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO>> resultHandler) throws org.apache.thrift.TException {
        iface.listCandidateRecomRecordSorting(args.postUserId,resultHandler);
      }
    }

    public static class countCandidateRecomRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countCandidateRecomRecord_args, java.lang.Integer> {
      public countCandidateRecomRecord() {
        super("countCandidateRecomRecord");
      }

      public countCandidateRecomRecord_args getEmptyArgsInstance() {
        return new countCandidateRecomRecord_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            countCandidateRecomRecord_result result = new countCandidateRecomRecord_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            countCandidateRecomRecord_result result = new countCandidateRecomRecord_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countCandidateRecomRecord_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.countCandidateRecomRecord(args.query,resultHandler);
      }
    }

    public static class countCandidateRecomRecordDistinctPresentee<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countCandidateRecomRecordDistinctPresentee_args, java.lang.Integer> {
      public countCandidateRecomRecordDistinctPresentee() {
        super("countCandidateRecomRecordDistinctPresentee");
      }

      public countCandidateRecomRecordDistinctPresentee_args getEmptyArgsInstance() {
        return new countCandidateRecomRecordDistinctPresentee_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            countCandidateRecomRecordDistinctPresentee_result result = new countCandidateRecomRecordDistinctPresentee_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            countCandidateRecomRecordDistinctPresentee_result result = new countCandidateRecomRecordDistinctPresentee_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countCandidateRecomRecordDistinctPresentee_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.countCandidateRecomRecordDistinctPresentee(args.postUserId,resultHandler);
      }
    }

    public static class countAppliedCandidateRecomRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countAppliedCandidateRecomRecord_args, java.lang.Integer> {
      public countAppliedCandidateRecomRecord() {
        super("countAppliedCandidateRecomRecord");
      }

      public countAppliedCandidateRecomRecord_args getEmptyArgsInstance() {
        return new countAppliedCandidateRecomRecord_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            countAppliedCandidateRecomRecord_result result = new countAppliedCandidateRecomRecord_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            countAppliedCandidateRecomRecord_result result = new countAppliedCandidateRecomRecord_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countAppliedCandidateRecomRecord_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.countAppliedCandidateRecomRecord(args.userId,resultHandler);
      }
    }

    public static class countInterestedCandidateRecomRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countInterestedCandidateRecomRecord_args, java.lang.Integer> {
      public countInterestedCandidateRecomRecord() {
        super("countInterestedCandidateRecomRecord");
      }

      public countInterestedCandidateRecomRecord_args getEmptyArgsInstance() {
        return new countInterestedCandidateRecomRecord_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            countInterestedCandidateRecomRecord_result result = new countInterestedCandidateRecomRecord_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            countInterestedCandidateRecomRecord_result result = new countInterestedCandidateRecomRecord_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countInterestedCandidateRecomRecord_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.countInterestedCandidateRecomRecord(args.userId,resultHandler);
      }
    }

    public static class updateCandidateRecomRecords<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateCandidateRecomRecords_args, com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> {
      public updateCandidateRecomRecords() {
        super("updateCandidateRecomRecords");
      }

      public updateCandidateRecomRecords_args getEmptyArgsInstance() {
        return new updateCandidateRecomRecords_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>() { 
          public void onComplete(com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO o) {
            updateCandidateRecomRecords_result result = new updateCandidateRecomRecords_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateCandidateRecomRecords_result result = new updateCandidateRecomRecords_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateCandidateRecomRecords_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> resultHandler) throws org.apache.thrift.TException {
        iface.updateCandidateRecomRecords(args.candidateRecomRecord,resultHandler);
      }
    }

    public static class deleteCandidateRecomRecords<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteCandidateRecomRecords_args, Void> {
      public deleteCandidateRecomRecords() {
        super("deleteCandidateRecomRecords");
      }

      public deleteCandidateRecomRecords_args getEmptyArgsInstance() {
        return new deleteCandidateRecomRecords_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteCandidateRecomRecords_result result = new deleteCandidateRecomRecords_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteCandidateRecomRecords_result result = new deleteCandidateRecomRecords_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteCandidateRecomRecords_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.deleteCandidateRecomRecords(args.id,resultHandler);
      }
    }

    public static class getCandidateShareChain<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCandidateShareChain_args, com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO> {
      public getCandidateShareChain() {
        super("getCandidateShareChain");
      }

      public getCandidateShareChain_args getEmptyArgsInstance() {
        return new getCandidateShareChain_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO>() { 
          public void onComplete(com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO o) {
            getCandidateShareChain_result result = new getCandidateShareChain_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getCandidateShareChain_result result = new getCandidateShareChain_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCandidateShareChain_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO> resultHandler) throws org.apache.thrift.TException {
        iface.getCandidateShareChain(args.query,resultHandler);
      }
    }

    public static class listCandidateShareChain<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listCandidateShareChain_args, java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO>> {
      public listCandidateShareChain() {
        super("listCandidateShareChain");
      }

      public listCandidateShareChain_args getEmptyArgsInstance() {
        return new listCandidateShareChain_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO>>() { 
          public void onComplete(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO> o) {
            listCandidateShareChain_result result = new listCandidateShareChain_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listCandidateShareChain_result result = new listCandidateShareChain_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listCandidateShareChain_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO>> resultHandler) throws org.apache.thrift.TException {
        iface.listCandidateShareChain(args.query,resultHandler);
      }
    }

    public static class updateCandidateShareChain<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateCandidateShareChain_args, com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO> {
      public updateCandidateShareChain() {
        super("updateCandidateShareChain");
      }

      public updateCandidateShareChain_args getEmptyArgsInstance() {
        return new updateCandidateShareChain_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO>() { 
          public void onComplete(com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO o) {
            updateCandidateShareChain_result result = new updateCandidateShareChain_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateCandidateShareChain_result result = new updateCandidateShareChain_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateCandidateShareChain_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO> resultHandler) throws org.apache.thrift.TException {
        iface.updateCandidateShareChain(args.candidateShareChain,resultHandler);
      }
    }

    public static class deleteCandidateShareChain<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteCandidateShareChain_args, Void> {
      public deleteCandidateShareChain() {
        super("deleteCandidateShareChain");
      }

      public deleteCandidateShareChain_args getEmptyArgsInstance() {
        return new deleteCandidateShareChain_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteCandidateShareChain_result result = new deleteCandidateShareChain_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteCandidateShareChain_result result = new deleteCandidateShareChain_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteCandidateShareChain_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.deleteCandidateShareChain(args.id,resultHandler);
      }
    }

    public static class getCandidateSuggestPosition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCandidateSuggestPosition_args, com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO> {
      public getCandidateSuggestPosition() {
        super("getCandidateSuggestPosition");
      }

      public getCandidateSuggestPosition_args getEmptyArgsInstance() {
        return new getCandidateSuggestPosition_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO>() { 
          public void onComplete(com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO o) {
            getCandidateSuggestPosition_result result = new getCandidateSuggestPosition_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getCandidateSuggestPosition_result result = new getCandidateSuggestPosition_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCandidateSuggestPosition_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO> resultHandler) throws org.apache.thrift.TException {
        iface.getCandidateSuggestPosition(args.query,resultHandler);
      }
    }

    public static class listCandidateSuggestPosition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listCandidateSuggestPosition_args, java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO>> {
      public listCandidateSuggestPosition() {
        super("listCandidateSuggestPosition");
      }

      public listCandidateSuggestPosition_args getEmptyArgsInstance() {
        return new listCandidateSuggestPosition_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO>>() { 
          public void onComplete(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO> o) {
            listCandidateSuggestPosition_result result = new listCandidateSuggestPosition_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listCandidateSuggestPosition_result result = new listCandidateSuggestPosition_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listCandidateSuggestPosition_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO>> resultHandler) throws org.apache.thrift.TException {
        iface.listCandidateSuggestPosition(args.query,resultHandler);
      }
    }

    public static class updateCandidateSuggestPosition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateCandidateSuggestPosition_args, com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO> {
      public updateCandidateSuggestPosition() {
        super("updateCandidateSuggestPosition");
      }

      public updateCandidateSuggestPosition_args getEmptyArgsInstance() {
        return new updateCandidateSuggestPosition_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO>() { 
          public void onComplete(com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO o) {
            updateCandidateSuggestPosition_result result = new updateCandidateSuggestPosition_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateCandidateSuggestPosition_result result = new updateCandidateSuggestPosition_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateCandidateSuggestPosition_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO> resultHandler) throws org.apache.thrift.TException {
        iface.updateCandidateSuggestPosition(args.candidateSuggestPosition,resultHandler);
      }
    }

    public static class deleteCandidateSuggestPosition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteCandidateSuggestPosition_args, Void> {
      public deleteCandidateSuggestPosition() {
        super("deleteCandidateSuggestPosition");
      }

      public deleteCandidateSuggestPosition_args getEmptyArgsInstance() {
        return new deleteCandidateSuggestPosition_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteCandidateSuggestPosition_result result = new deleteCandidateSuggestPosition_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteCandidateSuggestPosition_result result = new deleteCandidateSuggestPosition_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteCandidateSuggestPosition_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.deleteCandidateSuggestPosition(args.id,resultHandler);
      }
    }

  }

  public static class getCandidateRemark_args implements org.apache.thrift.TBase<getCandidateRemark_args, getCandidateRemark_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCandidateRemark_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCandidateRemark_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCandidateRemark_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCandidateRemark_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.CommonQuery query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.CommonQuery.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCandidateRemark_args.class, metaDataMap);
    }

    public getCandidateRemark_args() {
    }

    public getCandidateRemark_args(
      com.moseeker.thrift.gen.common.struct.CommonQuery query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCandidateRemark_args(getCandidateRemark_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.common.struct.CommonQuery(other.query);
      }
    }

    public getCandidateRemark_args deepCopy() {
      return new getCandidateRemark_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public com.moseeker.thrift.gen.common.struct.CommonQuery getQuery() {
      return this.query;
    }

    public getCandidateRemark_args setQuery(com.moseeker.thrift.gen.common.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.common.struct.CommonQuery)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCandidateRemark_args)
        return this.equals((getCandidateRemark_args)that);
      return false;
    }

    public boolean equals(getCandidateRemark_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCandidateRemark_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCandidateRemark_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCandidateRemark_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCandidateRemark_argsStandardScheme getScheme() {
        return new getCandidateRemark_argsStandardScheme();
      }
    }

    private static class getCandidateRemark_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCandidateRemark_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCandidateRemark_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCandidateRemark_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCandidateRemark_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCandidateRemark_argsTupleScheme getScheme() {
        return new getCandidateRemark_argsTupleScheme();
      }
    }

    private static class getCandidateRemark_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCandidateRemark_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCandidateRemark_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCandidateRemark_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCandidateRemark_result implements org.apache.thrift.TBase<getCandidateRemark_result, getCandidateRemark_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCandidateRemark_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCandidateRemark_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCandidateRemark_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCandidateRemark_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCandidateRemark_result.class, metaDataMap);
    }

    public getCandidateRemark_result() {
    }

    public getCandidateRemark_result(
      com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCandidateRemark_result(getCandidateRemark_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO(other.success);
      }
    }

    public getCandidateRemark_result deepCopy() {
      return new getCandidateRemark_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO getSuccess() {
      return this.success;
    }

    public getCandidateRemark_result setSuccess(com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCandidateRemark_result)
        return this.equals((getCandidateRemark_result)that);
      return false;
    }

    public boolean equals(getCandidateRemark_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCandidateRemark_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCandidateRemark_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCandidateRemark_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCandidateRemark_resultStandardScheme getScheme() {
        return new getCandidateRemark_resultStandardScheme();
      }
    }

    private static class getCandidateRemark_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCandidateRemark_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCandidateRemark_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCandidateRemark_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCandidateRemark_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCandidateRemark_resultTupleScheme getScheme() {
        return new getCandidateRemark_resultTupleScheme();
      }
    }

    private static class getCandidateRemark_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCandidateRemark_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCandidateRemark_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCandidateRemark_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listCandidateRemarks_args implements org.apache.thrift.TBase<listCandidateRemarks_args, listCandidateRemarks_args._Fields>, java.io.Serializable, Cloneable, Comparable<listCandidateRemarks_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCandidateRemarks_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listCandidateRemarks_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listCandidateRemarks_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.CommonQuery query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.CommonQuery.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCandidateRemarks_args.class, metaDataMap);
    }

    public listCandidateRemarks_args() {
    }

    public listCandidateRemarks_args(
      com.moseeker.thrift.gen.common.struct.CommonQuery query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCandidateRemarks_args(listCandidateRemarks_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.common.struct.CommonQuery(other.query);
      }
    }

    public listCandidateRemarks_args deepCopy() {
      return new listCandidateRemarks_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public com.moseeker.thrift.gen.common.struct.CommonQuery getQuery() {
      return this.query;
    }

    public listCandidateRemarks_args setQuery(com.moseeker.thrift.gen.common.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.common.struct.CommonQuery)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listCandidateRemarks_args)
        return this.equals((listCandidateRemarks_args)that);
      return false;
    }

    public boolean equals(listCandidateRemarks_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listCandidateRemarks_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listCandidateRemarks_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCandidateRemarks_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateRemarks_argsStandardScheme getScheme() {
        return new listCandidateRemarks_argsStandardScheme();
      }
    }

    private static class listCandidateRemarks_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listCandidateRemarks_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCandidateRemarks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCandidateRemarks_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCandidateRemarks_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateRemarks_argsTupleScheme getScheme() {
        return new listCandidateRemarks_argsTupleScheme();
      }
    }

    private static class listCandidateRemarks_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listCandidateRemarks_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCandidateRemarks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCandidateRemarks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listCandidateRemarks_result implements org.apache.thrift.TBase<listCandidateRemarks_result, listCandidateRemarks_result._Fields>, java.io.Serializable, Cloneable, Comparable<listCandidateRemarks_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCandidateRemarks_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listCandidateRemarks_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listCandidateRemarks_resultTupleSchemeFactory();

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> success; // required
    public com.moseeker.thrift.gen.dao.struct.CURDException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CURDException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCandidateRemarks_result.class, metaDataMap);
    }

    public listCandidateRemarks_result() {
    }

    public listCandidateRemarks_result(
      java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> success,
      com.moseeker.thrift.gen.dao.struct.CURDException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCandidateRemarks_result(listCandidateRemarks_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> __this__success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>(other.success.size());
        for (com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO other_element : other.success) {
          __this__success.add(new com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.dao.struct.CURDException(other.e);
      }
    }

    public listCandidateRemarks_result deepCopy() {
      return new listCandidateRemarks_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> getSuccess() {
      return this.success;
    }

    public listCandidateRemarks_result setSuccess(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.dao.struct.CURDException getE() {
      return this.e;
    }

    public listCandidateRemarks_result setE(com.moseeker.thrift.gen.dao.struct.CURDException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.dao.struct.CURDException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listCandidateRemarks_result)
        return this.equals((listCandidateRemarks_result)that);
      return false;
    }

    public boolean equals(listCandidateRemarks_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listCandidateRemarks_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listCandidateRemarks_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCandidateRemarks_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateRemarks_resultStandardScheme getScheme() {
        return new listCandidateRemarks_resultStandardScheme();
      }
    }

    private static class listCandidateRemarks_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listCandidateRemarks_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCandidateRemarks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>(_list0.size);
                  com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.dao.struct.CURDException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCandidateRemarks_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCandidateRemarks_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateRemarks_resultTupleScheme getScheme() {
        return new listCandidateRemarks_resultTupleScheme();
      }
    }

    private static class listCandidateRemarks_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listCandidateRemarks_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCandidateRemarks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCandidateRemarks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>(_list5.size);
            com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.dao.struct.CURDException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saveCandidateRemark_args implements org.apache.thrift.TBase<saveCandidateRemark_args, saveCandidateRemark_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveCandidateRemark_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveCandidateRemark_args");

    private static final org.apache.thrift.protocol.TField CANDIDATE_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("candidateRemark", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveCandidateRemark_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveCandidateRemark_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO candidateRemark; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CANDIDATE_REMARK((short)1, "candidateRemark");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CANDIDATE_REMARK
            return CANDIDATE_REMARK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CANDIDATE_REMARK, new org.apache.thrift.meta_data.FieldMetaData("candidateRemark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveCandidateRemark_args.class, metaDataMap);
    }

    public saveCandidateRemark_args() {
    }

    public saveCandidateRemark_args(
      com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO candidateRemark)
    {
      this();
      this.candidateRemark = candidateRemark;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveCandidateRemark_args(saveCandidateRemark_args other) {
      if (other.isSetCandidateRemark()) {
        this.candidateRemark = new com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO(other.candidateRemark);
      }
    }

    public saveCandidateRemark_args deepCopy() {
      return new saveCandidateRemark_args(this);
    }

    @Override
    public void clear() {
      this.candidateRemark = null;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO getCandidateRemark() {
      return this.candidateRemark;
    }

    public saveCandidateRemark_args setCandidateRemark(com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO candidateRemark) {
      this.candidateRemark = candidateRemark;
      return this;
    }

    public void unsetCandidateRemark() {
      this.candidateRemark = null;
    }

    /** Returns true if field candidateRemark is set (has been assigned a value) and false otherwise */
    public boolean isSetCandidateRemark() {
      return this.candidateRemark != null;
    }

    public void setCandidateRemarkIsSet(boolean value) {
      if (!value) {
        this.candidateRemark = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CANDIDATE_REMARK:
        if (value == null) {
          unsetCandidateRemark();
        } else {
          setCandidateRemark((com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CANDIDATE_REMARK:
        return getCandidateRemark();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CANDIDATE_REMARK:
        return isSetCandidateRemark();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof saveCandidateRemark_args)
        return this.equals((saveCandidateRemark_args)that);
      return false;
    }

    public boolean equals(saveCandidateRemark_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_candidateRemark = true && this.isSetCandidateRemark();
      boolean that_present_candidateRemark = true && that.isSetCandidateRemark();
      if (this_present_candidateRemark || that_present_candidateRemark) {
        if (!(this_present_candidateRemark && that_present_candidateRemark))
          return false;
        if (!this.candidateRemark.equals(that.candidateRemark))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCandidateRemark()) ? 131071 : 524287);
      if (isSetCandidateRemark())
        hashCode = hashCode * 8191 + candidateRemark.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(saveCandidateRemark_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCandidateRemark()).compareTo(other.isSetCandidateRemark());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCandidateRemark()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.candidateRemark, other.candidateRemark);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("saveCandidateRemark_args(");
      boolean first = true;

      sb.append("candidateRemark:");
      if (this.candidateRemark == null) {
        sb.append("null");
      } else {
        sb.append(this.candidateRemark);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (candidateRemark != null) {
        candidateRemark.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveCandidateRemark_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveCandidateRemark_argsStandardScheme getScheme() {
        return new saveCandidateRemark_argsStandardScheme();
      }
    }

    private static class saveCandidateRemark_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveCandidateRemark_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveCandidateRemark_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CANDIDATE_REMARK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.candidateRemark = new com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO();
                struct.candidateRemark.read(iprot);
                struct.setCandidateRemarkIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveCandidateRemark_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.candidateRemark != null) {
          oprot.writeFieldBegin(CANDIDATE_REMARK_FIELD_DESC);
          struct.candidateRemark.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveCandidateRemark_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveCandidateRemark_argsTupleScheme getScheme() {
        return new saveCandidateRemark_argsTupleScheme();
      }
    }

    private static class saveCandidateRemark_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveCandidateRemark_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveCandidateRemark_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCandidateRemark()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCandidateRemark()) {
          struct.candidateRemark.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveCandidateRemark_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.candidateRemark = new com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO();
          struct.candidateRemark.read(iprot);
          struct.setCandidateRemarkIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saveCandidateRemark_result implements org.apache.thrift.TBase<saveCandidateRemark_result, saveCandidateRemark_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveCandidateRemark_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveCandidateRemark_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveCandidateRemark_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveCandidateRemark_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO success; // required
    public com.moseeker.thrift.gen.dao.struct.CURDException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CURDException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveCandidateRemark_result.class, metaDataMap);
    }

    public saveCandidateRemark_result() {
    }

    public saveCandidateRemark_result(
      com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO success,
      com.moseeker.thrift.gen.dao.struct.CURDException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveCandidateRemark_result(saveCandidateRemark_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.dao.struct.CURDException(other.e);
      }
    }

    public saveCandidateRemark_result deepCopy() {
      return new saveCandidateRemark_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO getSuccess() {
      return this.success;
    }

    public saveCandidateRemark_result setSuccess(com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.dao.struct.CURDException getE() {
      return this.e;
    }

    public saveCandidateRemark_result setE(com.moseeker.thrift.gen.dao.struct.CURDException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.dao.struct.CURDException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof saveCandidateRemark_result)
        return this.equals((saveCandidateRemark_result)that);
      return false;
    }

    public boolean equals(saveCandidateRemark_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(saveCandidateRemark_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("saveCandidateRemark_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveCandidateRemark_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveCandidateRemark_resultStandardScheme getScheme() {
        return new saveCandidateRemark_resultStandardScheme();
      }
    }

    private static class saveCandidateRemark_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveCandidateRemark_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveCandidateRemark_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.dao.struct.CURDException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveCandidateRemark_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveCandidateRemark_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveCandidateRemark_resultTupleScheme getScheme() {
        return new saveCandidateRemark_resultTupleScheme();
      }
    }

    private static class saveCandidateRemark_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveCandidateRemark_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveCandidateRemark_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveCandidateRemark_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.dao.struct.CURDException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateCandidateRemark_args implements org.apache.thrift.TBase<updateCandidateRemark_args, updateCandidateRemark_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateCandidateRemark_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCandidateRemark_args");

    private static final org.apache.thrift.protocol.TField CANDIDATE_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("candidateRemark", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateCandidateRemark_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateCandidateRemark_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO candidateRemark; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CANDIDATE_REMARK((short)1, "candidateRemark");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CANDIDATE_REMARK
            return CANDIDATE_REMARK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CANDIDATE_REMARK, new org.apache.thrift.meta_data.FieldMetaData("candidateRemark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCandidateRemark_args.class, metaDataMap);
    }

    public updateCandidateRemark_args() {
    }

    public updateCandidateRemark_args(
      com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO candidateRemark)
    {
      this();
      this.candidateRemark = candidateRemark;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCandidateRemark_args(updateCandidateRemark_args other) {
      if (other.isSetCandidateRemark()) {
        this.candidateRemark = new com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO(other.candidateRemark);
      }
    }

    public updateCandidateRemark_args deepCopy() {
      return new updateCandidateRemark_args(this);
    }

    @Override
    public void clear() {
      this.candidateRemark = null;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO getCandidateRemark() {
      return this.candidateRemark;
    }

    public updateCandidateRemark_args setCandidateRemark(com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO candidateRemark) {
      this.candidateRemark = candidateRemark;
      return this;
    }

    public void unsetCandidateRemark() {
      this.candidateRemark = null;
    }

    /** Returns true if field candidateRemark is set (has been assigned a value) and false otherwise */
    public boolean isSetCandidateRemark() {
      return this.candidateRemark != null;
    }

    public void setCandidateRemarkIsSet(boolean value) {
      if (!value) {
        this.candidateRemark = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CANDIDATE_REMARK:
        if (value == null) {
          unsetCandidateRemark();
        } else {
          setCandidateRemark((com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CANDIDATE_REMARK:
        return getCandidateRemark();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CANDIDATE_REMARK:
        return isSetCandidateRemark();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCandidateRemark_args)
        return this.equals((updateCandidateRemark_args)that);
      return false;
    }

    public boolean equals(updateCandidateRemark_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_candidateRemark = true && this.isSetCandidateRemark();
      boolean that_present_candidateRemark = true && that.isSetCandidateRemark();
      if (this_present_candidateRemark || that_present_candidateRemark) {
        if (!(this_present_candidateRemark && that_present_candidateRemark))
          return false;
        if (!this.candidateRemark.equals(that.candidateRemark))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCandidateRemark()) ? 131071 : 524287);
      if (isSetCandidateRemark())
        hashCode = hashCode * 8191 + candidateRemark.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateCandidateRemark_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCandidateRemark()).compareTo(other.isSetCandidateRemark());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCandidateRemark()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.candidateRemark, other.candidateRemark);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateCandidateRemark_args(");
      boolean first = true;

      sb.append("candidateRemark:");
      if (this.candidateRemark == null) {
        sb.append("null");
      } else {
        sb.append(this.candidateRemark);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (candidateRemark != null) {
        candidateRemark.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCandidateRemark_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateCandidateRemark_argsStandardScheme getScheme() {
        return new updateCandidateRemark_argsStandardScheme();
      }
    }

    private static class updateCandidateRemark_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateCandidateRemark_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCandidateRemark_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CANDIDATE_REMARK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.candidateRemark = new com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO();
                struct.candidateRemark.read(iprot);
                struct.setCandidateRemarkIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCandidateRemark_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.candidateRemark != null) {
          oprot.writeFieldBegin(CANDIDATE_REMARK_FIELD_DESC);
          struct.candidateRemark.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCandidateRemark_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateCandidateRemark_argsTupleScheme getScheme() {
        return new updateCandidateRemark_argsTupleScheme();
      }
    }

    private static class updateCandidateRemark_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateCandidateRemark_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCandidateRemark_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCandidateRemark()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCandidateRemark()) {
          struct.candidateRemark.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCandidateRemark_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.candidateRemark = new com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO();
          struct.candidateRemark.read(iprot);
          struct.setCandidateRemarkIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateCandidateRemark_result implements org.apache.thrift.TBase<updateCandidateRemark_result, updateCandidateRemark_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateCandidateRemark_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCandidateRemark_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateCandidateRemark_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateCandidateRemark_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO success; // required
    public com.moseeker.thrift.gen.dao.struct.CURDException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CURDException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCandidateRemark_result.class, metaDataMap);
    }

    public updateCandidateRemark_result() {
    }

    public updateCandidateRemark_result(
      com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO success,
      com.moseeker.thrift.gen.dao.struct.CURDException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCandidateRemark_result(updateCandidateRemark_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.dao.struct.CURDException(other.e);
      }
    }

    public updateCandidateRemark_result deepCopy() {
      return new updateCandidateRemark_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO getSuccess() {
      return this.success;
    }

    public updateCandidateRemark_result setSuccess(com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.dao.struct.CURDException getE() {
      return this.e;
    }

    public updateCandidateRemark_result setE(com.moseeker.thrift.gen.dao.struct.CURDException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.dao.struct.CURDException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCandidateRemark_result)
        return this.equals((updateCandidateRemark_result)that);
      return false;
    }

    public boolean equals(updateCandidateRemark_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateCandidateRemark_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateCandidateRemark_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCandidateRemark_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateCandidateRemark_resultStandardScheme getScheme() {
        return new updateCandidateRemark_resultStandardScheme();
      }
    }

    private static class updateCandidateRemark_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateCandidateRemark_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCandidateRemark_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.dao.struct.CURDException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCandidateRemark_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCandidateRemark_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateCandidateRemark_resultTupleScheme getScheme() {
        return new updateCandidateRemark_resultTupleScheme();
      }
    }

    private static class updateCandidateRemark_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateCandidateRemark_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCandidateRemark_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCandidateRemark_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.dao.struct.CURDException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateCandidateRemarks_args implements org.apache.thrift.TBase<updateCandidateRemarks_args, updateCandidateRemarks_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateCandidateRemarks_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCandidateRemarks_args");

    private static final org.apache.thrift.protocol.TField CANDIDATE_REMARKS_FIELD_DESC = new org.apache.thrift.protocol.TField("candidateRemarks", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateCandidateRemarks_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateCandidateRemarks_argsTupleSchemeFactory();

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> candidateRemarks; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CANDIDATE_REMARKS((short)1, "candidateRemarks");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CANDIDATE_REMARKS
            return CANDIDATE_REMARKS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CANDIDATE_REMARKS, new org.apache.thrift.meta_data.FieldMetaData("candidateRemarks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCandidateRemarks_args.class, metaDataMap);
    }

    public updateCandidateRemarks_args() {
    }

    public updateCandidateRemarks_args(
      java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> candidateRemarks)
    {
      this();
      this.candidateRemarks = candidateRemarks;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCandidateRemarks_args(updateCandidateRemarks_args other) {
      if (other.isSetCandidateRemarks()) {
        java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> __this__candidateRemarks = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>(other.candidateRemarks.size());
        for (com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO other_element : other.candidateRemarks) {
          __this__candidateRemarks.add(new com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO(other_element));
        }
        this.candidateRemarks = __this__candidateRemarks;
      }
    }

    public updateCandidateRemarks_args deepCopy() {
      return new updateCandidateRemarks_args(this);
    }

    @Override
    public void clear() {
      this.candidateRemarks = null;
    }

    public int getCandidateRemarksSize() {
      return (this.candidateRemarks == null) ? 0 : this.candidateRemarks.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> getCandidateRemarksIterator() {
      return (this.candidateRemarks == null) ? null : this.candidateRemarks.iterator();
    }

    public void addToCandidateRemarks(com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO elem) {
      if (this.candidateRemarks == null) {
        this.candidateRemarks = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>();
      }
      this.candidateRemarks.add(elem);
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> getCandidateRemarks() {
      return this.candidateRemarks;
    }

    public updateCandidateRemarks_args setCandidateRemarks(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> candidateRemarks) {
      this.candidateRemarks = candidateRemarks;
      return this;
    }

    public void unsetCandidateRemarks() {
      this.candidateRemarks = null;
    }

    /** Returns true if field candidateRemarks is set (has been assigned a value) and false otherwise */
    public boolean isSetCandidateRemarks() {
      return this.candidateRemarks != null;
    }

    public void setCandidateRemarksIsSet(boolean value) {
      if (!value) {
        this.candidateRemarks = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CANDIDATE_REMARKS:
        if (value == null) {
          unsetCandidateRemarks();
        } else {
          setCandidateRemarks((java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CANDIDATE_REMARKS:
        return getCandidateRemarks();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CANDIDATE_REMARKS:
        return isSetCandidateRemarks();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCandidateRemarks_args)
        return this.equals((updateCandidateRemarks_args)that);
      return false;
    }

    public boolean equals(updateCandidateRemarks_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_candidateRemarks = true && this.isSetCandidateRemarks();
      boolean that_present_candidateRemarks = true && that.isSetCandidateRemarks();
      if (this_present_candidateRemarks || that_present_candidateRemarks) {
        if (!(this_present_candidateRemarks && that_present_candidateRemarks))
          return false;
        if (!this.candidateRemarks.equals(that.candidateRemarks))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCandidateRemarks()) ? 131071 : 524287);
      if (isSetCandidateRemarks())
        hashCode = hashCode * 8191 + candidateRemarks.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateCandidateRemarks_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCandidateRemarks()).compareTo(other.isSetCandidateRemarks());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCandidateRemarks()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.candidateRemarks, other.candidateRemarks);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateCandidateRemarks_args(");
      boolean first = true;

      sb.append("candidateRemarks:");
      if (this.candidateRemarks == null) {
        sb.append("null");
      } else {
        sb.append(this.candidateRemarks);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCandidateRemarks_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateCandidateRemarks_argsStandardScheme getScheme() {
        return new updateCandidateRemarks_argsStandardScheme();
      }
    }

    private static class updateCandidateRemarks_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateCandidateRemarks_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCandidateRemarks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CANDIDATE_REMARKS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.candidateRemarks = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>(_list8.size);
                  com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO();
                    _elem9.read(iprot);
                    struct.candidateRemarks.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setCandidateRemarksIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCandidateRemarks_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.candidateRemarks != null) {
          oprot.writeFieldBegin(CANDIDATE_REMARKS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.candidateRemarks.size()));
            for (com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO _iter11 : struct.candidateRemarks)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCandidateRemarks_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateCandidateRemarks_argsTupleScheme getScheme() {
        return new updateCandidateRemarks_argsTupleScheme();
      }
    }

    private static class updateCandidateRemarks_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateCandidateRemarks_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCandidateRemarks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCandidateRemarks()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCandidateRemarks()) {
          {
            oprot.writeI32(struct.candidateRemarks.size());
            for (com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO _iter12 : struct.candidateRemarks)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCandidateRemarks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.candidateRemarks = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>(_list13.size);
            com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO();
              _elem14.read(iprot);
              struct.candidateRemarks.add(_elem14);
            }
          }
          struct.setCandidateRemarksIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateCandidateRemarks_result implements org.apache.thrift.TBase<updateCandidateRemarks_result, updateCandidateRemarks_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateCandidateRemarks_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCandidateRemarks_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateCandidateRemarks_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateCandidateRemarks_resultTupleSchemeFactory();

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> success; // required
    public com.moseeker.thrift.gen.dao.struct.CURDException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CURDException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCandidateRemarks_result.class, metaDataMap);
    }

    public updateCandidateRemarks_result() {
    }

    public updateCandidateRemarks_result(
      java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> success,
      com.moseeker.thrift.gen.dao.struct.CURDException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCandidateRemarks_result(updateCandidateRemarks_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> __this__success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>(other.success.size());
        for (com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO other_element : other.success) {
          __this__success.add(new com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.dao.struct.CURDException(other.e);
      }
    }

    public updateCandidateRemarks_result deepCopy() {
      return new updateCandidateRemarks_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> getSuccess() {
      return this.success;
    }

    public updateCandidateRemarks_result setSuccess(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.dao.struct.CURDException getE() {
      return this.e;
    }

    public updateCandidateRemarks_result setE(com.moseeker.thrift.gen.dao.struct.CURDException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.dao.struct.CURDException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCandidateRemarks_result)
        return this.equals((updateCandidateRemarks_result)that);
      return false;
    }

    public boolean equals(updateCandidateRemarks_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateCandidateRemarks_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateCandidateRemarks_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCandidateRemarks_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateCandidateRemarks_resultStandardScheme getScheme() {
        return new updateCandidateRemarks_resultStandardScheme();
      }
    }

    private static class updateCandidateRemarks_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateCandidateRemarks_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCandidateRemarks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>(_list16.size);
                  com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.dao.struct.CURDException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCandidateRemarks_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCandidateRemarks_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateCandidateRemarks_resultTupleScheme getScheme() {
        return new updateCandidateRemarks_resultTupleScheme();
      }
    }

    private static class updateCandidateRemarks_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateCandidateRemarks_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCandidateRemarks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCandidateRemarks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO>(_list21.size);
            com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new com.moseeker.thrift.gen.dao.struct.CandidateRemarkDO();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.dao.struct.CURDException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteCandidateRemark_args implements org.apache.thrift.TBase<deleteCandidateRemark_args, deleteCandidateRemark_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteCandidateRemark_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCandidateRemark_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteCandidateRemark_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteCandidateRemark_argsTupleSchemeFactory();

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCandidateRemark_args.class, metaDataMap);
    }

    public deleteCandidateRemark_args() {
    }

    public deleteCandidateRemark_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteCandidateRemark_args(deleteCandidateRemark_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public deleteCandidateRemark_args deepCopy() {
      return new deleteCandidateRemark_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public deleteCandidateRemark_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteCandidateRemark_args)
        return this.equals((deleteCandidateRemark_args)that);
      return false;
    }

    public boolean equals(deleteCandidateRemark_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + id;

      return hashCode;
    }

    @Override
    public int compareTo(deleteCandidateRemark_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteCandidateRemark_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteCandidateRemark_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteCandidateRemark_argsStandardScheme getScheme() {
        return new deleteCandidateRemark_argsStandardScheme();
      }
    }

    private static class deleteCandidateRemark_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteCandidateRemark_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCandidateRemark_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCandidateRemark_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteCandidateRemark_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteCandidateRemark_argsTupleScheme getScheme() {
        return new deleteCandidateRemark_argsTupleScheme();
      }
    }

    private static class deleteCandidateRemark_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteCandidateRemark_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteCandidateRemark_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteCandidateRemark_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteCandidateRemark_result implements org.apache.thrift.TBase<deleteCandidateRemark_result, deleteCandidateRemark_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteCandidateRemark_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCandidateRemark_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteCandidateRemark_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteCandidateRemark_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.CURDException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CURDException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCandidateRemark_result.class, metaDataMap);
    }

    public deleteCandidateRemark_result() {
    }

    public deleteCandidateRemark_result(
      com.moseeker.thrift.gen.dao.struct.CURDException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteCandidateRemark_result(deleteCandidateRemark_result other) {
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.dao.struct.CURDException(other.e);
      }
    }

    public deleteCandidateRemark_result deepCopy() {
      return new deleteCandidateRemark_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public com.moseeker.thrift.gen.dao.struct.CURDException getE() {
      return this.e;
    }

    public deleteCandidateRemark_result setE(com.moseeker.thrift.gen.dao.struct.CURDException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.dao.struct.CURDException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteCandidateRemark_result)
        return this.equals((deleteCandidateRemark_result)that);
      return false;
    }

    public boolean equals(deleteCandidateRemark_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteCandidateRemark_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteCandidateRemark_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteCandidateRemark_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteCandidateRemark_resultStandardScheme getScheme() {
        return new deleteCandidateRemark_resultStandardScheme();
      }
    }

    private static class deleteCandidateRemark_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteCandidateRemark_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCandidateRemark_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.dao.struct.CURDException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCandidateRemark_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteCandidateRemark_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteCandidateRemark_resultTupleScheme getScheme() {
        return new deleteCandidateRemark_resultTupleScheme();
      }
    }

    private static class deleteCandidateRemark_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteCandidateRemark_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteCandidateRemark_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteCandidateRemark_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new com.moseeker.thrift.gen.dao.struct.CURDException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCandidateCompany_args implements org.apache.thrift.TBase<getCandidateCompany_args, getCandidateCompany_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCandidateCompany_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCandidateCompany_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCandidateCompany_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCandidateCompany_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.CommonQuery query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.CommonQuery.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCandidateCompany_args.class, metaDataMap);
    }

    public getCandidateCompany_args() {
    }

    public getCandidateCompany_args(
      com.moseeker.thrift.gen.common.struct.CommonQuery query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCandidateCompany_args(getCandidateCompany_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.common.struct.CommonQuery(other.query);
      }
    }

    public getCandidateCompany_args deepCopy() {
      return new getCandidateCompany_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public com.moseeker.thrift.gen.common.struct.CommonQuery getQuery() {
      return this.query;
    }

    public getCandidateCompany_args setQuery(com.moseeker.thrift.gen.common.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.common.struct.CommonQuery)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCandidateCompany_args)
        return this.equals((getCandidateCompany_args)that);
      return false;
    }

    public boolean equals(getCandidateCompany_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCandidateCompany_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCandidateCompany_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCandidateCompany_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCandidateCompany_argsStandardScheme getScheme() {
        return new getCandidateCompany_argsStandardScheme();
      }
    }

    private static class getCandidateCompany_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCandidateCompany_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCandidateCompany_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCandidateCompany_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCandidateCompany_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCandidateCompany_argsTupleScheme getScheme() {
        return new getCandidateCompany_argsTupleScheme();
      }
    }

    private static class getCandidateCompany_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCandidateCompany_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCandidateCompany_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCandidateCompany_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCandidateCompany_result implements org.apache.thrift.TBase<getCandidateCompany_result, getCandidateCompany_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCandidateCompany_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCandidateCompany_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCandidateCompany_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCandidateCompany_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCandidateCompany_result.class, metaDataMap);
    }

    public getCandidateCompany_result() {
    }

    public getCandidateCompany_result(
      com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCandidateCompany_result(getCandidateCompany_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO(other.success);
      }
    }

    public getCandidateCompany_result deepCopy() {
      return new getCandidateCompany_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO getSuccess() {
      return this.success;
    }

    public getCandidateCompany_result setSuccess(com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCandidateCompany_result)
        return this.equals((getCandidateCompany_result)that);
      return false;
    }

    public boolean equals(getCandidateCompany_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCandidateCompany_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCandidateCompany_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCandidateCompany_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCandidateCompany_resultStandardScheme getScheme() {
        return new getCandidateCompany_resultStandardScheme();
      }
    }

    private static class getCandidateCompany_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCandidateCompany_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCandidateCompany_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCandidateCompany_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCandidateCompany_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCandidateCompany_resultTupleScheme getScheme() {
        return new getCandidateCompany_resultTupleScheme();
      }
    }

    private static class getCandidateCompany_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCandidateCompany_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCandidateCompany_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCandidateCompany_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listCandidateCompanys_args implements org.apache.thrift.TBase<listCandidateCompanys_args, listCandidateCompanys_args._Fields>, java.io.Serializable, Cloneable, Comparable<listCandidateCompanys_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCandidateCompanys_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listCandidateCompanys_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listCandidateCompanys_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.CommonQuery query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.CommonQuery.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCandidateCompanys_args.class, metaDataMap);
    }

    public listCandidateCompanys_args() {
    }

    public listCandidateCompanys_args(
      com.moseeker.thrift.gen.common.struct.CommonQuery query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCandidateCompanys_args(listCandidateCompanys_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.common.struct.CommonQuery(other.query);
      }
    }

    public listCandidateCompanys_args deepCopy() {
      return new listCandidateCompanys_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public com.moseeker.thrift.gen.common.struct.CommonQuery getQuery() {
      return this.query;
    }

    public listCandidateCompanys_args setQuery(com.moseeker.thrift.gen.common.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.common.struct.CommonQuery)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listCandidateCompanys_args)
        return this.equals((listCandidateCompanys_args)that);
      return false;
    }

    public boolean equals(listCandidateCompanys_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listCandidateCompanys_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listCandidateCompanys_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCandidateCompanys_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateCompanys_argsStandardScheme getScheme() {
        return new listCandidateCompanys_argsStandardScheme();
      }
    }

    private static class listCandidateCompanys_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listCandidateCompanys_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCandidateCompanys_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCandidateCompanys_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCandidateCompanys_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateCompanys_argsTupleScheme getScheme() {
        return new listCandidateCompanys_argsTupleScheme();
      }
    }

    private static class listCandidateCompanys_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listCandidateCompanys_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCandidateCompanys_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCandidateCompanys_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listCandidateCompanys_result implements org.apache.thrift.TBase<listCandidateCompanys_result, listCandidateCompanys_result._Fields>, java.io.Serializable, Cloneable, Comparable<listCandidateCompanys_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCandidateCompanys_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listCandidateCompanys_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listCandidateCompanys_resultTupleSchemeFactory();

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCandidateCompanys_result.class, metaDataMap);
    }

    public listCandidateCompanys_result() {
    }

    public listCandidateCompanys_result(
      java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCandidateCompanys_result(listCandidateCompanys_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO> __this__success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO>(other.success.size());
        for (com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO other_element : other.success) {
          __this__success.add(new com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO(other_element));
        }
        this.success = __this__success;
      }
    }

    public listCandidateCompanys_result deepCopy() {
      return new listCandidateCompanys_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO> getSuccess() {
      return this.success;
    }

    public listCandidateCompanys_result setSuccess(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listCandidateCompanys_result)
        return this.equals((listCandidateCompanys_result)that);
      return false;
    }

    public boolean equals(listCandidateCompanys_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listCandidateCompanys_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listCandidateCompanys_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCandidateCompanys_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateCompanys_resultStandardScheme getScheme() {
        return new listCandidateCompanys_resultStandardScheme();
      }
    }

    private static class listCandidateCompanys_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listCandidateCompanys_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCandidateCompanys_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO>(_list24.size);
                  com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCandidateCompanys_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCandidateCompanys_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateCompanys_resultTupleScheme getScheme() {
        return new listCandidateCompanys_resultTupleScheme();
      }
    }

    private static class listCandidateCompanys_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listCandidateCompanys_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCandidateCompanys_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCandidateCompanys_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO>(_list29.size);
            com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saveCandidateCompanys_args implements org.apache.thrift.TBase<saveCandidateCompanys_args, saveCandidateCompanys_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveCandidateCompanys_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveCandidateCompanys_args");

    private static final org.apache.thrift.protocol.TField CANDIDATE_COMPANY_FIELD_DESC = new org.apache.thrift.protocol.TField("candidateCompany", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveCandidateCompanys_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveCandidateCompanys_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO candidateCompany; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CANDIDATE_COMPANY((short)1, "candidateCompany");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CANDIDATE_COMPANY
            return CANDIDATE_COMPANY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CANDIDATE_COMPANY, new org.apache.thrift.meta_data.FieldMetaData("candidateCompany", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveCandidateCompanys_args.class, metaDataMap);
    }

    public saveCandidateCompanys_args() {
    }

    public saveCandidateCompanys_args(
      com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO candidateCompany)
    {
      this();
      this.candidateCompany = candidateCompany;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveCandidateCompanys_args(saveCandidateCompanys_args other) {
      if (other.isSetCandidateCompany()) {
        this.candidateCompany = new com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO(other.candidateCompany);
      }
    }

    public saveCandidateCompanys_args deepCopy() {
      return new saveCandidateCompanys_args(this);
    }

    @Override
    public void clear() {
      this.candidateCompany = null;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO getCandidateCompany() {
      return this.candidateCompany;
    }

    public saveCandidateCompanys_args setCandidateCompany(com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO candidateCompany) {
      this.candidateCompany = candidateCompany;
      return this;
    }

    public void unsetCandidateCompany() {
      this.candidateCompany = null;
    }

    /** Returns true if field candidateCompany is set (has been assigned a value) and false otherwise */
    public boolean isSetCandidateCompany() {
      return this.candidateCompany != null;
    }

    public void setCandidateCompanyIsSet(boolean value) {
      if (!value) {
        this.candidateCompany = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CANDIDATE_COMPANY:
        if (value == null) {
          unsetCandidateCompany();
        } else {
          setCandidateCompany((com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CANDIDATE_COMPANY:
        return getCandidateCompany();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CANDIDATE_COMPANY:
        return isSetCandidateCompany();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof saveCandidateCompanys_args)
        return this.equals((saveCandidateCompanys_args)that);
      return false;
    }

    public boolean equals(saveCandidateCompanys_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_candidateCompany = true && this.isSetCandidateCompany();
      boolean that_present_candidateCompany = true && that.isSetCandidateCompany();
      if (this_present_candidateCompany || that_present_candidateCompany) {
        if (!(this_present_candidateCompany && that_present_candidateCompany))
          return false;
        if (!this.candidateCompany.equals(that.candidateCompany))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCandidateCompany()) ? 131071 : 524287);
      if (isSetCandidateCompany())
        hashCode = hashCode * 8191 + candidateCompany.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(saveCandidateCompanys_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCandidateCompany()).compareTo(other.isSetCandidateCompany());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCandidateCompany()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.candidateCompany, other.candidateCompany);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("saveCandidateCompanys_args(");
      boolean first = true;

      sb.append("candidateCompany:");
      if (this.candidateCompany == null) {
        sb.append("null");
      } else {
        sb.append(this.candidateCompany);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (candidateCompany != null) {
        candidateCompany.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveCandidateCompanys_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveCandidateCompanys_argsStandardScheme getScheme() {
        return new saveCandidateCompanys_argsStandardScheme();
      }
    }

    private static class saveCandidateCompanys_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveCandidateCompanys_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveCandidateCompanys_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CANDIDATE_COMPANY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.candidateCompany = new com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO();
                struct.candidateCompany.read(iprot);
                struct.setCandidateCompanyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveCandidateCompanys_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.candidateCompany != null) {
          oprot.writeFieldBegin(CANDIDATE_COMPANY_FIELD_DESC);
          struct.candidateCompany.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveCandidateCompanys_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveCandidateCompanys_argsTupleScheme getScheme() {
        return new saveCandidateCompanys_argsTupleScheme();
      }
    }

    private static class saveCandidateCompanys_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveCandidateCompanys_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveCandidateCompanys_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCandidateCompany()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCandidateCompany()) {
          struct.candidateCompany.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveCandidateCompanys_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.candidateCompany = new com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO();
          struct.candidateCompany.read(iprot);
          struct.setCandidateCompanyIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saveCandidateCompanys_result implements org.apache.thrift.TBase<saveCandidateCompanys_result, saveCandidateCompanys_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveCandidateCompanys_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveCandidateCompanys_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveCandidateCompanys_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveCandidateCompanys_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveCandidateCompanys_result.class, metaDataMap);
    }

    public saveCandidateCompanys_result() {
    }

    public saveCandidateCompanys_result(
      com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveCandidateCompanys_result(saveCandidateCompanys_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO(other.success);
      }
    }

    public saveCandidateCompanys_result deepCopy() {
      return new saveCandidateCompanys_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO getSuccess() {
      return this.success;
    }

    public saveCandidateCompanys_result setSuccess(com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof saveCandidateCompanys_result)
        return this.equals((saveCandidateCompanys_result)that);
      return false;
    }

    public boolean equals(saveCandidateCompanys_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(saveCandidateCompanys_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("saveCandidateCompanys_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveCandidateCompanys_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveCandidateCompanys_resultStandardScheme getScheme() {
        return new saveCandidateCompanys_resultStandardScheme();
      }
    }

    private static class saveCandidateCompanys_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveCandidateCompanys_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveCandidateCompanys_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveCandidateCompanys_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveCandidateCompanys_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveCandidateCompanys_resultTupleScheme getScheme() {
        return new saveCandidateCompanys_resultTupleScheme();
      }
    }

    private static class saveCandidateCompanys_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveCandidateCompanys_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveCandidateCompanys_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveCandidateCompanys_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateCandidateCompanys_args implements org.apache.thrift.TBase<updateCandidateCompanys_args, updateCandidateCompanys_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateCandidateCompanys_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCandidateCompanys_args");

    private static final org.apache.thrift.protocol.TField CANDIDATE_COMPANY_FIELD_DESC = new org.apache.thrift.protocol.TField("candidateCompany", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateCandidateCompanys_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateCandidateCompanys_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO candidateCompany; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CANDIDATE_COMPANY((short)1, "candidateCompany");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CANDIDATE_COMPANY
            return CANDIDATE_COMPANY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CANDIDATE_COMPANY, new org.apache.thrift.meta_data.FieldMetaData("candidateCompany", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCandidateCompanys_args.class, metaDataMap);
    }

    public updateCandidateCompanys_args() {
    }

    public updateCandidateCompanys_args(
      com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO candidateCompany)
    {
      this();
      this.candidateCompany = candidateCompany;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCandidateCompanys_args(updateCandidateCompanys_args other) {
      if (other.isSetCandidateCompany()) {
        this.candidateCompany = new com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO(other.candidateCompany);
      }
    }

    public updateCandidateCompanys_args deepCopy() {
      return new updateCandidateCompanys_args(this);
    }

    @Override
    public void clear() {
      this.candidateCompany = null;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO getCandidateCompany() {
      return this.candidateCompany;
    }

    public updateCandidateCompanys_args setCandidateCompany(com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO candidateCompany) {
      this.candidateCompany = candidateCompany;
      return this;
    }

    public void unsetCandidateCompany() {
      this.candidateCompany = null;
    }

    /** Returns true if field candidateCompany is set (has been assigned a value) and false otherwise */
    public boolean isSetCandidateCompany() {
      return this.candidateCompany != null;
    }

    public void setCandidateCompanyIsSet(boolean value) {
      if (!value) {
        this.candidateCompany = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CANDIDATE_COMPANY:
        if (value == null) {
          unsetCandidateCompany();
        } else {
          setCandidateCompany((com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CANDIDATE_COMPANY:
        return getCandidateCompany();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CANDIDATE_COMPANY:
        return isSetCandidateCompany();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCandidateCompanys_args)
        return this.equals((updateCandidateCompanys_args)that);
      return false;
    }

    public boolean equals(updateCandidateCompanys_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_candidateCompany = true && this.isSetCandidateCompany();
      boolean that_present_candidateCompany = true && that.isSetCandidateCompany();
      if (this_present_candidateCompany || that_present_candidateCompany) {
        if (!(this_present_candidateCompany && that_present_candidateCompany))
          return false;
        if (!this.candidateCompany.equals(that.candidateCompany))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCandidateCompany()) ? 131071 : 524287);
      if (isSetCandidateCompany())
        hashCode = hashCode * 8191 + candidateCompany.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateCandidateCompanys_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCandidateCompany()).compareTo(other.isSetCandidateCompany());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCandidateCompany()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.candidateCompany, other.candidateCompany);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateCandidateCompanys_args(");
      boolean first = true;

      sb.append("candidateCompany:");
      if (this.candidateCompany == null) {
        sb.append("null");
      } else {
        sb.append(this.candidateCompany);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (candidateCompany != null) {
        candidateCompany.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCandidateCompanys_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateCandidateCompanys_argsStandardScheme getScheme() {
        return new updateCandidateCompanys_argsStandardScheme();
      }
    }

    private static class updateCandidateCompanys_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateCandidateCompanys_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCandidateCompanys_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CANDIDATE_COMPANY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.candidateCompany = new com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO();
                struct.candidateCompany.read(iprot);
                struct.setCandidateCompanyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCandidateCompanys_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.candidateCompany != null) {
          oprot.writeFieldBegin(CANDIDATE_COMPANY_FIELD_DESC);
          struct.candidateCompany.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCandidateCompanys_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateCandidateCompanys_argsTupleScheme getScheme() {
        return new updateCandidateCompanys_argsTupleScheme();
      }
    }

    private static class updateCandidateCompanys_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateCandidateCompanys_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCandidateCompanys_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCandidateCompany()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCandidateCompany()) {
          struct.candidateCompany.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCandidateCompanys_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.candidateCompany = new com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO();
          struct.candidateCompany.read(iprot);
          struct.setCandidateCompanyIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateCandidateCompanys_result implements org.apache.thrift.TBase<updateCandidateCompanys_result, updateCandidateCompanys_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateCandidateCompanys_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCandidateCompanys_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateCandidateCompanys_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateCandidateCompanys_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCandidateCompanys_result.class, metaDataMap);
    }

    public updateCandidateCompanys_result() {
    }

    public updateCandidateCompanys_result(
      com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCandidateCompanys_result(updateCandidateCompanys_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO(other.success);
      }
    }

    public updateCandidateCompanys_result deepCopy() {
      return new updateCandidateCompanys_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO getSuccess() {
      return this.success;
    }

    public updateCandidateCompanys_result setSuccess(com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCandidateCompanys_result)
        return this.equals((updateCandidateCompanys_result)that);
      return false;
    }

    public boolean equals(updateCandidateCompanys_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateCandidateCompanys_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateCandidateCompanys_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCandidateCompanys_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateCandidateCompanys_resultStandardScheme getScheme() {
        return new updateCandidateCompanys_resultStandardScheme();
      }
    }

    private static class updateCandidateCompanys_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateCandidateCompanys_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCandidateCompanys_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCandidateCompanys_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCandidateCompanys_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateCandidateCompanys_resultTupleScheme getScheme() {
        return new updateCandidateCompanys_resultTupleScheme();
      }
    }

    private static class updateCandidateCompanys_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateCandidateCompanys_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCandidateCompanys_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCandidateCompanys_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.dao.struct.CandidateCompanyDO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteCandidateCompany_args implements org.apache.thrift.TBase<deleteCandidateCompany_args, deleteCandidateCompany_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteCandidateCompany_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCandidateCompany_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteCandidateCompany_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteCandidateCompany_argsTupleSchemeFactory();

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCandidateCompany_args.class, metaDataMap);
    }

    public deleteCandidateCompany_args() {
    }

    public deleteCandidateCompany_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteCandidateCompany_args(deleteCandidateCompany_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public deleteCandidateCompany_args deepCopy() {
      return new deleteCandidateCompany_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public deleteCandidateCompany_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteCandidateCompany_args)
        return this.equals((deleteCandidateCompany_args)that);
      return false;
    }

    public boolean equals(deleteCandidateCompany_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + id;

      return hashCode;
    }

    @Override
    public int compareTo(deleteCandidateCompany_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteCandidateCompany_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteCandidateCompany_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteCandidateCompany_argsStandardScheme getScheme() {
        return new deleteCandidateCompany_argsStandardScheme();
      }
    }

    private static class deleteCandidateCompany_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteCandidateCompany_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCandidateCompany_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCandidateCompany_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteCandidateCompany_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteCandidateCompany_argsTupleScheme getScheme() {
        return new deleteCandidateCompany_argsTupleScheme();
      }
    }

    private static class deleteCandidateCompany_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteCandidateCompany_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteCandidateCompany_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteCandidateCompany_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteCandidateCompany_result implements org.apache.thrift.TBase<deleteCandidateCompany_result, deleteCandidateCompany_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteCandidateCompany_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCandidateCompany_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteCandidateCompany_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteCandidateCompany_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCandidateCompany_result.class, metaDataMap);
    }

    public deleteCandidateCompany_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteCandidateCompany_result(deleteCandidateCompany_result other) {
    }

    public deleteCandidateCompany_result deepCopy() {
      return new deleteCandidateCompany_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteCandidateCompany_result)
        return this.equals((deleteCandidateCompany_result)that);
      return false;
    }

    public boolean equals(deleteCandidateCompany_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(deleteCandidateCompany_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteCandidateCompany_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteCandidateCompany_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteCandidateCompany_resultStandardScheme getScheme() {
        return new deleteCandidateCompany_resultStandardScheme();
      }
    }

    private static class deleteCandidateCompany_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteCandidateCompany_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCandidateCompany_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCandidateCompany_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteCandidateCompany_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteCandidateCompany_resultTupleScheme getScheme() {
        return new deleteCandidateCompany_resultTupleScheme();
      }
    }

    private static class deleteCandidateCompany_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteCandidateCompany_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteCandidateCompany_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteCandidateCompany_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCandidatePosition_args implements org.apache.thrift.TBase<getCandidatePosition_args, getCandidatePosition_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCandidatePosition_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCandidatePosition_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCandidatePosition_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCandidatePosition_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.CommonQuery query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.CommonQuery.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCandidatePosition_args.class, metaDataMap);
    }

    public getCandidatePosition_args() {
    }

    public getCandidatePosition_args(
      com.moseeker.thrift.gen.common.struct.CommonQuery query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCandidatePosition_args(getCandidatePosition_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.common.struct.CommonQuery(other.query);
      }
    }

    public getCandidatePosition_args deepCopy() {
      return new getCandidatePosition_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public com.moseeker.thrift.gen.common.struct.CommonQuery getQuery() {
      return this.query;
    }

    public getCandidatePosition_args setQuery(com.moseeker.thrift.gen.common.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.common.struct.CommonQuery)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCandidatePosition_args)
        return this.equals((getCandidatePosition_args)that);
      return false;
    }

    public boolean equals(getCandidatePosition_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCandidatePosition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCandidatePosition_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCandidatePosition_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCandidatePosition_argsStandardScheme getScheme() {
        return new getCandidatePosition_argsStandardScheme();
      }
    }

    private static class getCandidatePosition_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCandidatePosition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCandidatePosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCandidatePosition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCandidatePosition_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCandidatePosition_argsTupleScheme getScheme() {
        return new getCandidatePosition_argsTupleScheme();
      }
    }

    private static class getCandidatePosition_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCandidatePosition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCandidatePosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCandidatePosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCandidatePosition_result implements org.apache.thrift.TBase<getCandidatePosition_result, getCandidatePosition_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCandidatePosition_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCandidatePosition_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCandidatePosition_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCandidatePosition_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.CandidatePositionDO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidatePositionDO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCandidatePosition_result.class, metaDataMap);
    }

    public getCandidatePosition_result() {
    }

    public getCandidatePosition_result(
      com.moseeker.thrift.gen.dao.struct.CandidatePositionDO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCandidatePosition_result(getCandidatePosition_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.dao.struct.CandidatePositionDO(other.success);
      }
    }

    public getCandidatePosition_result deepCopy() {
      return new getCandidatePosition_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidatePositionDO getSuccess() {
      return this.success;
    }

    public getCandidatePosition_result setSuccess(com.moseeker.thrift.gen.dao.struct.CandidatePositionDO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.dao.struct.CandidatePositionDO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCandidatePosition_result)
        return this.equals((getCandidatePosition_result)that);
      return false;
    }

    public boolean equals(getCandidatePosition_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCandidatePosition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCandidatePosition_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCandidatePosition_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCandidatePosition_resultStandardScheme getScheme() {
        return new getCandidatePosition_resultStandardScheme();
      }
    }

    private static class getCandidatePosition_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCandidatePosition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCandidatePosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.dao.struct.CandidatePositionDO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCandidatePosition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCandidatePosition_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCandidatePosition_resultTupleScheme getScheme() {
        return new getCandidatePosition_resultTupleScheme();
      }
    }

    private static class getCandidatePosition_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCandidatePosition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCandidatePosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCandidatePosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.dao.struct.CandidatePositionDO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listCandidatePositions_args implements org.apache.thrift.TBase<listCandidatePositions_args, listCandidatePositions_args._Fields>, java.io.Serializable, Cloneable, Comparable<listCandidatePositions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCandidatePositions_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listCandidatePositions_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listCandidatePositions_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.CommonQuery query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.CommonQuery.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCandidatePositions_args.class, metaDataMap);
    }

    public listCandidatePositions_args() {
    }

    public listCandidatePositions_args(
      com.moseeker.thrift.gen.common.struct.CommonQuery query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCandidatePositions_args(listCandidatePositions_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.common.struct.CommonQuery(other.query);
      }
    }

    public listCandidatePositions_args deepCopy() {
      return new listCandidatePositions_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public com.moseeker.thrift.gen.common.struct.CommonQuery getQuery() {
      return this.query;
    }

    public listCandidatePositions_args setQuery(com.moseeker.thrift.gen.common.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.common.struct.CommonQuery)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listCandidatePositions_args)
        return this.equals((listCandidatePositions_args)that);
      return false;
    }

    public boolean equals(listCandidatePositions_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listCandidatePositions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listCandidatePositions_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCandidatePositions_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidatePositions_argsStandardScheme getScheme() {
        return new listCandidatePositions_argsStandardScheme();
      }
    }

    private static class listCandidatePositions_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listCandidatePositions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCandidatePositions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCandidatePositions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCandidatePositions_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidatePositions_argsTupleScheme getScheme() {
        return new listCandidatePositions_argsTupleScheme();
      }
    }

    private static class listCandidatePositions_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listCandidatePositions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCandidatePositions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCandidatePositions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listCandidatePositions_result implements org.apache.thrift.TBase<listCandidatePositions_result, listCandidatePositions_result._Fields>, java.io.Serializable, Cloneable, Comparable<listCandidatePositions_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCandidatePositions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listCandidatePositions_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listCandidatePositions_resultTupleSchemeFactory();

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidatePositionDO.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCandidatePositions_result.class, metaDataMap);
    }

    public listCandidatePositions_result() {
    }

    public listCandidatePositions_result(
      java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCandidatePositions_result(listCandidatePositions_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> __this__success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO>(other.success.size());
        for (com.moseeker.thrift.gen.dao.struct.CandidatePositionDO other_element : other.success) {
          __this__success.add(new com.moseeker.thrift.gen.dao.struct.CandidatePositionDO(other_element));
        }
        this.success = __this__success;
      }
    }

    public listCandidatePositions_result deepCopy() {
      return new listCandidatePositions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.moseeker.thrift.gen.dao.struct.CandidatePositionDO elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> getSuccess() {
      return this.success;
    }

    public listCandidatePositions_result setSuccess(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listCandidatePositions_result)
        return this.equals((listCandidatePositions_result)that);
      return false;
    }

    public boolean equals(listCandidatePositions_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listCandidatePositions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listCandidatePositions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCandidatePositions_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidatePositions_resultStandardScheme getScheme() {
        return new listCandidatePositions_resultStandardScheme();
      }
    }

    private static class listCandidatePositions_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listCandidatePositions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCandidatePositions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO>(_list32.size);
                  com.moseeker.thrift.gen.dao.struct.CandidatePositionDO _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new com.moseeker.thrift.gen.dao.struct.CandidatePositionDO();
                    _elem33.read(iprot);
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCandidatePositions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.moseeker.thrift.gen.dao.struct.CandidatePositionDO _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCandidatePositions_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidatePositions_resultTupleScheme getScheme() {
        return new listCandidatePositions_resultTupleScheme();
      }
    }

    private static class listCandidatePositions_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listCandidatePositions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCandidatePositions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.moseeker.thrift.gen.dao.struct.CandidatePositionDO _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCandidatePositions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO>(_list37.size);
            com.moseeker.thrift.gen.dao.struct.CandidatePositionDO _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new com.moseeker.thrift.gen.dao.struct.CandidatePositionDO();
              _elem38.read(iprot);
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listCandidatePositionsByPositionIDUserID_args implements org.apache.thrift.TBase<listCandidatePositionsByPositionIDUserID_args, listCandidatePositionsByPositionIDUserID_args._Fields>, java.io.Serializable, Cloneable, Comparable<listCandidatePositionsByPositionIDUserID_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCandidatePositionsByPositionIDUserID_args");

    private static final org.apache.thrift.protocol.TField COMPANY_POSITION_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("companyPositionIds", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listCandidatePositionsByPositionIDUserID_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listCandidatePositionsByPositionIDUserID_argsTupleSchemeFactory();

    public java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>> companyPositionIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPANY_POSITION_IDS((short)1, "companyPositionIds");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPANY_POSITION_IDS
            return COMPANY_POSITION_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPANY_POSITION_IDS, new org.apache.thrift.meta_data.FieldMetaData("companyPositionIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCandidatePositionsByPositionIDUserID_args.class, metaDataMap);
    }

    public listCandidatePositionsByPositionIDUserID_args() {
    }

    public listCandidatePositionsByPositionIDUserID_args(
      java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>> companyPositionIds)
    {
      this();
      this.companyPositionIds = companyPositionIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCandidatePositionsByPositionIDUserID_args(listCandidatePositionsByPositionIDUserID_args other) {
      if (other.isSetCompanyPositionIds()) {
        java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>> __this__companyPositionIds = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.lang.Integer>>(other.companyPositionIds.size());
        for (java.util.Map<java.lang.Integer,java.lang.Integer> other_element : other.companyPositionIds) {
          java.util.Map<java.lang.Integer,java.lang.Integer> __this__companyPositionIds_copy = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(other_element);
          __this__companyPositionIds.add(__this__companyPositionIds_copy);
        }
        this.companyPositionIds = __this__companyPositionIds;
      }
    }

    public listCandidatePositionsByPositionIDUserID_args deepCopy() {
      return new listCandidatePositionsByPositionIDUserID_args(this);
    }

    @Override
    public void clear() {
      this.companyPositionIds = null;
    }

    public int getCompanyPositionIdsSize() {
      return (this.companyPositionIds == null) ? 0 : this.companyPositionIds.size();
    }

    public java.util.Iterator<java.util.Map<java.lang.Integer,java.lang.Integer>> getCompanyPositionIdsIterator() {
      return (this.companyPositionIds == null) ? null : this.companyPositionIds.iterator();
    }

    public void addToCompanyPositionIds(java.util.Map<java.lang.Integer,java.lang.Integer> elem) {
      if (this.companyPositionIds == null) {
        this.companyPositionIds = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.lang.Integer>>();
      }
      this.companyPositionIds.add(elem);
    }

    public java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>> getCompanyPositionIds() {
      return this.companyPositionIds;
    }

    public listCandidatePositionsByPositionIDUserID_args setCompanyPositionIds(java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>> companyPositionIds) {
      this.companyPositionIds = companyPositionIds;
      return this;
    }

    public void unsetCompanyPositionIds() {
      this.companyPositionIds = null;
    }

    /** Returns true if field companyPositionIds is set (has been assigned a value) and false otherwise */
    public boolean isSetCompanyPositionIds() {
      return this.companyPositionIds != null;
    }

    public void setCompanyPositionIdsIsSet(boolean value) {
      if (!value) {
        this.companyPositionIds = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case COMPANY_POSITION_IDS:
        if (value == null) {
          unsetCompanyPositionIds();
        } else {
          setCompanyPositionIds((java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPANY_POSITION_IDS:
        return getCompanyPositionIds();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case COMPANY_POSITION_IDS:
        return isSetCompanyPositionIds();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listCandidatePositionsByPositionIDUserID_args)
        return this.equals((listCandidatePositionsByPositionIDUserID_args)that);
      return false;
    }

    public boolean equals(listCandidatePositionsByPositionIDUserID_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_companyPositionIds = true && this.isSetCompanyPositionIds();
      boolean that_present_companyPositionIds = true && that.isSetCompanyPositionIds();
      if (this_present_companyPositionIds || that_present_companyPositionIds) {
        if (!(this_present_companyPositionIds && that_present_companyPositionIds))
          return false;
        if (!this.companyPositionIds.equals(that.companyPositionIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCompanyPositionIds()) ? 131071 : 524287);
      if (isSetCompanyPositionIds())
        hashCode = hashCode * 8191 + companyPositionIds.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listCandidatePositionsByPositionIDUserID_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCompanyPositionIds()).compareTo(other.isSetCompanyPositionIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompanyPositionIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyPositionIds, other.companyPositionIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listCandidatePositionsByPositionIDUserID_args(");
      boolean first = true;

      sb.append("companyPositionIds:");
      if (this.companyPositionIds == null) {
        sb.append("null");
      } else {
        sb.append(this.companyPositionIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCandidatePositionsByPositionIDUserID_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidatePositionsByPositionIDUserID_argsStandardScheme getScheme() {
        return new listCandidatePositionsByPositionIDUserID_argsStandardScheme();
      }
    }

    private static class listCandidatePositionsByPositionIDUserID_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listCandidatePositionsByPositionIDUserID_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCandidatePositionsByPositionIDUserID_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPANY_POSITION_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.companyPositionIds = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.lang.Integer>>(_list40.size);
                  java.util.Map<java.lang.Integer,java.lang.Integer> _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    {
                      org.apache.thrift.protocol.TMap _map43 = iprot.readMapBegin();
                      _elem41 = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map43.size);
                      int _key44;
                      int _val45;
                      for (int _i46 = 0; _i46 < _map43.size; ++_i46)
                      {
                        _key44 = iprot.readI32();
                        _val45 = iprot.readI32();
                        _elem41.put(_key44, _val45);
                      }
                      iprot.readMapEnd();
                    }
                    struct.companyPositionIds.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setCompanyPositionIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCandidatePositionsByPositionIDUserID_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.companyPositionIds != null) {
          oprot.writeFieldBegin(COMPANY_POSITION_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.companyPositionIds.size()));
            for (java.util.Map<java.lang.Integer,java.lang.Integer> _iter47 : struct.companyPositionIds)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, _iter47.size()));
                for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter48 : _iter47.entrySet())
                {
                  oprot.writeI32(_iter48.getKey());
                  oprot.writeI32(_iter48.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCandidatePositionsByPositionIDUserID_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidatePositionsByPositionIDUserID_argsTupleScheme getScheme() {
        return new listCandidatePositionsByPositionIDUserID_argsTupleScheme();
      }
    }

    private static class listCandidatePositionsByPositionIDUserID_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listCandidatePositionsByPositionIDUserID_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCandidatePositionsByPositionIDUserID_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCompanyPositionIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCompanyPositionIds()) {
          {
            oprot.writeI32(struct.companyPositionIds.size());
            for (java.util.Map<java.lang.Integer,java.lang.Integer> _iter49 : struct.companyPositionIds)
            {
              {
                oprot.writeI32(_iter49.size());
                for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter50 : _iter49.entrySet())
                {
                  oprot.writeI32(_iter50.getKey());
                  oprot.writeI32(_iter50.getValue());
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCandidatePositionsByPositionIDUserID_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list51 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.companyPositionIds = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.lang.Integer>>(_list51.size);
            java.util.Map<java.lang.Integer,java.lang.Integer> _elem52;
            for (int _i53 = 0; _i53 < _list51.size; ++_i53)
            {
              {
                org.apache.thrift.protocol.TMap _map54 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
                _elem52 = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map54.size);
                int _key55;
                int _val56;
                for (int _i57 = 0; _i57 < _map54.size; ++_i57)
                {
                  _key55 = iprot.readI32();
                  _val56 = iprot.readI32();
                  _elem52.put(_key55, _val56);
                }
              }
              struct.companyPositionIds.add(_elem52);
            }
          }
          struct.setCompanyPositionIdsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listCandidatePositionsByPositionIDUserID_result implements org.apache.thrift.TBase<listCandidatePositionsByPositionIDUserID_result, listCandidatePositionsByPositionIDUserID_result._Fields>, java.io.Serializable, Cloneable, Comparable<listCandidatePositionsByPositionIDUserID_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCandidatePositionsByPositionIDUserID_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listCandidatePositionsByPositionIDUserID_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listCandidatePositionsByPositionIDUserID_resultTupleSchemeFactory();

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidatePositionDO.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCandidatePositionsByPositionIDUserID_result.class, metaDataMap);
    }

    public listCandidatePositionsByPositionIDUserID_result() {
    }

    public listCandidatePositionsByPositionIDUserID_result(
      java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCandidatePositionsByPositionIDUserID_result(listCandidatePositionsByPositionIDUserID_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> __this__success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO>(other.success.size());
        for (com.moseeker.thrift.gen.dao.struct.CandidatePositionDO other_element : other.success) {
          __this__success.add(new com.moseeker.thrift.gen.dao.struct.CandidatePositionDO(other_element));
        }
        this.success = __this__success;
      }
    }

    public listCandidatePositionsByPositionIDUserID_result deepCopy() {
      return new listCandidatePositionsByPositionIDUserID_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.moseeker.thrift.gen.dao.struct.CandidatePositionDO elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> getSuccess() {
      return this.success;
    }

    public listCandidatePositionsByPositionIDUserID_result setSuccess(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listCandidatePositionsByPositionIDUserID_result)
        return this.equals((listCandidatePositionsByPositionIDUserID_result)that);
      return false;
    }

    public boolean equals(listCandidatePositionsByPositionIDUserID_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listCandidatePositionsByPositionIDUserID_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listCandidatePositionsByPositionIDUserID_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCandidatePositionsByPositionIDUserID_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidatePositionsByPositionIDUserID_resultStandardScheme getScheme() {
        return new listCandidatePositionsByPositionIDUserID_resultStandardScheme();
      }
    }

    private static class listCandidatePositionsByPositionIDUserID_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listCandidatePositionsByPositionIDUserID_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCandidatePositionsByPositionIDUserID_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO>(_list58.size);
                  com.moseeker.thrift.gen.dao.struct.CandidatePositionDO _elem59;
                  for (int _i60 = 0; _i60 < _list58.size; ++_i60)
                  {
                    _elem59 = new com.moseeker.thrift.gen.dao.struct.CandidatePositionDO();
                    _elem59.read(iprot);
                    struct.success.add(_elem59);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCandidatePositionsByPositionIDUserID_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.moseeker.thrift.gen.dao.struct.CandidatePositionDO _iter61 : struct.success)
            {
              _iter61.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCandidatePositionsByPositionIDUserID_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidatePositionsByPositionIDUserID_resultTupleScheme getScheme() {
        return new listCandidatePositionsByPositionIDUserID_resultTupleScheme();
      }
    }

    private static class listCandidatePositionsByPositionIDUserID_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listCandidatePositionsByPositionIDUserID_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCandidatePositionsByPositionIDUserID_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.moseeker.thrift.gen.dao.struct.CandidatePositionDO _iter62 : struct.success)
            {
              _iter62.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCandidatePositionsByPositionIDUserID_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidatePositionDO>(_list63.size);
            com.moseeker.thrift.gen.dao.struct.CandidatePositionDO _elem64;
            for (int _i65 = 0; _i65 < _list63.size; ++_i65)
            {
              _elem64 = new com.moseeker.thrift.gen.dao.struct.CandidatePositionDO();
              _elem64.read(iprot);
              struct.success.add(_elem64);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateCandidatePosition_args implements org.apache.thrift.TBase<updateCandidatePosition_args, updateCandidatePosition_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateCandidatePosition_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCandidatePosition_args");

    private static final org.apache.thrift.protocol.TField CANDIDATE_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("candidatePosition", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateCandidatePosition_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateCandidatePosition_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.CandidatePositionDO candidatePosition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CANDIDATE_POSITION((short)1, "candidatePosition");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CANDIDATE_POSITION
            return CANDIDATE_POSITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CANDIDATE_POSITION, new org.apache.thrift.meta_data.FieldMetaData("candidatePosition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidatePositionDO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCandidatePosition_args.class, metaDataMap);
    }

    public updateCandidatePosition_args() {
    }

    public updateCandidatePosition_args(
      com.moseeker.thrift.gen.dao.struct.CandidatePositionDO candidatePosition)
    {
      this();
      this.candidatePosition = candidatePosition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCandidatePosition_args(updateCandidatePosition_args other) {
      if (other.isSetCandidatePosition()) {
        this.candidatePosition = new com.moseeker.thrift.gen.dao.struct.CandidatePositionDO(other.candidatePosition);
      }
    }

    public updateCandidatePosition_args deepCopy() {
      return new updateCandidatePosition_args(this);
    }

    @Override
    public void clear() {
      this.candidatePosition = null;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidatePositionDO getCandidatePosition() {
      return this.candidatePosition;
    }

    public updateCandidatePosition_args setCandidatePosition(com.moseeker.thrift.gen.dao.struct.CandidatePositionDO candidatePosition) {
      this.candidatePosition = candidatePosition;
      return this;
    }

    public void unsetCandidatePosition() {
      this.candidatePosition = null;
    }

    /** Returns true if field candidatePosition is set (has been assigned a value) and false otherwise */
    public boolean isSetCandidatePosition() {
      return this.candidatePosition != null;
    }

    public void setCandidatePositionIsSet(boolean value) {
      if (!value) {
        this.candidatePosition = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CANDIDATE_POSITION:
        if (value == null) {
          unsetCandidatePosition();
        } else {
          setCandidatePosition((com.moseeker.thrift.gen.dao.struct.CandidatePositionDO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CANDIDATE_POSITION:
        return getCandidatePosition();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CANDIDATE_POSITION:
        return isSetCandidatePosition();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCandidatePosition_args)
        return this.equals((updateCandidatePosition_args)that);
      return false;
    }

    public boolean equals(updateCandidatePosition_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_candidatePosition = true && this.isSetCandidatePosition();
      boolean that_present_candidatePosition = true && that.isSetCandidatePosition();
      if (this_present_candidatePosition || that_present_candidatePosition) {
        if (!(this_present_candidatePosition && that_present_candidatePosition))
          return false;
        if (!this.candidatePosition.equals(that.candidatePosition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCandidatePosition()) ? 131071 : 524287);
      if (isSetCandidatePosition())
        hashCode = hashCode * 8191 + candidatePosition.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateCandidatePosition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCandidatePosition()).compareTo(other.isSetCandidatePosition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCandidatePosition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.candidatePosition, other.candidatePosition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateCandidatePosition_args(");
      boolean first = true;

      sb.append("candidatePosition:");
      if (this.candidatePosition == null) {
        sb.append("null");
      } else {
        sb.append(this.candidatePosition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (candidatePosition != null) {
        candidatePosition.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCandidatePosition_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateCandidatePosition_argsStandardScheme getScheme() {
        return new updateCandidatePosition_argsStandardScheme();
      }
    }

    private static class updateCandidatePosition_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateCandidatePosition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCandidatePosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CANDIDATE_POSITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.candidatePosition = new com.moseeker.thrift.gen.dao.struct.CandidatePositionDO();
                struct.candidatePosition.read(iprot);
                struct.setCandidatePositionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCandidatePosition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.candidatePosition != null) {
          oprot.writeFieldBegin(CANDIDATE_POSITION_FIELD_DESC);
          struct.candidatePosition.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCandidatePosition_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateCandidatePosition_argsTupleScheme getScheme() {
        return new updateCandidatePosition_argsTupleScheme();
      }
    }

    private static class updateCandidatePosition_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateCandidatePosition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCandidatePosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCandidatePosition()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCandidatePosition()) {
          struct.candidatePosition.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCandidatePosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.candidatePosition = new com.moseeker.thrift.gen.dao.struct.CandidatePositionDO();
          struct.candidatePosition.read(iprot);
          struct.setCandidatePositionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateCandidatePosition_result implements org.apache.thrift.TBase<updateCandidatePosition_result, updateCandidatePosition_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateCandidatePosition_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCandidatePosition_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateCandidatePosition_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateCandidatePosition_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.CandidatePositionDO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidatePositionDO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCandidatePosition_result.class, metaDataMap);
    }

    public updateCandidatePosition_result() {
    }

    public updateCandidatePosition_result(
      com.moseeker.thrift.gen.dao.struct.CandidatePositionDO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCandidatePosition_result(updateCandidatePosition_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.dao.struct.CandidatePositionDO(other.success);
      }
    }

    public updateCandidatePosition_result deepCopy() {
      return new updateCandidatePosition_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidatePositionDO getSuccess() {
      return this.success;
    }

    public updateCandidatePosition_result setSuccess(com.moseeker.thrift.gen.dao.struct.CandidatePositionDO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.dao.struct.CandidatePositionDO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCandidatePosition_result)
        return this.equals((updateCandidatePosition_result)that);
      return false;
    }

    public boolean equals(updateCandidatePosition_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateCandidatePosition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateCandidatePosition_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCandidatePosition_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateCandidatePosition_resultStandardScheme getScheme() {
        return new updateCandidatePosition_resultStandardScheme();
      }
    }

    private static class updateCandidatePosition_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateCandidatePosition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCandidatePosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.dao.struct.CandidatePositionDO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCandidatePosition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCandidatePosition_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateCandidatePosition_resultTupleScheme getScheme() {
        return new updateCandidatePosition_resultTupleScheme();
      }
    }

    private static class updateCandidatePosition_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateCandidatePosition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCandidatePosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCandidatePosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.dao.struct.CandidatePositionDO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saveCandidatePosition_args implements org.apache.thrift.TBase<saveCandidatePosition_args, saveCandidatePosition_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveCandidatePosition_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveCandidatePosition_args");

    private static final org.apache.thrift.protocol.TField CANDIDATE_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("candidatePosition", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveCandidatePosition_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveCandidatePosition_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.CandidatePositionDO candidatePosition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CANDIDATE_POSITION((short)1, "candidatePosition");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CANDIDATE_POSITION
            return CANDIDATE_POSITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CANDIDATE_POSITION, new org.apache.thrift.meta_data.FieldMetaData("candidatePosition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidatePositionDO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveCandidatePosition_args.class, metaDataMap);
    }

    public saveCandidatePosition_args() {
    }

    public saveCandidatePosition_args(
      com.moseeker.thrift.gen.dao.struct.CandidatePositionDO candidatePosition)
    {
      this();
      this.candidatePosition = candidatePosition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveCandidatePosition_args(saveCandidatePosition_args other) {
      if (other.isSetCandidatePosition()) {
        this.candidatePosition = new com.moseeker.thrift.gen.dao.struct.CandidatePositionDO(other.candidatePosition);
      }
    }

    public saveCandidatePosition_args deepCopy() {
      return new saveCandidatePosition_args(this);
    }

    @Override
    public void clear() {
      this.candidatePosition = null;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidatePositionDO getCandidatePosition() {
      return this.candidatePosition;
    }

    public saveCandidatePosition_args setCandidatePosition(com.moseeker.thrift.gen.dao.struct.CandidatePositionDO candidatePosition) {
      this.candidatePosition = candidatePosition;
      return this;
    }

    public void unsetCandidatePosition() {
      this.candidatePosition = null;
    }

    /** Returns true if field candidatePosition is set (has been assigned a value) and false otherwise */
    public boolean isSetCandidatePosition() {
      return this.candidatePosition != null;
    }

    public void setCandidatePositionIsSet(boolean value) {
      if (!value) {
        this.candidatePosition = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CANDIDATE_POSITION:
        if (value == null) {
          unsetCandidatePosition();
        } else {
          setCandidatePosition((com.moseeker.thrift.gen.dao.struct.CandidatePositionDO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CANDIDATE_POSITION:
        return getCandidatePosition();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CANDIDATE_POSITION:
        return isSetCandidatePosition();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof saveCandidatePosition_args)
        return this.equals((saveCandidatePosition_args)that);
      return false;
    }

    public boolean equals(saveCandidatePosition_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_candidatePosition = true && this.isSetCandidatePosition();
      boolean that_present_candidatePosition = true && that.isSetCandidatePosition();
      if (this_present_candidatePosition || that_present_candidatePosition) {
        if (!(this_present_candidatePosition && that_present_candidatePosition))
          return false;
        if (!this.candidatePosition.equals(that.candidatePosition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCandidatePosition()) ? 131071 : 524287);
      if (isSetCandidatePosition())
        hashCode = hashCode * 8191 + candidatePosition.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(saveCandidatePosition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCandidatePosition()).compareTo(other.isSetCandidatePosition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCandidatePosition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.candidatePosition, other.candidatePosition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("saveCandidatePosition_args(");
      boolean first = true;

      sb.append("candidatePosition:");
      if (this.candidatePosition == null) {
        sb.append("null");
      } else {
        sb.append(this.candidatePosition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (candidatePosition != null) {
        candidatePosition.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveCandidatePosition_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveCandidatePosition_argsStandardScheme getScheme() {
        return new saveCandidatePosition_argsStandardScheme();
      }
    }

    private static class saveCandidatePosition_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveCandidatePosition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveCandidatePosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CANDIDATE_POSITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.candidatePosition = new com.moseeker.thrift.gen.dao.struct.CandidatePositionDO();
                struct.candidatePosition.read(iprot);
                struct.setCandidatePositionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveCandidatePosition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.candidatePosition != null) {
          oprot.writeFieldBegin(CANDIDATE_POSITION_FIELD_DESC);
          struct.candidatePosition.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveCandidatePosition_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveCandidatePosition_argsTupleScheme getScheme() {
        return new saveCandidatePosition_argsTupleScheme();
      }
    }

    private static class saveCandidatePosition_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveCandidatePosition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveCandidatePosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCandidatePosition()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCandidatePosition()) {
          struct.candidatePosition.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveCandidatePosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.candidatePosition = new com.moseeker.thrift.gen.dao.struct.CandidatePositionDO();
          struct.candidatePosition.read(iprot);
          struct.setCandidatePositionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saveCandidatePosition_result implements org.apache.thrift.TBase<saveCandidatePosition_result, saveCandidatePosition_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveCandidatePosition_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveCandidatePosition_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveCandidatePosition_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveCandidatePosition_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.CandidatePositionDO success; // required
    public com.moseeker.thrift.gen.common.struct.CURDException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidatePositionDO.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.CURDException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveCandidatePosition_result.class, metaDataMap);
    }

    public saveCandidatePosition_result() {
    }

    public saveCandidatePosition_result(
      com.moseeker.thrift.gen.dao.struct.CandidatePositionDO success,
      com.moseeker.thrift.gen.common.struct.CURDException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveCandidatePosition_result(saveCandidatePosition_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.dao.struct.CandidatePositionDO(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.CURDException(other.e);
      }
    }

    public saveCandidatePosition_result deepCopy() {
      return new saveCandidatePosition_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidatePositionDO getSuccess() {
      return this.success;
    }

    public saveCandidatePosition_result setSuccess(com.moseeker.thrift.gen.dao.struct.CandidatePositionDO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.common.struct.CURDException getE() {
      return this.e;
    }

    public saveCandidatePosition_result setE(com.moseeker.thrift.gen.common.struct.CURDException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.dao.struct.CandidatePositionDO)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.CURDException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof saveCandidatePosition_result)
        return this.equals((saveCandidatePosition_result)that);
      return false;
    }

    public boolean equals(saveCandidatePosition_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(saveCandidatePosition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("saveCandidatePosition_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveCandidatePosition_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveCandidatePosition_resultStandardScheme getScheme() {
        return new saveCandidatePosition_resultStandardScheme();
      }
    }

    private static class saveCandidatePosition_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveCandidatePosition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveCandidatePosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.dao.struct.CandidatePositionDO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.CURDException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveCandidatePosition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveCandidatePosition_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveCandidatePosition_resultTupleScheme getScheme() {
        return new saveCandidatePosition_resultTupleScheme();
      }
    }

    private static class saveCandidatePosition_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveCandidatePosition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveCandidatePosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveCandidatePosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.dao.struct.CandidatePositionDO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.CURDException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteCandidatePositions_args implements org.apache.thrift.TBase<deleteCandidatePositions_args, deleteCandidatePositions_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteCandidatePositions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCandidatePositions_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteCandidatePositions_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteCandidatePositions_argsTupleSchemeFactory();

    public int userId; // required
    public int positionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      POSITION_ID((short)2, "positionId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // POSITION_ID
            return POSITION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __POSITIONID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCandidatePositions_args.class, metaDataMap);
    }

    public deleteCandidatePositions_args() {
    }

    public deleteCandidatePositions_args(
      int userId,
      int positionId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.positionId = positionId;
      setPositionIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteCandidatePositions_args(deleteCandidatePositions_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      this.positionId = other.positionId;
    }

    public deleteCandidatePositions_args deepCopy() {
      return new deleteCandidatePositions_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      setPositionIdIsSet(false);
      this.positionId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public deleteCandidatePositions_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getPositionId() {
      return this.positionId;
    }

    public deleteCandidatePositions_args setPositionId(int positionId) {
      this.positionId = positionId;
      setPositionIdIsSet(true);
      return this;
    }

    public void unsetPositionId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
    }

    /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
    public boolean isSetPositionId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
    }

    public void setPositionIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.Integer)value);
        }
        break;

      case POSITION_ID:
        if (value == null) {
          unsetPositionId();
        } else {
          setPositionId((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case POSITION_ID:
        return getPositionId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case POSITION_ID:
        return isSetPositionId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteCandidatePositions_args)
        return this.equals((deleteCandidatePositions_args)that);
      return false;
    }

    public boolean equals(deleteCandidatePositions_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_positionId = true;
      boolean that_present_positionId = true;
      if (this_present_positionId || that_present_positionId) {
        if (!(this_present_positionId && that_present_positionId))
          return false;
        if (this.positionId != that.positionId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + userId;

      hashCode = hashCode * 8191 + positionId;

      return hashCode;
    }

    @Override
    public int compareTo(deleteCandidatePositions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPositionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteCandidatePositions_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("positionId:");
      sb.append(this.positionId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteCandidatePositions_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteCandidatePositions_argsStandardScheme getScheme() {
        return new deleteCandidatePositions_argsStandardScheme();
      }
    }

    private static class deleteCandidatePositions_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteCandidatePositions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCandidatePositions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // POSITION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.positionId = iprot.readI32();
                struct.setPositionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCandidatePositions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
        oprot.writeI32(struct.positionId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteCandidatePositions_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteCandidatePositions_argsTupleScheme getScheme() {
        return new deleteCandidatePositions_argsTupleScheme();
      }
    }

    private static class deleteCandidatePositions_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteCandidatePositions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteCandidatePositions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetPositionId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetPositionId()) {
          oprot.writeI32(struct.positionId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteCandidatePositions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.positionId = iprot.readI32();
          struct.setPositionIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteCandidatePositions_result implements org.apache.thrift.TBase<deleteCandidatePositions_result, deleteCandidatePositions_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteCandidatePositions_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCandidatePositions_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteCandidatePositions_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteCandidatePositions_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCandidatePositions_result.class, metaDataMap);
    }

    public deleteCandidatePositions_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteCandidatePositions_result(deleteCandidatePositions_result other) {
    }

    public deleteCandidatePositions_result deepCopy() {
      return new deleteCandidatePositions_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteCandidatePositions_result)
        return this.equals((deleteCandidatePositions_result)that);
      return false;
    }

    public boolean equals(deleteCandidatePositions_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(deleteCandidatePositions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteCandidatePositions_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteCandidatePositions_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteCandidatePositions_resultStandardScheme getScheme() {
        return new deleteCandidatePositions_resultStandardScheme();
      }
    }

    private static class deleteCandidatePositions_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteCandidatePositions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCandidatePositions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCandidatePositions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteCandidatePositions_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteCandidatePositions_resultTupleScheme getScheme() {
        return new deleteCandidatePositions_resultTupleScheme();
      }
    }

    private static class deleteCandidatePositions_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteCandidatePositions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteCandidatePositions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteCandidatePositions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCandidatePositionShareRecord_args implements org.apache.thrift.TBase<getCandidatePositionShareRecord_args, getCandidatePositionShareRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCandidatePositionShareRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCandidatePositionShareRecord_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCandidatePositionShareRecord_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCandidatePositionShareRecord_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.CommonQuery query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.CommonQuery.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCandidatePositionShareRecord_args.class, metaDataMap);
    }

    public getCandidatePositionShareRecord_args() {
    }

    public getCandidatePositionShareRecord_args(
      com.moseeker.thrift.gen.common.struct.CommonQuery query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCandidatePositionShareRecord_args(getCandidatePositionShareRecord_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.common.struct.CommonQuery(other.query);
      }
    }

    public getCandidatePositionShareRecord_args deepCopy() {
      return new getCandidatePositionShareRecord_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public com.moseeker.thrift.gen.common.struct.CommonQuery getQuery() {
      return this.query;
    }

    public getCandidatePositionShareRecord_args setQuery(com.moseeker.thrift.gen.common.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.common.struct.CommonQuery)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCandidatePositionShareRecord_args)
        return this.equals((getCandidatePositionShareRecord_args)that);
      return false;
    }

    public boolean equals(getCandidatePositionShareRecord_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCandidatePositionShareRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCandidatePositionShareRecord_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCandidatePositionShareRecord_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCandidatePositionShareRecord_argsStandardScheme getScheme() {
        return new getCandidatePositionShareRecord_argsStandardScheme();
      }
    }

    private static class getCandidatePositionShareRecord_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCandidatePositionShareRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCandidatePositionShareRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCandidatePositionShareRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCandidatePositionShareRecord_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCandidatePositionShareRecord_argsTupleScheme getScheme() {
        return new getCandidatePositionShareRecord_argsTupleScheme();
      }
    }

    private static class getCandidatePositionShareRecord_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCandidatePositionShareRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCandidatePositionShareRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCandidatePositionShareRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCandidatePositionShareRecord_result implements org.apache.thrift.TBase<getCandidatePositionShareRecord_result, getCandidatePositionShareRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCandidatePositionShareRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCandidatePositionShareRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCandidatePositionShareRecord_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCandidatePositionShareRecord_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCandidatePositionShareRecord_result.class, metaDataMap);
    }

    public getCandidatePositionShareRecord_result() {
    }

    public getCandidatePositionShareRecord_result(
      com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCandidatePositionShareRecord_result(getCandidatePositionShareRecord_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO(other.success);
      }
    }

    public getCandidatePositionShareRecord_result deepCopy() {
      return new getCandidatePositionShareRecord_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO getSuccess() {
      return this.success;
    }

    public getCandidatePositionShareRecord_result setSuccess(com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCandidatePositionShareRecord_result)
        return this.equals((getCandidatePositionShareRecord_result)that);
      return false;
    }

    public boolean equals(getCandidatePositionShareRecord_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCandidatePositionShareRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCandidatePositionShareRecord_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCandidatePositionShareRecord_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCandidatePositionShareRecord_resultStandardScheme getScheme() {
        return new getCandidatePositionShareRecord_resultStandardScheme();
      }
    }

    private static class getCandidatePositionShareRecord_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCandidatePositionShareRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCandidatePositionShareRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCandidatePositionShareRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCandidatePositionShareRecord_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCandidatePositionShareRecord_resultTupleScheme getScheme() {
        return new getCandidatePositionShareRecord_resultTupleScheme();
      }
    }

    private static class getCandidatePositionShareRecord_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCandidatePositionShareRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCandidatePositionShareRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCandidatePositionShareRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listCandidatePositionShareRecord_args implements org.apache.thrift.TBase<listCandidatePositionShareRecord_args, listCandidatePositionShareRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<listCandidatePositionShareRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCandidatePositionShareRecord_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listCandidatePositionShareRecord_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listCandidatePositionShareRecord_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.CommonQuery query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.CommonQuery.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCandidatePositionShareRecord_args.class, metaDataMap);
    }

    public listCandidatePositionShareRecord_args() {
    }

    public listCandidatePositionShareRecord_args(
      com.moseeker.thrift.gen.common.struct.CommonQuery query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCandidatePositionShareRecord_args(listCandidatePositionShareRecord_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.common.struct.CommonQuery(other.query);
      }
    }

    public listCandidatePositionShareRecord_args deepCopy() {
      return new listCandidatePositionShareRecord_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public com.moseeker.thrift.gen.common.struct.CommonQuery getQuery() {
      return this.query;
    }

    public listCandidatePositionShareRecord_args setQuery(com.moseeker.thrift.gen.common.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.common.struct.CommonQuery)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listCandidatePositionShareRecord_args)
        return this.equals((listCandidatePositionShareRecord_args)that);
      return false;
    }

    public boolean equals(listCandidatePositionShareRecord_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listCandidatePositionShareRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listCandidatePositionShareRecord_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCandidatePositionShareRecord_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidatePositionShareRecord_argsStandardScheme getScheme() {
        return new listCandidatePositionShareRecord_argsStandardScheme();
      }
    }

    private static class listCandidatePositionShareRecord_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listCandidatePositionShareRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCandidatePositionShareRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCandidatePositionShareRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCandidatePositionShareRecord_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidatePositionShareRecord_argsTupleScheme getScheme() {
        return new listCandidatePositionShareRecord_argsTupleScheme();
      }
    }

    private static class listCandidatePositionShareRecord_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listCandidatePositionShareRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCandidatePositionShareRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCandidatePositionShareRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listCandidatePositionShareRecord_result implements org.apache.thrift.TBase<listCandidatePositionShareRecord_result, listCandidatePositionShareRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<listCandidatePositionShareRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCandidatePositionShareRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listCandidatePositionShareRecord_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listCandidatePositionShareRecord_resultTupleSchemeFactory();

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCandidatePositionShareRecord_result.class, metaDataMap);
    }

    public listCandidatePositionShareRecord_result() {
    }

    public listCandidatePositionShareRecord_result(
      java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCandidatePositionShareRecord_result(listCandidatePositionShareRecord_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO> __this__success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO>(other.success.size());
        for (com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO other_element : other.success) {
          __this__success.add(new com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO(other_element));
        }
        this.success = __this__success;
      }
    }

    public listCandidatePositionShareRecord_result deepCopy() {
      return new listCandidatePositionShareRecord_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO> getSuccess() {
      return this.success;
    }

    public listCandidatePositionShareRecord_result setSuccess(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listCandidatePositionShareRecord_result)
        return this.equals((listCandidatePositionShareRecord_result)that);
      return false;
    }

    public boolean equals(listCandidatePositionShareRecord_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listCandidatePositionShareRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listCandidatePositionShareRecord_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCandidatePositionShareRecord_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidatePositionShareRecord_resultStandardScheme getScheme() {
        return new listCandidatePositionShareRecord_resultStandardScheme();
      }
    }

    private static class listCandidatePositionShareRecord_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listCandidatePositionShareRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCandidatePositionShareRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list66 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO>(_list66.size);
                  com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO _elem67;
                  for (int _i68 = 0; _i68 < _list66.size; ++_i68)
                  {
                    _elem67 = new com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO();
                    _elem67.read(iprot);
                    struct.success.add(_elem67);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCandidatePositionShareRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO _iter69 : struct.success)
            {
              _iter69.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCandidatePositionShareRecord_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidatePositionShareRecord_resultTupleScheme getScheme() {
        return new listCandidatePositionShareRecord_resultTupleScheme();
      }
    }

    private static class listCandidatePositionShareRecord_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listCandidatePositionShareRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCandidatePositionShareRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO _iter70 : struct.success)
            {
              _iter70.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCandidatePositionShareRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO>(_list71.size);
            com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO _elem72;
            for (int _i73 = 0; _i73 < _list71.size; ++_i73)
            {
              _elem72 = new com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO();
              _elem72.read(iprot);
              struct.success.add(_elem72);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateCandidatePositionShareRecord_args implements org.apache.thrift.TBase<updateCandidatePositionShareRecord_args, updateCandidatePositionShareRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateCandidatePositionShareRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCandidatePositionShareRecord_args");

    private static final org.apache.thrift.protocol.TField CANDIDATE_POSITION_SHARE_RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("candidatePositionShareRecord", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateCandidatePositionShareRecord_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateCandidatePositionShareRecord_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO candidatePositionShareRecord; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CANDIDATE_POSITION_SHARE_RECORD((short)1, "candidatePositionShareRecord");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CANDIDATE_POSITION_SHARE_RECORD
            return CANDIDATE_POSITION_SHARE_RECORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CANDIDATE_POSITION_SHARE_RECORD, new org.apache.thrift.meta_data.FieldMetaData("candidatePositionShareRecord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCandidatePositionShareRecord_args.class, metaDataMap);
    }

    public updateCandidatePositionShareRecord_args() {
    }

    public updateCandidatePositionShareRecord_args(
      com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO candidatePositionShareRecord)
    {
      this();
      this.candidatePositionShareRecord = candidatePositionShareRecord;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCandidatePositionShareRecord_args(updateCandidatePositionShareRecord_args other) {
      if (other.isSetCandidatePositionShareRecord()) {
        this.candidatePositionShareRecord = new com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO(other.candidatePositionShareRecord);
      }
    }

    public updateCandidatePositionShareRecord_args deepCopy() {
      return new updateCandidatePositionShareRecord_args(this);
    }

    @Override
    public void clear() {
      this.candidatePositionShareRecord = null;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO getCandidatePositionShareRecord() {
      return this.candidatePositionShareRecord;
    }

    public updateCandidatePositionShareRecord_args setCandidatePositionShareRecord(com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO candidatePositionShareRecord) {
      this.candidatePositionShareRecord = candidatePositionShareRecord;
      return this;
    }

    public void unsetCandidatePositionShareRecord() {
      this.candidatePositionShareRecord = null;
    }

    /** Returns true if field candidatePositionShareRecord is set (has been assigned a value) and false otherwise */
    public boolean isSetCandidatePositionShareRecord() {
      return this.candidatePositionShareRecord != null;
    }

    public void setCandidatePositionShareRecordIsSet(boolean value) {
      if (!value) {
        this.candidatePositionShareRecord = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CANDIDATE_POSITION_SHARE_RECORD:
        if (value == null) {
          unsetCandidatePositionShareRecord();
        } else {
          setCandidatePositionShareRecord((com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CANDIDATE_POSITION_SHARE_RECORD:
        return getCandidatePositionShareRecord();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CANDIDATE_POSITION_SHARE_RECORD:
        return isSetCandidatePositionShareRecord();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCandidatePositionShareRecord_args)
        return this.equals((updateCandidatePositionShareRecord_args)that);
      return false;
    }

    public boolean equals(updateCandidatePositionShareRecord_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_candidatePositionShareRecord = true && this.isSetCandidatePositionShareRecord();
      boolean that_present_candidatePositionShareRecord = true && that.isSetCandidatePositionShareRecord();
      if (this_present_candidatePositionShareRecord || that_present_candidatePositionShareRecord) {
        if (!(this_present_candidatePositionShareRecord && that_present_candidatePositionShareRecord))
          return false;
        if (!this.candidatePositionShareRecord.equals(that.candidatePositionShareRecord))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCandidatePositionShareRecord()) ? 131071 : 524287);
      if (isSetCandidatePositionShareRecord())
        hashCode = hashCode * 8191 + candidatePositionShareRecord.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateCandidatePositionShareRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCandidatePositionShareRecord()).compareTo(other.isSetCandidatePositionShareRecord());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCandidatePositionShareRecord()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.candidatePositionShareRecord, other.candidatePositionShareRecord);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateCandidatePositionShareRecord_args(");
      boolean first = true;

      sb.append("candidatePositionShareRecord:");
      if (this.candidatePositionShareRecord == null) {
        sb.append("null");
      } else {
        sb.append(this.candidatePositionShareRecord);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (candidatePositionShareRecord != null) {
        candidatePositionShareRecord.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCandidatePositionShareRecord_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateCandidatePositionShareRecord_argsStandardScheme getScheme() {
        return new updateCandidatePositionShareRecord_argsStandardScheme();
      }
    }

    private static class updateCandidatePositionShareRecord_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateCandidatePositionShareRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCandidatePositionShareRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CANDIDATE_POSITION_SHARE_RECORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.candidatePositionShareRecord = new com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO();
                struct.candidatePositionShareRecord.read(iprot);
                struct.setCandidatePositionShareRecordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCandidatePositionShareRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.candidatePositionShareRecord != null) {
          oprot.writeFieldBegin(CANDIDATE_POSITION_SHARE_RECORD_FIELD_DESC);
          struct.candidatePositionShareRecord.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCandidatePositionShareRecord_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateCandidatePositionShareRecord_argsTupleScheme getScheme() {
        return new updateCandidatePositionShareRecord_argsTupleScheme();
      }
    }

    private static class updateCandidatePositionShareRecord_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateCandidatePositionShareRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCandidatePositionShareRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCandidatePositionShareRecord()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCandidatePositionShareRecord()) {
          struct.candidatePositionShareRecord.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCandidatePositionShareRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.candidatePositionShareRecord = new com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO();
          struct.candidatePositionShareRecord.read(iprot);
          struct.setCandidatePositionShareRecordIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateCandidatePositionShareRecord_result implements org.apache.thrift.TBase<updateCandidatePositionShareRecord_result, updateCandidatePositionShareRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateCandidatePositionShareRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCandidatePositionShareRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateCandidatePositionShareRecord_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateCandidatePositionShareRecord_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCandidatePositionShareRecord_result.class, metaDataMap);
    }

    public updateCandidatePositionShareRecord_result() {
    }

    public updateCandidatePositionShareRecord_result(
      com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCandidatePositionShareRecord_result(updateCandidatePositionShareRecord_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO(other.success);
      }
    }

    public updateCandidatePositionShareRecord_result deepCopy() {
      return new updateCandidatePositionShareRecord_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO getSuccess() {
      return this.success;
    }

    public updateCandidatePositionShareRecord_result setSuccess(com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCandidatePositionShareRecord_result)
        return this.equals((updateCandidatePositionShareRecord_result)that);
      return false;
    }

    public boolean equals(updateCandidatePositionShareRecord_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateCandidatePositionShareRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateCandidatePositionShareRecord_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCandidatePositionShareRecord_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateCandidatePositionShareRecord_resultStandardScheme getScheme() {
        return new updateCandidatePositionShareRecord_resultStandardScheme();
      }
    }

    private static class updateCandidatePositionShareRecord_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateCandidatePositionShareRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCandidatePositionShareRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCandidatePositionShareRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCandidatePositionShareRecord_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateCandidatePositionShareRecord_resultTupleScheme getScheme() {
        return new updateCandidatePositionShareRecord_resultTupleScheme();
      }
    }

    private static class updateCandidatePositionShareRecord_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateCandidatePositionShareRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCandidatePositionShareRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCandidatePositionShareRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.dao.struct.CandidatePositionShareRecordDO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteCandidatePositionShareRecord_args implements org.apache.thrift.TBase<deleteCandidatePositionShareRecord_args, deleteCandidatePositionShareRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteCandidatePositionShareRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCandidatePositionShareRecord_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteCandidatePositionShareRecord_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteCandidatePositionShareRecord_argsTupleSchemeFactory();

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCandidatePositionShareRecord_args.class, metaDataMap);
    }

    public deleteCandidatePositionShareRecord_args() {
    }

    public deleteCandidatePositionShareRecord_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteCandidatePositionShareRecord_args(deleteCandidatePositionShareRecord_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public deleteCandidatePositionShareRecord_args deepCopy() {
      return new deleteCandidatePositionShareRecord_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public deleteCandidatePositionShareRecord_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteCandidatePositionShareRecord_args)
        return this.equals((deleteCandidatePositionShareRecord_args)that);
      return false;
    }

    public boolean equals(deleteCandidatePositionShareRecord_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + id;

      return hashCode;
    }

    @Override
    public int compareTo(deleteCandidatePositionShareRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteCandidatePositionShareRecord_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteCandidatePositionShareRecord_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteCandidatePositionShareRecord_argsStandardScheme getScheme() {
        return new deleteCandidatePositionShareRecord_argsStandardScheme();
      }
    }

    private static class deleteCandidatePositionShareRecord_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteCandidatePositionShareRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCandidatePositionShareRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCandidatePositionShareRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteCandidatePositionShareRecord_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteCandidatePositionShareRecord_argsTupleScheme getScheme() {
        return new deleteCandidatePositionShareRecord_argsTupleScheme();
      }
    }

    private static class deleteCandidatePositionShareRecord_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteCandidatePositionShareRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteCandidatePositionShareRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteCandidatePositionShareRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteCandidatePositionShareRecord_result implements org.apache.thrift.TBase<deleteCandidatePositionShareRecord_result, deleteCandidatePositionShareRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteCandidatePositionShareRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCandidatePositionShareRecord_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteCandidatePositionShareRecord_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteCandidatePositionShareRecord_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCandidatePositionShareRecord_result.class, metaDataMap);
    }

    public deleteCandidatePositionShareRecord_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteCandidatePositionShareRecord_result(deleteCandidatePositionShareRecord_result other) {
    }

    public deleteCandidatePositionShareRecord_result deepCopy() {
      return new deleteCandidatePositionShareRecord_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteCandidatePositionShareRecord_result)
        return this.equals((deleteCandidatePositionShareRecord_result)that);
      return false;
    }

    public boolean equals(deleteCandidatePositionShareRecord_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(deleteCandidatePositionShareRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteCandidatePositionShareRecord_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteCandidatePositionShareRecord_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteCandidatePositionShareRecord_resultStandardScheme getScheme() {
        return new deleteCandidatePositionShareRecord_resultStandardScheme();
      }
    }

    private static class deleteCandidatePositionShareRecord_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteCandidatePositionShareRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCandidatePositionShareRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCandidatePositionShareRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteCandidatePositionShareRecord_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteCandidatePositionShareRecord_resultTupleScheme getScheme() {
        return new deleteCandidatePositionShareRecord_resultTupleScheme();
      }
    }

    private static class deleteCandidatePositionShareRecord_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteCandidatePositionShareRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteCandidatePositionShareRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteCandidatePositionShareRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCandidateRecomRecord_args implements org.apache.thrift.TBase<getCandidateRecomRecord_args, getCandidateRecomRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCandidateRecomRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCandidateRecomRecord_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCandidateRecomRecord_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCandidateRecomRecord_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.CommonQuery query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.CommonQuery.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCandidateRecomRecord_args.class, metaDataMap);
    }

    public getCandidateRecomRecord_args() {
    }

    public getCandidateRecomRecord_args(
      com.moseeker.thrift.gen.common.struct.CommonQuery query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCandidateRecomRecord_args(getCandidateRecomRecord_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.common.struct.CommonQuery(other.query);
      }
    }

    public getCandidateRecomRecord_args deepCopy() {
      return new getCandidateRecomRecord_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public com.moseeker.thrift.gen.common.struct.CommonQuery getQuery() {
      return this.query;
    }

    public getCandidateRecomRecord_args setQuery(com.moseeker.thrift.gen.common.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.common.struct.CommonQuery)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCandidateRecomRecord_args)
        return this.equals((getCandidateRecomRecord_args)that);
      return false;
    }

    public boolean equals(getCandidateRecomRecord_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCandidateRecomRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCandidateRecomRecord_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCandidateRecomRecord_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCandidateRecomRecord_argsStandardScheme getScheme() {
        return new getCandidateRecomRecord_argsStandardScheme();
      }
    }

    private static class getCandidateRecomRecord_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCandidateRecomRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCandidateRecomRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCandidateRecomRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCandidateRecomRecord_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCandidateRecomRecord_argsTupleScheme getScheme() {
        return new getCandidateRecomRecord_argsTupleScheme();
      }
    }

    private static class getCandidateRecomRecord_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCandidateRecomRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCandidateRecomRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCandidateRecomRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCandidateRecomRecord_result implements org.apache.thrift.TBase<getCandidateRecomRecord_result, getCandidateRecomRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCandidateRecomRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCandidateRecomRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCandidateRecomRecord_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCandidateRecomRecord_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCandidateRecomRecord_result.class, metaDataMap);
    }

    public getCandidateRecomRecord_result() {
    }

    public getCandidateRecomRecord_result(
      com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCandidateRecomRecord_result(getCandidateRecomRecord_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO(other.success);
      }
    }

    public getCandidateRecomRecord_result deepCopy() {
      return new getCandidateRecomRecord_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO getSuccess() {
      return this.success;
    }

    public getCandidateRecomRecord_result setSuccess(com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCandidateRecomRecord_result)
        return this.equals((getCandidateRecomRecord_result)that);
      return false;
    }

    public boolean equals(getCandidateRecomRecord_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCandidateRecomRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCandidateRecomRecord_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCandidateRecomRecord_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCandidateRecomRecord_resultStandardScheme getScheme() {
        return new getCandidateRecomRecord_resultStandardScheme();
      }
    }

    private static class getCandidateRecomRecord_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCandidateRecomRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCandidateRecomRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCandidateRecomRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCandidateRecomRecord_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCandidateRecomRecord_resultTupleScheme getScheme() {
        return new getCandidateRecomRecord_resultTupleScheme();
      }
    }

    private static class getCandidateRecomRecord_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCandidateRecomRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCandidateRecomRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCandidateRecomRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listCandidateRecomRecord_args implements org.apache.thrift.TBase<listCandidateRecomRecord_args, listCandidateRecomRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<listCandidateRecomRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCandidateRecomRecord_args");

    private static final org.apache.thrift.protocol.TField POST_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("postUserId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CLICK_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("clickTime", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField RECOMS_FIELD_DESC = new org.apache.thrift.protocol.TField("recoms", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listCandidateRecomRecord_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listCandidateRecomRecord_argsTupleSchemeFactory();

    public int postUserId; // required
    public java.lang.String clickTime; // required
    public java.util.List<java.lang.Integer> recoms; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      POST_USER_ID((short)1, "postUserId"),
      CLICK_TIME((short)2, "clickTime"),
      RECOMS((short)3, "recoms");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // POST_USER_ID
            return POST_USER_ID;
          case 2: // CLICK_TIME
            return CLICK_TIME;
          case 3: // RECOMS
            return RECOMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __POSTUSERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.POST_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("postUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CLICK_TIME, new org.apache.thrift.meta_data.FieldMetaData("clickTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RECOMS, new org.apache.thrift.meta_data.FieldMetaData("recoms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCandidateRecomRecord_args.class, metaDataMap);
    }

    public listCandidateRecomRecord_args() {
    }

    public listCandidateRecomRecord_args(
      int postUserId,
      java.lang.String clickTime,
      java.util.List<java.lang.Integer> recoms)
    {
      this();
      this.postUserId = postUserId;
      setPostUserIdIsSet(true);
      this.clickTime = clickTime;
      this.recoms = recoms;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCandidateRecomRecord_args(listCandidateRecomRecord_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.postUserId = other.postUserId;
      if (other.isSetClickTime()) {
        this.clickTime = other.clickTime;
      }
      if (other.isSetRecoms()) {
        java.util.List<java.lang.Integer> __this__recoms = new java.util.ArrayList<java.lang.Integer>(other.recoms);
        this.recoms = __this__recoms;
      }
    }

    public listCandidateRecomRecord_args deepCopy() {
      return new listCandidateRecomRecord_args(this);
    }

    @Override
    public void clear() {
      setPostUserIdIsSet(false);
      this.postUserId = 0;
      this.clickTime = null;
      this.recoms = null;
    }

    public int getPostUserId() {
      return this.postUserId;
    }

    public listCandidateRecomRecord_args setPostUserId(int postUserId) {
      this.postUserId = postUserId;
      setPostUserIdIsSet(true);
      return this;
    }

    public void unsetPostUserId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSTUSERID_ISSET_ID);
    }

    /** Returns true if field postUserId is set (has been assigned a value) and false otherwise */
    public boolean isSetPostUserId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSTUSERID_ISSET_ID);
    }

    public void setPostUserIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSTUSERID_ISSET_ID, value);
    }

    public java.lang.String getClickTime() {
      return this.clickTime;
    }

    public listCandidateRecomRecord_args setClickTime(java.lang.String clickTime) {
      this.clickTime = clickTime;
      return this;
    }

    public void unsetClickTime() {
      this.clickTime = null;
    }

    /** Returns true if field clickTime is set (has been assigned a value) and false otherwise */
    public boolean isSetClickTime() {
      return this.clickTime != null;
    }

    public void setClickTimeIsSet(boolean value) {
      if (!value) {
        this.clickTime = null;
      }
    }

    public int getRecomsSize() {
      return (this.recoms == null) ? 0 : this.recoms.size();
    }

    public java.util.Iterator<java.lang.Integer> getRecomsIterator() {
      return (this.recoms == null) ? null : this.recoms.iterator();
    }

    public void addToRecoms(int elem) {
      if (this.recoms == null) {
        this.recoms = new java.util.ArrayList<java.lang.Integer>();
      }
      this.recoms.add(elem);
    }

    public java.util.List<java.lang.Integer> getRecoms() {
      return this.recoms;
    }

    public listCandidateRecomRecord_args setRecoms(java.util.List<java.lang.Integer> recoms) {
      this.recoms = recoms;
      return this;
    }

    public void unsetRecoms() {
      this.recoms = null;
    }

    /** Returns true if field recoms is set (has been assigned a value) and false otherwise */
    public boolean isSetRecoms() {
      return this.recoms != null;
    }

    public void setRecomsIsSet(boolean value) {
      if (!value) {
        this.recoms = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case POST_USER_ID:
        if (value == null) {
          unsetPostUserId();
        } else {
          setPostUserId((java.lang.Integer)value);
        }
        break;

      case CLICK_TIME:
        if (value == null) {
          unsetClickTime();
        } else {
          setClickTime((java.lang.String)value);
        }
        break;

      case RECOMS:
        if (value == null) {
          unsetRecoms();
        } else {
          setRecoms((java.util.List<java.lang.Integer>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case POST_USER_ID:
        return getPostUserId();

      case CLICK_TIME:
        return getClickTime();

      case RECOMS:
        return getRecoms();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case POST_USER_ID:
        return isSetPostUserId();
      case CLICK_TIME:
        return isSetClickTime();
      case RECOMS:
        return isSetRecoms();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listCandidateRecomRecord_args)
        return this.equals((listCandidateRecomRecord_args)that);
      return false;
    }

    public boolean equals(listCandidateRecomRecord_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_postUserId = true;
      boolean that_present_postUserId = true;
      if (this_present_postUserId || that_present_postUserId) {
        if (!(this_present_postUserId && that_present_postUserId))
          return false;
        if (this.postUserId != that.postUserId)
          return false;
      }

      boolean this_present_clickTime = true && this.isSetClickTime();
      boolean that_present_clickTime = true && that.isSetClickTime();
      if (this_present_clickTime || that_present_clickTime) {
        if (!(this_present_clickTime && that_present_clickTime))
          return false;
        if (!this.clickTime.equals(that.clickTime))
          return false;
      }

      boolean this_present_recoms = true && this.isSetRecoms();
      boolean that_present_recoms = true && that.isSetRecoms();
      if (this_present_recoms || that_present_recoms) {
        if (!(this_present_recoms && that_present_recoms))
          return false;
        if (!this.recoms.equals(that.recoms))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + postUserId;

      hashCode = hashCode * 8191 + ((isSetClickTime()) ? 131071 : 524287);
      if (isSetClickTime())
        hashCode = hashCode * 8191 + clickTime.hashCode();

      hashCode = hashCode * 8191 + ((isSetRecoms()) ? 131071 : 524287);
      if (isSetRecoms())
        hashCode = hashCode * 8191 + recoms.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listCandidateRecomRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPostUserId()).compareTo(other.isSetPostUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPostUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postUserId, other.postUserId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetClickTime()).compareTo(other.isSetClickTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClickTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clickTime, other.clickTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRecoms()).compareTo(other.isSetRecoms());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecoms()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recoms, other.recoms);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listCandidateRecomRecord_args(");
      boolean first = true;

      sb.append("postUserId:");
      sb.append(this.postUserId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clickTime:");
      if (this.clickTime == null) {
        sb.append("null");
      } else {
        sb.append(this.clickTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("recoms:");
      if (this.recoms == null) {
        sb.append("null");
      } else {
        sb.append(this.recoms);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCandidateRecomRecord_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateRecomRecord_argsStandardScheme getScheme() {
        return new listCandidateRecomRecord_argsStandardScheme();
      }
    }

    private static class listCandidateRecomRecord_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listCandidateRecomRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCandidateRecomRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // POST_USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.postUserId = iprot.readI32();
                struct.setPostUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLICK_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clickTime = iprot.readString();
                struct.setClickTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RECOMS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list74 = iprot.readListBegin();
                  struct.recoms = new java.util.ArrayList<java.lang.Integer>(_list74.size);
                  int _elem75;
                  for (int _i76 = 0; _i76 < _list74.size; ++_i76)
                  {
                    _elem75 = iprot.readI32();
                    struct.recoms.add(_elem75);
                  }
                  iprot.readListEnd();
                }
                struct.setRecomsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCandidateRecomRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(POST_USER_ID_FIELD_DESC);
        oprot.writeI32(struct.postUserId);
        oprot.writeFieldEnd();
        if (struct.clickTime != null) {
          oprot.writeFieldBegin(CLICK_TIME_FIELD_DESC);
          oprot.writeString(struct.clickTime);
          oprot.writeFieldEnd();
        }
        if (struct.recoms != null) {
          oprot.writeFieldBegin(RECOMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.recoms.size()));
            for (int _iter77 : struct.recoms)
            {
              oprot.writeI32(_iter77);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCandidateRecomRecord_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateRecomRecord_argsTupleScheme getScheme() {
        return new listCandidateRecomRecord_argsTupleScheme();
      }
    }

    private static class listCandidateRecomRecord_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listCandidateRecomRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCandidateRecomRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPostUserId()) {
          optionals.set(0);
        }
        if (struct.isSetClickTime()) {
          optionals.set(1);
        }
        if (struct.isSetRecoms()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPostUserId()) {
          oprot.writeI32(struct.postUserId);
        }
        if (struct.isSetClickTime()) {
          oprot.writeString(struct.clickTime);
        }
        if (struct.isSetRecoms()) {
          {
            oprot.writeI32(struct.recoms.size());
            for (int _iter78 : struct.recoms)
            {
              oprot.writeI32(_iter78);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCandidateRecomRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.postUserId = iprot.readI32();
          struct.setPostUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clickTime = iprot.readString();
          struct.setClickTimeIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list79 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.recoms = new java.util.ArrayList<java.lang.Integer>(_list79.size);
            int _elem80;
            for (int _i81 = 0; _i81 < _list79.size; ++_i81)
            {
              _elem80 = iprot.readI32();
              struct.recoms.add(_elem80);
            }
          }
          struct.setRecomsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listCandidateRecomRecord_result implements org.apache.thrift.TBase<listCandidateRecomRecord_result, listCandidateRecomRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<listCandidateRecomRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCandidateRecomRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listCandidateRecomRecord_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listCandidateRecomRecord_resultTupleSchemeFactory();

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> success; // required
    public com.moseeker.thrift.gen.common.struct.CURDException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.CURDException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCandidateRecomRecord_result.class, metaDataMap);
    }

    public listCandidateRecomRecord_result() {
    }

    public listCandidateRecomRecord_result(
      java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> success,
      com.moseeker.thrift.gen.common.struct.CURDException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCandidateRecomRecord_result(listCandidateRecomRecord_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> __this__success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>(other.success.size());
        for (com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO other_element : other.success) {
          __this__success.add(new com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.CURDException(other.e);
      }
    }

    public listCandidateRecomRecord_result deepCopy() {
      return new listCandidateRecomRecord_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> getSuccess() {
      return this.success;
    }

    public listCandidateRecomRecord_result setSuccess(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.common.struct.CURDException getE() {
      return this.e;
    }

    public listCandidateRecomRecord_result setE(com.moseeker.thrift.gen.common.struct.CURDException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.CURDException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listCandidateRecomRecord_result)
        return this.equals((listCandidateRecomRecord_result)that);
      return false;
    }

    public boolean equals(listCandidateRecomRecord_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listCandidateRecomRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listCandidateRecomRecord_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCandidateRecomRecord_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateRecomRecord_resultStandardScheme getScheme() {
        return new listCandidateRecomRecord_resultStandardScheme();
      }
    }

    private static class listCandidateRecomRecord_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listCandidateRecomRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCandidateRecomRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list82 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>(_list82.size);
                  com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO _elem83;
                  for (int _i84 = 0; _i84 < _list82.size; ++_i84)
                  {
                    _elem83 = new com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO();
                    _elem83.read(iprot);
                    struct.success.add(_elem83);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.CURDException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCandidateRecomRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO _iter85 : struct.success)
            {
              _iter85.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCandidateRecomRecord_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateRecomRecord_resultTupleScheme getScheme() {
        return new listCandidateRecomRecord_resultTupleScheme();
      }
    }

    private static class listCandidateRecomRecord_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listCandidateRecomRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCandidateRecomRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO _iter86 : struct.success)
            {
              _iter86.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCandidateRecomRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>(_list87.size);
            com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO _elem88;
            for (int _i89 = 0; _i89 < _list87.size; ++_i89)
            {
              _elem88 = new com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO();
              _elem88.read(iprot);
              struct.success.add(_elem88);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.CURDException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listCandidateRecomRecordExceptId_args implements org.apache.thrift.TBase<listCandidateRecomRecordExceptId_args, listCandidateRecomRecordExceptId_args._Fields>, java.io.Serializable, Cloneable, Comparable<listCandidateRecomRecordExceptId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCandidateRecomRecordExceptId_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField POST_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("postUserId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField CLICK_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("clickTime", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField RECOMS_FIELD_DESC = new org.apache.thrift.protocol.TField("recoms", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listCandidateRecomRecordExceptId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listCandidateRecomRecordExceptId_argsTupleSchemeFactory();

    public int id; // required
    public int postUserId; // required
    public java.lang.String clickTime; // required
    public java.util.List<java.lang.Integer> recoms; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      POST_USER_ID((short)2, "postUserId"),
      CLICK_TIME((short)3, "clickTime"),
      RECOMS((short)4, "recoms");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // POST_USER_ID
            return POST_USER_ID;
          case 3: // CLICK_TIME
            return CLICK_TIME;
          case 4: // RECOMS
            return RECOMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private static final int __POSTUSERID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.POST_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("postUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CLICK_TIME, new org.apache.thrift.meta_data.FieldMetaData("clickTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RECOMS, new org.apache.thrift.meta_data.FieldMetaData("recoms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCandidateRecomRecordExceptId_args.class, metaDataMap);
    }

    public listCandidateRecomRecordExceptId_args() {
    }

    public listCandidateRecomRecordExceptId_args(
      int id,
      int postUserId,
      java.lang.String clickTime,
      java.util.List<java.lang.Integer> recoms)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.postUserId = postUserId;
      setPostUserIdIsSet(true);
      this.clickTime = clickTime;
      this.recoms = recoms;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCandidateRecomRecordExceptId_args(listCandidateRecomRecordExceptId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      this.postUserId = other.postUserId;
      if (other.isSetClickTime()) {
        this.clickTime = other.clickTime;
      }
      if (other.isSetRecoms()) {
        java.util.List<java.lang.Integer> __this__recoms = new java.util.ArrayList<java.lang.Integer>(other.recoms);
        this.recoms = __this__recoms;
      }
    }

    public listCandidateRecomRecordExceptId_args deepCopy() {
      return new listCandidateRecomRecordExceptId_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      setPostUserIdIsSet(false);
      this.postUserId = 0;
      this.clickTime = null;
      this.recoms = null;
    }

    public int getId() {
      return this.id;
    }

    public listCandidateRecomRecordExceptId_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public int getPostUserId() {
      return this.postUserId;
    }

    public listCandidateRecomRecordExceptId_args setPostUserId(int postUserId) {
      this.postUserId = postUserId;
      setPostUserIdIsSet(true);
      return this;
    }

    public void unsetPostUserId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSTUSERID_ISSET_ID);
    }

    /** Returns true if field postUserId is set (has been assigned a value) and false otherwise */
    public boolean isSetPostUserId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSTUSERID_ISSET_ID);
    }

    public void setPostUserIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSTUSERID_ISSET_ID, value);
    }

    public java.lang.String getClickTime() {
      return this.clickTime;
    }

    public listCandidateRecomRecordExceptId_args setClickTime(java.lang.String clickTime) {
      this.clickTime = clickTime;
      return this;
    }

    public void unsetClickTime() {
      this.clickTime = null;
    }

    /** Returns true if field clickTime is set (has been assigned a value) and false otherwise */
    public boolean isSetClickTime() {
      return this.clickTime != null;
    }

    public void setClickTimeIsSet(boolean value) {
      if (!value) {
        this.clickTime = null;
      }
    }

    public int getRecomsSize() {
      return (this.recoms == null) ? 0 : this.recoms.size();
    }

    public java.util.Iterator<java.lang.Integer> getRecomsIterator() {
      return (this.recoms == null) ? null : this.recoms.iterator();
    }

    public void addToRecoms(int elem) {
      if (this.recoms == null) {
        this.recoms = new java.util.ArrayList<java.lang.Integer>();
      }
      this.recoms.add(elem);
    }

    public java.util.List<java.lang.Integer> getRecoms() {
      return this.recoms;
    }

    public listCandidateRecomRecordExceptId_args setRecoms(java.util.List<java.lang.Integer> recoms) {
      this.recoms = recoms;
      return this;
    }

    public void unsetRecoms() {
      this.recoms = null;
    }

    /** Returns true if field recoms is set (has been assigned a value) and false otherwise */
    public boolean isSetRecoms() {
      return this.recoms != null;
    }

    public void setRecomsIsSet(boolean value) {
      if (!value) {
        this.recoms = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((java.lang.Integer)value);
        }
        break;

      case POST_USER_ID:
        if (value == null) {
          unsetPostUserId();
        } else {
          setPostUserId((java.lang.Integer)value);
        }
        break;

      case CLICK_TIME:
        if (value == null) {
          unsetClickTime();
        } else {
          setClickTime((java.lang.String)value);
        }
        break;

      case RECOMS:
        if (value == null) {
          unsetRecoms();
        } else {
          setRecoms((java.util.List<java.lang.Integer>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case POST_USER_ID:
        return getPostUserId();

      case CLICK_TIME:
        return getClickTime();

      case RECOMS:
        return getRecoms();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case POST_USER_ID:
        return isSetPostUserId();
      case CLICK_TIME:
        return isSetClickTime();
      case RECOMS:
        return isSetRecoms();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listCandidateRecomRecordExceptId_args)
        return this.equals((listCandidateRecomRecordExceptId_args)that);
      return false;
    }

    public boolean equals(listCandidateRecomRecordExceptId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_postUserId = true;
      boolean that_present_postUserId = true;
      if (this_present_postUserId || that_present_postUserId) {
        if (!(this_present_postUserId && that_present_postUserId))
          return false;
        if (this.postUserId != that.postUserId)
          return false;
      }

      boolean this_present_clickTime = true && this.isSetClickTime();
      boolean that_present_clickTime = true && that.isSetClickTime();
      if (this_present_clickTime || that_present_clickTime) {
        if (!(this_present_clickTime && that_present_clickTime))
          return false;
        if (!this.clickTime.equals(that.clickTime))
          return false;
      }

      boolean this_present_recoms = true && this.isSetRecoms();
      boolean that_present_recoms = true && that.isSetRecoms();
      if (this_present_recoms || that_present_recoms) {
        if (!(this_present_recoms && that_present_recoms))
          return false;
        if (!this.recoms.equals(that.recoms))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + id;

      hashCode = hashCode * 8191 + postUserId;

      hashCode = hashCode * 8191 + ((isSetClickTime()) ? 131071 : 524287);
      if (isSetClickTime())
        hashCode = hashCode * 8191 + clickTime.hashCode();

      hashCode = hashCode * 8191 + ((isSetRecoms()) ? 131071 : 524287);
      if (isSetRecoms())
        hashCode = hashCode * 8191 + recoms.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listCandidateRecomRecordExceptId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPostUserId()).compareTo(other.isSetPostUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPostUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postUserId, other.postUserId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetClickTime()).compareTo(other.isSetClickTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClickTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clickTime, other.clickTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRecoms()).compareTo(other.isSetRecoms());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecoms()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recoms, other.recoms);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listCandidateRecomRecordExceptId_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("postUserId:");
      sb.append(this.postUserId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clickTime:");
      if (this.clickTime == null) {
        sb.append("null");
      } else {
        sb.append(this.clickTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("recoms:");
      if (this.recoms == null) {
        sb.append("null");
      } else {
        sb.append(this.recoms);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCandidateRecomRecordExceptId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateRecomRecordExceptId_argsStandardScheme getScheme() {
        return new listCandidateRecomRecordExceptId_argsStandardScheme();
      }
    }

    private static class listCandidateRecomRecordExceptId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listCandidateRecomRecordExceptId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCandidateRecomRecordExceptId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // POST_USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.postUserId = iprot.readI32();
                struct.setPostUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CLICK_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clickTime = iprot.readString();
                struct.setClickTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RECOMS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list90 = iprot.readListBegin();
                  struct.recoms = new java.util.ArrayList<java.lang.Integer>(_list90.size);
                  int _elem91;
                  for (int _i92 = 0; _i92 < _list90.size; ++_i92)
                  {
                    _elem91 = iprot.readI32();
                    struct.recoms.add(_elem91);
                  }
                  iprot.readListEnd();
                }
                struct.setRecomsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCandidateRecomRecordExceptId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(POST_USER_ID_FIELD_DESC);
        oprot.writeI32(struct.postUserId);
        oprot.writeFieldEnd();
        if (struct.clickTime != null) {
          oprot.writeFieldBegin(CLICK_TIME_FIELD_DESC);
          oprot.writeString(struct.clickTime);
          oprot.writeFieldEnd();
        }
        if (struct.recoms != null) {
          oprot.writeFieldBegin(RECOMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.recoms.size()));
            for (int _iter93 : struct.recoms)
            {
              oprot.writeI32(_iter93);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCandidateRecomRecordExceptId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateRecomRecordExceptId_argsTupleScheme getScheme() {
        return new listCandidateRecomRecordExceptId_argsTupleScheme();
      }
    }

    private static class listCandidateRecomRecordExceptId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listCandidateRecomRecordExceptId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCandidateRecomRecordExceptId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetPostUserId()) {
          optionals.set(1);
        }
        if (struct.isSetClickTime()) {
          optionals.set(2);
        }
        if (struct.isSetRecoms()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
        if (struct.isSetPostUserId()) {
          oprot.writeI32(struct.postUserId);
        }
        if (struct.isSetClickTime()) {
          oprot.writeString(struct.clickTime);
        }
        if (struct.isSetRecoms()) {
          {
            oprot.writeI32(struct.recoms.size());
            for (int _iter94 : struct.recoms)
            {
              oprot.writeI32(_iter94);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCandidateRecomRecordExceptId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.postUserId = iprot.readI32();
          struct.setPostUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.clickTime = iprot.readString();
          struct.setClickTimeIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.recoms = new java.util.ArrayList<java.lang.Integer>(_list95.size);
            int _elem96;
            for (int _i97 = 0; _i97 < _list95.size; ++_i97)
            {
              _elem96 = iprot.readI32();
              struct.recoms.add(_elem96);
            }
          }
          struct.setRecomsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listCandidateRecomRecordExceptId_result implements org.apache.thrift.TBase<listCandidateRecomRecordExceptId_result, listCandidateRecomRecordExceptId_result._Fields>, java.io.Serializable, Cloneable, Comparable<listCandidateRecomRecordExceptId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCandidateRecomRecordExceptId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listCandidateRecomRecordExceptId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listCandidateRecomRecordExceptId_resultTupleSchemeFactory();

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> success; // required
    public com.moseeker.thrift.gen.common.struct.CURDException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.CURDException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCandidateRecomRecordExceptId_result.class, metaDataMap);
    }

    public listCandidateRecomRecordExceptId_result() {
    }

    public listCandidateRecomRecordExceptId_result(
      java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> success,
      com.moseeker.thrift.gen.common.struct.CURDException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCandidateRecomRecordExceptId_result(listCandidateRecomRecordExceptId_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> __this__success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>(other.success.size());
        for (com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO other_element : other.success) {
          __this__success.add(new com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.CURDException(other.e);
      }
    }

    public listCandidateRecomRecordExceptId_result deepCopy() {
      return new listCandidateRecomRecordExceptId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> getSuccess() {
      return this.success;
    }

    public listCandidateRecomRecordExceptId_result setSuccess(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.common.struct.CURDException getE() {
      return this.e;
    }

    public listCandidateRecomRecordExceptId_result setE(com.moseeker.thrift.gen.common.struct.CURDException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.CURDException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listCandidateRecomRecordExceptId_result)
        return this.equals((listCandidateRecomRecordExceptId_result)that);
      return false;
    }

    public boolean equals(listCandidateRecomRecordExceptId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listCandidateRecomRecordExceptId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listCandidateRecomRecordExceptId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCandidateRecomRecordExceptId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateRecomRecordExceptId_resultStandardScheme getScheme() {
        return new listCandidateRecomRecordExceptId_resultStandardScheme();
      }
    }

    private static class listCandidateRecomRecordExceptId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listCandidateRecomRecordExceptId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCandidateRecomRecordExceptId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list98 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>(_list98.size);
                  com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO _elem99;
                  for (int _i100 = 0; _i100 < _list98.size; ++_i100)
                  {
                    _elem99 = new com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO();
                    _elem99.read(iprot);
                    struct.success.add(_elem99);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.CURDException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCandidateRecomRecordExceptId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO _iter101 : struct.success)
            {
              _iter101.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCandidateRecomRecordExceptId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateRecomRecordExceptId_resultTupleScheme getScheme() {
        return new listCandidateRecomRecordExceptId_resultTupleScheme();
      }
    }

    private static class listCandidateRecomRecordExceptId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listCandidateRecomRecordExceptId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCandidateRecomRecordExceptId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO _iter102 : struct.success)
            {
              _iter102.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCandidateRecomRecordExceptId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list103 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>(_list103.size);
            com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO _elem104;
            for (int _i105 = 0; _i105 < _list103.size; ++_i105)
            {
              _elem104 = new com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO();
              _elem104.read(iprot);
              struct.success.add(_elem104);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.CURDException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class countCandidateRecomRecordCustom_args implements org.apache.thrift.TBase<countCandidateRecomRecordCustom_args, countCandidateRecomRecordCustom_args._Fields>, java.io.Serializable, Cloneable, Comparable<countCandidateRecomRecordCustom_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countCandidateRecomRecordCustom_args");

    private static final org.apache.thrift.protocol.TField POST_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("postUserId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CLICK_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("clickTime", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField RECOMS_FIELD_DESC = new org.apache.thrift.protocol.TField("recoms", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new countCandidateRecomRecordCustom_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new countCandidateRecomRecordCustom_argsTupleSchemeFactory();

    public int postUserId; // required
    public java.lang.String clickTime; // required
    public java.util.List<java.lang.Integer> recoms; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      POST_USER_ID((short)1, "postUserId"),
      CLICK_TIME((short)2, "clickTime"),
      RECOMS((short)3, "recoms");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // POST_USER_ID
            return POST_USER_ID;
          case 2: // CLICK_TIME
            return CLICK_TIME;
          case 3: // RECOMS
            return RECOMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __POSTUSERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.POST_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("postUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CLICK_TIME, new org.apache.thrift.meta_data.FieldMetaData("clickTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RECOMS, new org.apache.thrift.meta_data.FieldMetaData("recoms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countCandidateRecomRecordCustom_args.class, metaDataMap);
    }

    public countCandidateRecomRecordCustom_args() {
    }

    public countCandidateRecomRecordCustom_args(
      int postUserId,
      java.lang.String clickTime,
      java.util.List<java.lang.Integer> recoms)
    {
      this();
      this.postUserId = postUserId;
      setPostUserIdIsSet(true);
      this.clickTime = clickTime;
      this.recoms = recoms;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countCandidateRecomRecordCustom_args(countCandidateRecomRecordCustom_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.postUserId = other.postUserId;
      if (other.isSetClickTime()) {
        this.clickTime = other.clickTime;
      }
      if (other.isSetRecoms()) {
        java.util.List<java.lang.Integer> __this__recoms = new java.util.ArrayList<java.lang.Integer>(other.recoms);
        this.recoms = __this__recoms;
      }
    }

    public countCandidateRecomRecordCustom_args deepCopy() {
      return new countCandidateRecomRecordCustom_args(this);
    }

    @Override
    public void clear() {
      setPostUserIdIsSet(false);
      this.postUserId = 0;
      this.clickTime = null;
      this.recoms = null;
    }

    public int getPostUserId() {
      return this.postUserId;
    }

    public countCandidateRecomRecordCustom_args setPostUserId(int postUserId) {
      this.postUserId = postUserId;
      setPostUserIdIsSet(true);
      return this;
    }

    public void unsetPostUserId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSTUSERID_ISSET_ID);
    }

    /** Returns true if field postUserId is set (has been assigned a value) and false otherwise */
    public boolean isSetPostUserId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSTUSERID_ISSET_ID);
    }

    public void setPostUserIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSTUSERID_ISSET_ID, value);
    }

    public java.lang.String getClickTime() {
      return this.clickTime;
    }

    public countCandidateRecomRecordCustom_args setClickTime(java.lang.String clickTime) {
      this.clickTime = clickTime;
      return this;
    }

    public void unsetClickTime() {
      this.clickTime = null;
    }

    /** Returns true if field clickTime is set (has been assigned a value) and false otherwise */
    public boolean isSetClickTime() {
      return this.clickTime != null;
    }

    public void setClickTimeIsSet(boolean value) {
      if (!value) {
        this.clickTime = null;
      }
    }

    public int getRecomsSize() {
      return (this.recoms == null) ? 0 : this.recoms.size();
    }

    public java.util.Iterator<java.lang.Integer> getRecomsIterator() {
      return (this.recoms == null) ? null : this.recoms.iterator();
    }

    public void addToRecoms(int elem) {
      if (this.recoms == null) {
        this.recoms = new java.util.ArrayList<java.lang.Integer>();
      }
      this.recoms.add(elem);
    }

    public java.util.List<java.lang.Integer> getRecoms() {
      return this.recoms;
    }

    public countCandidateRecomRecordCustom_args setRecoms(java.util.List<java.lang.Integer> recoms) {
      this.recoms = recoms;
      return this;
    }

    public void unsetRecoms() {
      this.recoms = null;
    }

    /** Returns true if field recoms is set (has been assigned a value) and false otherwise */
    public boolean isSetRecoms() {
      return this.recoms != null;
    }

    public void setRecomsIsSet(boolean value) {
      if (!value) {
        this.recoms = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case POST_USER_ID:
        if (value == null) {
          unsetPostUserId();
        } else {
          setPostUserId((java.lang.Integer)value);
        }
        break;

      case CLICK_TIME:
        if (value == null) {
          unsetClickTime();
        } else {
          setClickTime((java.lang.String)value);
        }
        break;

      case RECOMS:
        if (value == null) {
          unsetRecoms();
        } else {
          setRecoms((java.util.List<java.lang.Integer>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case POST_USER_ID:
        return getPostUserId();

      case CLICK_TIME:
        return getClickTime();

      case RECOMS:
        return getRecoms();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case POST_USER_ID:
        return isSetPostUserId();
      case CLICK_TIME:
        return isSetClickTime();
      case RECOMS:
        return isSetRecoms();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof countCandidateRecomRecordCustom_args)
        return this.equals((countCandidateRecomRecordCustom_args)that);
      return false;
    }

    public boolean equals(countCandidateRecomRecordCustom_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_postUserId = true;
      boolean that_present_postUserId = true;
      if (this_present_postUserId || that_present_postUserId) {
        if (!(this_present_postUserId && that_present_postUserId))
          return false;
        if (this.postUserId != that.postUserId)
          return false;
      }

      boolean this_present_clickTime = true && this.isSetClickTime();
      boolean that_present_clickTime = true && that.isSetClickTime();
      if (this_present_clickTime || that_present_clickTime) {
        if (!(this_present_clickTime && that_present_clickTime))
          return false;
        if (!this.clickTime.equals(that.clickTime))
          return false;
      }

      boolean this_present_recoms = true && this.isSetRecoms();
      boolean that_present_recoms = true && that.isSetRecoms();
      if (this_present_recoms || that_present_recoms) {
        if (!(this_present_recoms && that_present_recoms))
          return false;
        if (!this.recoms.equals(that.recoms))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + postUserId;

      hashCode = hashCode * 8191 + ((isSetClickTime()) ? 131071 : 524287);
      if (isSetClickTime())
        hashCode = hashCode * 8191 + clickTime.hashCode();

      hashCode = hashCode * 8191 + ((isSetRecoms()) ? 131071 : 524287);
      if (isSetRecoms())
        hashCode = hashCode * 8191 + recoms.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(countCandidateRecomRecordCustom_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPostUserId()).compareTo(other.isSetPostUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPostUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postUserId, other.postUserId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetClickTime()).compareTo(other.isSetClickTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClickTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clickTime, other.clickTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRecoms()).compareTo(other.isSetRecoms());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecoms()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recoms, other.recoms);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("countCandidateRecomRecordCustom_args(");
      boolean first = true;

      sb.append("postUserId:");
      sb.append(this.postUserId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clickTime:");
      if (this.clickTime == null) {
        sb.append("null");
      } else {
        sb.append(this.clickTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("recoms:");
      if (this.recoms == null) {
        sb.append("null");
      } else {
        sb.append(this.recoms);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countCandidateRecomRecordCustom_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countCandidateRecomRecordCustom_argsStandardScheme getScheme() {
        return new countCandidateRecomRecordCustom_argsStandardScheme();
      }
    }

    private static class countCandidateRecomRecordCustom_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<countCandidateRecomRecordCustom_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countCandidateRecomRecordCustom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // POST_USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.postUserId = iprot.readI32();
                struct.setPostUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLICK_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clickTime = iprot.readString();
                struct.setClickTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RECOMS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list106 = iprot.readListBegin();
                  struct.recoms = new java.util.ArrayList<java.lang.Integer>(_list106.size);
                  int _elem107;
                  for (int _i108 = 0; _i108 < _list106.size; ++_i108)
                  {
                    _elem107 = iprot.readI32();
                    struct.recoms.add(_elem107);
                  }
                  iprot.readListEnd();
                }
                struct.setRecomsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countCandidateRecomRecordCustom_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(POST_USER_ID_FIELD_DESC);
        oprot.writeI32(struct.postUserId);
        oprot.writeFieldEnd();
        if (struct.clickTime != null) {
          oprot.writeFieldBegin(CLICK_TIME_FIELD_DESC);
          oprot.writeString(struct.clickTime);
          oprot.writeFieldEnd();
        }
        if (struct.recoms != null) {
          oprot.writeFieldBegin(RECOMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.recoms.size()));
            for (int _iter109 : struct.recoms)
            {
              oprot.writeI32(_iter109);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countCandidateRecomRecordCustom_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countCandidateRecomRecordCustom_argsTupleScheme getScheme() {
        return new countCandidateRecomRecordCustom_argsTupleScheme();
      }
    }

    private static class countCandidateRecomRecordCustom_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<countCandidateRecomRecordCustom_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countCandidateRecomRecordCustom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPostUserId()) {
          optionals.set(0);
        }
        if (struct.isSetClickTime()) {
          optionals.set(1);
        }
        if (struct.isSetRecoms()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPostUserId()) {
          oprot.writeI32(struct.postUserId);
        }
        if (struct.isSetClickTime()) {
          oprot.writeString(struct.clickTime);
        }
        if (struct.isSetRecoms()) {
          {
            oprot.writeI32(struct.recoms.size());
            for (int _iter110 : struct.recoms)
            {
              oprot.writeI32(_iter110);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countCandidateRecomRecordCustom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.postUserId = iprot.readI32();
          struct.setPostUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clickTime = iprot.readString();
          struct.setClickTimeIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list111 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.recoms = new java.util.ArrayList<java.lang.Integer>(_list111.size);
            int _elem112;
            for (int _i113 = 0; _i113 < _list111.size; ++_i113)
            {
              _elem112 = iprot.readI32();
              struct.recoms.add(_elem112);
            }
          }
          struct.setRecomsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class countCandidateRecomRecordCustom_result implements org.apache.thrift.TBase<countCandidateRecomRecordCustom_result, countCandidateRecomRecordCustom_result._Fields>, java.io.Serializable, Cloneable, Comparable<countCandidateRecomRecordCustom_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countCandidateRecomRecordCustom_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new countCandidateRecomRecordCustom_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new countCandidateRecomRecordCustom_resultTupleSchemeFactory();

    public int success; // required
    public com.moseeker.thrift.gen.common.struct.CURDException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.CURDException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countCandidateRecomRecordCustom_result.class, metaDataMap);
    }

    public countCandidateRecomRecordCustom_result() {
    }

    public countCandidateRecomRecordCustom_result(
      int success,
      com.moseeker.thrift.gen.common.struct.CURDException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countCandidateRecomRecordCustom_result(countCandidateRecomRecordCustom_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.CURDException(other.e);
      }
    }

    public countCandidateRecomRecordCustom_result deepCopy() {
      return new countCandidateRecomRecordCustom_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public countCandidateRecomRecordCustom_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.moseeker.thrift.gen.common.struct.CURDException getE() {
      return this.e;
    }

    public countCandidateRecomRecordCustom_result setE(com.moseeker.thrift.gen.common.struct.CURDException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.CURDException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof countCandidateRecomRecordCustom_result)
        return this.equals((countCandidateRecomRecordCustom_result)that);
      return false;
    }

    public boolean equals(countCandidateRecomRecordCustom_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(countCandidateRecomRecordCustom_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("countCandidateRecomRecordCustom_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countCandidateRecomRecordCustom_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countCandidateRecomRecordCustom_resultStandardScheme getScheme() {
        return new countCandidateRecomRecordCustom_resultStandardScheme();
      }
    }

    private static class countCandidateRecomRecordCustom_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<countCandidateRecomRecordCustom_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countCandidateRecomRecordCustom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.CURDException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countCandidateRecomRecordCustom_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countCandidateRecomRecordCustom_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countCandidateRecomRecordCustom_resultTupleScheme getScheme() {
        return new countCandidateRecomRecordCustom_resultTupleScheme();
      }
    }

    private static class countCandidateRecomRecordCustom_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<countCandidateRecomRecordCustom_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countCandidateRecomRecordCustom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countCandidateRecomRecordCustom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.CURDException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listCandidateRecomRecords_args implements org.apache.thrift.TBase<listCandidateRecomRecords_args, listCandidateRecomRecords_args._Fields>, java.io.Serializable, Cloneable, Comparable<listCandidateRecomRecords_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCandidateRecomRecords_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listCandidateRecomRecords_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listCandidateRecomRecords_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.CommonQuery query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.CommonQuery.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCandidateRecomRecords_args.class, metaDataMap);
    }

    public listCandidateRecomRecords_args() {
    }

    public listCandidateRecomRecords_args(
      com.moseeker.thrift.gen.common.struct.CommonQuery query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCandidateRecomRecords_args(listCandidateRecomRecords_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.common.struct.CommonQuery(other.query);
      }
    }

    public listCandidateRecomRecords_args deepCopy() {
      return new listCandidateRecomRecords_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public com.moseeker.thrift.gen.common.struct.CommonQuery getQuery() {
      return this.query;
    }

    public listCandidateRecomRecords_args setQuery(com.moseeker.thrift.gen.common.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.common.struct.CommonQuery)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listCandidateRecomRecords_args)
        return this.equals((listCandidateRecomRecords_args)that);
      return false;
    }

    public boolean equals(listCandidateRecomRecords_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listCandidateRecomRecords_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listCandidateRecomRecords_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCandidateRecomRecords_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateRecomRecords_argsStandardScheme getScheme() {
        return new listCandidateRecomRecords_argsStandardScheme();
      }
    }

    private static class listCandidateRecomRecords_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listCandidateRecomRecords_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCandidateRecomRecords_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCandidateRecomRecords_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCandidateRecomRecords_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateRecomRecords_argsTupleScheme getScheme() {
        return new listCandidateRecomRecords_argsTupleScheme();
      }
    }

    private static class listCandidateRecomRecords_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listCandidateRecomRecords_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCandidateRecomRecords_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCandidateRecomRecords_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listCandidateRecomRecords_result implements org.apache.thrift.TBase<listCandidateRecomRecords_result, listCandidateRecomRecords_result._Fields>, java.io.Serializable, Cloneable, Comparable<listCandidateRecomRecords_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCandidateRecomRecords_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listCandidateRecomRecords_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listCandidateRecomRecords_resultTupleSchemeFactory();

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCandidateRecomRecords_result.class, metaDataMap);
    }

    public listCandidateRecomRecords_result() {
    }

    public listCandidateRecomRecords_result(
      java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCandidateRecomRecords_result(listCandidateRecomRecords_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> __this__success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>(other.success.size());
        for (com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO other_element : other.success) {
          __this__success.add(new com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO(other_element));
        }
        this.success = __this__success;
      }
    }

    public listCandidateRecomRecords_result deepCopy() {
      return new listCandidateRecomRecords_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> getSuccess() {
      return this.success;
    }

    public listCandidateRecomRecords_result setSuccess(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listCandidateRecomRecords_result)
        return this.equals((listCandidateRecomRecords_result)that);
      return false;
    }

    public boolean equals(listCandidateRecomRecords_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listCandidateRecomRecords_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listCandidateRecomRecords_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCandidateRecomRecords_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateRecomRecords_resultStandardScheme getScheme() {
        return new listCandidateRecomRecords_resultStandardScheme();
      }
    }

    private static class listCandidateRecomRecords_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listCandidateRecomRecords_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCandidateRecomRecords_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list114 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>(_list114.size);
                  com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO _elem115;
                  for (int _i116 = 0; _i116 < _list114.size; ++_i116)
                  {
                    _elem115 = new com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO();
                    _elem115.read(iprot);
                    struct.success.add(_elem115);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCandidateRecomRecords_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO _iter117 : struct.success)
            {
              _iter117.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCandidateRecomRecords_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateRecomRecords_resultTupleScheme getScheme() {
        return new listCandidateRecomRecords_resultTupleScheme();
      }
    }

    private static class listCandidateRecomRecords_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listCandidateRecomRecords_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCandidateRecomRecords_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO _iter118 : struct.success)
            {
              _iter118.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCandidateRecomRecords_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list119 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>(_list119.size);
            com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO _elem120;
            for (int _i121 = 0; _i121 < _list119.size; ++_i121)
            {
              _elem120 = new com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO();
              _elem120.read(iprot);
              struct.success.add(_elem120);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listCandidateRecomRecordsForApplied_args implements org.apache.thrift.TBase<listCandidateRecomRecordsForApplied_args, listCandidateRecomRecordsForApplied_args._Fields>, java.io.Serializable, Cloneable, Comparable<listCandidateRecomRecordsForApplied_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCandidateRecomRecordsForApplied_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNo", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listCandidateRecomRecordsForApplied_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listCandidateRecomRecordsForApplied_argsTupleSchemeFactory();

    public int userId; // required
    public int pageNo; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      PAGE_NO((short)2, "pageNo"),
      PAGE_SIZE((short)3, "pageSize");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // PAGE_NO
            return PAGE_NO;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __PAGENO_ISSET_ID = 1;
    private static final int __PAGESIZE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_NO, new org.apache.thrift.meta_data.FieldMetaData("pageNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCandidateRecomRecordsForApplied_args.class, metaDataMap);
    }

    public listCandidateRecomRecordsForApplied_args() {
    }

    public listCandidateRecomRecordsForApplied_args(
      int userId,
      int pageNo,
      int pageSize)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.pageNo = pageNo;
      setPageNoIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCandidateRecomRecordsForApplied_args(listCandidateRecomRecordsForApplied_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      this.pageNo = other.pageNo;
      this.pageSize = other.pageSize;
    }

    public listCandidateRecomRecordsForApplied_args deepCopy() {
      return new listCandidateRecomRecordsForApplied_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      setPageNoIsSet(false);
      this.pageNo = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public listCandidateRecomRecordsForApplied_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getPageNo() {
      return this.pageNo;
    }

    public listCandidateRecomRecordsForApplied_args setPageNo(int pageNo) {
      this.pageNo = pageNo;
      setPageNoIsSet(true);
      return this;
    }

    public void unsetPageNo() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    /** Returns true if field pageNo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNo() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    public void setPageNoIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGENO_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public listCandidateRecomRecordsForApplied_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.Integer)value);
        }
        break;

      case PAGE_NO:
        if (value == null) {
          unsetPageNo();
        } else {
          setPageNo((java.lang.Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case PAGE_NO:
        return getPageNo();

      case PAGE_SIZE:
        return getPageSize();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case PAGE_NO:
        return isSetPageNo();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listCandidateRecomRecordsForApplied_args)
        return this.equals((listCandidateRecomRecordsForApplied_args)that);
      return false;
    }

    public boolean equals(listCandidateRecomRecordsForApplied_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_pageNo = true;
      boolean that_present_pageNo = true;
      if (this_present_pageNo || that_present_pageNo) {
        if (!(this_present_pageNo && that_present_pageNo))
          return false;
        if (this.pageNo != that.pageNo)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + userId;

      hashCode = hashCode * 8191 + pageNo;

      hashCode = hashCode * 8191 + pageSize;

      return hashCode;
    }

    @Override
    public int compareTo(listCandidateRecomRecordsForApplied_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPageNo()).compareTo(other.isSetPageNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNo, other.pageNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listCandidateRecomRecordsForApplied_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNo:");
      sb.append(this.pageNo);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCandidateRecomRecordsForApplied_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateRecomRecordsForApplied_argsStandardScheme getScheme() {
        return new listCandidateRecomRecordsForApplied_argsStandardScheme();
      }
    }

    private static class listCandidateRecomRecordsForApplied_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listCandidateRecomRecordsForApplied_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCandidateRecomRecordsForApplied_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNo = iprot.readI32();
                struct.setPageNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCandidateRecomRecordsForApplied_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_NO_FIELD_DESC);
        oprot.writeI32(struct.pageNo);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCandidateRecomRecordsForApplied_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateRecomRecordsForApplied_argsTupleScheme getScheme() {
        return new listCandidateRecomRecordsForApplied_argsTupleScheme();
      }
    }

    private static class listCandidateRecomRecordsForApplied_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listCandidateRecomRecordsForApplied_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCandidateRecomRecordsForApplied_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetPageNo()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetPageNo()) {
          oprot.writeI32(struct.pageNo);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCandidateRecomRecordsForApplied_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageNo = iprot.readI32();
          struct.setPageNoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listCandidateRecomRecordsForApplied_result implements org.apache.thrift.TBase<listCandidateRecomRecordsForApplied_result, listCandidateRecomRecordsForApplied_result._Fields>, java.io.Serializable, Cloneable, Comparable<listCandidateRecomRecordsForApplied_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCandidateRecomRecordsForApplied_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listCandidateRecomRecordsForApplied_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listCandidateRecomRecordsForApplied_resultTupleSchemeFactory();

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCandidateRecomRecordsForApplied_result.class, metaDataMap);
    }

    public listCandidateRecomRecordsForApplied_result() {
    }

    public listCandidateRecomRecordsForApplied_result(
      java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCandidateRecomRecordsForApplied_result(listCandidateRecomRecordsForApplied_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> __this__success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>(other.success.size());
        for (com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO other_element : other.success) {
          __this__success.add(new com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO(other_element));
        }
        this.success = __this__success;
      }
    }

    public listCandidateRecomRecordsForApplied_result deepCopy() {
      return new listCandidateRecomRecordsForApplied_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> getSuccess() {
      return this.success;
    }

    public listCandidateRecomRecordsForApplied_result setSuccess(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listCandidateRecomRecordsForApplied_result)
        return this.equals((listCandidateRecomRecordsForApplied_result)that);
      return false;
    }

    public boolean equals(listCandidateRecomRecordsForApplied_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listCandidateRecomRecordsForApplied_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listCandidateRecomRecordsForApplied_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCandidateRecomRecordsForApplied_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateRecomRecordsForApplied_resultStandardScheme getScheme() {
        return new listCandidateRecomRecordsForApplied_resultStandardScheme();
      }
    }

    private static class listCandidateRecomRecordsForApplied_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listCandidateRecomRecordsForApplied_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCandidateRecomRecordsForApplied_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list122 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>(_list122.size);
                  com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO _elem123;
                  for (int _i124 = 0; _i124 < _list122.size; ++_i124)
                  {
                    _elem123 = new com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO();
                    _elem123.read(iprot);
                    struct.success.add(_elem123);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCandidateRecomRecordsForApplied_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO _iter125 : struct.success)
            {
              _iter125.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCandidateRecomRecordsForApplied_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateRecomRecordsForApplied_resultTupleScheme getScheme() {
        return new listCandidateRecomRecordsForApplied_resultTupleScheme();
      }
    }

    private static class listCandidateRecomRecordsForApplied_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listCandidateRecomRecordsForApplied_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCandidateRecomRecordsForApplied_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO _iter126 : struct.success)
            {
              _iter126.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCandidateRecomRecordsForApplied_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list127 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>(_list127.size);
            com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO _elem128;
            for (int _i129 = 0; _i129 < _list127.size; ++_i129)
            {
              _elem128 = new com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO();
              _elem128.read(iprot);
              struct.success.add(_elem128);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listInterestedCandidateRecomRecord_args implements org.apache.thrift.TBase<listInterestedCandidateRecomRecord_args, listInterestedCandidateRecomRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<listInterestedCandidateRecomRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listInterestedCandidateRecomRecord_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNo", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listInterestedCandidateRecomRecord_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listInterestedCandidateRecomRecord_argsTupleSchemeFactory();

    public int userId; // required
    public int pageNo; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      PAGE_NO((short)2, "pageNo"),
      PAGE_SIZE((short)3, "pageSize");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // PAGE_NO
            return PAGE_NO;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __PAGENO_ISSET_ID = 1;
    private static final int __PAGESIZE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_NO, new org.apache.thrift.meta_data.FieldMetaData("pageNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listInterestedCandidateRecomRecord_args.class, metaDataMap);
    }

    public listInterestedCandidateRecomRecord_args() {
    }

    public listInterestedCandidateRecomRecord_args(
      int userId,
      int pageNo,
      int pageSize)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.pageNo = pageNo;
      setPageNoIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listInterestedCandidateRecomRecord_args(listInterestedCandidateRecomRecord_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      this.pageNo = other.pageNo;
      this.pageSize = other.pageSize;
    }

    public listInterestedCandidateRecomRecord_args deepCopy() {
      return new listInterestedCandidateRecomRecord_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      setPageNoIsSet(false);
      this.pageNo = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public listInterestedCandidateRecomRecord_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getPageNo() {
      return this.pageNo;
    }

    public listInterestedCandidateRecomRecord_args setPageNo(int pageNo) {
      this.pageNo = pageNo;
      setPageNoIsSet(true);
      return this;
    }

    public void unsetPageNo() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    /** Returns true if field pageNo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNo() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    public void setPageNoIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGENO_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public listInterestedCandidateRecomRecord_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.Integer)value);
        }
        break;

      case PAGE_NO:
        if (value == null) {
          unsetPageNo();
        } else {
          setPageNo((java.lang.Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case PAGE_NO:
        return getPageNo();

      case PAGE_SIZE:
        return getPageSize();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case PAGE_NO:
        return isSetPageNo();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listInterestedCandidateRecomRecord_args)
        return this.equals((listInterestedCandidateRecomRecord_args)that);
      return false;
    }

    public boolean equals(listInterestedCandidateRecomRecord_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_pageNo = true;
      boolean that_present_pageNo = true;
      if (this_present_pageNo || that_present_pageNo) {
        if (!(this_present_pageNo && that_present_pageNo))
          return false;
        if (this.pageNo != that.pageNo)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + userId;

      hashCode = hashCode * 8191 + pageNo;

      hashCode = hashCode * 8191 + pageSize;

      return hashCode;
    }

    @Override
    public int compareTo(listInterestedCandidateRecomRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPageNo()).compareTo(other.isSetPageNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNo, other.pageNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listInterestedCandidateRecomRecord_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNo:");
      sb.append(this.pageNo);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listInterestedCandidateRecomRecord_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listInterestedCandidateRecomRecord_argsStandardScheme getScheme() {
        return new listInterestedCandidateRecomRecord_argsStandardScheme();
      }
    }

    private static class listInterestedCandidateRecomRecord_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listInterestedCandidateRecomRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listInterestedCandidateRecomRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNo = iprot.readI32();
                struct.setPageNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listInterestedCandidateRecomRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_NO_FIELD_DESC);
        oprot.writeI32(struct.pageNo);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listInterestedCandidateRecomRecord_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listInterestedCandidateRecomRecord_argsTupleScheme getScheme() {
        return new listInterestedCandidateRecomRecord_argsTupleScheme();
      }
    }

    private static class listInterestedCandidateRecomRecord_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listInterestedCandidateRecomRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listInterestedCandidateRecomRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetPageNo()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetPageNo()) {
          oprot.writeI32(struct.pageNo);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listInterestedCandidateRecomRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageNo = iprot.readI32();
          struct.setPageNoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listInterestedCandidateRecomRecord_result implements org.apache.thrift.TBase<listInterestedCandidateRecomRecord_result, listInterestedCandidateRecomRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<listInterestedCandidateRecomRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listInterestedCandidateRecomRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listInterestedCandidateRecomRecord_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listInterestedCandidateRecomRecord_resultTupleSchemeFactory();

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listInterestedCandidateRecomRecord_result.class, metaDataMap);
    }

    public listInterestedCandidateRecomRecord_result() {
    }

    public listInterestedCandidateRecomRecord_result(
      java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listInterestedCandidateRecomRecord_result(listInterestedCandidateRecomRecord_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> __this__success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>(other.success.size());
        for (com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO other_element : other.success) {
          __this__success.add(new com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO(other_element));
        }
        this.success = __this__success;
      }
    }

    public listInterestedCandidateRecomRecord_result deepCopy() {
      return new listInterestedCandidateRecomRecord_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> getSuccess() {
      return this.success;
    }

    public listInterestedCandidateRecomRecord_result setSuccess(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listInterestedCandidateRecomRecord_result)
        return this.equals((listInterestedCandidateRecomRecord_result)that);
      return false;
    }

    public boolean equals(listInterestedCandidateRecomRecord_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listInterestedCandidateRecomRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listInterestedCandidateRecomRecord_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listInterestedCandidateRecomRecord_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listInterestedCandidateRecomRecord_resultStandardScheme getScheme() {
        return new listInterestedCandidateRecomRecord_resultStandardScheme();
      }
    }

    private static class listInterestedCandidateRecomRecord_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listInterestedCandidateRecomRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listInterestedCandidateRecomRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list130 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>(_list130.size);
                  com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO _elem131;
                  for (int _i132 = 0; _i132 < _list130.size; ++_i132)
                  {
                    _elem131 = new com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO();
                    _elem131.read(iprot);
                    struct.success.add(_elem131);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listInterestedCandidateRecomRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO _iter133 : struct.success)
            {
              _iter133.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listInterestedCandidateRecomRecord_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listInterestedCandidateRecomRecord_resultTupleScheme getScheme() {
        return new listInterestedCandidateRecomRecord_resultTupleScheme();
      }
    }

    private static class listInterestedCandidateRecomRecord_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listInterestedCandidateRecomRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listInterestedCandidateRecomRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO _iter134 : struct.success)
            {
              _iter134.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listInterestedCandidateRecomRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list135 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>(_list135.size);
            com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO _elem136;
            for (int _i137 = 0; _i137 < _list135.size; ++_i137)
            {
              _elem136 = new com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO();
              _elem136.read(iprot);
              struct.success.add(_elem136);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listCandidateRecomRecordsByPositionSetAndPresenteeId_args implements org.apache.thrift.TBase<listCandidateRecomRecordsByPositionSetAndPresenteeId_args, listCandidateRecomRecordsByPositionSetAndPresenteeId_args._Fields>, java.io.Serializable, Cloneable, Comparable<listCandidateRecomRecordsByPositionSetAndPresenteeId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCandidateRecomRecordsByPositionSetAndPresenteeId_args");

    private static final org.apache.thrift.protocol.TField POSITION_ID_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("positionIdSet", org.apache.thrift.protocol.TType.SET, (short)1);
    private static final org.apache.thrift.protocol.TField PRESENTEE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("presenteeId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNo", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listCandidateRecomRecordsByPositionSetAndPresenteeId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listCandidateRecomRecordsByPositionSetAndPresenteeId_argsTupleSchemeFactory();

    public java.util.Set<java.lang.Integer> positionIdSet; // required
    public int presenteeId; // required
    public int pageNo; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      POSITION_ID_SET((short)1, "positionIdSet"),
      PRESENTEE_ID((short)2, "presenteeId"),
      PAGE_NO((short)3, "pageNo"),
      PAGE_SIZE((short)4, "pageSize");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // POSITION_ID_SET
            return POSITION_ID_SET;
          case 2: // PRESENTEE_ID
            return PRESENTEE_ID;
          case 3: // PAGE_NO
            return PAGE_NO;
          case 4: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PRESENTEEID_ISSET_ID = 0;
    private static final int __PAGENO_ISSET_ID = 1;
    private static final int __PAGESIZE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.POSITION_ID_SET, new org.apache.thrift.meta_data.FieldMetaData("positionIdSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.PRESENTEE_ID, new org.apache.thrift.meta_data.FieldMetaData("presenteeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_NO, new org.apache.thrift.meta_data.FieldMetaData("pageNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCandidateRecomRecordsByPositionSetAndPresenteeId_args.class, metaDataMap);
    }

    public listCandidateRecomRecordsByPositionSetAndPresenteeId_args() {
    }

    public listCandidateRecomRecordsByPositionSetAndPresenteeId_args(
      java.util.Set<java.lang.Integer> positionIdSet,
      int presenteeId,
      int pageNo,
      int pageSize)
    {
      this();
      this.positionIdSet = positionIdSet;
      this.presenteeId = presenteeId;
      setPresenteeIdIsSet(true);
      this.pageNo = pageNo;
      setPageNoIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCandidateRecomRecordsByPositionSetAndPresenteeId_args(listCandidateRecomRecordsByPositionSetAndPresenteeId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPositionIdSet()) {
        java.util.Set<java.lang.Integer> __this__positionIdSet = new java.util.HashSet<java.lang.Integer>(other.positionIdSet);
        this.positionIdSet = __this__positionIdSet;
      }
      this.presenteeId = other.presenteeId;
      this.pageNo = other.pageNo;
      this.pageSize = other.pageSize;
    }

    public listCandidateRecomRecordsByPositionSetAndPresenteeId_args deepCopy() {
      return new listCandidateRecomRecordsByPositionSetAndPresenteeId_args(this);
    }

    @Override
    public void clear() {
      this.positionIdSet = null;
      setPresenteeIdIsSet(false);
      this.presenteeId = 0;
      setPageNoIsSet(false);
      this.pageNo = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public int getPositionIdSetSize() {
      return (this.positionIdSet == null) ? 0 : this.positionIdSet.size();
    }

    public java.util.Iterator<java.lang.Integer> getPositionIdSetIterator() {
      return (this.positionIdSet == null) ? null : this.positionIdSet.iterator();
    }

    public void addToPositionIdSet(int elem) {
      if (this.positionIdSet == null) {
        this.positionIdSet = new java.util.HashSet<java.lang.Integer>();
      }
      this.positionIdSet.add(elem);
    }

    public java.util.Set<java.lang.Integer> getPositionIdSet() {
      return this.positionIdSet;
    }

    public listCandidateRecomRecordsByPositionSetAndPresenteeId_args setPositionIdSet(java.util.Set<java.lang.Integer> positionIdSet) {
      this.positionIdSet = positionIdSet;
      return this;
    }

    public void unsetPositionIdSet() {
      this.positionIdSet = null;
    }

    /** Returns true if field positionIdSet is set (has been assigned a value) and false otherwise */
    public boolean isSetPositionIdSet() {
      return this.positionIdSet != null;
    }

    public void setPositionIdSetIsSet(boolean value) {
      if (!value) {
        this.positionIdSet = null;
      }
    }

    public int getPresenteeId() {
      return this.presenteeId;
    }

    public listCandidateRecomRecordsByPositionSetAndPresenteeId_args setPresenteeId(int presenteeId) {
      this.presenteeId = presenteeId;
      setPresenteeIdIsSet(true);
      return this;
    }

    public void unsetPresenteeId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRESENTEEID_ISSET_ID);
    }

    /** Returns true if field presenteeId is set (has been assigned a value) and false otherwise */
    public boolean isSetPresenteeId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRESENTEEID_ISSET_ID);
    }

    public void setPresenteeIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRESENTEEID_ISSET_ID, value);
    }

    public int getPageNo() {
      return this.pageNo;
    }

    public listCandidateRecomRecordsByPositionSetAndPresenteeId_args setPageNo(int pageNo) {
      this.pageNo = pageNo;
      setPageNoIsSet(true);
      return this;
    }

    public void unsetPageNo() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    /** Returns true if field pageNo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNo() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    public void setPageNoIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGENO_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public listCandidateRecomRecordsByPositionSetAndPresenteeId_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case POSITION_ID_SET:
        if (value == null) {
          unsetPositionIdSet();
        } else {
          setPositionIdSet((java.util.Set<java.lang.Integer>)value);
        }
        break;

      case PRESENTEE_ID:
        if (value == null) {
          unsetPresenteeId();
        } else {
          setPresenteeId((java.lang.Integer)value);
        }
        break;

      case PAGE_NO:
        if (value == null) {
          unsetPageNo();
        } else {
          setPageNo((java.lang.Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case POSITION_ID_SET:
        return getPositionIdSet();

      case PRESENTEE_ID:
        return getPresenteeId();

      case PAGE_NO:
        return getPageNo();

      case PAGE_SIZE:
        return getPageSize();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case POSITION_ID_SET:
        return isSetPositionIdSet();
      case PRESENTEE_ID:
        return isSetPresenteeId();
      case PAGE_NO:
        return isSetPageNo();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listCandidateRecomRecordsByPositionSetAndPresenteeId_args)
        return this.equals((listCandidateRecomRecordsByPositionSetAndPresenteeId_args)that);
      return false;
    }

    public boolean equals(listCandidateRecomRecordsByPositionSetAndPresenteeId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_positionIdSet = true && this.isSetPositionIdSet();
      boolean that_present_positionIdSet = true && that.isSetPositionIdSet();
      if (this_present_positionIdSet || that_present_positionIdSet) {
        if (!(this_present_positionIdSet && that_present_positionIdSet))
          return false;
        if (!this.positionIdSet.equals(that.positionIdSet))
          return false;
      }

      boolean this_present_presenteeId = true;
      boolean that_present_presenteeId = true;
      if (this_present_presenteeId || that_present_presenteeId) {
        if (!(this_present_presenteeId && that_present_presenteeId))
          return false;
        if (this.presenteeId != that.presenteeId)
          return false;
      }

      boolean this_present_pageNo = true;
      boolean that_present_pageNo = true;
      if (this_present_pageNo || that_present_pageNo) {
        if (!(this_present_pageNo && that_present_pageNo))
          return false;
        if (this.pageNo != that.pageNo)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPositionIdSet()) ? 131071 : 524287);
      if (isSetPositionIdSet())
        hashCode = hashCode * 8191 + positionIdSet.hashCode();

      hashCode = hashCode * 8191 + presenteeId;

      hashCode = hashCode * 8191 + pageNo;

      hashCode = hashCode * 8191 + pageSize;

      return hashCode;
    }

    @Override
    public int compareTo(listCandidateRecomRecordsByPositionSetAndPresenteeId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPositionIdSet()).compareTo(other.isSetPositionIdSet());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPositionIdSet()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionIdSet, other.positionIdSet);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPresenteeId()).compareTo(other.isSetPresenteeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPresenteeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.presenteeId, other.presenteeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPageNo()).compareTo(other.isSetPageNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNo, other.pageNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listCandidateRecomRecordsByPositionSetAndPresenteeId_args(");
      boolean first = true;

      sb.append("positionIdSet:");
      if (this.positionIdSet == null) {
        sb.append("null");
      } else {
        sb.append(this.positionIdSet);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("presenteeId:");
      sb.append(this.presenteeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNo:");
      sb.append(this.pageNo);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCandidateRecomRecordsByPositionSetAndPresenteeId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateRecomRecordsByPositionSetAndPresenteeId_argsStandardScheme getScheme() {
        return new listCandidateRecomRecordsByPositionSetAndPresenteeId_argsStandardScheme();
      }
    }

    private static class listCandidateRecomRecordsByPositionSetAndPresenteeId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listCandidateRecomRecordsByPositionSetAndPresenteeId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCandidateRecomRecordsByPositionSetAndPresenteeId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // POSITION_ID_SET
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set138 = iprot.readSetBegin();
                  struct.positionIdSet = new java.util.HashSet<java.lang.Integer>(2*_set138.size);
                  int _elem139;
                  for (int _i140 = 0; _i140 < _set138.size; ++_i140)
                  {
                    _elem139 = iprot.readI32();
                    struct.positionIdSet.add(_elem139);
                  }
                  iprot.readSetEnd();
                }
                struct.setPositionIdSetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRESENTEE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.presenteeId = iprot.readI32();
                struct.setPresenteeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNo = iprot.readI32();
                struct.setPageNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCandidateRecomRecordsByPositionSetAndPresenteeId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.positionIdSet != null) {
          oprot.writeFieldBegin(POSITION_ID_SET_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.positionIdSet.size()));
            for (int _iter141 : struct.positionIdSet)
            {
              oprot.writeI32(_iter141);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PRESENTEE_ID_FIELD_DESC);
        oprot.writeI32(struct.presenteeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_NO_FIELD_DESC);
        oprot.writeI32(struct.pageNo);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCandidateRecomRecordsByPositionSetAndPresenteeId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateRecomRecordsByPositionSetAndPresenteeId_argsTupleScheme getScheme() {
        return new listCandidateRecomRecordsByPositionSetAndPresenteeId_argsTupleScheme();
      }
    }

    private static class listCandidateRecomRecordsByPositionSetAndPresenteeId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listCandidateRecomRecordsByPositionSetAndPresenteeId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCandidateRecomRecordsByPositionSetAndPresenteeId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPositionIdSet()) {
          optionals.set(0);
        }
        if (struct.isSetPresenteeId()) {
          optionals.set(1);
        }
        if (struct.isSetPageNo()) {
          optionals.set(2);
        }
        if (struct.isSetPageSize()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetPositionIdSet()) {
          {
            oprot.writeI32(struct.positionIdSet.size());
            for (int _iter142 : struct.positionIdSet)
            {
              oprot.writeI32(_iter142);
            }
          }
        }
        if (struct.isSetPresenteeId()) {
          oprot.writeI32(struct.presenteeId);
        }
        if (struct.isSetPageNo()) {
          oprot.writeI32(struct.pageNo);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCandidateRecomRecordsByPositionSetAndPresenteeId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set143 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.positionIdSet = new java.util.HashSet<java.lang.Integer>(2*_set143.size);
            int _elem144;
            for (int _i145 = 0; _i145 < _set143.size; ++_i145)
            {
              _elem144 = iprot.readI32();
              struct.positionIdSet.add(_elem144);
            }
          }
          struct.setPositionIdSetIsSet(true);
        }
        if (incoming.get(1)) {
          struct.presenteeId = iprot.readI32();
          struct.setPresenteeIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageNo = iprot.readI32();
          struct.setPageNoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listCandidateRecomRecordsByPositionSetAndPresenteeId_result implements org.apache.thrift.TBase<listCandidateRecomRecordsByPositionSetAndPresenteeId_result, listCandidateRecomRecordsByPositionSetAndPresenteeId_result._Fields>, java.io.Serializable, Cloneable, Comparable<listCandidateRecomRecordsByPositionSetAndPresenteeId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCandidateRecomRecordsByPositionSetAndPresenteeId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listCandidateRecomRecordsByPositionSetAndPresenteeId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listCandidateRecomRecordsByPositionSetAndPresenteeId_resultTupleSchemeFactory();

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCandidateRecomRecordsByPositionSetAndPresenteeId_result.class, metaDataMap);
    }

    public listCandidateRecomRecordsByPositionSetAndPresenteeId_result() {
    }

    public listCandidateRecomRecordsByPositionSetAndPresenteeId_result(
      java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCandidateRecomRecordsByPositionSetAndPresenteeId_result(listCandidateRecomRecordsByPositionSetAndPresenteeId_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> __this__success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>(other.success.size());
        for (com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO other_element : other.success) {
          __this__success.add(new com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO(other_element));
        }
        this.success = __this__success;
      }
    }

    public listCandidateRecomRecordsByPositionSetAndPresenteeId_result deepCopy() {
      return new listCandidateRecomRecordsByPositionSetAndPresenteeId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> getSuccess() {
      return this.success;
    }

    public listCandidateRecomRecordsByPositionSetAndPresenteeId_result setSuccess(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listCandidateRecomRecordsByPositionSetAndPresenteeId_result)
        return this.equals((listCandidateRecomRecordsByPositionSetAndPresenteeId_result)that);
      return false;
    }

    public boolean equals(listCandidateRecomRecordsByPositionSetAndPresenteeId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listCandidateRecomRecordsByPositionSetAndPresenteeId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listCandidateRecomRecordsByPositionSetAndPresenteeId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCandidateRecomRecordsByPositionSetAndPresenteeId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateRecomRecordsByPositionSetAndPresenteeId_resultStandardScheme getScheme() {
        return new listCandidateRecomRecordsByPositionSetAndPresenteeId_resultStandardScheme();
      }
    }

    private static class listCandidateRecomRecordsByPositionSetAndPresenteeId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listCandidateRecomRecordsByPositionSetAndPresenteeId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCandidateRecomRecordsByPositionSetAndPresenteeId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list146 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>(_list146.size);
                  com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO _elem147;
                  for (int _i148 = 0; _i148 < _list146.size; ++_i148)
                  {
                    _elem147 = new com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO();
                    _elem147.read(iprot);
                    struct.success.add(_elem147);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCandidateRecomRecordsByPositionSetAndPresenteeId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO _iter149 : struct.success)
            {
              _iter149.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCandidateRecomRecordsByPositionSetAndPresenteeId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateRecomRecordsByPositionSetAndPresenteeId_resultTupleScheme getScheme() {
        return new listCandidateRecomRecordsByPositionSetAndPresenteeId_resultTupleScheme();
      }
    }

    private static class listCandidateRecomRecordsByPositionSetAndPresenteeId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listCandidateRecomRecordsByPositionSetAndPresenteeId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCandidateRecomRecordsByPositionSetAndPresenteeId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO _iter150 : struct.success)
            {
              _iter150.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCandidateRecomRecordsByPositionSetAndPresenteeId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list151 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO>(_list151.size);
            com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO _elem152;
            for (int _i153 = 0; _i153 < _list151.size; ++_i153)
            {
              _elem152 = new com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO();
              _elem152.read(iprot);
              struct.success.add(_elem152);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listCandidateRecomRecordSorting_args implements org.apache.thrift.TBase<listCandidateRecomRecordSorting_args, listCandidateRecomRecordSorting_args._Fields>, java.io.Serializable, Cloneable, Comparable<listCandidateRecomRecordSorting_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCandidateRecomRecordSorting_args");

    private static final org.apache.thrift.protocol.TField POST_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("postUserId", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listCandidateRecomRecordSorting_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listCandidateRecomRecordSorting_argsTupleSchemeFactory();

    public java.util.List<java.lang.Integer> postUserId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      POST_USER_ID((short)1, "postUserId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // POST_USER_ID
            return POST_USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.POST_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("postUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCandidateRecomRecordSorting_args.class, metaDataMap);
    }

    public listCandidateRecomRecordSorting_args() {
    }

    public listCandidateRecomRecordSorting_args(
      java.util.List<java.lang.Integer> postUserId)
    {
      this();
      this.postUserId = postUserId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCandidateRecomRecordSorting_args(listCandidateRecomRecordSorting_args other) {
      if (other.isSetPostUserId()) {
        java.util.List<java.lang.Integer> __this__postUserId = new java.util.ArrayList<java.lang.Integer>(other.postUserId);
        this.postUserId = __this__postUserId;
      }
    }

    public listCandidateRecomRecordSorting_args deepCopy() {
      return new listCandidateRecomRecordSorting_args(this);
    }

    @Override
    public void clear() {
      this.postUserId = null;
    }

    public int getPostUserIdSize() {
      return (this.postUserId == null) ? 0 : this.postUserId.size();
    }

    public java.util.Iterator<java.lang.Integer> getPostUserIdIterator() {
      return (this.postUserId == null) ? null : this.postUserId.iterator();
    }

    public void addToPostUserId(int elem) {
      if (this.postUserId == null) {
        this.postUserId = new java.util.ArrayList<java.lang.Integer>();
      }
      this.postUserId.add(elem);
    }

    public java.util.List<java.lang.Integer> getPostUserId() {
      return this.postUserId;
    }

    public listCandidateRecomRecordSorting_args setPostUserId(java.util.List<java.lang.Integer> postUserId) {
      this.postUserId = postUserId;
      return this;
    }

    public void unsetPostUserId() {
      this.postUserId = null;
    }

    /** Returns true if field postUserId is set (has been assigned a value) and false otherwise */
    public boolean isSetPostUserId() {
      return this.postUserId != null;
    }

    public void setPostUserIdIsSet(boolean value) {
      if (!value) {
        this.postUserId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case POST_USER_ID:
        if (value == null) {
          unsetPostUserId();
        } else {
          setPostUserId((java.util.List<java.lang.Integer>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case POST_USER_ID:
        return getPostUserId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case POST_USER_ID:
        return isSetPostUserId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listCandidateRecomRecordSorting_args)
        return this.equals((listCandidateRecomRecordSorting_args)that);
      return false;
    }

    public boolean equals(listCandidateRecomRecordSorting_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_postUserId = true && this.isSetPostUserId();
      boolean that_present_postUserId = true && that.isSetPostUserId();
      if (this_present_postUserId || that_present_postUserId) {
        if (!(this_present_postUserId && that_present_postUserId))
          return false;
        if (!this.postUserId.equals(that.postUserId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPostUserId()) ? 131071 : 524287);
      if (isSetPostUserId())
        hashCode = hashCode * 8191 + postUserId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listCandidateRecomRecordSorting_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPostUserId()).compareTo(other.isSetPostUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPostUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postUserId, other.postUserId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listCandidateRecomRecordSorting_args(");
      boolean first = true;

      sb.append("postUserId:");
      if (this.postUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.postUserId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCandidateRecomRecordSorting_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateRecomRecordSorting_argsStandardScheme getScheme() {
        return new listCandidateRecomRecordSorting_argsStandardScheme();
      }
    }

    private static class listCandidateRecomRecordSorting_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listCandidateRecomRecordSorting_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCandidateRecomRecordSorting_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // POST_USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list154 = iprot.readListBegin();
                  struct.postUserId = new java.util.ArrayList<java.lang.Integer>(_list154.size);
                  int _elem155;
                  for (int _i156 = 0; _i156 < _list154.size; ++_i156)
                  {
                    _elem155 = iprot.readI32();
                    struct.postUserId.add(_elem155);
                  }
                  iprot.readListEnd();
                }
                struct.setPostUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCandidateRecomRecordSorting_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.postUserId != null) {
          oprot.writeFieldBegin(POST_USER_ID_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.postUserId.size()));
            for (int _iter157 : struct.postUserId)
            {
              oprot.writeI32(_iter157);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCandidateRecomRecordSorting_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateRecomRecordSorting_argsTupleScheme getScheme() {
        return new listCandidateRecomRecordSorting_argsTupleScheme();
      }
    }

    private static class listCandidateRecomRecordSorting_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listCandidateRecomRecordSorting_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCandidateRecomRecordSorting_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPostUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPostUserId()) {
          {
            oprot.writeI32(struct.postUserId.size());
            for (int _iter158 : struct.postUserId)
            {
              oprot.writeI32(_iter158);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCandidateRecomRecordSorting_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list159 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.postUserId = new java.util.ArrayList<java.lang.Integer>(_list159.size);
            int _elem160;
            for (int _i161 = 0; _i161 < _list159.size; ++_i161)
            {
              _elem160 = iprot.readI32();
              struct.postUserId.add(_elem160);
            }
          }
          struct.setPostUserIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listCandidateRecomRecordSorting_result implements org.apache.thrift.TBase<listCandidateRecomRecordSorting_result, listCandidateRecomRecordSorting_result._Fields>, java.io.Serializable, Cloneable, Comparable<listCandidateRecomRecordSorting_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCandidateRecomRecordSorting_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listCandidateRecomRecordSorting_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listCandidateRecomRecordSorting_resultTupleSchemeFactory();

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO> success; // required
    public com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCandidateRecomRecordSorting_result.class, metaDataMap);
    }

    public listCandidateRecomRecordSorting_result() {
    }

    public listCandidateRecomRecordSorting_result(
      java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO> success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCandidateRecomRecordSorting_result(listCandidateRecomRecordSorting_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO> __this__success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO>(other.success.size());
        for (com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO other_element : other.success) {
          __this__success.add(new com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public listCandidateRecomRecordSorting_result deepCopy() {
      return new listCandidateRecomRecordSorting_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO> getSuccess() {
      return this.success;
    }

    public listCandidateRecomRecordSorting_result setSuccess(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public listCandidateRecomRecordSorting_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listCandidateRecomRecordSorting_result)
        return this.equals((listCandidateRecomRecordSorting_result)that);
      return false;
    }

    public boolean equals(listCandidateRecomRecordSorting_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listCandidateRecomRecordSorting_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listCandidateRecomRecordSorting_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCandidateRecomRecordSorting_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateRecomRecordSorting_resultStandardScheme getScheme() {
        return new listCandidateRecomRecordSorting_resultStandardScheme();
      }
    }

    private static class listCandidateRecomRecordSorting_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listCandidateRecomRecordSorting_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCandidateRecomRecordSorting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list162 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO>(_list162.size);
                  com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO _elem163;
                  for (int _i164 = 0; _i164 < _list162.size; ++_i164)
                  {
                    _elem163 = new com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO();
                    _elem163.read(iprot);
                    struct.success.add(_elem163);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCandidateRecomRecordSorting_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO _iter165 : struct.success)
            {
              _iter165.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCandidateRecomRecordSorting_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateRecomRecordSorting_resultTupleScheme getScheme() {
        return new listCandidateRecomRecordSorting_resultTupleScheme();
      }
    }

    private static class listCandidateRecomRecordSorting_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listCandidateRecomRecordSorting_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCandidateRecomRecordSorting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO _iter166 : struct.success)
            {
              _iter166.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCandidateRecomRecordSorting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list167 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO>(_list167.size);
            com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO _elem168;
            for (int _i169 = 0; _i169 < _list167.size; ++_i169)
            {
              _elem168 = new com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordSortingDO();
              _elem168.read(iprot);
              struct.success.add(_elem168);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class countCandidateRecomRecord_args implements org.apache.thrift.TBase<countCandidateRecomRecord_args, countCandidateRecomRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<countCandidateRecomRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countCandidateRecomRecord_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new countCandidateRecomRecord_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new countCandidateRecomRecord_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.CommonQuery query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.CommonQuery.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countCandidateRecomRecord_args.class, metaDataMap);
    }

    public countCandidateRecomRecord_args() {
    }

    public countCandidateRecomRecord_args(
      com.moseeker.thrift.gen.common.struct.CommonQuery query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countCandidateRecomRecord_args(countCandidateRecomRecord_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.common.struct.CommonQuery(other.query);
      }
    }

    public countCandidateRecomRecord_args deepCopy() {
      return new countCandidateRecomRecord_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public com.moseeker.thrift.gen.common.struct.CommonQuery getQuery() {
      return this.query;
    }

    public countCandidateRecomRecord_args setQuery(com.moseeker.thrift.gen.common.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.common.struct.CommonQuery)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof countCandidateRecomRecord_args)
        return this.equals((countCandidateRecomRecord_args)that);
      return false;
    }

    public boolean equals(countCandidateRecomRecord_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(countCandidateRecomRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("countCandidateRecomRecord_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countCandidateRecomRecord_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countCandidateRecomRecord_argsStandardScheme getScheme() {
        return new countCandidateRecomRecord_argsStandardScheme();
      }
    }

    private static class countCandidateRecomRecord_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<countCandidateRecomRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countCandidateRecomRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countCandidateRecomRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countCandidateRecomRecord_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countCandidateRecomRecord_argsTupleScheme getScheme() {
        return new countCandidateRecomRecord_argsTupleScheme();
      }
    }

    private static class countCandidateRecomRecord_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<countCandidateRecomRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countCandidateRecomRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countCandidateRecomRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class countCandidateRecomRecord_result implements org.apache.thrift.TBase<countCandidateRecomRecord_result, countCandidateRecomRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<countCandidateRecomRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countCandidateRecomRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new countCandidateRecomRecord_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new countCandidateRecomRecord_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countCandidateRecomRecord_result.class, metaDataMap);
    }

    public countCandidateRecomRecord_result() {
    }

    public countCandidateRecomRecord_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countCandidateRecomRecord_result(countCandidateRecomRecord_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public countCandidateRecomRecord_result deepCopy() {
      return new countCandidateRecomRecord_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public countCandidateRecomRecord_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof countCandidateRecomRecord_result)
        return this.equals((countCandidateRecomRecord_result)that);
      return false;
    }

    public boolean equals(countCandidateRecomRecord_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(countCandidateRecomRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("countCandidateRecomRecord_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countCandidateRecomRecord_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countCandidateRecomRecord_resultStandardScheme getScheme() {
        return new countCandidateRecomRecord_resultStandardScheme();
      }
    }

    private static class countCandidateRecomRecord_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<countCandidateRecomRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countCandidateRecomRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countCandidateRecomRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countCandidateRecomRecord_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countCandidateRecomRecord_resultTupleScheme getScheme() {
        return new countCandidateRecomRecord_resultTupleScheme();
      }
    }

    private static class countCandidateRecomRecord_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<countCandidateRecomRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countCandidateRecomRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countCandidateRecomRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class countCandidateRecomRecordDistinctPresentee_args implements org.apache.thrift.TBase<countCandidateRecomRecordDistinctPresentee_args, countCandidateRecomRecordDistinctPresentee_args._Fields>, java.io.Serializable, Cloneable, Comparable<countCandidateRecomRecordDistinctPresentee_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countCandidateRecomRecordDistinctPresentee_args");

    private static final org.apache.thrift.protocol.TField POST_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("postUserId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new countCandidateRecomRecordDistinctPresentee_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new countCandidateRecomRecordDistinctPresentee_argsTupleSchemeFactory();

    public int postUserId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      POST_USER_ID((short)1, "postUserId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // POST_USER_ID
            return POST_USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __POSTUSERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.POST_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("postUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countCandidateRecomRecordDistinctPresentee_args.class, metaDataMap);
    }

    public countCandidateRecomRecordDistinctPresentee_args() {
    }

    public countCandidateRecomRecordDistinctPresentee_args(
      int postUserId)
    {
      this();
      this.postUserId = postUserId;
      setPostUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countCandidateRecomRecordDistinctPresentee_args(countCandidateRecomRecordDistinctPresentee_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.postUserId = other.postUserId;
    }

    public countCandidateRecomRecordDistinctPresentee_args deepCopy() {
      return new countCandidateRecomRecordDistinctPresentee_args(this);
    }

    @Override
    public void clear() {
      setPostUserIdIsSet(false);
      this.postUserId = 0;
    }

    public int getPostUserId() {
      return this.postUserId;
    }

    public countCandidateRecomRecordDistinctPresentee_args setPostUserId(int postUserId) {
      this.postUserId = postUserId;
      setPostUserIdIsSet(true);
      return this;
    }

    public void unsetPostUserId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSTUSERID_ISSET_ID);
    }

    /** Returns true if field postUserId is set (has been assigned a value) and false otherwise */
    public boolean isSetPostUserId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSTUSERID_ISSET_ID);
    }

    public void setPostUserIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSTUSERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case POST_USER_ID:
        if (value == null) {
          unsetPostUserId();
        } else {
          setPostUserId((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case POST_USER_ID:
        return getPostUserId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case POST_USER_ID:
        return isSetPostUserId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof countCandidateRecomRecordDistinctPresentee_args)
        return this.equals((countCandidateRecomRecordDistinctPresentee_args)that);
      return false;
    }

    public boolean equals(countCandidateRecomRecordDistinctPresentee_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_postUserId = true;
      boolean that_present_postUserId = true;
      if (this_present_postUserId || that_present_postUserId) {
        if (!(this_present_postUserId && that_present_postUserId))
          return false;
        if (this.postUserId != that.postUserId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + postUserId;

      return hashCode;
    }

    @Override
    public int compareTo(countCandidateRecomRecordDistinctPresentee_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPostUserId()).compareTo(other.isSetPostUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPostUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postUserId, other.postUserId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("countCandidateRecomRecordDistinctPresentee_args(");
      boolean first = true;

      sb.append("postUserId:");
      sb.append(this.postUserId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countCandidateRecomRecordDistinctPresentee_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countCandidateRecomRecordDistinctPresentee_argsStandardScheme getScheme() {
        return new countCandidateRecomRecordDistinctPresentee_argsStandardScheme();
      }
    }

    private static class countCandidateRecomRecordDistinctPresentee_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<countCandidateRecomRecordDistinctPresentee_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countCandidateRecomRecordDistinctPresentee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // POST_USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.postUserId = iprot.readI32();
                struct.setPostUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countCandidateRecomRecordDistinctPresentee_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(POST_USER_ID_FIELD_DESC);
        oprot.writeI32(struct.postUserId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countCandidateRecomRecordDistinctPresentee_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countCandidateRecomRecordDistinctPresentee_argsTupleScheme getScheme() {
        return new countCandidateRecomRecordDistinctPresentee_argsTupleScheme();
      }
    }

    private static class countCandidateRecomRecordDistinctPresentee_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<countCandidateRecomRecordDistinctPresentee_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countCandidateRecomRecordDistinctPresentee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPostUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPostUserId()) {
          oprot.writeI32(struct.postUserId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countCandidateRecomRecordDistinctPresentee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.postUserId = iprot.readI32();
          struct.setPostUserIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class countCandidateRecomRecordDistinctPresentee_result implements org.apache.thrift.TBase<countCandidateRecomRecordDistinctPresentee_result, countCandidateRecomRecordDistinctPresentee_result._Fields>, java.io.Serializable, Cloneable, Comparable<countCandidateRecomRecordDistinctPresentee_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countCandidateRecomRecordDistinctPresentee_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new countCandidateRecomRecordDistinctPresentee_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new countCandidateRecomRecordDistinctPresentee_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countCandidateRecomRecordDistinctPresentee_result.class, metaDataMap);
    }

    public countCandidateRecomRecordDistinctPresentee_result() {
    }

    public countCandidateRecomRecordDistinctPresentee_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countCandidateRecomRecordDistinctPresentee_result(countCandidateRecomRecordDistinctPresentee_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public countCandidateRecomRecordDistinctPresentee_result deepCopy() {
      return new countCandidateRecomRecordDistinctPresentee_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public countCandidateRecomRecordDistinctPresentee_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof countCandidateRecomRecordDistinctPresentee_result)
        return this.equals((countCandidateRecomRecordDistinctPresentee_result)that);
      return false;
    }

    public boolean equals(countCandidateRecomRecordDistinctPresentee_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(countCandidateRecomRecordDistinctPresentee_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("countCandidateRecomRecordDistinctPresentee_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countCandidateRecomRecordDistinctPresentee_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countCandidateRecomRecordDistinctPresentee_resultStandardScheme getScheme() {
        return new countCandidateRecomRecordDistinctPresentee_resultStandardScheme();
      }
    }

    private static class countCandidateRecomRecordDistinctPresentee_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<countCandidateRecomRecordDistinctPresentee_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countCandidateRecomRecordDistinctPresentee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countCandidateRecomRecordDistinctPresentee_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countCandidateRecomRecordDistinctPresentee_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countCandidateRecomRecordDistinctPresentee_resultTupleScheme getScheme() {
        return new countCandidateRecomRecordDistinctPresentee_resultTupleScheme();
      }
    }

    private static class countCandidateRecomRecordDistinctPresentee_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<countCandidateRecomRecordDistinctPresentee_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countCandidateRecomRecordDistinctPresentee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countCandidateRecomRecordDistinctPresentee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class countAppliedCandidateRecomRecord_args implements org.apache.thrift.TBase<countAppliedCandidateRecomRecord_args, countAppliedCandidateRecomRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<countAppliedCandidateRecomRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countAppliedCandidateRecomRecord_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new countAppliedCandidateRecomRecord_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new countAppliedCandidateRecomRecord_argsTupleSchemeFactory();

    public int userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countAppliedCandidateRecomRecord_args.class, metaDataMap);
    }

    public countAppliedCandidateRecomRecord_args() {
    }

    public countAppliedCandidateRecomRecord_args(
      int userId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countAppliedCandidateRecomRecord_args(countAppliedCandidateRecomRecord_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
    }

    public countAppliedCandidateRecomRecord_args deepCopy() {
      return new countAppliedCandidateRecomRecord_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public countAppliedCandidateRecomRecord_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof countAppliedCandidateRecomRecord_args)
        return this.equals((countAppliedCandidateRecomRecord_args)that);
      return false;
    }

    public boolean equals(countAppliedCandidateRecomRecord_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + userId;

      return hashCode;
    }

    @Override
    public int compareTo(countAppliedCandidateRecomRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("countAppliedCandidateRecomRecord_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countAppliedCandidateRecomRecord_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countAppliedCandidateRecomRecord_argsStandardScheme getScheme() {
        return new countAppliedCandidateRecomRecord_argsStandardScheme();
      }
    }

    private static class countAppliedCandidateRecomRecord_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<countAppliedCandidateRecomRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countAppliedCandidateRecomRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countAppliedCandidateRecomRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countAppliedCandidateRecomRecord_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countAppliedCandidateRecomRecord_argsTupleScheme getScheme() {
        return new countAppliedCandidateRecomRecord_argsTupleScheme();
      }
    }

    private static class countAppliedCandidateRecomRecord_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<countAppliedCandidateRecomRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countAppliedCandidateRecomRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countAppliedCandidateRecomRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class countAppliedCandidateRecomRecord_result implements org.apache.thrift.TBase<countAppliedCandidateRecomRecord_result, countAppliedCandidateRecomRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<countAppliedCandidateRecomRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countAppliedCandidateRecomRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new countAppliedCandidateRecomRecord_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new countAppliedCandidateRecomRecord_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countAppliedCandidateRecomRecord_result.class, metaDataMap);
    }

    public countAppliedCandidateRecomRecord_result() {
    }

    public countAppliedCandidateRecomRecord_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countAppliedCandidateRecomRecord_result(countAppliedCandidateRecomRecord_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public countAppliedCandidateRecomRecord_result deepCopy() {
      return new countAppliedCandidateRecomRecord_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public countAppliedCandidateRecomRecord_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof countAppliedCandidateRecomRecord_result)
        return this.equals((countAppliedCandidateRecomRecord_result)that);
      return false;
    }

    public boolean equals(countAppliedCandidateRecomRecord_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(countAppliedCandidateRecomRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("countAppliedCandidateRecomRecord_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countAppliedCandidateRecomRecord_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countAppliedCandidateRecomRecord_resultStandardScheme getScheme() {
        return new countAppliedCandidateRecomRecord_resultStandardScheme();
      }
    }

    private static class countAppliedCandidateRecomRecord_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<countAppliedCandidateRecomRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countAppliedCandidateRecomRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countAppliedCandidateRecomRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countAppliedCandidateRecomRecord_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countAppliedCandidateRecomRecord_resultTupleScheme getScheme() {
        return new countAppliedCandidateRecomRecord_resultTupleScheme();
      }
    }

    private static class countAppliedCandidateRecomRecord_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<countAppliedCandidateRecomRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countAppliedCandidateRecomRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countAppliedCandidateRecomRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class countInterestedCandidateRecomRecord_args implements org.apache.thrift.TBase<countInterestedCandidateRecomRecord_args, countInterestedCandidateRecomRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<countInterestedCandidateRecomRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countInterestedCandidateRecomRecord_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new countInterestedCandidateRecomRecord_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new countInterestedCandidateRecomRecord_argsTupleSchemeFactory();

    public int userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countInterestedCandidateRecomRecord_args.class, metaDataMap);
    }

    public countInterestedCandidateRecomRecord_args() {
    }

    public countInterestedCandidateRecomRecord_args(
      int userId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countInterestedCandidateRecomRecord_args(countInterestedCandidateRecomRecord_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
    }

    public countInterestedCandidateRecomRecord_args deepCopy() {
      return new countInterestedCandidateRecomRecord_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public countInterestedCandidateRecomRecord_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof countInterestedCandidateRecomRecord_args)
        return this.equals((countInterestedCandidateRecomRecord_args)that);
      return false;
    }

    public boolean equals(countInterestedCandidateRecomRecord_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + userId;

      return hashCode;
    }

    @Override
    public int compareTo(countInterestedCandidateRecomRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("countInterestedCandidateRecomRecord_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countInterestedCandidateRecomRecord_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countInterestedCandidateRecomRecord_argsStandardScheme getScheme() {
        return new countInterestedCandidateRecomRecord_argsStandardScheme();
      }
    }

    private static class countInterestedCandidateRecomRecord_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<countInterestedCandidateRecomRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countInterestedCandidateRecomRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countInterestedCandidateRecomRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countInterestedCandidateRecomRecord_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countInterestedCandidateRecomRecord_argsTupleScheme getScheme() {
        return new countInterestedCandidateRecomRecord_argsTupleScheme();
      }
    }

    private static class countInterestedCandidateRecomRecord_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<countInterestedCandidateRecomRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countInterestedCandidateRecomRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countInterestedCandidateRecomRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class countInterestedCandidateRecomRecord_result implements org.apache.thrift.TBase<countInterestedCandidateRecomRecord_result, countInterestedCandidateRecomRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<countInterestedCandidateRecomRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countInterestedCandidateRecomRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new countInterestedCandidateRecomRecord_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new countInterestedCandidateRecomRecord_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countInterestedCandidateRecomRecord_result.class, metaDataMap);
    }

    public countInterestedCandidateRecomRecord_result() {
    }

    public countInterestedCandidateRecomRecord_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countInterestedCandidateRecomRecord_result(countInterestedCandidateRecomRecord_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public countInterestedCandidateRecomRecord_result deepCopy() {
      return new countInterestedCandidateRecomRecord_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public countInterestedCandidateRecomRecord_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof countInterestedCandidateRecomRecord_result)
        return this.equals((countInterestedCandidateRecomRecord_result)that);
      return false;
    }

    public boolean equals(countInterestedCandidateRecomRecord_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(countInterestedCandidateRecomRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("countInterestedCandidateRecomRecord_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countInterestedCandidateRecomRecord_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countInterestedCandidateRecomRecord_resultStandardScheme getScheme() {
        return new countInterestedCandidateRecomRecord_resultStandardScheme();
      }
    }

    private static class countInterestedCandidateRecomRecord_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<countInterestedCandidateRecomRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countInterestedCandidateRecomRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countInterestedCandidateRecomRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countInterestedCandidateRecomRecord_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countInterestedCandidateRecomRecord_resultTupleScheme getScheme() {
        return new countInterestedCandidateRecomRecord_resultTupleScheme();
      }
    }

    private static class countInterestedCandidateRecomRecord_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<countInterestedCandidateRecomRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countInterestedCandidateRecomRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countInterestedCandidateRecomRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateCandidateRecomRecords_args implements org.apache.thrift.TBase<updateCandidateRecomRecords_args, updateCandidateRecomRecords_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateCandidateRecomRecords_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCandidateRecomRecords_args");

    private static final org.apache.thrift.protocol.TField CANDIDATE_RECOM_RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("candidateRecomRecord", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateCandidateRecomRecords_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateCandidateRecomRecords_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO candidateRecomRecord; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CANDIDATE_RECOM_RECORD((short)1, "candidateRecomRecord");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CANDIDATE_RECOM_RECORD
            return CANDIDATE_RECOM_RECORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CANDIDATE_RECOM_RECORD, new org.apache.thrift.meta_data.FieldMetaData("candidateRecomRecord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCandidateRecomRecords_args.class, metaDataMap);
    }

    public updateCandidateRecomRecords_args() {
    }

    public updateCandidateRecomRecords_args(
      com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO candidateRecomRecord)
    {
      this();
      this.candidateRecomRecord = candidateRecomRecord;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCandidateRecomRecords_args(updateCandidateRecomRecords_args other) {
      if (other.isSetCandidateRecomRecord()) {
        this.candidateRecomRecord = new com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO(other.candidateRecomRecord);
      }
    }

    public updateCandidateRecomRecords_args deepCopy() {
      return new updateCandidateRecomRecords_args(this);
    }

    @Override
    public void clear() {
      this.candidateRecomRecord = null;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO getCandidateRecomRecord() {
      return this.candidateRecomRecord;
    }

    public updateCandidateRecomRecords_args setCandidateRecomRecord(com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO candidateRecomRecord) {
      this.candidateRecomRecord = candidateRecomRecord;
      return this;
    }

    public void unsetCandidateRecomRecord() {
      this.candidateRecomRecord = null;
    }

    /** Returns true if field candidateRecomRecord is set (has been assigned a value) and false otherwise */
    public boolean isSetCandidateRecomRecord() {
      return this.candidateRecomRecord != null;
    }

    public void setCandidateRecomRecordIsSet(boolean value) {
      if (!value) {
        this.candidateRecomRecord = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CANDIDATE_RECOM_RECORD:
        if (value == null) {
          unsetCandidateRecomRecord();
        } else {
          setCandidateRecomRecord((com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CANDIDATE_RECOM_RECORD:
        return getCandidateRecomRecord();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CANDIDATE_RECOM_RECORD:
        return isSetCandidateRecomRecord();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCandidateRecomRecords_args)
        return this.equals((updateCandidateRecomRecords_args)that);
      return false;
    }

    public boolean equals(updateCandidateRecomRecords_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_candidateRecomRecord = true && this.isSetCandidateRecomRecord();
      boolean that_present_candidateRecomRecord = true && that.isSetCandidateRecomRecord();
      if (this_present_candidateRecomRecord || that_present_candidateRecomRecord) {
        if (!(this_present_candidateRecomRecord && that_present_candidateRecomRecord))
          return false;
        if (!this.candidateRecomRecord.equals(that.candidateRecomRecord))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCandidateRecomRecord()) ? 131071 : 524287);
      if (isSetCandidateRecomRecord())
        hashCode = hashCode * 8191 + candidateRecomRecord.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateCandidateRecomRecords_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCandidateRecomRecord()).compareTo(other.isSetCandidateRecomRecord());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCandidateRecomRecord()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.candidateRecomRecord, other.candidateRecomRecord);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateCandidateRecomRecords_args(");
      boolean first = true;

      sb.append("candidateRecomRecord:");
      if (this.candidateRecomRecord == null) {
        sb.append("null");
      } else {
        sb.append(this.candidateRecomRecord);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (candidateRecomRecord != null) {
        candidateRecomRecord.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCandidateRecomRecords_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateCandidateRecomRecords_argsStandardScheme getScheme() {
        return new updateCandidateRecomRecords_argsStandardScheme();
      }
    }

    private static class updateCandidateRecomRecords_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateCandidateRecomRecords_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCandidateRecomRecords_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CANDIDATE_RECOM_RECORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.candidateRecomRecord = new com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO();
                struct.candidateRecomRecord.read(iprot);
                struct.setCandidateRecomRecordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCandidateRecomRecords_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.candidateRecomRecord != null) {
          oprot.writeFieldBegin(CANDIDATE_RECOM_RECORD_FIELD_DESC);
          struct.candidateRecomRecord.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCandidateRecomRecords_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateCandidateRecomRecords_argsTupleScheme getScheme() {
        return new updateCandidateRecomRecords_argsTupleScheme();
      }
    }

    private static class updateCandidateRecomRecords_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateCandidateRecomRecords_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCandidateRecomRecords_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCandidateRecomRecord()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCandidateRecomRecord()) {
          struct.candidateRecomRecord.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCandidateRecomRecords_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.candidateRecomRecord = new com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO();
          struct.candidateRecomRecord.read(iprot);
          struct.setCandidateRecomRecordIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateCandidateRecomRecords_result implements org.apache.thrift.TBase<updateCandidateRecomRecords_result, updateCandidateRecomRecords_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateCandidateRecomRecords_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCandidateRecomRecords_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateCandidateRecomRecords_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateCandidateRecomRecords_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCandidateRecomRecords_result.class, metaDataMap);
    }

    public updateCandidateRecomRecords_result() {
    }

    public updateCandidateRecomRecords_result(
      com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCandidateRecomRecords_result(updateCandidateRecomRecords_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO(other.success);
      }
    }

    public updateCandidateRecomRecords_result deepCopy() {
      return new updateCandidateRecomRecords_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO getSuccess() {
      return this.success;
    }

    public updateCandidateRecomRecords_result setSuccess(com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCandidateRecomRecords_result)
        return this.equals((updateCandidateRecomRecords_result)that);
      return false;
    }

    public boolean equals(updateCandidateRecomRecords_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateCandidateRecomRecords_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateCandidateRecomRecords_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCandidateRecomRecords_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateCandidateRecomRecords_resultStandardScheme getScheme() {
        return new updateCandidateRecomRecords_resultStandardScheme();
      }
    }

    private static class updateCandidateRecomRecords_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateCandidateRecomRecords_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCandidateRecomRecords_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCandidateRecomRecords_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCandidateRecomRecords_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateCandidateRecomRecords_resultTupleScheme getScheme() {
        return new updateCandidateRecomRecords_resultTupleScheme();
      }
    }

    private static class updateCandidateRecomRecords_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateCandidateRecomRecords_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCandidateRecomRecords_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCandidateRecomRecords_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.dao.struct.CandidateRecomRecordDO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteCandidateRecomRecords_args implements org.apache.thrift.TBase<deleteCandidateRecomRecords_args, deleteCandidateRecomRecords_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteCandidateRecomRecords_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCandidateRecomRecords_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteCandidateRecomRecords_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteCandidateRecomRecords_argsTupleSchemeFactory();

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCandidateRecomRecords_args.class, metaDataMap);
    }

    public deleteCandidateRecomRecords_args() {
    }

    public deleteCandidateRecomRecords_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteCandidateRecomRecords_args(deleteCandidateRecomRecords_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public deleteCandidateRecomRecords_args deepCopy() {
      return new deleteCandidateRecomRecords_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public deleteCandidateRecomRecords_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteCandidateRecomRecords_args)
        return this.equals((deleteCandidateRecomRecords_args)that);
      return false;
    }

    public boolean equals(deleteCandidateRecomRecords_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + id;

      return hashCode;
    }

    @Override
    public int compareTo(deleteCandidateRecomRecords_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteCandidateRecomRecords_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteCandidateRecomRecords_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteCandidateRecomRecords_argsStandardScheme getScheme() {
        return new deleteCandidateRecomRecords_argsStandardScheme();
      }
    }

    private static class deleteCandidateRecomRecords_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteCandidateRecomRecords_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCandidateRecomRecords_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCandidateRecomRecords_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteCandidateRecomRecords_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteCandidateRecomRecords_argsTupleScheme getScheme() {
        return new deleteCandidateRecomRecords_argsTupleScheme();
      }
    }

    private static class deleteCandidateRecomRecords_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteCandidateRecomRecords_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteCandidateRecomRecords_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteCandidateRecomRecords_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteCandidateRecomRecords_result implements org.apache.thrift.TBase<deleteCandidateRecomRecords_result, deleteCandidateRecomRecords_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteCandidateRecomRecords_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCandidateRecomRecords_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteCandidateRecomRecords_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteCandidateRecomRecords_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCandidateRecomRecords_result.class, metaDataMap);
    }

    public deleteCandidateRecomRecords_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteCandidateRecomRecords_result(deleteCandidateRecomRecords_result other) {
    }

    public deleteCandidateRecomRecords_result deepCopy() {
      return new deleteCandidateRecomRecords_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteCandidateRecomRecords_result)
        return this.equals((deleteCandidateRecomRecords_result)that);
      return false;
    }

    public boolean equals(deleteCandidateRecomRecords_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(deleteCandidateRecomRecords_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteCandidateRecomRecords_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteCandidateRecomRecords_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteCandidateRecomRecords_resultStandardScheme getScheme() {
        return new deleteCandidateRecomRecords_resultStandardScheme();
      }
    }

    private static class deleteCandidateRecomRecords_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteCandidateRecomRecords_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCandidateRecomRecords_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCandidateRecomRecords_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteCandidateRecomRecords_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteCandidateRecomRecords_resultTupleScheme getScheme() {
        return new deleteCandidateRecomRecords_resultTupleScheme();
      }
    }

    private static class deleteCandidateRecomRecords_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteCandidateRecomRecords_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteCandidateRecomRecords_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteCandidateRecomRecords_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCandidateShareChain_args implements org.apache.thrift.TBase<getCandidateShareChain_args, getCandidateShareChain_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCandidateShareChain_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCandidateShareChain_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCandidateShareChain_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCandidateShareChain_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.CommonQuery query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.CommonQuery.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCandidateShareChain_args.class, metaDataMap);
    }

    public getCandidateShareChain_args() {
    }

    public getCandidateShareChain_args(
      com.moseeker.thrift.gen.common.struct.CommonQuery query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCandidateShareChain_args(getCandidateShareChain_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.common.struct.CommonQuery(other.query);
      }
    }

    public getCandidateShareChain_args deepCopy() {
      return new getCandidateShareChain_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public com.moseeker.thrift.gen.common.struct.CommonQuery getQuery() {
      return this.query;
    }

    public getCandidateShareChain_args setQuery(com.moseeker.thrift.gen.common.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.common.struct.CommonQuery)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCandidateShareChain_args)
        return this.equals((getCandidateShareChain_args)that);
      return false;
    }

    public boolean equals(getCandidateShareChain_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCandidateShareChain_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCandidateShareChain_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCandidateShareChain_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCandidateShareChain_argsStandardScheme getScheme() {
        return new getCandidateShareChain_argsStandardScheme();
      }
    }

    private static class getCandidateShareChain_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCandidateShareChain_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCandidateShareChain_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCandidateShareChain_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCandidateShareChain_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCandidateShareChain_argsTupleScheme getScheme() {
        return new getCandidateShareChain_argsTupleScheme();
      }
    }

    private static class getCandidateShareChain_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCandidateShareChain_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCandidateShareChain_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCandidateShareChain_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCandidateShareChain_result implements org.apache.thrift.TBase<getCandidateShareChain_result, getCandidateShareChain_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCandidateShareChain_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCandidateShareChain_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCandidateShareChain_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCandidateShareChain_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCandidateShareChain_result.class, metaDataMap);
    }

    public getCandidateShareChain_result() {
    }

    public getCandidateShareChain_result(
      com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCandidateShareChain_result(getCandidateShareChain_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO(other.success);
      }
    }

    public getCandidateShareChain_result deepCopy() {
      return new getCandidateShareChain_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO getSuccess() {
      return this.success;
    }

    public getCandidateShareChain_result setSuccess(com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCandidateShareChain_result)
        return this.equals((getCandidateShareChain_result)that);
      return false;
    }

    public boolean equals(getCandidateShareChain_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCandidateShareChain_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCandidateShareChain_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCandidateShareChain_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCandidateShareChain_resultStandardScheme getScheme() {
        return new getCandidateShareChain_resultStandardScheme();
      }
    }

    private static class getCandidateShareChain_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCandidateShareChain_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCandidateShareChain_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCandidateShareChain_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCandidateShareChain_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCandidateShareChain_resultTupleScheme getScheme() {
        return new getCandidateShareChain_resultTupleScheme();
      }
    }

    private static class getCandidateShareChain_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCandidateShareChain_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCandidateShareChain_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCandidateShareChain_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listCandidateShareChain_args implements org.apache.thrift.TBase<listCandidateShareChain_args, listCandidateShareChain_args._Fields>, java.io.Serializable, Cloneable, Comparable<listCandidateShareChain_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCandidateShareChain_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listCandidateShareChain_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listCandidateShareChain_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.CommonQuery query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.CommonQuery.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCandidateShareChain_args.class, metaDataMap);
    }

    public listCandidateShareChain_args() {
    }

    public listCandidateShareChain_args(
      com.moseeker.thrift.gen.common.struct.CommonQuery query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCandidateShareChain_args(listCandidateShareChain_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.common.struct.CommonQuery(other.query);
      }
    }

    public listCandidateShareChain_args deepCopy() {
      return new listCandidateShareChain_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public com.moseeker.thrift.gen.common.struct.CommonQuery getQuery() {
      return this.query;
    }

    public listCandidateShareChain_args setQuery(com.moseeker.thrift.gen.common.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.common.struct.CommonQuery)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listCandidateShareChain_args)
        return this.equals((listCandidateShareChain_args)that);
      return false;
    }

    public boolean equals(listCandidateShareChain_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listCandidateShareChain_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listCandidateShareChain_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCandidateShareChain_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateShareChain_argsStandardScheme getScheme() {
        return new listCandidateShareChain_argsStandardScheme();
      }
    }

    private static class listCandidateShareChain_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listCandidateShareChain_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCandidateShareChain_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCandidateShareChain_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCandidateShareChain_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateShareChain_argsTupleScheme getScheme() {
        return new listCandidateShareChain_argsTupleScheme();
      }
    }

    private static class listCandidateShareChain_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listCandidateShareChain_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCandidateShareChain_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCandidateShareChain_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listCandidateShareChain_result implements org.apache.thrift.TBase<listCandidateShareChain_result, listCandidateShareChain_result._Fields>, java.io.Serializable, Cloneable, Comparable<listCandidateShareChain_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCandidateShareChain_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listCandidateShareChain_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listCandidateShareChain_resultTupleSchemeFactory();

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCandidateShareChain_result.class, metaDataMap);
    }

    public listCandidateShareChain_result() {
    }

    public listCandidateShareChain_result(
      java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCandidateShareChain_result(listCandidateShareChain_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO> __this__success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO>(other.success.size());
        for (com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO other_element : other.success) {
          __this__success.add(new com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO(other_element));
        }
        this.success = __this__success;
      }
    }

    public listCandidateShareChain_result deepCopy() {
      return new listCandidateShareChain_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO> getSuccess() {
      return this.success;
    }

    public listCandidateShareChain_result setSuccess(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listCandidateShareChain_result)
        return this.equals((listCandidateShareChain_result)that);
      return false;
    }

    public boolean equals(listCandidateShareChain_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listCandidateShareChain_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listCandidateShareChain_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCandidateShareChain_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateShareChain_resultStandardScheme getScheme() {
        return new listCandidateShareChain_resultStandardScheme();
      }
    }

    private static class listCandidateShareChain_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listCandidateShareChain_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCandidateShareChain_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list170 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO>(_list170.size);
                  com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO _elem171;
                  for (int _i172 = 0; _i172 < _list170.size; ++_i172)
                  {
                    _elem171 = new com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO();
                    _elem171.read(iprot);
                    struct.success.add(_elem171);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCandidateShareChain_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO _iter173 : struct.success)
            {
              _iter173.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCandidateShareChain_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateShareChain_resultTupleScheme getScheme() {
        return new listCandidateShareChain_resultTupleScheme();
      }
    }

    private static class listCandidateShareChain_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listCandidateShareChain_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCandidateShareChain_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO _iter174 : struct.success)
            {
              _iter174.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCandidateShareChain_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list175 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO>(_list175.size);
            com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO _elem176;
            for (int _i177 = 0; _i177 < _list175.size; ++_i177)
            {
              _elem176 = new com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO();
              _elem176.read(iprot);
              struct.success.add(_elem176);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateCandidateShareChain_args implements org.apache.thrift.TBase<updateCandidateShareChain_args, updateCandidateShareChain_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateCandidateShareChain_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCandidateShareChain_args");

    private static final org.apache.thrift.protocol.TField CANDIDATE_SHARE_CHAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("candidateShareChain", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateCandidateShareChain_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateCandidateShareChain_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO candidateShareChain; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CANDIDATE_SHARE_CHAIN((short)1, "candidateShareChain");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CANDIDATE_SHARE_CHAIN
            return CANDIDATE_SHARE_CHAIN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CANDIDATE_SHARE_CHAIN, new org.apache.thrift.meta_data.FieldMetaData("candidateShareChain", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCandidateShareChain_args.class, metaDataMap);
    }

    public updateCandidateShareChain_args() {
    }

    public updateCandidateShareChain_args(
      com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO candidateShareChain)
    {
      this();
      this.candidateShareChain = candidateShareChain;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCandidateShareChain_args(updateCandidateShareChain_args other) {
      if (other.isSetCandidateShareChain()) {
        this.candidateShareChain = new com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO(other.candidateShareChain);
      }
    }

    public updateCandidateShareChain_args deepCopy() {
      return new updateCandidateShareChain_args(this);
    }

    @Override
    public void clear() {
      this.candidateShareChain = null;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO getCandidateShareChain() {
      return this.candidateShareChain;
    }

    public updateCandidateShareChain_args setCandidateShareChain(com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO candidateShareChain) {
      this.candidateShareChain = candidateShareChain;
      return this;
    }

    public void unsetCandidateShareChain() {
      this.candidateShareChain = null;
    }

    /** Returns true if field candidateShareChain is set (has been assigned a value) and false otherwise */
    public boolean isSetCandidateShareChain() {
      return this.candidateShareChain != null;
    }

    public void setCandidateShareChainIsSet(boolean value) {
      if (!value) {
        this.candidateShareChain = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CANDIDATE_SHARE_CHAIN:
        if (value == null) {
          unsetCandidateShareChain();
        } else {
          setCandidateShareChain((com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CANDIDATE_SHARE_CHAIN:
        return getCandidateShareChain();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CANDIDATE_SHARE_CHAIN:
        return isSetCandidateShareChain();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCandidateShareChain_args)
        return this.equals((updateCandidateShareChain_args)that);
      return false;
    }

    public boolean equals(updateCandidateShareChain_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_candidateShareChain = true && this.isSetCandidateShareChain();
      boolean that_present_candidateShareChain = true && that.isSetCandidateShareChain();
      if (this_present_candidateShareChain || that_present_candidateShareChain) {
        if (!(this_present_candidateShareChain && that_present_candidateShareChain))
          return false;
        if (!this.candidateShareChain.equals(that.candidateShareChain))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCandidateShareChain()) ? 131071 : 524287);
      if (isSetCandidateShareChain())
        hashCode = hashCode * 8191 + candidateShareChain.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateCandidateShareChain_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCandidateShareChain()).compareTo(other.isSetCandidateShareChain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCandidateShareChain()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.candidateShareChain, other.candidateShareChain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateCandidateShareChain_args(");
      boolean first = true;

      sb.append("candidateShareChain:");
      if (this.candidateShareChain == null) {
        sb.append("null");
      } else {
        sb.append(this.candidateShareChain);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (candidateShareChain != null) {
        candidateShareChain.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCandidateShareChain_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateCandidateShareChain_argsStandardScheme getScheme() {
        return new updateCandidateShareChain_argsStandardScheme();
      }
    }

    private static class updateCandidateShareChain_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateCandidateShareChain_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCandidateShareChain_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CANDIDATE_SHARE_CHAIN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.candidateShareChain = new com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO();
                struct.candidateShareChain.read(iprot);
                struct.setCandidateShareChainIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCandidateShareChain_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.candidateShareChain != null) {
          oprot.writeFieldBegin(CANDIDATE_SHARE_CHAIN_FIELD_DESC);
          struct.candidateShareChain.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCandidateShareChain_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateCandidateShareChain_argsTupleScheme getScheme() {
        return new updateCandidateShareChain_argsTupleScheme();
      }
    }

    private static class updateCandidateShareChain_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateCandidateShareChain_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCandidateShareChain_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCandidateShareChain()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCandidateShareChain()) {
          struct.candidateShareChain.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCandidateShareChain_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.candidateShareChain = new com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO();
          struct.candidateShareChain.read(iprot);
          struct.setCandidateShareChainIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateCandidateShareChain_result implements org.apache.thrift.TBase<updateCandidateShareChain_result, updateCandidateShareChain_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateCandidateShareChain_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCandidateShareChain_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateCandidateShareChain_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateCandidateShareChain_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCandidateShareChain_result.class, metaDataMap);
    }

    public updateCandidateShareChain_result() {
    }

    public updateCandidateShareChain_result(
      com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCandidateShareChain_result(updateCandidateShareChain_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO(other.success);
      }
    }

    public updateCandidateShareChain_result deepCopy() {
      return new updateCandidateShareChain_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO getSuccess() {
      return this.success;
    }

    public updateCandidateShareChain_result setSuccess(com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCandidateShareChain_result)
        return this.equals((updateCandidateShareChain_result)that);
      return false;
    }

    public boolean equals(updateCandidateShareChain_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateCandidateShareChain_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateCandidateShareChain_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCandidateShareChain_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateCandidateShareChain_resultStandardScheme getScheme() {
        return new updateCandidateShareChain_resultStandardScheme();
      }
    }

    private static class updateCandidateShareChain_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateCandidateShareChain_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCandidateShareChain_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCandidateShareChain_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCandidateShareChain_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateCandidateShareChain_resultTupleScheme getScheme() {
        return new updateCandidateShareChain_resultTupleScheme();
      }
    }

    private static class updateCandidateShareChain_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateCandidateShareChain_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCandidateShareChain_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCandidateShareChain_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.dao.struct.CandidateShareChainDO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteCandidateShareChain_args implements org.apache.thrift.TBase<deleteCandidateShareChain_args, deleteCandidateShareChain_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteCandidateShareChain_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCandidateShareChain_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteCandidateShareChain_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteCandidateShareChain_argsTupleSchemeFactory();

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCandidateShareChain_args.class, metaDataMap);
    }

    public deleteCandidateShareChain_args() {
    }

    public deleteCandidateShareChain_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteCandidateShareChain_args(deleteCandidateShareChain_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public deleteCandidateShareChain_args deepCopy() {
      return new deleteCandidateShareChain_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public deleteCandidateShareChain_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteCandidateShareChain_args)
        return this.equals((deleteCandidateShareChain_args)that);
      return false;
    }

    public boolean equals(deleteCandidateShareChain_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + id;

      return hashCode;
    }

    @Override
    public int compareTo(deleteCandidateShareChain_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteCandidateShareChain_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteCandidateShareChain_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteCandidateShareChain_argsStandardScheme getScheme() {
        return new deleteCandidateShareChain_argsStandardScheme();
      }
    }

    private static class deleteCandidateShareChain_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteCandidateShareChain_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCandidateShareChain_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCandidateShareChain_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteCandidateShareChain_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteCandidateShareChain_argsTupleScheme getScheme() {
        return new deleteCandidateShareChain_argsTupleScheme();
      }
    }

    private static class deleteCandidateShareChain_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteCandidateShareChain_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteCandidateShareChain_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteCandidateShareChain_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteCandidateShareChain_result implements org.apache.thrift.TBase<deleteCandidateShareChain_result, deleteCandidateShareChain_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteCandidateShareChain_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCandidateShareChain_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteCandidateShareChain_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteCandidateShareChain_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCandidateShareChain_result.class, metaDataMap);
    }

    public deleteCandidateShareChain_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteCandidateShareChain_result(deleteCandidateShareChain_result other) {
    }

    public deleteCandidateShareChain_result deepCopy() {
      return new deleteCandidateShareChain_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteCandidateShareChain_result)
        return this.equals((deleteCandidateShareChain_result)that);
      return false;
    }

    public boolean equals(deleteCandidateShareChain_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(deleteCandidateShareChain_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteCandidateShareChain_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteCandidateShareChain_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteCandidateShareChain_resultStandardScheme getScheme() {
        return new deleteCandidateShareChain_resultStandardScheme();
      }
    }

    private static class deleteCandidateShareChain_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteCandidateShareChain_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCandidateShareChain_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCandidateShareChain_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteCandidateShareChain_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteCandidateShareChain_resultTupleScheme getScheme() {
        return new deleteCandidateShareChain_resultTupleScheme();
      }
    }

    private static class deleteCandidateShareChain_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteCandidateShareChain_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteCandidateShareChain_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteCandidateShareChain_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCandidateSuggestPosition_args implements org.apache.thrift.TBase<getCandidateSuggestPosition_args, getCandidateSuggestPosition_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCandidateSuggestPosition_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCandidateSuggestPosition_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCandidateSuggestPosition_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCandidateSuggestPosition_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.CommonQuery query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.CommonQuery.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCandidateSuggestPosition_args.class, metaDataMap);
    }

    public getCandidateSuggestPosition_args() {
    }

    public getCandidateSuggestPosition_args(
      com.moseeker.thrift.gen.common.struct.CommonQuery query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCandidateSuggestPosition_args(getCandidateSuggestPosition_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.common.struct.CommonQuery(other.query);
      }
    }

    public getCandidateSuggestPosition_args deepCopy() {
      return new getCandidateSuggestPosition_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public com.moseeker.thrift.gen.common.struct.CommonQuery getQuery() {
      return this.query;
    }

    public getCandidateSuggestPosition_args setQuery(com.moseeker.thrift.gen.common.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.common.struct.CommonQuery)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCandidateSuggestPosition_args)
        return this.equals((getCandidateSuggestPosition_args)that);
      return false;
    }

    public boolean equals(getCandidateSuggestPosition_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCandidateSuggestPosition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCandidateSuggestPosition_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCandidateSuggestPosition_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCandidateSuggestPosition_argsStandardScheme getScheme() {
        return new getCandidateSuggestPosition_argsStandardScheme();
      }
    }

    private static class getCandidateSuggestPosition_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCandidateSuggestPosition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCandidateSuggestPosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCandidateSuggestPosition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCandidateSuggestPosition_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCandidateSuggestPosition_argsTupleScheme getScheme() {
        return new getCandidateSuggestPosition_argsTupleScheme();
      }
    }

    private static class getCandidateSuggestPosition_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCandidateSuggestPosition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCandidateSuggestPosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCandidateSuggestPosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCandidateSuggestPosition_result implements org.apache.thrift.TBase<getCandidateSuggestPosition_result, getCandidateSuggestPosition_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCandidateSuggestPosition_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCandidateSuggestPosition_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCandidateSuggestPosition_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCandidateSuggestPosition_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCandidateSuggestPosition_result.class, metaDataMap);
    }

    public getCandidateSuggestPosition_result() {
    }

    public getCandidateSuggestPosition_result(
      com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCandidateSuggestPosition_result(getCandidateSuggestPosition_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO(other.success);
      }
    }

    public getCandidateSuggestPosition_result deepCopy() {
      return new getCandidateSuggestPosition_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO getSuccess() {
      return this.success;
    }

    public getCandidateSuggestPosition_result setSuccess(com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCandidateSuggestPosition_result)
        return this.equals((getCandidateSuggestPosition_result)that);
      return false;
    }

    public boolean equals(getCandidateSuggestPosition_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCandidateSuggestPosition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCandidateSuggestPosition_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCandidateSuggestPosition_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCandidateSuggestPosition_resultStandardScheme getScheme() {
        return new getCandidateSuggestPosition_resultStandardScheme();
      }
    }

    private static class getCandidateSuggestPosition_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCandidateSuggestPosition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCandidateSuggestPosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCandidateSuggestPosition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCandidateSuggestPosition_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCandidateSuggestPosition_resultTupleScheme getScheme() {
        return new getCandidateSuggestPosition_resultTupleScheme();
      }
    }

    private static class getCandidateSuggestPosition_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCandidateSuggestPosition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCandidateSuggestPosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCandidateSuggestPosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listCandidateSuggestPosition_args implements org.apache.thrift.TBase<listCandidateSuggestPosition_args, listCandidateSuggestPosition_args._Fields>, java.io.Serializable, Cloneable, Comparable<listCandidateSuggestPosition_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCandidateSuggestPosition_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listCandidateSuggestPosition_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listCandidateSuggestPosition_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.CommonQuery query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.CommonQuery.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCandidateSuggestPosition_args.class, metaDataMap);
    }

    public listCandidateSuggestPosition_args() {
    }

    public listCandidateSuggestPosition_args(
      com.moseeker.thrift.gen.common.struct.CommonQuery query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCandidateSuggestPosition_args(listCandidateSuggestPosition_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.common.struct.CommonQuery(other.query);
      }
    }

    public listCandidateSuggestPosition_args deepCopy() {
      return new listCandidateSuggestPosition_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public com.moseeker.thrift.gen.common.struct.CommonQuery getQuery() {
      return this.query;
    }

    public listCandidateSuggestPosition_args setQuery(com.moseeker.thrift.gen.common.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.common.struct.CommonQuery)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listCandidateSuggestPosition_args)
        return this.equals((listCandidateSuggestPosition_args)that);
      return false;
    }

    public boolean equals(listCandidateSuggestPosition_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listCandidateSuggestPosition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listCandidateSuggestPosition_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCandidateSuggestPosition_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateSuggestPosition_argsStandardScheme getScheme() {
        return new listCandidateSuggestPosition_argsStandardScheme();
      }
    }

    private static class listCandidateSuggestPosition_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listCandidateSuggestPosition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCandidateSuggestPosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCandidateSuggestPosition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCandidateSuggestPosition_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateSuggestPosition_argsTupleScheme getScheme() {
        return new listCandidateSuggestPosition_argsTupleScheme();
      }
    }

    private static class listCandidateSuggestPosition_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listCandidateSuggestPosition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCandidateSuggestPosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCandidateSuggestPosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listCandidateSuggestPosition_result implements org.apache.thrift.TBase<listCandidateSuggestPosition_result, listCandidateSuggestPosition_result._Fields>, java.io.Serializable, Cloneable, Comparable<listCandidateSuggestPosition_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCandidateSuggestPosition_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listCandidateSuggestPosition_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listCandidateSuggestPosition_resultTupleSchemeFactory();

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCandidateSuggestPosition_result.class, metaDataMap);
    }

    public listCandidateSuggestPosition_result() {
    }

    public listCandidateSuggestPosition_result(
      java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCandidateSuggestPosition_result(listCandidateSuggestPosition_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO> __this__success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO>(other.success.size());
        for (com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO other_element : other.success) {
          __this__success.add(new com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO(other_element));
        }
        this.success = __this__success;
      }
    }

    public listCandidateSuggestPosition_result deepCopy() {
      return new listCandidateSuggestPosition_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO> getSuccess() {
      return this.success;
    }

    public listCandidateSuggestPosition_result setSuccess(java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listCandidateSuggestPosition_result)
        return this.equals((listCandidateSuggestPosition_result)that);
      return false;
    }

    public boolean equals(listCandidateSuggestPosition_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listCandidateSuggestPosition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listCandidateSuggestPosition_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCandidateSuggestPosition_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateSuggestPosition_resultStandardScheme getScheme() {
        return new listCandidateSuggestPosition_resultStandardScheme();
      }
    }

    private static class listCandidateSuggestPosition_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listCandidateSuggestPosition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCandidateSuggestPosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list178 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO>(_list178.size);
                  com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO _elem179;
                  for (int _i180 = 0; _i180 < _list178.size; ++_i180)
                  {
                    _elem179 = new com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO();
                    _elem179.read(iprot);
                    struct.success.add(_elem179);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCandidateSuggestPosition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO _iter181 : struct.success)
            {
              _iter181.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCandidateSuggestPosition_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listCandidateSuggestPosition_resultTupleScheme getScheme() {
        return new listCandidateSuggestPosition_resultTupleScheme();
      }
    }

    private static class listCandidateSuggestPosition_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listCandidateSuggestPosition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCandidateSuggestPosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO _iter182 : struct.success)
            {
              _iter182.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCandidateSuggestPosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list183 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO>(_list183.size);
            com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO _elem184;
            for (int _i185 = 0; _i185 < _list183.size; ++_i185)
            {
              _elem184 = new com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO();
              _elem184.read(iprot);
              struct.success.add(_elem184);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateCandidateSuggestPosition_args implements org.apache.thrift.TBase<updateCandidateSuggestPosition_args, updateCandidateSuggestPosition_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateCandidateSuggestPosition_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCandidateSuggestPosition_args");

    private static final org.apache.thrift.protocol.TField CANDIDATE_SUGGEST_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("candidateSuggestPosition", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateCandidateSuggestPosition_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateCandidateSuggestPosition_argsTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO candidateSuggestPosition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CANDIDATE_SUGGEST_POSITION((short)1, "candidateSuggestPosition");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CANDIDATE_SUGGEST_POSITION
            return CANDIDATE_SUGGEST_POSITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CANDIDATE_SUGGEST_POSITION, new org.apache.thrift.meta_data.FieldMetaData("candidateSuggestPosition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCandidateSuggestPosition_args.class, metaDataMap);
    }

    public updateCandidateSuggestPosition_args() {
    }

    public updateCandidateSuggestPosition_args(
      com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO candidateSuggestPosition)
    {
      this();
      this.candidateSuggestPosition = candidateSuggestPosition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCandidateSuggestPosition_args(updateCandidateSuggestPosition_args other) {
      if (other.isSetCandidateSuggestPosition()) {
        this.candidateSuggestPosition = new com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO(other.candidateSuggestPosition);
      }
    }

    public updateCandidateSuggestPosition_args deepCopy() {
      return new updateCandidateSuggestPosition_args(this);
    }

    @Override
    public void clear() {
      this.candidateSuggestPosition = null;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO getCandidateSuggestPosition() {
      return this.candidateSuggestPosition;
    }

    public updateCandidateSuggestPosition_args setCandidateSuggestPosition(com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO candidateSuggestPosition) {
      this.candidateSuggestPosition = candidateSuggestPosition;
      return this;
    }

    public void unsetCandidateSuggestPosition() {
      this.candidateSuggestPosition = null;
    }

    /** Returns true if field candidateSuggestPosition is set (has been assigned a value) and false otherwise */
    public boolean isSetCandidateSuggestPosition() {
      return this.candidateSuggestPosition != null;
    }

    public void setCandidateSuggestPositionIsSet(boolean value) {
      if (!value) {
        this.candidateSuggestPosition = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CANDIDATE_SUGGEST_POSITION:
        if (value == null) {
          unsetCandidateSuggestPosition();
        } else {
          setCandidateSuggestPosition((com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CANDIDATE_SUGGEST_POSITION:
        return getCandidateSuggestPosition();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CANDIDATE_SUGGEST_POSITION:
        return isSetCandidateSuggestPosition();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCandidateSuggestPosition_args)
        return this.equals((updateCandidateSuggestPosition_args)that);
      return false;
    }

    public boolean equals(updateCandidateSuggestPosition_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_candidateSuggestPosition = true && this.isSetCandidateSuggestPosition();
      boolean that_present_candidateSuggestPosition = true && that.isSetCandidateSuggestPosition();
      if (this_present_candidateSuggestPosition || that_present_candidateSuggestPosition) {
        if (!(this_present_candidateSuggestPosition && that_present_candidateSuggestPosition))
          return false;
        if (!this.candidateSuggestPosition.equals(that.candidateSuggestPosition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCandidateSuggestPosition()) ? 131071 : 524287);
      if (isSetCandidateSuggestPosition())
        hashCode = hashCode * 8191 + candidateSuggestPosition.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateCandidateSuggestPosition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCandidateSuggestPosition()).compareTo(other.isSetCandidateSuggestPosition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCandidateSuggestPosition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.candidateSuggestPosition, other.candidateSuggestPosition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateCandidateSuggestPosition_args(");
      boolean first = true;

      sb.append("candidateSuggestPosition:");
      if (this.candidateSuggestPosition == null) {
        sb.append("null");
      } else {
        sb.append(this.candidateSuggestPosition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (candidateSuggestPosition != null) {
        candidateSuggestPosition.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCandidateSuggestPosition_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateCandidateSuggestPosition_argsStandardScheme getScheme() {
        return new updateCandidateSuggestPosition_argsStandardScheme();
      }
    }

    private static class updateCandidateSuggestPosition_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateCandidateSuggestPosition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCandidateSuggestPosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CANDIDATE_SUGGEST_POSITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.candidateSuggestPosition = new com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO();
                struct.candidateSuggestPosition.read(iprot);
                struct.setCandidateSuggestPositionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCandidateSuggestPosition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.candidateSuggestPosition != null) {
          oprot.writeFieldBegin(CANDIDATE_SUGGEST_POSITION_FIELD_DESC);
          struct.candidateSuggestPosition.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCandidateSuggestPosition_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateCandidateSuggestPosition_argsTupleScheme getScheme() {
        return new updateCandidateSuggestPosition_argsTupleScheme();
      }
    }

    private static class updateCandidateSuggestPosition_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateCandidateSuggestPosition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCandidateSuggestPosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCandidateSuggestPosition()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCandidateSuggestPosition()) {
          struct.candidateSuggestPosition.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCandidateSuggestPosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.candidateSuggestPosition = new com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO();
          struct.candidateSuggestPosition.read(iprot);
          struct.setCandidateSuggestPositionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateCandidateSuggestPosition_result implements org.apache.thrift.TBase<updateCandidateSuggestPosition_result, updateCandidateSuggestPosition_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateCandidateSuggestPosition_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCandidateSuggestPosition_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateCandidateSuggestPosition_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateCandidateSuggestPosition_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCandidateSuggestPosition_result.class, metaDataMap);
    }

    public updateCandidateSuggestPosition_result() {
    }

    public updateCandidateSuggestPosition_result(
      com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCandidateSuggestPosition_result(updateCandidateSuggestPosition_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO(other.success);
      }
    }

    public updateCandidateSuggestPosition_result deepCopy() {
      return new updateCandidateSuggestPosition_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO getSuccess() {
      return this.success;
    }

    public updateCandidateSuggestPosition_result setSuccess(com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCandidateSuggestPosition_result)
        return this.equals((updateCandidateSuggestPosition_result)that);
      return false;
    }

    public boolean equals(updateCandidateSuggestPosition_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateCandidateSuggestPosition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateCandidateSuggestPosition_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCandidateSuggestPosition_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateCandidateSuggestPosition_resultStandardScheme getScheme() {
        return new updateCandidateSuggestPosition_resultStandardScheme();
      }
    }

    private static class updateCandidateSuggestPosition_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateCandidateSuggestPosition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCandidateSuggestPosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCandidateSuggestPosition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCandidateSuggestPosition_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateCandidateSuggestPosition_resultTupleScheme getScheme() {
        return new updateCandidateSuggestPosition_resultTupleScheme();
      }
    }

    private static class updateCandidateSuggestPosition_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateCandidateSuggestPosition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCandidateSuggestPosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCandidateSuggestPosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.dao.struct.CandidateSuggestPositionDO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteCandidateSuggestPosition_args implements org.apache.thrift.TBase<deleteCandidateSuggestPosition_args, deleteCandidateSuggestPosition_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteCandidateSuggestPosition_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCandidateSuggestPosition_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteCandidateSuggestPosition_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteCandidateSuggestPosition_argsTupleSchemeFactory();

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCandidateSuggestPosition_args.class, metaDataMap);
    }

    public deleteCandidateSuggestPosition_args() {
    }

    public deleteCandidateSuggestPosition_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteCandidateSuggestPosition_args(deleteCandidateSuggestPosition_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public deleteCandidateSuggestPosition_args deepCopy() {
      return new deleteCandidateSuggestPosition_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public deleteCandidateSuggestPosition_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteCandidateSuggestPosition_args)
        return this.equals((deleteCandidateSuggestPosition_args)that);
      return false;
    }

    public boolean equals(deleteCandidateSuggestPosition_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + id;

      return hashCode;
    }

    @Override
    public int compareTo(deleteCandidateSuggestPosition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteCandidateSuggestPosition_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteCandidateSuggestPosition_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteCandidateSuggestPosition_argsStandardScheme getScheme() {
        return new deleteCandidateSuggestPosition_argsStandardScheme();
      }
    }

    private static class deleteCandidateSuggestPosition_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteCandidateSuggestPosition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCandidateSuggestPosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCandidateSuggestPosition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteCandidateSuggestPosition_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteCandidateSuggestPosition_argsTupleScheme getScheme() {
        return new deleteCandidateSuggestPosition_argsTupleScheme();
      }
    }

    private static class deleteCandidateSuggestPosition_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteCandidateSuggestPosition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteCandidateSuggestPosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteCandidateSuggestPosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteCandidateSuggestPosition_result implements org.apache.thrift.TBase<deleteCandidateSuggestPosition_result, deleteCandidateSuggestPosition_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteCandidateSuggestPosition_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCandidateSuggestPosition_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteCandidateSuggestPosition_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteCandidateSuggestPosition_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCandidateSuggestPosition_result.class, metaDataMap);
    }

    public deleteCandidateSuggestPosition_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteCandidateSuggestPosition_result(deleteCandidateSuggestPosition_result other) {
    }

    public deleteCandidateSuggestPosition_result deepCopy() {
      return new deleteCandidateSuggestPosition_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteCandidateSuggestPosition_result)
        return this.equals((deleteCandidateSuggestPosition_result)that);
      return false;
    }

    public boolean equals(deleteCandidateSuggestPosition_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(deleteCandidateSuggestPosition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteCandidateSuggestPosition_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteCandidateSuggestPosition_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteCandidateSuggestPosition_resultStandardScheme getScheme() {
        return new deleteCandidateSuggestPosition_resultStandardScheme();
      }
    }

    private static class deleteCandidateSuggestPosition_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteCandidateSuggestPosition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCandidateSuggestPosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCandidateSuggestPosition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteCandidateSuggestPosition_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteCandidateSuggestPosition_resultTupleScheme getScheme() {
        return new deleteCandidateSuggestPosition_resultTupleScheme();
      }
    }

    private static class deleteCandidateSuggestPosition_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteCandidateSuggestPosition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteCandidateSuggestPosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteCandidateSuggestPosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
