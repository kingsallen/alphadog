/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.profile.struct;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-5-30")
public class ProjectExp implements org.apache.thrift.TBase<ProjectExp, ProjectExp._Fields>, java.io.Serializable, Cloneable, Comparable<ProjectExp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProjectExp");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROFILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("profile_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("start_date", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("end_date", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField END_UNTIL_NOW_FIELD_DESC = new org.apache.thrift.protocol.TField("end_until_now", org.apache.thrift.protocol.TType.I16, (short)5);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField COMPANY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("company_name", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField IS_IT_FIELD_DESC = new org.apache.thrift.protocol.TField("is_it", org.apache.thrift.protocol.TType.I16, (short)8);
  private static final org.apache.thrift.protocol.TField DEV_TOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("dev_tool", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField HARDWARE_FIELD_DESC = new org.apache.thrift.protocol.TField("hardware", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SOFTWARE_FIELD_DESC = new org.apache.thrift.protocol.TField("software", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("role", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField RESPONSIBILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("responsibility", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField ACHIEVEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("achievement", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField MEMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("member", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("create_time", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("update_time", org.apache.thrift.protocol.TType.STRING, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProjectExpStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProjectExpTupleSchemeFactory());
  }

  public int id; // required
  public int profile_id; // required
  public String start_date; // required
  public String end_date; // required
  public short end_until_now; // required
  public String name; // required
  public String company_name; // required
  public short is_it; // required
  public String dev_tool; // required
  public String hardware; // required
  public String software; // required
  public String url; // required
  public String description; // required
  public String role; // required
  public String responsibility; // required
  public String achievement; // required
  public String member; // required
  public String create_time; // required
  public String update_time; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PROFILE_ID((short)2, "profile_id"),
    START_DATE((short)3, "start_date"),
    END_DATE((short)4, "end_date"),
    END_UNTIL_NOW((short)5, "end_until_now"),
    NAME((short)6, "name"),
    COMPANY_NAME((short)7, "company_name"),
    IS_IT((short)8, "is_it"),
    DEV_TOOL((short)9, "dev_tool"),
    HARDWARE((short)10, "hardware"),
    SOFTWARE((short)11, "software"),
    URL((short)12, "url"),
    DESCRIPTION((short)13, "description"),
    ROLE((short)14, "role"),
    RESPONSIBILITY((short)15, "responsibility"),
    ACHIEVEMENT((short)16, "achievement"),
    MEMBER((short)17, "member"),
    CREATE_TIME((short)18, "create_time"),
    UPDATE_TIME((short)19, "update_time");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PROFILE_ID
          return PROFILE_ID;
        case 3: // START_DATE
          return START_DATE;
        case 4: // END_DATE
          return END_DATE;
        case 5: // END_UNTIL_NOW
          return END_UNTIL_NOW;
        case 6: // NAME
          return NAME;
        case 7: // COMPANY_NAME
          return COMPANY_NAME;
        case 8: // IS_IT
          return IS_IT;
        case 9: // DEV_TOOL
          return DEV_TOOL;
        case 10: // HARDWARE
          return HARDWARE;
        case 11: // SOFTWARE
          return SOFTWARE;
        case 12: // URL
          return URL;
        case 13: // DESCRIPTION
          return DESCRIPTION;
        case 14: // ROLE
          return ROLE;
        case 15: // RESPONSIBILITY
          return RESPONSIBILITY;
        case 16: // ACHIEVEMENT
          return ACHIEVEMENT;
        case 17: // MEMBER
          return MEMBER;
        case 18: // CREATE_TIME
          return CREATE_TIME;
        case 19: // UPDATE_TIME
          return UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PROFILE_ID_ISSET_ID = 1;
  private static final int __END_UNTIL_NOW_ISSET_ID = 2;
  private static final int __IS_IT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROFILE_ID, new org.apache.thrift.meta_data.FieldMetaData("profile_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("start_date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("end_date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.END_UNTIL_NOW, new org.apache.thrift.meta_data.FieldMetaData("end_until_now", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY_NAME, new org.apache.thrift.meta_data.FieldMetaData("company_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_IT, new org.apache.thrift.meta_data.FieldMetaData("is_it", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.DEV_TOOL, new org.apache.thrift.meta_data.FieldMetaData("dev_tool", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HARDWARE, new org.apache.thrift.meta_data.FieldMetaData("hardware", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOFTWARE, new org.apache.thrift.meta_data.FieldMetaData("software", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROLE, new org.apache.thrift.meta_data.FieldMetaData("role", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESPONSIBILITY, new org.apache.thrift.meta_data.FieldMetaData("responsibility", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACHIEVEMENT, new org.apache.thrift.meta_data.FieldMetaData("achievement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEMBER, new org.apache.thrift.meta_data.FieldMetaData("member", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("create_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("update_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProjectExp.class, metaDataMap);
  }

  public ProjectExp() {
  }

  public ProjectExp(
    int id,
    int profile_id,
    String start_date,
    String end_date,
    short end_until_now,
    String name,
    String company_name,
    short is_it,
    String dev_tool,
    String hardware,
    String software,
    String url,
    String description,
    String role,
    String responsibility,
    String achievement,
    String member,
    String create_time,
    String update_time)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.profile_id = profile_id;
    setProfile_idIsSet(true);
    this.start_date = start_date;
    this.end_date = end_date;
    this.end_until_now = end_until_now;
    setEnd_until_nowIsSet(true);
    this.name = name;
    this.company_name = company_name;
    this.is_it = is_it;
    setIs_itIsSet(true);
    this.dev_tool = dev_tool;
    this.hardware = hardware;
    this.software = software;
    this.url = url;
    this.description = description;
    this.role = role;
    this.responsibility = responsibility;
    this.achievement = achievement;
    this.member = member;
    this.create_time = create_time;
    this.update_time = update_time;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProjectExp(ProjectExp other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.profile_id = other.profile_id;
    if (other.isSetStart_date()) {
      this.start_date = other.start_date;
    }
    if (other.isSetEnd_date()) {
      this.end_date = other.end_date;
    }
    this.end_until_now = other.end_until_now;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetCompany_name()) {
      this.company_name = other.company_name;
    }
    this.is_it = other.is_it;
    if (other.isSetDev_tool()) {
      this.dev_tool = other.dev_tool;
    }
    if (other.isSetHardware()) {
      this.hardware = other.hardware;
    }
    if (other.isSetSoftware()) {
      this.software = other.software;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetRole()) {
      this.role = other.role;
    }
    if (other.isSetResponsibility()) {
      this.responsibility = other.responsibility;
    }
    if (other.isSetAchievement()) {
      this.achievement = other.achievement;
    }
    if (other.isSetMember()) {
      this.member = other.member;
    }
    if (other.isSetCreate_time()) {
      this.create_time = other.create_time;
    }
    if (other.isSetUpdate_time()) {
      this.update_time = other.update_time;
    }
  }

  public ProjectExp deepCopy() {
    return new ProjectExp(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setProfile_idIsSet(false);
    this.profile_id = 0;
    this.start_date = null;
    this.end_date = null;
    setEnd_until_nowIsSet(false);
    this.end_until_now = 0;
    this.name = null;
    this.company_name = null;
    setIs_itIsSet(false);
    this.is_it = 0;
    this.dev_tool = null;
    this.hardware = null;
    this.software = null;
    this.url = null;
    this.description = null;
    this.role = null;
    this.responsibility = null;
    this.achievement = null;
    this.member = null;
    this.create_time = null;
    this.update_time = null;
  }

  public int getId() {
    return this.id;
  }

  public ProjectExp setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getProfile_id() {
    return this.profile_id;
  }

  public ProjectExp setProfile_id(int profile_id) {
    this.profile_id = profile_id;
    setProfile_idIsSet(true);
    return this;
  }

  public void unsetProfile_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROFILE_ID_ISSET_ID);
  }

  /** Returns true if field profile_id is set (has been assigned a value) and false otherwise */
  public boolean isSetProfile_id() {
    return EncodingUtils.testBit(__isset_bitfield, __PROFILE_ID_ISSET_ID);
  }

  public void setProfile_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROFILE_ID_ISSET_ID, value);
  }

  public String getStart_date() {
    return this.start_date;
  }

  public ProjectExp setStart_date(String start_date) {
    this.start_date = start_date;
    return this;
  }

  public void unsetStart_date() {
    this.start_date = null;
  }

  /** Returns true if field start_date is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_date() {
    return this.start_date != null;
  }

  public void setStart_dateIsSet(boolean value) {
    if (!value) {
      this.start_date = null;
    }
  }

  public String getEnd_date() {
    return this.end_date;
  }

  public ProjectExp setEnd_date(String end_date) {
    this.end_date = end_date;
    return this;
  }

  public void unsetEnd_date() {
    this.end_date = null;
  }

  /** Returns true if field end_date is set (has been assigned a value) and false otherwise */
  public boolean isSetEnd_date() {
    return this.end_date != null;
  }

  public void setEnd_dateIsSet(boolean value) {
    if (!value) {
      this.end_date = null;
    }
  }

  public short getEnd_until_now() {
    return this.end_until_now;
  }

  public ProjectExp setEnd_until_now(short end_until_now) {
    this.end_until_now = end_until_now;
    setEnd_until_nowIsSet(true);
    return this;
  }

  public void unsetEnd_until_now() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __END_UNTIL_NOW_ISSET_ID);
  }

  /** Returns true if field end_until_now is set (has been assigned a value) and false otherwise */
  public boolean isSetEnd_until_now() {
    return EncodingUtils.testBit(__isset_bitfield, __END_UNTIL_NOW_ISSET_ID);
  }

  public void setEnd_until_nowIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __END_UNTIL_NOW_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public ProjectExp setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getCompany_name() {
    return this.company_name;
  }

  public ProjectExp setCompany_name(String company_name) {
    this.company_name = company_name;
    return this;
  }

  public void unsetCompany_name() {
    this.company_name = null;
  }

  /** Returns true if field company_name is set (has been assigned a value) and false otherwise */
  public boolean isSetCompany_name() {
    return this.company_name != null;
  }

  public void setCompany_nameIsSet(boolean value) {
    if (!value) {
      this.company_name = null;
    }
  }

  public short getIs_it() {
    return this.is_it;
  }

  public ProjectExp setIs_it(short is_it) {
    this.is_it = is_it;
    setIs_itIsSet(true);
    return this;
  }

  public void unsetIs_it() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_IT_ISSET_ID);
  }

  /** Returns true if field is_it is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_it() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_IT_ISSET_ID);
  }

  public void setIs_itIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_IT_ISSET_ID, value);
  }

  public String getDev_tool() {
    return this.dev_tool;
  }

  public ProjectExp setDev_tool(String dev_tool) {
    this.dev_tool = dev_tool;
    return this;
  }

  public void unsetDev_tool() {
    this.dev_tool = null;
  }

  /** Returns true if field dev_tool is set (has been assigned a value) and false otherwise */
  public boolean isSetDev_tool() {
    return this.dev_tool != null;
  }

  public void setDev_toolIsSet(boolean value) {
    if (!value) {
      this.dev_tool = null;
    }
  }

  public String getHardware() {
    return this.hardware;
  }

  public ProjectExp setHardware(String hardware) {
    this.hardware = hardware;
    return this;
  }

  public void unsetHardware() {
    this.hardware = null;
  }

  /** Returns true if field hardware is set (has been assigned a value) and false otherwise */
  public boolean isSetHardware() {
    return this.hardware != null;
  }

  public void setHardwareIsSet(boolean value) {
    if (!value) {
      this.hardware = null;
    }
  }

  public String getSoftware() {
    return this.software;
  }

  public ProjectExp setSoftware(String software) {
    this.software = software;
    return this;
  }

  public void unsetSoftware() {
    this.software = null;
  }

  /** Returns true if field software is set (has been assigned a value) and false otherwise */
  public boolean isSetSoftware() {
    return this.software != null;
  }

  public void setSoftwareIsSet(boolean value) {
    if (!value) {
      this.software = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public ProjectExp setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public ProjectExp setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public String getRole() {
    return this.role;
  }

  public ProjectExp setRole(String role) {
    this.role = role;
    return this;
  }

  public void unsetRole() {
    this.role = null;
  }

  /** Returns true if field role is set (has been assigned a value) and false otherwise */
  public boolean isSetRole() {
    return this.role != null;
  }

  public void setRoleIsSet(boolean value) {
    if (!value) {
      this.role = null;
    }
  }

  public String getResponsibility() {
    return this.responsibility;
  }

  public ProjectExp setResponsibility(String responsibility) {
    this.responsibility = responsibility;
    return this;
  }

  public void unsetResponsibility() {
    this.responsibility = null;
  }

  /** Returns true if field responsibility is set (has been assigned a value) and false otherwise */
  public boolean isSetResponsibility() {
    return this.responsibility != null;
  }

  public void setResponsibilityIsSet(boolean value) {
    if (!value) {
      this.responsibility = null;
    }
  }

  public String getAchievement() {
    return this.achievement;
  }

  public ProjectExp setAchievement(String achievement) {
    this.achievement = achievement;
    return this;
  }

  public void unsetAchievement() {
    this.achievement = null;
  }

  /** Returns true if field achievement is set (has been assigned a value) and false otherwise */
  public boolean isSetAchievement() {
    return this.achievement != null;
  }

  public void setAchievementIsSet(boolean value) {
    if (!value) {
      this.achievement = null;
    }
  }

  public String getMember() {
    return this.member;
  }

  public ProjectExp setMember(String member) {
    this.member = member;
    return this;
  }

  public void unsetMember() {
    this.member = null;
  }

  /** Returns true if field member is set (has been assigned a value) and false otherwise */
  public boolean isSetMember() {
    return this.member != null;
  }

  public void setMemberIsSet(boolean value) {
    if (!value) {
      this.member = null;
    }
  }

  public String getCreate_time() {
    return this.create_time;
  }

  public ProjectExp setCreate_time(String create_time) {
    this.create_time = create_time;
    return this;
  }

  public void unsetCreate_time() {
    this.create_time = null;
  }

  /** Returns true if field create_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_time() {
    return this.create_time != null;
  }

  public void setCreate_timeIsSet(boolean value) {
    if (!value) {
      this.create_time = null;
    }
  }

  public String getUpdate_time() {
    return this.update_time;
  }

  public ProjectExp setUpdate_time(String update_time) {
    this.update_time = update_time;
    return this;
  }

  public void unsetUpdate_time() {
    this.update_time = null;
  }

  /** Returns true if field update_time is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdate_time() {
    return this.update_time != null;
  }

  public void setUpdate_timeIsSet(boolean value) {
    if (!value) {
      this.update_time = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case PROFILE_ID:
      if (value == null) {
        unsetProfile_id();
      } else {
        setProfile_id((Integer)value);
      }
      break;

    case START_DATE:
      if (value == null) {
        unsetStart_date();
      } else {
        setStart_date((String)value);
      }
      break;

    case END_DATE:
      if (value == null) {
        unsetEnd_date();
      } else {
        setEnd_date((String)value);
      }
      break;

    case END_UNTIL_NOW:
      if (value == null) {
        unsetEnd_until_now();
      } else {
        setEnd_until_now((Short)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case COMPANY_NAME:
      if (value == null) {
        unsetCompany_name();
      } else {
        setCompany_name((String)value);
      }
      break;

    case IS_IT:
      if (value == null) {
        unsetIs_it();
      } else {
        setIs_it((Short)value);
      }
      break;

    case DEV_TOOL:
      if (value == null) {
        unsetDev_tool();
      } else {
        setDev_tool((String)value);
      }
      break;

    case HARDWARE:
      if (value == null) {
        unsetHardware();
      } else {
        setHardware((String)value);
      }
      break;

    case SOFTWARE:
      if (value == null) {
        unsetSoftware();
      } else {
        setSoftware((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case ROLE:
      if (value == null) {
        unsetRole();
      } else {
        setRole((String)value);
      }
      break;

    case RESPONSIBILITY:
      if (value == null) {
        unsetResponsibility();
      } else {
        setResponsibility((String)value);
      }
      break;

    case ACHIEVEMENT:
      if (value == null) {
        unsetAchievement();
      } else {
        setAchievement((String)value);
      }
      break;

    case MEMBER:
      if (value == null) {
        unsetMember();
      } else {
        setMember((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreate_time();
      } else {
        setCreate_time((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdate_time();
      } else {
        setUpdate_time((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case PROFILE_ID:
      return Integer.valueOf(getProfile_id());

    case START_DATE:
      return getStart_date();

    case END_DATE:
      return getEnd_date();

    case END_UNTIL_NOW:
      return Short.valueOf(getEnd_until_now());

    case NAME:
      return getName();

    case COMPANY_NAME:
      return getCompany_name();

    case IS_IT:
      return Short.valueOf(getIs_it());

    case DEV_TOOL:
      return getDev_tool();

    case HARDWARE:
      return getHardware();

    case SOFTWARE:
      return getSoftware();

    case URL:
      return getUrl();

    case DESCRIPTION:
      return getDescription();

    case ROLE:
      return getRole();

    case RESPONSIBILITY:
      return getResponsibility();

    case ACHIEVEMENT:
      return getAchievement();

    case MEMBER:
      return getMember();

    case CREATE_TIME:
      return getCreate_time();

    case UPDATE_TIME:
      return getUpdate_time();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PROFILE_ID:
      return isSetProfile_id();
    case START_DATE:
      return isSetStart_date();
    case END_DATE:
      return isSetEnd_date();
    case END_UNTIL_NOW:
      return isSetEnd_until_now();
    case NAME:
      return isSetName();
    case COMPANY_NAME:
      return isSetCompany_name();
    case IS_IT:
      return isSetIs_it();
    case DEV_TOOL:
      return isSetDev_tool();
    case HARDWARE:
      return isSetHardware();
    case SOFTWARE:
      return isSetSoftware();
    case URL:
      return isSetUrl();
    case DESCRIPTION:
      return isSetDescription();
    case ROLE:
      return isSetRole();
    case RESPONSIBILITY:
      return isSetResponsibility();
    case ACHIEVEMENT:
      return isSetAchievement();
    case MEMBER:
      return isSetMember();
    case CREATE_TIME:
      return isSetCreate_time();
    case UPDATE_TIME:
      return isSetUpdate_time();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProjectExp)
      return this.equals((ProjectExp)that);
    return false;
  }

  public boolean equals(ProjectExp that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_profile_id = true;
    boolean that_present_profile_id = true;
    if (this_present_profile_id || that_present_profile_id) {
      if (!(this_present_profile_id && that_present_profile_id))
        return false;
      if (this.profile_id != that.profile_id)
        return false;
    }

    boolean this_present_start_date = true && this.isSetStart_date();
    boolean that_present_start_date = true && that.isSetStart_date();
    if (this_present_start_date || that_present_start_date) {
      if (!(this_present_start_date && that_present_start_date))
        return false;
      if (!this.start_date.equals(that.start_date))
        return false;
    }

    boolean this_present_end_date = true && this.isSetEnd_date();
    boolean that_present_end_date = true && that.isSetEnd_date();
    if (this_present_end_date || that_present_end_date) {
      if (!(this_present_end_date && that_present_end_date))
        return false;
      if (!this.end_date.equals(that.end_date))
        return false;
    }

    boolean this_present_end_until_now = true;
    boolean that_present_end_until_now = true;
    if (this_present_end_until_now || that_present_end_until_now) {
      if (!(this_present_end_until_now && that_present_end_until_now))
        return false;
      if (this.end_until_now != that.end_until_now)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_company_name = true && this.isSetCompany_name();
    boolean that_present_company_name = true && that.isSetCompany_name();
    if (this_present_company_name || that_present_company_name) {
      if (!(this_present_company_name && that_present_company_name))
        return false;
      if (!this.company_name.equals(that.company_name))
        return false;
    }

    boolean this_present_is_it = true;
    boolean that_present_is_it = true;
    if (this_present_is_it || that_present_is_it) {
      if (!(this_present_is_it && that_present_is_it))
        return false;
      if (this.is_it != that.is_it)
        return false;
    }

    boolean this_present_dev_tool = true && this.isSetDev_tool();
    boolean that_present_dev_tool = true && that.isSetDev_tool();
    if (this_present_dev_tool || that_present_dev_tool) {
      if (!(this_present_dev_tool && that_present_dev_tool))
        return false;
      if (!this.dev_tool.equals(that.dev_tool))
        return false;
    }

    boolean this_present_hardware = true && this.isSetHardware();
    boolean that_present_hardware = true && that.isSetHardware();
    if (this_present_hardware || that_present_hardware) {
      if (!(this_present_hardware && that_present_hardware))
        return false;
      if (!this.hardware.equals(that.hardware))
        return false;
    }

    boolean this_present_software = true && this.isSetSoftware();
    boolean that_present_software = true && that.isSetSoftware();
    if (this_present_software || that_present_software) {
      if (!(this_present_software && that_present_software))
        return false;
      if (!this.software.equals(that.software))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_role = true && this.isSetRole();
    boolean that_present_role = true && that.isSetRole();
    if (this_present_role || that_present_role) {
      if (!(this_present_role && that_present_role))
        return false;
      if (!this.role.equals(that.role))
        return false;
    }

    boolean this_present_responsibility = true && this.isSetResponsibility();
    boolean that_present_responsibility = true && that.isSetResponsibility();
    if (this_present_responsibility || that_present_responsibility) {
      if (!(this_present_responsibility && that_present_responsibility))
        return false;
      if (!this.responsibility.equals(that.responsibility))
        return false;
    }

    boolean this_present_achievement = true && this.isSetAchievement();
    boolean that_present_achievement = true && that.isSetAchievement();
    if (this_present_achievement || that_present_achievement) {
      if (!(this_present_achievement && that_present_achievement))
        return false;
      if (!this.achievement.equals(that.achievement))
        return false;
    }

    boolean this_present_member = true && this.isSetMember();
    boolean that_present_member = true && that.isSetMember();
    if (this_present_member || that_present_member) {
      if (!(this_present_member && that_present_member))
        return false;
      if (!this.member.equals(that.member))
        return false;
    }

    boolean this_present_create_time = true && this.isSetCreate_time();
    boolean that_present_create_time = true && that.isSetCreate_time();
    if (this_present_create_time || that_present_create_time) {
      if (!(this_present_create_time && that_present_create_time))
        return false;
      if (!this.create_time.equals(that.create_time))
        return false;
    }

    boolean this_present_update_time = true && this.isSetUpdate_time();
    boolean that_present_update_time = true && that.isSetUpdate_time();
    if (this_present_update_time || that_present_update_time) {
      if (!(this_present_update_time && that_present_update_time))
        return false;
      if (!this.update_time.equals(that.update_time))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_profile_id = true;
    list.add(present_profile_id);
    if (present_profile_id)
      list.add(profile_id);

    boolean present_start_date = true && (isSetStart_date());
    list.add(present_start_date);
    if (present_start_date)
      list.add(start_date);

    boolean present_end_date = true && (isSetEnd_date());
    list.add(present_end_date);
    if (present_end_date)
      list.add(end_date);

    boolean present_end_until_now = true;
    list.add(present_end_until_now);
    if (present_end_until_now)
      list.add(end_until_now);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_company_name = true && (isSetCompany_name());
    list.add(present_company_name);
    if (present_company_name)
      list.add(company_name);

    boolean present_is_it = true;
    list.add(present_is_it);
    if (present_is_it)
      list.add(is_it);

    boolean present_dev_tool = true && (isSetDev_tool());
    list.add(present_dev_tool);
    if (present_dev_tool)
      list.add(dev_tool);

    boolean present_hardware = true && (isSetHardware());
    list.add(present_hardware);
    if (present_hardware)
      list.add(hardware);

    boolean present_software = true && (isSetSoftware());
    list.add(present_software);
    if (present_software)
      list.add(software);

    boolean present_url = true && (isSetUrl());
    list.add(present_url);
    if (present_url)
      list.add(url);

    boolean present_description = true && (isSetDescription());
    list.add(present_description);
    if (present_description)
      list.add(description);

    boolean present_role = true && (isSetRole());
    list.add(present_role);
    if (present_role)
      list.add(role);

    boolean present_responsibility = true && (isSetResponsibility());
    list.add(present_responsibility);
    if (present_responsibility)
      list.add(responsibility);

    boolean present_achievement = true && (isSetAchievement());
    list.add(present_achievement);
    if (present_achievement)
      list.add(achievement);

    boolean present_member = true && (isSetMember());
    list.add(present_member);
    if (present_member)
      list.add(member);

    boolean present_create_time = true && (isSetCreate_time());
    list.add(present_create_time);
    if (present_create_time)
      list.add(create_time);

    boolean present_update_time = true && (isSetUpdate_time());
    list.add(present_update_time);
    if (present_update_time)
      list.add(update_time);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProjectExp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfile_id()).compareTo(other.isSetProfile_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfile_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile_id, other.profile_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart_date()).compareTo(other.isSetStart_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_date, other.start_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnd_date()).compareTo(other.isSetEnd_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnd_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_date, other.end_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnd_until_now()).compareTo(other.isSetEnd_until_now());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnd_until_now()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_until_now, other.end_until_now);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompany_name()).compareTo(other.isSetCompany_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompany_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_name, other.company_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_it()).compareTo(other.isSetIs_it());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_it()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_it, other.is_it);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDev_tool()).compareTo(other.isSetDev_tool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDev_tool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dev_tool, other.dev_tool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHardware()).compareTo(other.isSetHardware());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHardware()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hardware, other.hardware);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSoftware()).compareTo(other.isSetSoftware());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSoftware()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.software, other.software);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRole()).compareTo(other.isSetRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.role, other.role);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResponsibility()).compareTo(other.isSetResponsibility());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponsibility()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responsibility, other.responsibility);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAchievement()).compareTo(other.isSetAchievement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAchievement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.achievement, other.achievement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMember()).compareTo(other.isSetMember());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMember()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.member, other.member);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreate_time()).compareTo(other.isSetCreate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_time, other.create_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdate_time()).compareTo(other.isSetUpdate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.update_time, other.update_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProjectExp(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("profile_id:");
    sb.append(this.profile_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("start_date:");
    if (this.start_date == null) {
      sb.append("null");
    } else {
      sb.append(this.start_date);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("end_date:");
    if (this.end_date == null) {
      sb.append("null");
    } else {
      sb.append(this.end_date);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("end_until_now:");
    sb.append(this.end_until_now);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("company_name:");
    if (this.company_name == null) {
      sb.append("null");
    } else {
      sb.append(this.company_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_it:");
    sb.append(this.is_it);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dev_tool:");
    if (this.dev_tool == null) {
      sb.append("null");
    } else {
      sb.append(this.dev_tool);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hardware:");
    if (this.hardware == null) {
      sb.append("null");
    } else {
      sb.append(this.hardware);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("software:");
    if (this.software == null) {
      sb.append("null");
    } else {
      sb.append(this.software);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("role:");
    if (this.role == null) {
      sb.append("null");
    } else {
      sb.append(this.role);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("responsibility:");
    if (this.responsibility == null) {
      sb.append("null");
    } else {
      sb.append(this.responsibility);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("achievement:");
    if (this.achievement == null) {
      sb.append("null");
    } else {
      sb.append(this.achievement);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("member:");
    if (this.member == null) {
      sb.append("null");
    } else {
      sb.append(this.member);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("create_time:");
    if (this.create_time == null) {
      sb.append("null");
    } else {
      sb.append(this.create_time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("update_time:");
    if (this.update_time == null) {
      sb.append("null");
    } else {
      sb.append(this.update_time);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProjectExpStandardSchemeFactory implements SchemeFactory {
    public ProjectExpStandardScheme getScheme() {
      return new ProjectExpStandardScheme();
    }
  }

  private static class ProjectExpStandardScheme extends StandardScheme<ProjectExp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProjectExp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROFILE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.profile_id = iprot.readI32();
              struct.setProfile_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.start_date = iprot.readString();
              struct.setStart_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.end_date = iprot.readString();
              struct.setEnd_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // END_UNTIL_NOW
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.end_until_now = iprot.readI16();
              struct.setEnd_until_nowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COMPANY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.company_name = iprot.readString();
              struct.setCompany_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_IT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.is_it = iprot.readI16();
              struct.setIs_itIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DEV_TOOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dev_tool = iprot.readString();
              struct.setDev_toolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // HARDWARE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hardware = iprot.readString();
              struct.setHardwareIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SOFTWARE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.software = iprot.readString();
              struct.setSoftwareIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ROLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.role = iprot.readString();
              struct.setRoleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // RESPONSIBILITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.responsibility = iprot.readString();
              struct.setResponsibilityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ACHIEVEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.achievement = iprot.readString();
              struct.setAchievementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MEMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.member = iprot.readString();
              struct.setMemberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.create_time = iprot.readString();
              struct.setCreate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.update_time = iprot.readString();
              struct.setUpdate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProjectExp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROFILE_ID_FIELD_DESC);
      oprot.writeI32(struct.profile_id);
      oprot.writeFieldEnd();
      if (struct.start_date != null) {
        oprot.writeFieldBegin(START_DATE_FIELD_DESC);
        oprot.writeString(struct.start_date);
        oprot.writeFieldEnd();
      }
      if (struct.end_date != null) {
        oprot.writeFieldBegin(END_DATE_FIELD_DESC);
        oprot.writeString(struct.end_date);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(END_UNTIL_NOW_FIELD_DESC);
      oprot.writeI16(struct.end_until_now);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.company_name != null) {
        oprot.writeFieldBegin(COMPANY_NAME_FIELD_DESC);
        oprot.writeString(struct.company_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_IT_FIELD_DESC);
      oprot.writeI16(struct.is_it);
      oprot.writeFieldEnd();
      if (struct.dev_tool != null) {
        oprot.writeFieldBegin(DEV_TOOL_FIELD_DESC);
        oprot.writeString(struct.dev_tool);
        oprot.writeFieldEnd();
      }
      if (struct.hardware != null) {
        oprot.writeFieldBegin(HARDWARE_FIELD_DESC);
        oprot.writeString(struct.hardware);
        oprot.writeFieldEnd();
      }
      if (struct.software != null) {
        oprot.writeFieldBegin(SOFTWARE_FIELD_DESC);
        oprot.writeString(struct.software);
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.role != null) {
        oprot.writeFieldBegin(ROLE_FIELD_DESC);
        oprot.writeString(struct.role);
        oprot.writeFieldEnd();
      }
      if (struct.responsibility != null) {
        oprot.writeFieldBegin(RESPONSIBILITY_FIELD_DESC);
        oprot.writeString(struct.responsibility);
        oprot.writeFieldEnd();
      }
      if (struct.achievement != null) {
        oprot.writeFieldBegin(ACHIEVEMENT_FIELD_DESC);
        oprot.writeString(struct.achievement);
        oprot.writeFieldEnd();
      }
      if (struct.member != null) {
        oprot.writeFieldBegin(MEMBER_FIELD_DESC);
        oprot.writeString(struct.member);
        oprot.writeFieldEnd();
      }
      if (struct.create_time != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.create_time);
        oprot.writeFieldEnd();
      }
      if (struct.update_time != null) {
        oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.update_time);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProjectExpTupleSchemeFactory implements SchemeFactory {
    public ProjectExpTupleScheme getScheme() {
      return new ProjectExpTupleScheme();
    }
  }

  private static class ProjectExpTupleScheme extends TupleScheme<ProjectExp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProjectExp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetProfile_id()) {
        optionals.set(1);
      }
      if (struct.isSetStart_date()) {
        optionals.set(2);
      }
      if (struct.isSetEnd_date()) {
        optionals.set(3);
      }
      if (struct.isSetEnd_until_now()) {
        optionals.set(4);
      }
      if (struct.isSetName()) {
        optionals.set(5);
      }
      if (struct.isSetCompany_name()) {
        optionals.set(6);
      }
      if (struct.isSetIs_it()) {
        optionals.set(7);
      }
      if (struct.isSetDev_tool()) {
        optionals.set(8);
      }
      if (struct.isSetHardware()) {
        optionals.set(9);
      }
      if (struct.isSetSoftware()) {
        optionals.set(10);
      }
      if (struct.isSetUrl()) {
        optionals.set(11);
      }
      if (struct.isSetDescription()) {
        optionals.set(12);
      }
      if (struct.isSetRole()) {
        optionals.set(13);
      }
      if (struct.isSetResponsibility()) {
        optionals.set(14);
      }
      if (struct.isSetAchievement()) {
        optionals.set(15);
      }
      if (struct.isSetMember()) {
        optionals.set(16);
      }
      if (struct.isSetCreate_time()) {
        optionals.set(17);
      }
      if (struct.isSetUpdate_time()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetProfile_id()) {
        oprot.writeI32(struct.profile_id);
      }
      if (struct.isSetStart_date()) {
        oprot.writeString(struct.start_date);
      }
      if (struct.isSetEnd_date()) {
        oprot.writeString(struct.end_date);
      }
      if (struct.isSetEnd_until_now()) {
        oprot.writeI16(struct.end_until_now);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetCompany_name()) {
        oprot.writeString(struct.company_name);
      }
      if (struct.isSetIs_it()) {
        oprot.writeI16(struct.is_it);
      }
      if (struct.isSetDev_tool()) {
        oprot.writeString(struct.dev_tool);
      }
      if (struct.isSetHardware()) {
        oprot.writeString(struct.hardware);
      }
      if (struct.isSetSoftware()) {
        oprot.writeString(struct.software);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetRole()) {
        oprot.writeString(struct.role);
      }
      if (struct.isSetResponsibility()) {
        oprot.writeString(struct.responsibility);
      }
      if (struct.isSetAchievement()) {
        oprot.writeString(struct.achievement);
      }
      if (struct.isSetMember()) {
        oprot.writeString(struct.member);
      }
      if (struct.isSetCreate_time()) {
        oprot.writeString(struct.create_time);
      }
      if (struct.isSetUpdate_time()) {
        oprot.writeString(struct.update_time);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProjectExp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.profile_id = iprot.readI32();
        struct.setProfile_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.start_date = iprot.readString();
        struct.setStart_dateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.end_date = iprot.readString();
        struct.setEnd_dateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.end_until_now = iprot.readI16();
        struct.setEnd_until_nowIsSet(true);
      }
      if (incoming.get(5)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.company_name = iprot.readString();
        struct.setCompany_nameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.is_it = iprot.readI16();
        struct.setIs_itIsSet(true);
      }
      if (incoming.get(8)) {
        struct.dev_tool = iprot.readString();
        struct.setDev_toolIsSet(true);
      }
      if (incoming.get(9)) {
        struct.hardware = iprot.readString();
        struct.setHardwareIsSet(true);
      }
      if (incoming.get(10)) {
        struct.software = iprot.readString();
        struct.setSoftwareIsSet(true);
      }
      if (incoming.get(11)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(12)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(13)) {
        struct.role = iprot.readString();
        struct.setRoleIsSet(true);
      }
      if (incoming.get(14)) {
        struct.responsibility = iprot.readString();
        struct.setResponsibilityIsSet(true);
      }
      if (incoming.get(15)) {
        struct.achievement = iprot.readString();
        struct.setAchievementIsSet(true);
      }
      if (incoming.get(16)) {
        struct.member = iprot.readString();
        struct.setMemberIsSet(true);
      }
      if (incoming.get(17)) {
        struct.create_time = iprot.readString();
        struct.setCreate_timeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.update_time = iprot.readString();
        struct.setUpdate_timeIsSet(true);
      }
    }
  }

}

