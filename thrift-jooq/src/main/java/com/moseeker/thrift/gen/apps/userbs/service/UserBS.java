/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.apps.userbs.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-09-06")
public class UserBS {

  /**
   * TODO:list what notation this dateTime represents. eg ISO-8601
   * or if its in the format like YYYY-mm-DD you mentioned.
   */
  public interface Iface {

    public com.moseeker.thrift.gen.common.struct.Response bindOnAccount(int appid, java.lang.String unionid, java.lang.String code, java.lang.String mobile, com.moseeker.thrift.gen.useraccounts.struct.BindType bindType, java.lang.String countryCode) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void bindOnAccount(int appid, java.lang.String unionid, java.lang.String code, java.lang.String mobile, com.moseeker.thrift.gen.useraccounts.struct.BindType bindType, java.lang.String countryCode, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.moseeker.thrift.gen.common.struct.Response bindOnAccount(int appid, java.lang.String unionid, java.lang.String code, java.lang.String mobile, com.moseeker.thrift.gen.useraccounts.struct.BindType bindType, java.lang.String countryCode) throws org.apache.thrift.TException
    {
      send_bindOnAccount(appid, unionid, code, mobile, bindType, countryCode);
      return recv_bindOnAccount();
    }

    public void send_bindOnAccount(int appid, java.lang.String unionid, java.lang.String code, java.lang.String mobile, com.moseeker.thrift.gen.useraccounts.struct.BindType bindType, java.lang.String countryCode) throws org.apache.thrift.TException
    {
      bindOnAccount_args args = new bindOnAccount_args();
      args.setAppid(appid);
      args.setUnionid(unionid);
      args.setCode(code);
      args.setMobile(mobile);
      args.setBindType(bindType);
      args.setCountryCode(countryCode);
      sendBase("bindOnAccount", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_bindOnAccount() throws org.apache.thrift.TException
    {
      bindOnAccount_result result = new bindOnAccount_result();
      receiveBase(result, "bindOnAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bindOnAccount failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void bindOnAccount(int appid, java.lang.String unionid, java.lang.String code, java.lang.String mobile, com.moseeker.thrift.gen.useraccounts.struct.BindType bindType, java.lang.String countryCode, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bindOnAccount_call method_call = new bindOnAccount_call(appid, unionid, code, mobile, bindType, countryCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bindOnAccount_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private int appid;
      private java.lang.String unionid;
      private java.lang.String code;
      private java.lang.String mobile;
      private com.moseeker.thrift.gen.useraccounts.struct.BindType bindType;
      private java.lang.String countryCode;
      public bindOnAccount_call(int appid, java.lang.String unionid, java.lang.String code, java.lang.String mobile, com.moseeker.thrift.gen.useraccounts.struct.BindType bindType, java.lang.String countryCode, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appid = appid;
        this.unionid = unionid;
        this.code = code;
        this.mobile = mobile;
        this.bindType = bindType;
        this.countryCode = countryCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bindOnAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bindOnAccount_args args = new bindOnAccount_args();
        args.setAppid(appid);
        args.setUnionid(unionid);
        args.setCode(code);
        args.setMobile(mobile);
        args.setBindType(bindType);
        args.setCountryCode(countryCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bindOnAccount();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("bindOnAccount", new bindOnAccount());
      return processMap;
    }

    public static class bindOnAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bindOnAccount_args> {
      public bindOnAccount() {
        super("bindOnAccount");
      }

      public bindOnAccount_args getEmptyArgsInstance() {
        return new bindOnAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bindOnAccount_result getResult(I iface, bindOnAccount_args args) throws org.apache.thrift.TException {
        bindOnAccount_result result = new bindOnAccount_result();
        result.success = iface.bindOnAccount(args.appid, args.unionid, args.code, args.mobile, args.bindType, args.countryCode);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("bindOnAccount", new bindOnAccount());
      return processMap;
    }

    public static class bindOnAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bindOnAccount_args, com.moseeker.thrift.gen.common.struct.Response> {
      public bindOnAccount() {
        super("bindOnAccount");
      }

      public bindOnAccount_args getEmptyArgsInstance() {
        return new bindOnAccount_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            bindOnAccount_result result = new bindOnAccount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            bindOnAccount_result result = new bindOnAccount_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bindOnAccount_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.bindOnAccount(args.appid, args.unionid, args.code, args.mobile, args.bindType, args.countryCode,resultHandler);
      }
    }

  }

  public static class bindOnAccount_args implements org.apache.thrift.TBase<bindOnAccount_args, bindOnAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<bindOnAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bindOnAccount_args");

    private static final org.apache.thrift.protocol.TField APPID_FIELD_DESC = new org.apache.thrift.protocol.TField("appid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField UNIONID_FIELD_DESC = new org.apache.thrift.protocol.TField("unionid", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField BIND_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bindType", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField COUNTRY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("countryCode", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bindOnAccount_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bindOnAccount_argsTupleSchemeFactory();

    public int appid; // required
    public java.lang.String unionid; // required
    public java.lang.String code; // required
    public java.lang.String mobile; // required
    /**
     *
     * @see com.moseeker.thrift.gen.useraccounts.struct.BindType
     */
    public com.moseeker.thrift.gen.useraccounts.struct.BindType bindType; // required
    public java.lang.String countryCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPID((short)1, "appid"),
      UNIONID((short)2, "unionid"),
      CODE((short)3, "code"),
      MOBILE((short)4, "mobile"),
      /**
       *
       * @see com.moseeker.thrift.gen.useraccounts.struct.BindType
       */
      BIND_TYPE((short)5, "bindType"),
      COUNTRY_CODE((short)6, "countryCode");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPID
            return APPID;
          case 2: // UNIONID
            return UNIONID;
          case 3: // CODE
            return CODE;
          case 4: // MOBILE
            return MOBILE;
          case 5: // BIND_TYPE
            return BIND_TYPE;
          case 6: // COUNTRY_CODE
            return COUNTRY_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APPID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPID, new org.apache.thrift.meta_data.FieldMetaData("appid", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.UNIONID, new org.apache.thrift.meta_data.FieldMetaData("unionid", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BIND_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bindType", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.moseeker.thrift.gen.useraccounts.struct.BindType.class)));
      tmpMap.put(_Fields.COUNTRY_CODE, new org.apache.thrift.meta_data.FieldMetaData("countryCode", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bindOnAccount_args.class, metaDataMap);
    }

    public bindOnAccount_args() {
    }

    public bindOnAccount_args(
            int appid,
            java.lang.String unionid,
            java.lang.String code,
            java.lang.String mobile,
            com.moseeker.thrift.gen.useraccounts.struct.BindType bindType,
            java.lang.String countryCode)
    {
      this();
      this.appid = appid;
      setAppidIsSet(true);
      this.unionid = unionid;
      this.code = code;
      this.mobile = mobile;
      this.bindType = bindType;
      this.countryCode = countryCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bindOnAccount_args(bindOnAccount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.appid = other.appid;
      if (other.isSetUnionid()) {
        this.unionid = other.unionid;
      }
      if (other.isSetCode()) {
        this.code = other.code;
      }
      if (other.isSetMobile()) {
        this.mobile = other.mobile;
      }
      if (other.isSetBindType()) {
        this.bindType = other.bindType;
      }
      if (other.isSetCountryCode()) {
        this.countryCode = other.countryCode;
      }
    }

    public bindOnAccount_args deepCopy() {
      return new bindOnAccount_args(this);
    }

    @Override
    public void clear() {
      setAppidIsSet(false);
      this.appid = 0;
      this.unionid = null;
      this.code = null;
      this.mobile = null;
      this.bindType = null;
      this.countryCode = null;
    }

    public int getAppid() {
      return this.appid;
    }

    public bindOnAccount_args setAppid(int appid) {
      this.appid = appid;
      setAppidIsSet(true);
      return this;
    }

    public void unsetAppid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    /** Returns true if field appid is set (has been assigned a value) and false otherwise */
    public boolean isSetAppid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    public void setAppidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
    }

    public java.lang.String getUnionid() {
      return this.unionid;
    }

    public bindOnAccount_args setUnionid(java.lang.String unionid) {
      this.unionid = unionid;
      return this;
    }

    public void unsetUnionid() {
      this.unionid = null;
    }

    /** Returns true if field unionid is set (has been assigned a value) and false otherwise */
    public boolean isSetUnionid() {
      return this.unionid != null;
    }

    public void setUnionidIsSet(boolean value) {
      if (!value) {
        this.unionid = null;
      }
    }

    public java.lang.String getCode() {
      return this.code;
    }

    public bindOnAccount_args setCode(java.lang.String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public java.lang.String getMobile() {
      return this.mobile;
    }

    public bindOnAccount_args setMobile(java.lang.String mobile) {
      this.mobile = mobile;
      return this;
    }

    public void unsetMobile() {
      this.mobile = null;
    }

    /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
    public boolean isSetMobile() {
      return this.mobile != null;
    }

    public void setMobileIsSet(boolean value) {
      if (!value) {
        this.mobile = null;
      }
    }

    /**
     *
     * @see com.moseeker.thrift.gen.useraccounts.struct.BindType
     */
    public com.moseeker.thrift.gen.useraccounts.struct.BindType getBindType() {
      return this.bindType;
    }

    /**
     *
     * @see com.moseeker.thrift.gen.useraccounts.struct.BindType
     */
    public bindOnAccount_args setBindType(com.moseeker.thrift.gen.useraccounts.struct.BindType bindType) {
      this.bindType = bindType;
      return this;
    }

    public void unsetBindType() {
      this.bindType = null;
    }

    /** Returns true if field bindType is set (has been assigned a value) and false otherwise */
    public boolean isSetBindType() {
      return this.bindType != null;
    }

    public void setBindTypeIsSet(boolean value) {
      if (!value) {
        this.bindType = null;
      }
    }

    public java.lang.String getCountryCode() {
      return this.countryCode;
    }

    public bindOnAccount_args setCountryCode(java.lang.String countryCode) {
      this.countryCode = countryCode;
      return this;
    }

    public void unsetCountryCode() {
      this.countryCode = null;
    }

    /** Returns true if field countryCode is set (has been assigned a value) and false otherwise */
    public boolean isSetCountryCode() {
      return this.countryCode != null;
    }

    public void setCountryCodeIsSet(boolean value) {
      if (!value) {
        this.countryCode = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case APPID:
          if (value == null) {
            unsetAppid();
          } else {
            setAppid((java.lang.Integer)value);
          }
          break;

        case UNIONID:
          if (value == null) {
            unsetUnionid();
          } else {
            setUnionid((java.lang.String)value);
          }
          break;

        case CODE:
          if (value == null) {
            unsetCode();
          } else {
            setCode((java.lang.String)value);
          }
          break;

        case MOBILE:
          if (value == null) {
            unsetMobile();
          } else {
            setMobile((java.lang.String)value);
          }
          break;

        case BIND_TYPE:
          if (value == null) {
            unsetBindType();
          } else {
            setBindType((com.moseeker.thrift.gen.useraccounts.struct.BindType)value);
          }
          break;

        case COUNTRY_CODE:
          if (value == null) {
            unsetCountryCode();
          } else {
            setCountryCode((java.lang.String)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case APPID:
          return getAppid();

        case UNIONID:
          return getUnionid();

        case CODE:
          return getCode();

        case MOBILE:
          return getMobile();

        case BIND_TYPE:
          return getBindType();

        case COUNTRY_CODE:
          return getCountryCode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case APPID:
          return isSetAppid();
        case UNIONID:
          return isSetUnionid();
        case CODE:
          return isSetCode();
        case MOBILE:
          return isSetMobile();
        case BIND_TYPE:
          return isSetBindType();
        case COUNTRY_CODE:
          return isSetCountryCode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bindOnAccount_args)
        return this.equals((bindOnAccount_args)that);
      return false;
    }

    public boolean equals(bindOnAccount_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_appid = true;
      boolean that_present_appid = true;
      if (this_present_appid || that_present_appid) {
        if (!(this_present_appid && that_present_appid))
          return false;
        if (this.appid != that.appid)
          return false;
      }

      boolean this_present_unionid = true && this.isSetUnionid();
      boolean that_present_unionid = true && that.isSetUnionid();
      if (this_present_unionid || that_present_unionid) {
        if (!(this_present_unionid && that_present_unionid))
          return false;
        if (!this.unionid.equals(that.unionid))
          return false;
      }

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      boolean this_present_mobile = true && this.isSetMobile();
      boolean that_present_mobile = true && that.isSetMobile();
      if (this_present_mobile || that_present_mobile) {
        if (!(this_present_mobile && that_present_mobile))
          return false;
        if (!this.mobile.equals(that.mobile))
          return false;
      }

      boolean this_present_bindType = true && this.isSetBindType();
      boolean that_present_bindType = true && that.isSetBindType();
      if (this_present_bindType || that_present_bindType) {
        if (!(this_present_bindType && that_present_bindType))
          return false;
        if (!this.bindType.equals(that.bindType))
          return false;
      }

      boolean this_present_countryCode = true && this.isSetCountryCode();
      boolean that_present_countryCode = true && that.isSetCountryCode();
      if (this_present_countryCode || that_present_countryCode) {
        if (!(this_present_countryCode && that_present_countryCode))
          return false;
        if (!this.countryCode.equals(that.countryCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + appid;

      hashCode = hashCode * 8191 + ((isSetUnionid()) ? 131071 : 524287);
      if (isSetUnionid())
        hashCode = hashCode * 8191 + unionid.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode()) ? 131071 : 524287);
      if (isSetCode())
        hashCode = hashCode * 8191 + code.hashCode();

      hashCode = hashCode * 8191 + ((isSetMobile()) ? 131071 : 524287);
      if (isSetMobile())
        hashCode = hashCode * 8191 + mobile.hashCode();

      hashCode = hashCode * 8191 + ((isSetBindType()) ? 131071 : 524287);
      if (isSetBindType())
        hashCode = hashCode * 8191 + bindType.getValue();

      hashCode = hashCode * 8191 + ((isSetCountryCode()) ? 131071 : 524287);
      if (isSetCountryCode())
        hashCode = hashCode * 8191 + countryCode.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bindOnAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAppid()).compareTo(other.isSetAppid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appid, other.appid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUnionid()).compareTo(other.isSetUnionid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnionid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unionid, other.unionid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBindType()).compareTo(other.isSetBindType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBindType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bindType, other.bindType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCountryCode()).compareTo(other.isSetCountryCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountryCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryCode, other.countryCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bindOnAccount_args(");
      boolean first = true;

      sb.append("appid:");
      sb.append(this.appid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("unionid:");
      if (this.unionid == null) {
        sb.append("null");
      } else {
        sb.append(this.unionid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bindType:");
      if (this.bindType == null) {
        sb.append("null");
      } else {
        sb.append(this.bindType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("countryCode:");
      if (this.countryCode == null) {
        sb.append("null");
      } else {
        sb.append(this.countryCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bindOnAccount_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bindOnAccount_argsStandardScheme getScheme() {
        return new bindOnAccount_argsStandardScheme();
      }
    }

    private static class bindOnAccount_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<bindOnAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bindOnAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // APPID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.appid = iprot.readI32();
                struct.setAppidIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UNIONID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.unionid = iprot.readString();
                struct.setUnionidIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MOBILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobile = iprot.readString();
                struct.setMobileIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // BIND_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bindType = com.moseeker.thrift.gen.useraccounts.struct.BindType.findByValue(iprot.readI32());
                struct.setBindTypeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // COUNTRY_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.countryCode = iprot.readString();
                struct.setCountryCodeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bindOnAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(APPID_FIELD_DESC);
        oprot.writeI32(struct.appid);
        oprot.writeFieldEnd();
        if (struct.unionid != null) {
          oprot.writeFieldBegin(UNIONID_FIELD_DESC);
          oprot.writeString(struct.unionid);
          oprot.writeFieldEnd();
        }
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        if (struct.mobile != null) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
        if (struct.bindType != null) {
          oprot.writeFieldBegin(BIND_TYPE_FIELD_DESC);
          oprot.writeI32(struct.bindType.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.countryCode != null) {
          oprot.writeFieldBegin(COUNTRY_CODE_FIELD_DESC);
          oprot.writeString(struct.countryCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bindOnAccount_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bindOnAccount_argsTupleScheme getScheme() {
        return new bindOnAccount_argsTupleScheme();
      }
    }

    private static class bindOnAccount_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<bindOnAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bindOnAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAppid()) {
          optionals.set(0);
        }
        if (struct.isSetUnionid()) {
          optionals.set(1);
        }
        if (struct.isSetCode()) {
          optionals.set(2);
        }
        if (struct.isSetMobile()) {
          optionals.set(3);
        }
        if (struct.isSetBindType()) {
          optionals.set(4);
        }
        if (struct.isSetCountryCode()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetAppid()) {
          oprot.writeI32(struct.appid);
        }
        if (struct.isSetUnionid()) {
          oprot.writeString(struct.unionid);
        }
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
        if (struct.isSetMobile()) {
          oprot.writeString(struct.mobile);
        }
        if (struct.isSetBindType()) {
          oprot.writeI32(struct.bindType.getValue());
        }
        if (struct.isSetCountryCode()) {
          oprot.writeString(struct.countryCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bindOnAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.appid = iprot.readI32();
          struct.setAppidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unionid = iprot.readString();
          struct.setUnionidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.mobile = iprot.readString();
          struct.setMobileIsSet(true);
        }
        if (incoming.get(4)) {
          struct.bindType = com.moseeker.thrift.gen.useraccounts.struct.BindType.findByValue(iprot.readI32());
          struct.setBindTypeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.countryCode = iprot.readString();
          struct.setCountryCodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bindOnAccount_result implements org.apache.thrift.TBase<bindOnAccount_result, bindOnAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<bindOnAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bindOnAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bindOnAccount_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bindOnAccount_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bindOnAccount_result.class, metaDataMap);
    }

    public bindOnAccount_result() {
    }

    public bindOnAccount_result(
            com.moseeker.thrift.gen.common.struct.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bindOnAccount_result(bindOnAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
    }

    public bindOnAccount_result deepCopy() {
      return new bindOnAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public bindOnAccount_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bindOnAccount_result)
        return this.equals((bindOnAccount_result)that);
      return false;
    }

    public boolean equals(bindOnAccount_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bindOnAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bindOnAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bindOnAccount_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bindOnAccount_resultStandardScheme getScheme() {
        return new bindOnAccount_resultStandardScheme();
      }
    }

    private static class bindOnAccount_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<bindOnAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bindOnAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bindOnAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bindOnAccount_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bindOnAccount_resultTupleScheme getScheme() {
        return new bindOnAccount_resultTupleScheme();
      }
    }

    private static class bindOnAccount_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<bindOnAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bindOnAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bindOnAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
