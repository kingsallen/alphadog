/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.profile.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-11-27")
public class CandidateInfo implements org.apache.thrift.TBase<CandidateInfo, CandidateInfo._Fields>, java.io.Serializable, Cloneable, Comparable<CandidateInfo> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CandidateInfo");

    private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.BYTE, (short)3);
    private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField COMPANY_FIELD_DESC = new org.apache.thrift.protocol.TField("company", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField JOB_FIELD_DESC = new org.apache.thrift.protocol.TField("job", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField REASONS_FIELD_DESC = new org.apache.thrift.protocol.TField("reasons", org.apache.thrift.protocol.TType.LIST, (short)8);
    private static final org.apache.thrift.protocol.TField RECOM_REASON_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("recomReasonText", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField REFERRAL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("referralType", org.apache.thrift.protocol.TType.BYTE, (short)10);
    private static final org.apache.thrift.protocol.TField RELATIONSHIP_FIELD_DESC = new org.apache.thrift.protocol.TField("relationship", org.apache.thrift.protocol.TType.BYTE, (short)11);
    private static final org.apache.thrift.protocol.TField DEGREE_FIELD_DESC = new org.apache.thrift.protocol.TField("degree", org.apache.thrift.protocol.TType.I32, (short)12);
    private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.I32, (short)13);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CandidateInfoStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CandidateInfoTupleSchemeFactory();

    public int position; // optional
    public java.lang.String name; // optional
    public byte gender; // optional
    public java.lang.String mobile; // optional
    public java.lang.String email; // optional
    public java.lang.String company; // optional
    public java.lang.String job; // optional
    public java.util.List<java.lang.String> reasons; // optional
    public java.lang.String recomReasonText; // optional
    public byte referralType; // optional
    public byte relationship; // optional
    public int degree; // optional
    public int city; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        POSITION((short)1, "position"),
        NAME((short)2, "name"),
        GENDER((short)3, "gender"),
        MOBILE((short)4, "mobile"),
        EMAIL((short)5, "email"),
        COMPANY((short)6, "company"),
        JOB((short)7, "job"),
        REASONS((short)8, "reasons"),
        RECOM_REASON_TEXT((short)9, "recomReasonText"),
        REFERRAL_TYPE((short)10, "referralType"),
        RELATIONSHIP((short)11, "relationship"),
        DEGREE((short)12, "degree"),
        CITY((short)13, "city");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case 1: // POSITION
                    return POSITION;
                case 2: // NAME
                    return NAME;
                case 3: // GENDER
                    return GENDER;
                case 4: // MOBILE
                    return MOBILE;
                case 5: // EMAIL
                    return EMAIL;
                case 6: // COMPANY
                    return COMPANY;
                case 7: // JOB
                    return JOB;
                case 8: // REASONS
                    return REASONS;
                case 9: // RECOM_REASON_TEXT
                    return RECOM_REASON_TEXT;
                case 10: // REFERRAL_TYPE
                    return REFERRAL_TYPE;
                case 11: // RELATIONSHIP
                    return RELATIONSHIP;
                case 12: // DEGREE
                    return DEGREE;
                case 13: // CITY
                    return CITY;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __POSITION_ISSET_ID = 0;
    private static final int __GENDER_ISSET_ID = 1;
    private static final int __REFERRALTYPE_ISSET_ID = 2;
    private static final int __RELATIONSHIP_ISSET_ID = 3;
    private static final int __DEGREE_ISSET_ID = 4;
    private static final int __CITY_ISSET_ID = 5;
    private byte __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.POSITION,_Fields.NAME,_Fields.GENDER,_Fields.MOBILE,_Fields.EMAIL,_Fields.COMPANY,_Fields.JOB,_Fields.REASONS,_Fields.RECOM_REASON_TEXT,_Fields.REFERRAL_TYPE,_Fields.RELATIONSHIP,_Fields.DEGREE,_Fields.CITY};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
        tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.COMPANY, new org.apache.thrift.meta_data.FieldMetaData("company", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.JOB, new org.apache.thrift.meta_data.FieldMetaData("job", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.REASONS, new org.apache.thrift.meta_data.FieldMetaData("reasons", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        tmpMap.put(_Fields.RECOM_REASON_TEXT, new org.apache.thrift.meta_data.FieldMetaData("recomReasonText", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.REFERRAL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("referralType", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
        tmpMap.put(_Fields.RELATIONSHIP, new org.apache.thrift.meta_data.FieldMetaData("relationship", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
        tmpMap.put(_Fields.DEGREE, new org.apache.thrift.meta_data.FieldMetaData("degree", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CandidateInfo.class, metaDataMap);
    }

    public CandidateInfo() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CandidateInfo(CandidateInfo other) {
        __isset_bitfield = other.__isset_bitfield;
        this.position = other.position;
        if (other.isSetName()) {
            this.name = other.name;
        }
        this.gender = other.gender;
        if (other.isSetMobile()) {
            this.mobile = other.mobile;
        }
        if (other.isSetEmail()) {
            this.email = other.email;
        }
        if (other.isSetCompany()) {
            this.company = other.company;
        }
        if (other.isSetJob()) {
            this.job = other.job;
        }
        if (other.isSetReasons()) {
            java.util.List<java.lang.String> __this__reasons = new java.util.ArrayList<java.lang.String>(other.reasons);
            this.reasons = __this__reasons;
        }
        if (other.isSetRecomReasonText()) {
            this.recomReasonText = other.recomReasonText;
        }
        this.referralType = other.referralType;
        this.relationship = other.relationship;
        this.degree = other.degree;
        this.city = other.city;
    }

    public CandidateInfo deepCopy() {
        return new CandidateInfo(this);
    }

    @Override
    public void clear() {
        setPositionIsSet(false);
        this.position = 0;
        this.name = null;
        setGenderIsSet(false);
        this.gender = 0;
        this.mobile = null;
        this.email = null;
        this.company = null;
        this.job = null;
        this.reasons = null;
        this.recomReasonText = null;
        setReferralTypeIsSet(false);
        this.referralType = 0;
        setRelationshipIsSet(false);
        this.relationship = 0;
        setDegreeIsSet(false);
        this.degree = 0;
        setCityIsSet(false);
        this.city = 0;
    }

    public int getPosition() {
        return this.position;
    }

    public CandidateInfo setPosition(int position) {
        this.position = position;
        setPositionIsSet(true);
        return this;
    }

    public void unsetPosition() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITION_ISSET_ID);
    }

    /** Returns true if field position is set (has been assigned a value) and false otherwise */
    public boolean isSetPosition() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITION_ISSET_ID);
    }

    public void setPositionIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITION_ISSET_ID, value);
    }

    public java.lang.String getName() {
        return this.name;
    }

    public CandidateInfo setName(java.lang.String name) {
        this.name = name;
        return this;
    }

    public void unsetName() {
        this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
        return this.name != null;
    }

    public void setNameIsSet(boolean value) {
        if (!value) {
            this.name = null;
        }
    }

    public byte getGender() {
        return this.gender;
    }

    public CandidateInfo setGender(byte gender) {
        this.gender = gender;
        setGenderIsSet(true);
        return this;
    }

    public void unsetGender() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GENDER_ISSET_ID);
    }

    /** Returns true if field gender is set (has been assigned a value) and false otherwise */
    public boolean isSetGender() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GENDER_ISSET_ID);
    }

    public void setGenderIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GENDER_ISSET_ID, value);
    }

    public java.lang.String getMobile() {
        return this.mobile;
    }

    public CandidateInfo setMobile(java.lang.String mobile) {
        this.mobile = mobile;
        return this;
    }

    public void unsetMobile() {
        this.mobile = null;
    }

    /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
    public boolean isSetMobile() {
        return this.mobile != null;
    }

    public void setMobileIsSet(boolean value) {
        if (!value) {
            this.mobile = null;
        }
    }

    public java.lang.String getEmail() {
        return this.email;
    }

    public CandidateInfo setEmail(java.lang.String email) {
        this.email = email;
        return this;
    }

    public void unsetEmail() {
        this.email = null;
    }

    /** Returns true if field email is set (has been assigned a value) and false otherwise */
    public boolean isSetEmail() {
        return this.email != null;
    }

    public void setEmailIsSet(boolean value) {
        if (!value) {
            this.email = null;
        }
    }

    public java.lang.String getCompany() {
        return this.company;
    }

    public CandidateInfo setCompany(java.lang.String company) {
        this.company = company;
        return this;
    }

    public void unsetCompany() {
        this.company = null;
    }

    /** Returns true if field company is set (has been assigned a value) and false otherwise */
    public boolean isSetCompany() {
        return this.company != null;
    }

    public void setCompanyIsSet(boolean value) {
        if (!value) {
            this.company = null;
        }
    }

    public java.lang.String getJob() {
        return this.job;
    }

    public CandidateInfo setJob(java.lang.String job) {
        this.job = job;
        return this;
    }

    public void unsetJob() {
        this.job = null;
    }

    /** Returns true if field job is set (has been assigned a value) and false otherwise */
    public boolean isSetJob() {
        return this.job != null;
    }

    public void setJobIsSet(boolean value) {
        if (!value) {
            this.job = null;
        }
    }

    public int getReasonsSize() {
        return (this.reasons == null) ? 0 : this.reasons.size();
    }

    public java.util.Iterator<java.lang.String> getReasonsIterator() {
        return (this.reasons == null) ? null : this.reasons.iterator();
    }

    public void addToReasons(java.lang.String elem) {
        if (this.reasons == null) {
            this.reasons = new java.util.ArrayList<java.lang.String>();
        }
        this.reasons.add(elem);
    }

    public java.util.List<java.lang.String> getReasons() {
        return this.reasons;
    }

    public CandidateInfo setReasons(java.util.List<java.lang.String> reasons) {
        this.reasons = reasons;
        return this;
    }

    public void unsetReasons() {
        this.reasons = null;
    }

    /** Returns true if field reasons is set (has been assigned a value) and false otherwise */
    public boolean isSetReasons() {
        return this.reasons != null;
    }

    public void setReasonsIsSet(boolean value) {
        if (!value) {
            this.reasons = null;
        }
    }

    public java.lang.String getRecomReasonText() {
        return this.recomReasonText;
    }

    public CandidateInfo setRecomReasonText(java.lang.String recomReasonText) {
        this.recomReasonText = recomReasonText;
        return this;
    }

    public void unsetRecomReasonText() {
        this.recomReasonText = null;
    }

    /** Returns true if field recomReasonText is set (has been assigned a value) and false otherwise */
    public boolean isSetRecomReasonText() {
        return this.recomReasonText != null;
    }

    public void setRecomReasonTextIsSet(boolean value) {
        if (!value) {
            this.recomReasonText = null;
        }
    }

    public byte getReferralType() {
        return this.referralType;
    }

    public CandidateInfo setReferralType(byte referralType) {
        this.referralType = referralType;
        setReferralTypeIsSet(true);
        return this;
    }

    public void unsetReferralType() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REFERRALTYPE_ISSET_ID);
    }

    /** Returns true if field referralType is set (has been assigned a value) and false otherwise */
    public boolean isSetReferralType() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REFERRALTYPE_ISSET_ID);
    }

    public void setReferralTypeIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REFERRALTYPE_ISSET_ID, value);
    }

    public byte getRelationship() {
        return this.relationship;
    }

    public CandidateInfo setRelationship(byte relationship) {
        this.relationship = relationship;
        setRelationshipIsSet(true);
        return this;
    }

    public void unsetRelationship() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RELATIONSHIP_ISSET_ID);
    }

    /** Returns true if field relationship is set (has been assigned a value) and false otherwise */
    public boolean isSetRelationship() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RELATIONSHIP_ISSET_ID);
    }

    public void setRelationshipIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RELATIONSHIP_ISSET_ID, value);
    }

    public int getDegree() {
        return this.degree;
    }

    public CandidateInfo setDegree(int degree) {
        this.degree = degree;
        setDegreeIsSet(true);
        return this;
    }

    public void unsetDegree() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEGREE_ISSET_ID);
    }

    /** Returns true if field degree is set (has been assigned a value) and false otherwise */
    public boolean isSetDegree() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEGREE_ISSET_ID);
    }

    public void setDegreeIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEGREE_ISSET_ID, value);
    }

    public int getCity() {
        return this.city;
    }

    public CandidateInfo setCity(int city) {
        this.city = city;
        setCityIsSet(true);
        return this;
    }

    public void unsetCity() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CITY_ISSET_ID);
    }

    /** Returns true if field city is set (has been assigned a value) and false otherwise */
    public boolean isSetCity() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CITY_ISSET_ID);
    }

    public void setCityIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CITY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
        switch (field) {
            case POSITION:
                if (value == null) {
                    unsetPosition();
                } else {
                    setPosition((java.lang.Integer)value);
                }
                break;

            case NAME:
                if (value == null) {
                    unsetName();
                } else {
                    setName((java.lang.String)value);
                }
                break;

            case GENDER:
                if (value == null) {
                    unsetGender();
                } else {
                    setGender((java.lang.Byte)value);
                }
                break;

            case MOBILE:
                if (value == null) {
                    unsetMobile();
                } else {
                    setMobile((java.lang.String)value);
                }
                break;

            case EMAIL:
                if (value == null) {
                    unsetEmail();
                } else {
                    setEmail((java.lang.String)value);
                }
                break;

            case COMPANY:
                if (value == null) {
                    unsetCompany();
                } else {
                    setCompany((java.lang.String)value);
                }
                break;

            case JOB:
                if (value == null) {
                    unsetJob();
                } else {
                    setJob((java.lang.String)value);
                }
                break;

            case REASONS:
                if (value == null) {
                    unsetReasons();
                } else {
                    setReasons((java.util.List<java.lang.String>)value);
                }
                break;

            case RECOM_REASON_TEXT:
                if (value == null) {
                    unsetRecomReasonText();
                } else {
                    setRecomReasonText((java.lang.String)value);
                }
                break;

            case REFERRAL_TYPE:
                if (value == null) {
                    unsetReferralType();
                } else {
                    setReferralType((java.lang.Byte)value);
                }
                break;

            case RELATIONSHIP:
                if (value == null) {
                    unsetRelationship();
                } else {
                    setRelationship((java.lang.Byte)value);
                }
                break;

            case DEGREE:
                if (value == null) {
                    unsetDegree();
                } else {
                    setDegree((java.lang.Integer)value);
                }
                break;

            case CITY:
                if (value == null) {
                    unsetCity();
                } else {
                    setCity((java.lang.Integer)value);
                }
                break;

        }
    }

    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case POSITION:
                return getPosition();

            case NAME:
                return getName();

            case GENDER:
                return getGender();

            case MOBILE:
                return getMobile();

            case EMAIL:
                return getEmail();

            case COMPANY:
                return getCompany();

            case JOB:
                return getJob();

            case REASONS:
                return getReasons();

            case RECOM_REASON_TEXT:
                return getRecomReasonText();

            case REFERRAL_TYPE:
                return getReferralType();

            case RELATIONSHIP:
                return getRelationship();

            case DEGREE:
                return getDegree();

            case CITY:
                return getCity();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case POSITION:
                return isSetPosition();
            case NAME:
                return isSetName();
            case GENDER:
                return isSetGender();
            case MOBILE:
                return isSetMobile();
            case EMAIL:
                return isSetEmail();
            case COMPANY:
                return isSetCompany();
            case JOB:
                return isSetJob();
            case REASONS:
                return isSetReasons();
            case RECOM_REASON_TEXT:
                return isSetRecomReasonText();
            case REFERRAL_TYPE:
                return isSetReferralType();
            case RELATIONSHIP:
                return isSetRelationship();
            case DEGREE:
                return isSetDegree();
            case CITY:
                return isSetCity();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that == null)
            return false;
        if (that instanceof CandidateInfo)
            return this.equals((CandidateInfo)that);
        return false;
    }

    public boolean equals(CandidateInfo that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_position = true && this.isSetPosition();
        boolean that_present_position = true && that.isSetPosition();
        if (this_present_position || that_present_position) {
            if (!(this_present_position && that_present_position))
                return false;
            if (this.position != that.position)
                return false;
        }

        boolean this_present_name = true && this.isSetName();
        boolean that_present_name = true && that.isSetName();
        if (this_present_name || that_present_name) {
            if (!(this_present_name && that_present_name))
                return false;
            if (!this.name.equals(that.name))
                return false;
        }

        boolean this_present_gender = true && this.isSetGender();
        boolean that_present_gender = true && that.isSetGender();
        if (this_present_gender || that_present_gender) {
            if (!(this_present_gender && that_present_gender))
                return false;
            if (this.gender != that.gender)
                return false;
        }

        boolean this_present_mobile = true && this.isSetMobile();
        boolean that_present_mobile = true && that.isSetMobile();
        if (this_present_mobile || that_present_mobile) {
            if (!(this_present_mobile && that_present_mobile))
                return false;
            if (!this.mobile.equals(that.mobile))
                return false;
        }

        boolean this_present_email = true && this.isSetEmail();
        boolean that_present_email = true && that.isSetEmail();
        if (this_present_email || that_present_email) {
            if (!(this_present_email && that_present_email))
                return false;
            if (!this.email.equals(that.email))
                return false;
        }

        boolean this_present_company = true && this.isSetCompany();
        boolean that_present_company = true && that.isSetCompany();
        if (this_present_company || that_present_company) {
            if (!(this_present_company && that_present_company))
                return false;
            if (!this.company.equals(that.company))
                return false;
        }

        boolean this_present_job = true && this.isSetJob();
        boolean that_present_job = true && that.isSetJob();
        if (this_present_job || that_present_job) {
            if (!(this_present_job && that_present_job))
                return false;
            if (!this.job.equals(that.job))
                return false;
        }

        boolean this_present_reasons = true && this.isSetReasons();
        boolean that_present_reasons = true && that.isSetReasons();
        if (this_present_reasons || that_present_reasons) {
            if (!(this_present_reasons && that_present_reasons))
                return false;
            if (!this.reasons.equals(that.reasons))
                return false;
        }

        boolean this_present_recomReasonText = true && this.isSetRecomReasonText();
        boolean that_present_recomReasonText = true && that.isSetRecomReasonText();
        if (this_present_recomReasonText || that_present_recomReasonText) {
            if (!(this_present_recomReasonText && that_present_recomReasonText))
                return false;
            if (!this.recomReasonText.equals(that.recomReasonText))
                return false;
        }

        boolean this_present_referralType = true && this.isSetReferralType();
        boolean that_present_referralType = true && that.isSetReferralType();
        if (this_present_referralType || that_present_referralType) {
            if (!(this_present_referralType && that_present_referralType))
                return false;
            if (this.referralType != that.referralType)
                return false;
        }

        boolean this_present_relationship = true && this.isSetRelationship();
        boolean that_present_relationship = true && that.isSetRelationship();
        if (this_present_relationship || that_present_relationship) {
            if (!(this_present_relationship && that_present_relationship))
                return false;
            if (this.relationship != that.relationship)
                return false;
        }

        boolean this_present_degree = true && this.isSetDegree();
        boolean that_present_degree = true && that.isSetDegree();
        if (this_present_degree || that_present_degree) {
            if (!(this_present_degree && that_present_degree))
                return false;
            if (this.degree != that.degree)
                return false;
        }

        boolean this_present_city = true && this.isSetCity();
        boolean that_present_city = true && that.isSetCity();
        if (this_present_city || that_present_city) {
            if (!(this_present_city && that_present_city))
                return false;
            if (this.city != that.city)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetPosition()) ? 131071 : 524287);
        if (isSetPosition())
            hashCode = hashCode * 8191 + position;

        hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
        if (isSetName())
            hashCode = hashCode * 8191 + name.hashCode();

        hashCode = hashCode * 8191 + ((isSetGender()) ? 131071 : 524287);
        if (isSetGender())
            hashCode = hashCode * 8191 + (int) (gender);

        hashCode = hashCode * 8191 + ((isSetMobile()) ? 131071 : 524287);
        if (isSetMobile())
            hashCode = hashCode * 8191 + mobile.hashCode();

        hashCode = hashCode * 8191 + ((isSetEmail()) ? 131071 : 524287);
        if (isSetEmail())
            hashCode = hashCode * 8191 + email.hashCode();

        hashCode = hashCode * 8191 + ((isSetCompany()) ? 131071 : 524287);
        if (isSetCompany())
            hashCode = hashCode * 8191 + company.hashCode();

        hashCode = hashCode * 8191 + ((isSetJob()) ? 131071 : 524287);
        if (isSetJob())
            hashCode = hashCode * 8191 + job.hashCode();

        hashCode = hashCode * 8191 + ((isSetReasons()) ? 131071 : 524287);
        if (isSetReasons())
            hashCode = hashCode * 8191 + reasons.hashCode();

        hashCode = hashCode * 8191 + ((isSetRecomReasonText()) ? 131071 : 524287);
        if (isSetRecomReasonText())
            hashCode = hashCode * 8191 + recomReasonText.hashCode();

        hashCode = hashCode * 8191 + ((isSetReferralType()) ? 131071 : 524287);
        if (isSetReferralType())
            hashCode = hashCode * 8191 + (int) (referralType);

        hashCode = hashCode * 8191 + ((isSetRelationship()) ? 131071 : 524287);
        if (isSetRelationship())
            hashCode = hashCode * 8191 + (int) (relationship);

        hashCode = hashCode * 8191 + ((isSetDegree()) ? 131071 : 524287);
        if (isSetDegree())
            hashCode = hashCode * 8191 + degree;

        hashCode = hashCode * 8191 + ((isSetCity()) ? 131071 : 524287);
        if (isSetCity())
            hashCode = hashCode * 8191 + city;

        return hashCode;
    }

    @Override
    public int compareTo(CandidateInfo other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPosition()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetGender()).compareTo(other.isSetGender());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetGender()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, other.gender);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMobile()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetEmail()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetCompany()).compareTo(other.isSetCompany());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCompany()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company, other.company);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetJob()).compareTo(other.isSetJob());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetJob()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.job, other.job);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetReasons()).compareTo(other.isSetReasons());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetReasons()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reasons, other.reasons);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetRecomReasonText()).compareTo(other.isSetRecomReasonText());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetRecomReasonText()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recomReasonText, other.recomReasonText);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetReferralType()).compareTo(other.isSetReferralType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetReferralType()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.referralType, other.referralType);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetRelationship()).compareTo(other.isSetRelationship());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetRelationship()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relationship, other.relationship);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetDegree()).compareTo(other.isSetDegree());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDegree()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.degree, other.degree);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCity()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("CandidateInfo(");
        boolean first = true;

        if (isSetPosition()) {
            sb.append("position:");
            sb.append(this.position);
            first = false;
        }
        if (isSetName()) {
            if (!first) sb.append(", ");
            sb.append("name:");
            if (this.name == null) {
                sb.append("null");
            } else {
                sb.append(this.name);
            }
            first = false;
        }
        if (isSetGender()) {
            if (!first) sb.append(", ");
            sb.append("gender:");
            sb.append(this.gender);
            first = false;
        }
        if (isSetMobile()) {
            if (!first) sb.append(", ");
            sb.append("mobile:");
            if (this.mobile == null) {
                sb.append("null");
            } else {
                sb.append(this.mobile);
            }
            first = false;
        }
        if (isSetEmail()) {
            if (!first) sb.append(", ");
            sb.append("email:");
            if (this.email == null) {
                sb.append("null");
            } else {
                sb.append(this.email);
            }
            first = false;
        }
        if (isSetCompany()) {
            if (!first) sb.append(", ");
            sb.append("company:");
            if (this.company == null) {
                sb.append("null");
            } else {
                sb.append(this.company);
            }
            first = false;
        }
        if (isSetJob()) {
            if (!first) sb.append(", ");
            sb.append("job:");
            if (this.job == null) {
                sb.append("null");
            } else {
                sb.append(this.job);
            }
            first = false;
        }
        if (isSetReasons()) {
            if (!first) sb.append(", ");
            sb.append("reasons:");
            if (this.reasons == null) {
                sb.append("null");
            } else {
                sb.append(this.reasons);
            }
            first = false;
        }
        if (isSetRecomReasonText()) {
            if (!first) sb.append(", ");
            sb.append("recomReasonText:");
            if (this.recomReasonText == null) {
                sb.append("null");
            } else {
                sb.append(this.recomReasonText);
            }
            first = false;
        }
        if (isSetReferralType()) {
            if (!first) sb.append(", ");
            sb.append("referralType:");
            sb.append(this.referralType);
            first = false;
        }
        if (isSetRelationship()) {
            if (!first) sb.append(", ");
            sb.append("relationship:");
            sb.append(this.relationship);
            first = false;
        }
        if (isSetDegree()) {
            if (!first) sb.append(", ");
            sb.append("degree:");
            sb.append(this.degree);
            first = false;
        }
        if (isSetCity()) {
            if (!first) sb.append(", ");
            sb.append("city:");
            sb.append(this.city);
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class CandidateInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public CandidateInfoStandardScheme getScheme() {
            return new CandidateInfoStandardScheme();
        }
    }

    private static class CandidateInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<CandidateInfo> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, CandidateInfo struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true)
            {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // POSITION
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.position = iprot.readI32();
                            struct.setPositionIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.name = iprot.readString();
                            struct.setNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // GENDER
                        if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                            struct.gender = iprot.readByte();
                            struct.setGenderIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // MOBILE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.mobile = iprot.readString();
                            struct.setMobileIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // EMAIL
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.email = iprot.readString();
                            struct.setEmailIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // COMPANY
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.company = iprot.readString();
                            struct.setCompanyIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // JOB
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.job = iprot.readString();
                            struct.setJobIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 8: // REASONS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                                struct.reasons = new java.util.ArrayList<java.lang.String>(_list58.size);
                                java.lang.String _elem59;
                                for (int _i60 = 0; _i60 < _list58.size; ++_i60)
                                {
                                    _elem59 = iprot.readString();
                                    struct.reasons.add(_elem59);
                                }
                                iprot.readListEnd();
                            }
                            struct.setReasonsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 9: // RECOM_REASON_TEXT
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.recomReasonText = iprot.readString();
                            struct.setRecomReasonTextIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 10: // REFERRAL_TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                            struct.referralType = iprot.readByte();
                            struct.setReferralTypeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 11: // RELATIONSHIP
                        if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                            struct.relationship = iprot.readByte();
                            struct.setRelationshipIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 12: // DEGREE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.degree = iprot.readI32();
                            struct.setDegreeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 13: // CITY
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.city = iprot.readI32();
                            struct.setCityIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, CandidateInfo struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.isSetPosition()) {
                oprot.writeFieldBegin(POSITION_FIELD_DESC);
                oprot.writeI32(struct.position);
                oprot.writeFieldEnd();
            }
            if (struct.name != null) {
                if (struct.isSetName()) {
                    oprot.writeFieldBegin(NAME_FIELD_DESC);
                    oprot.writeString(struct.name);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetGender()) {
                oprot.writeFieldBegin(GENDER_FIELD_DESC);
                oprot.writeByte(struct.gender);
                oprot.writeFieldEnd();
            }
            if (struct.mobile != null) {
                if (struct.isSetMobile()) {
                    oprot.writeFieldBegin(MOBILE_FIELD_DESC);
                    oprot.writeString(struct.mobile);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.email != null) {
                if (struct.isSetEmail()) {
                    oprot.writeFieldBegin(EMAIL_FIELD_DESC);
                    oprot.writeString(struct.email);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.company != null) {
                if (struct.isSetCompany()) {
                    oprot.writeFieldBegin(COMPANY_FIELD_DESC);
                    oprot.writeString(struct.company);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.job != null) {
                if (struct.isSetJob()) {
                    oprot.writeFieldBegin(JOB_FIELD_DESC);
                    oprot.writeString(struct.job);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.reasons != null) {
                if (struct.isSetReasons()) {
                    oprot.writeFieldBegin(REASONS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.reasons.size()));
                        for (java.lang.String _iter61 : struct.reasons)
                        {
                            oprot.writeString(_iter61);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.recomReasonText != null) {
                if (struct.isSetRecomReasonText()) {
                    oprot.writeFieldBegin(RECOM_REASON_TEXT_FIELD_DESC);
                    oprot.writeString(struct.recomReasonText);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetReferralType()) {
                oprot.writeFieldBegin(REFERRAL_TYPE_FIELD_DESC);
                oprot.writeByte(struct.referralType);
                oprot.writeFieldEnd();
            }
            if (struct.isSetRelationship()) {
                oprot.writeFieldBegin(RELATIONSHIP_FIELD_DESC);
                oprot.writeByte(struct.relationship);
                oprot.writeFieldEnd();
            }
            if (struct.isSetDegree()) {
                oprot.writeFieldBegin(DEGREE_FIELD_DESC);
                oprot.writeI32(struct.degree);
                oprot.writeFieldEnd();
            }
            if (struct.isSetCity()) {
                oprot.writeFieldBegin(CITY_FIELD_DESC);
                oprot.writeI32(struct.city);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class CandidateInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public CandidateInfoTupleScheme getScheme() {
            return new CandidateInfoTupleScheme();
        }
    }

    private static class CandidateInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<CandidateInfo> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, CandidateInfo struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetPosition()) {
                optionals.set(0);
            }
            if (struct.isSetName()) {
                optionals.set(1);
            }
            if (struct.isSetGender()) {
                optionals.set(2);
            }
            if (struct.isSetMobile()) {
                optionals.set(3);
            }
            if (struct.isSetEmail()) {
                optionals.set(4);
            }
            if (struct.isSetCompany()) {
                optionals.set(5);
            }
            if (struct.isSetJob()) {
                optionals.set(6);
            }
            if (struct.isSetReasons()) {
                optionals.set(7);
            }
            if (struct.isSetRecomReasonText()) {
                optionals.set(8);
            }
            if (struct.isSetReferralType()) {
                optionals.set(9);
            }
            if (struct.isSetRelationship()) {
                optionals.set(10);
            }
            if (struct.isSetDegree()) {
                optionals.set(11);
            }
            if (struct.isSetCity()) {
                optionals.set(12);
            }
            oprot.writeBitSet(optionals, 13);
            if (struct.isSetPosition()) {
                oprot.writeI32(struct.position);
            }
            if (struct.isSetName()) {
                oprot.writeString(struct.name);
            }
            if (struct.isSetGender()) {
                oprot.writeByte(struct.gender);
            }
            if (struct.isSetMobile()) {
                oprot.writeString(struct.mobile);
            }
            if (struct.isSetEmail()) {
                oprot.writeString(struct.email);
            }
            if (struct.isSetCompany()) {
                oprot.writeString(struct.company);
            }
            if (struct.isSetJob()) {
                oprot.writeString(struct.job);
            }
            if (struct.isSetReasons()) {
                {
                    oprot.writeI32(struct.reasons.size());
                    for (java.lang.String _iter62 : struct.reasons)
                    {
                        oprot.writeString(_iter62);
                    }
                }
            }
            if (struct.isSetRecomReasonText()) {
                oprot.writeString(struct.recomReasonText);
            }
            if (struct.isSetReferralType()) {
                oprot.writeByte(struct.referralType);
            }
            if (struct.isSetRelationship()) {
                oprot.writeByte(struct.relationship);
            }
            if (struct.isSetDegree()) {
                oprot.writeI32(struct.degree);
            }
            if (struct.isSetCity()) {
                oprot.writeI32(struct.city);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, CandidateInfo struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(13);
            if (incoming.get(0)) {
                struct.position = iprot.readI32();
                struct.setPositionIsSet(true);
            }
            if (incoming.get(1)) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
            }
            if (incoming.get(2)) {
                struct.gender = iprot.readByte();
                struct.setGenderIsSet(true);
            }
            if (incoming.get(3)) {
                struct.mobile = iprot.readString();
                struct.setMobileIsSet(true);
            }
            if (incoming.get(4)) {
                struct.email = iprot.readString();
                struct.setEmailIsSet(true);
            }
            if (incoming.get(5)) {
                struct.company = iprot.readString();
                struct.setCompanyIsSet(true);
            }
            if (incoming.get(6)) {
                struct.job = iprot.readString();
                struct.setJobIsSet(true);
            }
            if (incoming.get(7)) {
                {
                    org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    struct.reasons = new java.util.ArrayList<java.lang.String>(_list63.size);
                    java.lang.String _elem64;
                    for (int _i65 = 0; _i65 < _list63.size; ++_i65)
                    {
                        _elem64 = iprot.readString();
                        struct.reasons.add(_elem64);
                    }
                }
                struct.setReasonsIsSet(true);
            }
            if (incoming.get(8)) {
                struct.recomReasonText = iprot.readString();
                struct.setRecomReasonTextIsSet(true);
            }
            if (incoming.get(9)) {
                struct.referralType = iprot.readByte();
                struct.setReferralTypeIsSet(true);
            }
            if (incoming.get(10)) {
                struct.relationship = iprot.readByte();
                struct.setRelationshipIsSet(true);
            }
            if (incoming.get(11)) {
                struct.degree = iprot.readI32();
                struct.setDegreeIsSet(true);
            }
            if (incoming.get(12)) {
                struct.city = iprot.readI32();
                struct.setCityIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

