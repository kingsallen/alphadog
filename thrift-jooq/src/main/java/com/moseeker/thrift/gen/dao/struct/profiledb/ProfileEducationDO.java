/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.profiledb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-16")
public class ProfileEducationDO implements org.apache.thrift.TBase<ProfileEducationDO, ProfileEducationDO._Fields>, java.io.Serializable, Cloneable, Comparable<ProfileEducationDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProfileEducationDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROFILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("profileId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField END_UNTIL_NOW_FIELD_DESC = new org.apache.thrift.protocol.TField("endUntilNow", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField COLLEGE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("collegeCode", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField COLLEGE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("collegeName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField COLLEGE_LOGO_FIELD_DESC = new org.apache.thrift.protocol.TField("collegeLogo", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField MAJOR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("majorCode", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField MAJOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("majorName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DEGREE_FIELD_DESC = new org.apache.thrift.protocol.TField("degree", org.apache.thrift.protocol.TType.BYTE, (short)11);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField IS_FULL_FIELD_DESC = new org.apache.thrift.protocol.TField("isFull", org.apache.thrift.protocol.TType.BYTE, (short)13);
  private static final org.apache.thrift.protocol.TField IS_UNIFIED_FIELD_DESC = new org.apache.thrift.protocol.TField("isUnified", org.apache.thrift.protocol.TType.BYTE, (short)14);
  private static final org.apache.thrift.protocol.TField IS_STUDY_ABROAD_FIELD_DESC = new org.apache.thrift.protocol.TField("isStudyAbroad", org.apache.thrift.protocol.TType.BYTE, (short)15);
  private static final org.apache.thrift.protocol.TField STUDY_ABROAD_COUNTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("studyAbroadCountry", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)18);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ProfileEducationDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ProfileEducationDOTupleSchemeFactory();

  public int id; // optional
  public int profileId; // optional
  public String startTime; // optional
  public String endTime; // optional
  public byte endUntilNow; // optional
  public int collegeCode; // optional
  public String collegeName; // optional
  public String collegeLogo; // optional
  public String majorCode; // optional
  public String majorName; // optional
  public byte degree; // optional
  public String description; // optional
  public byte isFull; // optional
  public byte isUnified; // optional
  public byte isStudyAbroad; // optional
  public String studyAbroadCountry; // optional
  public String createTime; // optional
  public String updateTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PROFILE_ID((short)2, "profileId"),
    START_TIME((short)3, "startTime"),
    END_TIME((short)4, "endTime"),
    END_UNTIL_NOW((short)5, "endUntilNow"),
    COLLEGE_CODE((short)6, "collegeCode"),
    COLLEGE_NAME((short)7, "collegeName"),
    COLLEGE_LOGO((short)8, "collegeLogo"),
    MAJOR_CODE((short)9, "majorCode"),
    MAJOR_NAME((short)10, "majorName"),
    DEGREE((short)11, "degree"),
    DESCRIPTION((short)12, "description"),
    IS_FULL((short)13, "isFull"),
    IS_UNIFIED((short)14, "isUnified"),
    IS_STUDY_ABROAD((short)15, "isStudyAbroad"),
    STUDY_ABROAD_COUNTRY((short)16, "studyAbroadCountry"),
    CREATE_TIME((short)17, "createTime"),
    UPDATE_TIME((short)18, "updateTime");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PROFILE_ID
          return PROFILE_ID;
        case 3: // START_TIME
          return START_TIME;
        case 4: // END_TIME
          return END_TIME;
        case 5: // END_UNTIL_NOW
          return END_UNTIL_NOW;
        case 6: // COLLEGE_CODE
          return COLLEGE_CODE;
        case 7: // COLLEGE_NAME
          return COLLEGE_NAME;
        case 8: // COLLEGE_LOGO
          return COLLEGE_LOGO;
        case 9: // MAJOR_CODE
          return MAJOR_CODE;
        case 10: // MAJOR_NAME
          return MAJOR_NAME;
        case 11: // DEGREE
          return DEGREE;
        case 12: // DESCRIPTION
          return DESCRIPTION;
        case 13: // IS_FULL
          return IS_FULL;
        case 14: // IS_UNIFIED
          return IS_UNIFIED;
        case 15: // IS_STUDY_ABROAD
          return IS_STUDY_ABROAD;
        case 16: // STUDY_ABROAD_COUNTRY
          return STUDY_ABROAD_COUNTRY;
        case 17: // CREATE_TIME
          return CREATE_TIME;
        case 18: // UPDATE_TIME
          return UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PROFILEID_ISSET_ID = 1;
  private static final int __ENDUNTILNOW_ISSET_ID = 2;
  private static final int __COLLEGECODE_ISSET_ID = 3;
  private static final int __DEGREE_ISSET_ID = 4;
  private static final int __ISFULL_ISSET_ID = 5;
  private static final int __ISUNIFIED_ISSET_ID = 6;
  private static final int __ISSTUDYABROAD_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.PROFILE_ID,_Fields.START_TIME,_Fields.END_TIME,_Fields.END_UNTIL_NOW,_Fields.COLLEGE_CODE,_Fields.COLLEGE_NAME,_Fields.COLLEGE_LOGO,_Fields.MAJOR_CODE,_Fields.MAJOR_NAME,_Fields.DEGREE,_Fields.DESCRIPTION,_Fields.IS_FULL,_Fields.IS_UNIFIED,_Fields.IS_STUDY_ABROAD,_Fields.STUDY_ABROAD_COUNTRY,_Fields.CREATE_TIME,_Fields.UPDATE_TIME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROFILE_ID, new org.apache.thrift.meta_data.FieldMetaData("profileId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_UNTIL_NOW, new org.apache.thrift.meta_data.FieldMetaData("endUntilNow", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.COLLEGE_CODE, new org.apache.thrift.meta_data.FieldMetaData("collegeCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLLEGE_NAME, new org.apache.thrift.meta_data.FieldMetaData("collegeName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLLEGE_LOGO, new org.apache.thrift.meta_data.FieldMetaData("collegeLogo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAJOR_CODE, new org.apache.thrift.meta_data.FieldMetaData("majorCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAJOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("majorName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEGREE, new org.apache.thrift.meta_data.FieldMetaData("degree", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_FULL, new org.apache.thrift.meta_data.FieldMetaData("isFull", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.IS_UNIFIED, new org.apache.thrift.meta_data.FieldMetaData("isUnified", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.IS_STUDY_ABROAD, new org.apache.thrift.meta_data.FieldMetaData("isStudyAbroad", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.STUDY_ABROAD_COUNTRY, new org.apache.thrift.meta_data.FieldMetaData("studyAbroadCountry", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProfileEducationDO.class, metaDataMap);
  }

  public ProfileEducationDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProfileEducationDO(ProfileEducationDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.profileId = other.profileId;
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetEndTime()) {
      this.endTime = other.endTime;
    }
    this.endUntilNow = other.endUntilNow;
    this.collegeCode = other.collegeCode;
    if (other.isSetCollegeName()) {
      this.collegeName = other.collegeName;
    }
    if (other.isSetCollegeLogo()) {
      this.collegeLogo = other.collegeLogo;
    }
    if (other.isSetMajorCode()) {
      this.majorCode = other.majorCode;
    }
    if (other.isSetMajorName()) {
      this.majorName = other.majorName;
    }
    this.degree = other.degree;
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    this.isFull = other.isFull;
    this.isUnified = other.isUnified;
    this.isStudyAbroad = other.isStudyAbroad;
    if (other.isSetStudyAbroadCountry()) {
      this.studyAbroadCountry = other.studyAbroadCountry;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
  }

  public ProfileEducationDO deepCopy() {
    return new ProfileEducationDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setProfileIdIsSet(false);
    this.profileId = 0;
    this.startTime = null;
    this.endTime = null;
    setEndUntilNowIsSet(false);
    this.endUntilNow = 0;
    setCollegeCodeIsSet(false);
    this.collegeCode = 0;
    this.collegeName = null;
    this.collegeLogo = null;
    this.majorCode = null;
    this.majorName = null;
    setDegreeIsSet(false);
    this.degree = 0;
    this.description = null;
    setIsFullIsSet(false);
    this.isFull = 0;
    setIsUnifiedIsSet(false);
    this.isUnified = 0;
    setIsStudyAbroadIsSet(false);
    this.isStudyAbroad = 0;
    this.studyAbroadCountry = null;
    this.createTime = null;
    this.updateTime = null;
  }

  public int getId() {
    return this.id;
  }

  public ProfileEducationDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getProfileId() {
    return this.profileId;
  }

  public ProfileEducationDO setProfileId(int profileId) {
    this.profileId = profileId;
    setProfileIdIsSet(true);
    return this;
  }

  public void unsetProfileId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROFILEID_ISSET_ID);
  }

  /** Returns true if field profileId is set (has been assigned a value) and false otherwise */
  public boolean isSetProfileId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROFILEID_ISSET_ID);
  }

  public void setProfileIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROFILEID_ISSET_ID, value);
  }

  public String getStartTime() {
    return this.startTime;
  }

  public ProfileEducationDO setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public String getEndTime() {
    return this.endTime;
  }

  public ProfileEducationDO setEndTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public byte getEndUntilNow() {
    return this.endUntilNow;
  }

  public ProfileEducationDO setEndUntilNow(byte endUntilNow) {
    this.endUntilNow = endUntilNow;
    setEndUntilNowIsSet(true);
    return this;
  }

  public void unsetEndUntilNow() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENDUNTILNOW_ISSET_ID);
  }

  /** Returns true if field endUntilNow is set (has been assigned a value) and false otherwise */
  public boolean isSetEndUntilNow() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENDUNTILNOW_ISSET_ID);
  }

  public void setEndUntilNowIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENDUNTILNOW_ISSET_ID, value);
  }

  public int getCollegeCode() {
    return this.collegeCode;
  }

  public ProfileEducationDO setCollegeCode(int collegeCode) {
    this.collegeCode = collegeCode;
    setCollegeCodeIsSet(true);
    return this;
  }

  public void unsetCollegeCode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COLLEGECODE_ISSET_ID);
  }

  /** Returns true if field collegeCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCollegeCode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COLLEGECODE_ISSET_ID);
  }

  public void setCollegeCodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COLLEGECODE_ISSET_ID, value);
  }

  public String getCollegeName() {
    return this.collegeName;
  }

  public ProfileEducationDO setCollegeName(String collegeName) {
    this.collegeName = collegeName;
    return this;
  }

  public void unsetCollegeName() {
    this.collegeName = null;
  }

  /** Returns true if field collegeName is set (has been assigned a value) and false otherwise */
  public boolean isSetCollegeName() {
    return this.collegeName != null;
  }

  public void setCollegeNameIsSet(boolean value) {
    if (!value) {
      this.collegeName = null;
    }
  }

  public String getCollegeLogo() {
    return this.collegeLogo;
  }

  public ProfileEducationDO setCollegeLogo(String collegeLogo) {
    this.collegeLogo = collegeLogo;
    return this;
  }

  public void unsetCollegeLogo() {
    this.collegeLogo = null;
  }

  /** Returns true if field collegeLogo is set (has been assigned a value) and false otherwise */
  public boolean isSetCollegeLogo() {
    return this.collegeLogo != null;
  }

  public void setCollegeLogoIsSet(boolean value) {
    if (!value) {
      this.collegeLogo = null;
    }
  }

  public String getMajorCode() {
    return this.majorCode;
  }

  public ProfileEducationDO setMajorCode(String majorCode) {
    this.majorCode = majorCode;
    return this;
  }

  public void unsetMajorCode() {
    this.majorCode = null;
  }

  /** Returns true if field majorCode is set (has been assigned a value) and false otherwise */
  public boolean isSetMajorCode() {
    return this.majorCode != null;
  }

  public void setMajorCodeIsSet(boolean value) {
    if (!value) {
      this.majorCode = null;
    }
  }

  public String getMajorName() {
    return this.majorName;
  }

  public ProfileEducationDO setMajorName(String majorName) {
    this.majorName = majorName;
    return this;
  }

  public void unsetMajorName() {
    this.majorName = null;
  }

  /** Returns true if field majorName is set (has been assigned a value) and false otherwise */
  public boolean isSetMajorName() {
    return this.majorName != null;
  }

  public void setMajorNameIsSet(boolean value) {
    if (!value) {
      this.majorName = null;
    }
  }

  public byte getDegree() {
    return this.degree;
  }

  public ProfileEducationDO setDegree(byte degree) {
    this.degree = degree;
    setDegreeIsSet(true);
    return this;
  }

  public void unsetDegree() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEGREE_ISSET_ID);
  }

  /** Returns true if field degree is set (has been assigned a value) and false otherwise */
  public boolean isSetDegree() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEGREE_ISSET_ID);
  }

  public void setDegreeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEGREE_ISSET_ID, value);
  }

  public String getDescription() {
    return this.description;
  }

  public ProfileEducationDO setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public byte getIsFull() {
    return this.isFull;
  }

  public ProfileEducationDO setIsFull(byte isFull) {
    this.isFull = isFull;
    setIsFullIsSet(true);
    return this;
  }

  public void unsetIsFull() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISFULL_ISSET_ID);
  }

  /** Returns true if field isFull is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFull() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISFULL_ISSET_ID);
  }

  public void setIsFullIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISFULL_ISSET_ID, value);
  }

  public byte getIsUnified() {
    return this.isUnified;
  }

  public ProfileEducationDO setIsUnified(byte isUnified) {
    this.isUnified = isUnified;
    setIsUnifiedIsSet(true);
    return this;
  }

  public void unsetIsUnified() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISUNIFIED_ISSET_ID);
  }

  /** Returns true if field isUnified is set (has been assigned a value) and false otherwise */
  public boolean isSetIsUnified() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISUNIFIED_ISSET_ID);
  }

  public void setIsUnifiedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISUNIFIED_ISSET_ID, value);
  }

  public byte getIsStudyAbroad() {
    return this.isStudyAbroad;
  }

  public ProfileEducationDO setIsStudyAbroad(byte isStudyAbroad) {
    this.isStudyAbroad = isStudyAbroad;
    setIsStudyAbroadIsSet(true);
    return this;
  }

  public void unsetIsStudyAbroad() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISSTUDYABROAD_ISSET_ID);
  }

  /** Returns true if field isStudyAbroad is set (has been assigned a value) and false otherwise */
  public boolean isSetIsStudyAbroad() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISSTUDYABROAD_ISSET_ID);
  }

  public void setIsStudyAbroadIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISSTUDYABROAD_ISSET_ID, value);
  }

  public String getStudyAbroadCountry() {
    return this.studyAbroadCountry;
  }

  public ProfileEducationDO setStudyAbroadCountry(String studyAbroadCountry) {
    this.studyAbroadCountry = studyAbroadCountry;
    return this;
  }

  public void unsetStudyAbroadCountry() {
    this.studyAbroadCountry = null;
  }

  /** Returns true if field studyAbroadCountry is set (has been assigned a value) and false otherwise */
  public boolean isSetStudyAbroadCountry() {
    return this.studyAbroadCountry != null;
  }

  public void setStudyAbroadCountryIsSet(boolean value) {
    if (!value) {
      this.studyAbroadCountry = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public ProfileEducationDO setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public ProfileEducationDO setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case PROFILE_ID:
      if (value == null) {
        unsetProfileId();
      } else {
        setProfileId((Integer)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((String)value);
      }
      break;

    case END_UNTIL_NOW:
      if (value == null) {
        unsetEndUntilNow();
      } else {
        setEndUntilNow((Byte)value);
      }
      break;

    case COLLEGE_CODE:
      if (value == null) {
        unsetCollegeCode();
      } else {
        setCollegeCode((Integer)value);
      }
      break;

    case COLLEGE_NAME:
      if (value == null) {
        unsetCollegeName();
      } else {
        setCollegeName((String)value);
      }
      break;

    case COLLEGE_LOGO:
      if (value == null) {
        unsetCollegeLogo();
      } else {
        setCollegeLogo((String)value);
      }
      break;

    case MAJOR_CODE:
      if (value == null) {
        unsetMajorCode();
      } else {
        setMajorCode((String)value);
      }
      break;

    case MAJOR_NAME:
      if (value == null) {
        unsetMajorName();
      } else {
        setMajorName((String)value);
      }
      break;

    case DEGREE:
      if (value == null) {
        unsetDegree();
      } else {
        setDegree((Byte)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case IS_FULL:
      if (value == null) {
        unsetIsFull();
      } else {
        setIsFull((Byte)value);
      }
      break;

    case IS_UNIFIED:
      if (value == null) {
        unsetIsUnified();
      } else {
        setIsUnified((Byte)value);
      }
      break;

    case IS_STUDY_ABROAD:
      if (value == null) {
        unsetIsStudyAbroad();
      } else {
        setIsStudyAbroad((Byte)value);
      }
      break;

    case STUDY_ABROAD_COUNTRY:
      if (value == null) {
        unsetStudyAbroadCountry();
      } else {
        setStudyAbroadCountry((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case PROFILE_ID:
      return getProfileId();

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case END_UNTIL_NOW:
      return getEndUntilNow();

    case COLLEGE_CODE:
      return getCollegeCode();

    case COLLEGE_NAME:
      return getCollegeName();

    case COLLEGE_LOGO:
      return getCollegeLogo();

    case MAJOR_CODE:
      return getMajorCode();

    case MAJOR_NAME:
      return getMajorName();

    case DEGREE:
      return getDegree();

    case DESCRIPTION:
      return getDescription();

    case IS_FULL:
      return getIsFull();

    case IS_UNIFIED:
      return getIsUnified();

    case IS_STUDY_ABROAD:
      return getIsStudyAbroad();

    case STUDY_ABROAD_COUNTRY:
      return getStudyAbroadCountry();

    case CREATE_TIME:
      return getCreateTime();

    case UPDATE_TIME:
      return getUpdateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PROFILE_ID:
      return isSetProfileId();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case END_UNTIL_NOW:
      return isSetEndUntilNow();
    case COLLEGE_CODE:
      return isSetCollegeCode();
    case COLLEGE_NAME:
      return isSetCollegeName();
    case COLLEGE_LOGO:
      return isSetCollegeLogo();
    case MAJOR_CODE:
      return isSetMajorCode();
    case MAJOR_NAME:
      return isSetMajorName();
    case DEGREE:
      return isSetDegree();
    case DESCRIPTION:
      return isSetDescription();
    case IS_FULL:
      return isSetIsFull();
    case IS_UNIFIED:
      return isSetIsUnified();
    case IS_STUDY_ABROAD:
      return isSetIsStudyAbroad();
    case STUDY_ABROAD_COUNTRY:
      return isSetStudyAbroadCountry();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProfileEducationDO)
      return this.equals((ProfileEducationDO)that);
    return false;
  }

  public boolean equals(ProfileEducationDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_profileId = true && this.isSetProfileId();
    boolean that_present_profileId = true && that.isSetProfileId();
    if (this_present_profileId || that_present_profileId) {
      if (!(this_present_profileId && that_present_profileId))
        return false;
      if (this.profileId != that.profileId)
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_endUntilNow = true && this.isSetEndUntilNow();
    boolean that_present_endUntilNow = true && that.isSetEndUntilNow();
    if (this_present_endUntilNow || that_present_endUntilNow) {
      if (!(this_present_endUntilNow && that_present_endUntilNow))
        return false;
      if (this.endUntilNow != that.endUntilNow)
        return false;
    }

    boolean this_present_collegeCode = true && this.isSetCollegeCode();
    boolean that_present_collegeCode = true && that.isSetCollegeCode();
    if (this_present_collegeCode || that_present_collegeCode) {
      if (!(this_present_collegeCode && that_present_collegeCode))
        return false;
      if (this.collegeCode != that.collegeCode)
        return false;
    }

    boolean this_present_collegeName = true && this.isSetCollegeName();
    boolean that_present_collegeName = true && that.isSetCollegeName();
    if (this_present_collegeName || that_present_collegeName) {
      if (!(this_present_collegeName && that_present_collegeName))
        return false;
      if (!this.collegeName.equals(that.collegeName))
        return false;
    }

    boolean this_present_collegeLogo = true && this.isSetCollegeLogo();
    boolean that_present_collegeLogo = true && that.isSetCollegeLogo();
    if (this_present_collegeLogo || that_present_collegeLogo) {
      if (!(this_present_collegeLogo && that_present_collegeLogo))
        return false;
      if (!this.collegeLogo.equals(that.collegeLogo))
        return false;
    }

    boolean this_present_majorCode = true && this.isSetMajorCode();
    boolean that_present_majorCode = true && that.isSetMajorCode();
    if (this_present_majorCode || that_present_majorCode) {
      if (!(this_present_majorCode && that_present_majorCode))
        return false;
      if (!this.majorCode.equals(that.majorCode))
        return false;
    }

    boolean this_present_majorName = true && this.isSetMajorName();
    boolean that_present_majorName = true && that.isSetMajorName();
    if (this_present_majorName || that_present_majorName) {
      if (!(this_present_majorName && that_present_majorName))
        return false;
      if (!this.majorName.equals(that.majorName))
        return false;
    }

    boolean this_present_degree = true && this.isSetDegree();
    boolean that_present_degree = true && that.isSetDegree();
    if (this_present_degree || that_present_degree) {
      if (!(this_present_degree && that_present_degree))
        return false;
      if (this.degree != that.degree)
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_isFull = true && this.isSetIsFull();
    boolean that_present_isFull = true && that.isSetIsFull();
    if (this_present_isFull || that_present_isFull) {
      if (!(this_present_isFull && that_present_isFull))
        return false;
      if (this.isFull != that.isFull)
        return false;
    }

    boolean this_present_isUnified = true && this.isSetIsUnified();
    boolean that_present_isUnified = true && that.isSetIsUnified();
    if (this_present_isUnified || that_present_isUnified) {
      if (!(this_present_isUnified && that_present_isUnified))
        return false;
      if (this.isUnified != that.isUnified)
        return false;
    }

    boolean this_present_isStudyAbroad = true && this.isSetIsStudyAbroad();
    boolean that_present_isStudyAbroad = true && that.isSetIsStudyAbroad();
    if (this_present_isStudyAbroad || that_present_isStudyAbroad) {
      if (!(this_present_isStudyAbroad && that_present_isStudyAbroad))
        return false;
      if (this.isStudyAbroad != that.isStudyAbroad)
        return false;
    }

    boolean this_present_studyAbroadCountry = true && this.isSetStudyAbroadCountry();
    boolean that_present_studyAbroadCountry = true && that.isSetStudyAbroadCountry();
    if (this_present_studyAbroadCountry || that_present_studyAbroadCountry) {
      if (!(this_present_studyAbroadCountry && that_present_studyAbroadCountry))
        return false;
      if (!this.studyAbroadCountry.equals(that.studyAbroadCountry))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetProfileId()) ? 131071 : 524287);
    if (isSetProfileId())
      hashCode = hashCode * 8191 + profileId;

    hashCode = hashCode * 8191 + ((isSetStartTime()) ? 131071 : 524287);
    if (isSetStartTime())
      hashCode = hashCode * 8191 + startTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetEndTime()) ? 131071 : 524287);
    if (isSetEndTime())
      hashCode = hashCode * 8191 + endTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetEndUntilNow()) ? 131071 : 524287);
    if (isSetEndUntilNow())
      hashCode = hashCode * 8191 + (int) (endUntilNow);

    hashCode = hashCode * 8191 + ((isSetCollegeCode()) ? 131071 : 524287);
    if (isSetCollegeCode())
      hashCode = hashCode * 8191 + collegeCode;

    hashCode = hashCode * 8191 + ((isSetCollegeName()) ? 131071 : 524287);
    if (isSetCollegeName())
      hashCode = hashCode * 8191 + collegeName.hashCode();

    hashCode = hashCode * 8191 + ((isSetCollegeLogo()) ? 131071 : 524287);
    if (isSetCollegeLogo())
      hashCode = hashCode * 8191 + collegeLogo.hashCode();

    hashCode = hashCode * 8191 + ((isSetMajorCode()) ? 131071 : 524287);
    if (isSetMajorCode())
      hashCode = hashCode * 8191 + majorCode.hashCode();

    hashCode = hashCode * 8191 + ((isSetMajorName()) ? 131071 : 524287);
    if (isSetMajorName())
      hashCode = hashCode * 8191 + majorName.hashCode();

    hashCode = hashCode * 8191 + ((isSetDegree()) ? 131071 : 524287);
    if (isSetDegree())
      hashCode = hashCode * 8191 + (int) (degree);

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + description.hashCode();

    hashCode = hashCode * 8191 + ((isSetIsFull()) ? 131071 : 524287);
    if (isSetIsFull())
      hashCode = hashCode * 8191 + (int) (isFull);

    hashCode = hashCode * 8191 + ((isSetIsUnified()) ? 131071 : 524287);
    if (isSetIsUnified())
      hashCode = hashCode * 8191 + (int) (isUnified);

    hashCode = hashCode * 8191 + ((isSetIsStudyAbroad()) ? 131071 : 524287);
    if (isSetIsStudyAbroad())
      hashCode = hashCode * 8191 + (int) (isStudyAbroad);

    hashCode = hashCode * 8191 + ((isSetStudyAbroadCountry()) ? 131071 : 524287);
    if (isSetStudyAbroadCountry())
      hashCode = hashCode * 8191 + studyAbroadCountry.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
    if (isSetCreateTime())
      hashCode = hashCode * 8191 + createTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
    if (isSetUpdateTime())
      hashCode = hashCode * 8191 + updateTime.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ProfileEducationDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfileId()).compareTo(other.isSetProfileId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfileId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileId, other.profileId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndUntilNow()).compareTo(other.isSetEndUntilNow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndUntilNow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endUntilNow, other.endUntilNow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollegeCode()).compareTo(other.isSetCollegeCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollegeCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collegeCode, other.collegeCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollegeName()).compareTo(other.isSetCollegeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollegeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collegeName, other.collegeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollegeLogo()).compareTo(other.isSetCollegeLogo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollegeLogo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collegeLogo, other.collegeLogo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMajorCode()).compareTo(other.isSetMajorCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMajorCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.majorCode, other.majorCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMajorName()).compareTo(other.isSetMajorName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMajorName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.majorName, other.majorName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDegree()).compareTo(other.isSetDegree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDegree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.degree, other.degree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsFull()).compareTo(other.isSetIsFull());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFull()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFull, other.isFull);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsUnified()).compareTo(other.isSetIsUnified());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsUnified()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isUnified, other.isUnified);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsStudyAbroad()).compareTo(other.isSetIsStudyAbroad());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsStudyAbroad()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isStudyAbroad, other.isStudyAbroad);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStudyAbroadCountry()).compareTo(other.isSetStudyAbroadCountry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStudyAbroadCountry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studyAbroadCountry, other.studyAbroadCountry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProfileEducationDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetProfileId()) {
      if (!first) sb.append(", ");
      sb.append("profileId:");
      sb.append(this.profileId);
      first = false;
    }
    if (isSetStartTime()) {
      if (!first) sb.append(", ");
      sb.append("startTime:");
      if (this.startTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startTime);
      }
      first = false;
    }
    if (isSetEndTime()) {
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
    }
    if (isSetEndUntilNow()) {
      if (!first) sb.append(", ");
      sb.append("endUntilNow:");
      sb.append(this.endUntilNow);
      first = false;
    }
    if (isSetCollegeCode()) {
      if (!first) sb.append(", ");
      sb.append("collegeCode:");
      sb.append(this.collegeCode);
      first = false;
    }
    if (isSetCollegeName()) {
      if (!first) sb.append(", ");
      sb.append("collegeName:");
      if (this.collegeName == null) {
        sb.append("null");
      } else {
        sb.append(this.collegeName);
      }
      first = false;
    }
    if (isSetCollegeLogo()) {
      if (!first) sb.append(", ");
      sb.append("collegeLogo:");
      if (this.collegeLogo == null) {
        sb.append("null");
      } else {
        sb.append(this.collegeLogo);
      }
      first = false;
    }
    if (isSetMajorCode()) {
      if (!first) sb.append(", ");
      sb.append("majorCode:");
      if (this.majorCode == null) {
        sb.append("null");
      } else {
        sb.append(this.majorCode);
      }
      first = false;
    }
    if (isSetMajorName()) {
      if (!first) sb.append(", ");
      sb.append("majorName:");
      if (this.majorName == null) {
        sb.append("null");
      } else {
        sb.append(this.majorName);
      }
      first = false;
    }
    if (isSetDegree()) {
      if (!first) sb.append(", ");
      sb.append("degree:");
      sb.append(this.degree);
      first = false;
    }
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetIsFull()) {
      if (!first) sb.append(", ");
      sb.append("isFull:");
      sb.append(this.isFull);
      first = false;
    }
    if (isSetIsUnified()) {
      if (!first) sb.append(", ");
      sb.append("isUnified:");
      sb.append(this.isUnified);
      first = false;
    }
    if (isSetIsStudyAbroad()) {
      if (!first) sb.append(", ");
      sb.append("isStudyAbroad:");
      sb.append(this.isStudyAbroad);
      first = false;
    }
    if (isSetStudyAbroadCountry()) {
      if (!first) sb.append(", ");
      sb.append("studyAbroadCountry:");
      if (this.studyAbroadCountry == null) {
        sb.append("null");
      } else {
        sb.append(this.studyAbroadCountry);
      }
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProfileEducationDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProfileEducationDOStandardScheme getScheme() {
      return new ProfileEducationDOStandardScheme();
    }
  }

  private static class ProfileEducationDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<ProfileEducationDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProfileEducationDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROFILE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.profileId = iprot.readI32();
              struct.setProfileIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endTime = iprot.readString();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // END_UNTIL_NOW
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.endUntilNow = iprot.readByte();
              struct.setEndUntilNowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COLLEGE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.collegeCode = iprot.readI32();
              struct.setCollegeCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COLLEGE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.collegeName = iprot.readString();
              struct.setCollegeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COLLEGE_LOGO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.collegeLogo = iprot.readString();
              struct.setCollegeLogoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MAJOR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.majorCode = iprot.readString();
              struct.setMajorCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MAJOR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.majorName = iprot.readString();
              struct.setMajorNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DEGREE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.degree = iprot.readByte();
              struct.setDegreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // IS_FULL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.isFull = iprot.readByte();
              struct.setIsFullIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IS_UNIFIED
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.isUnified = iprot.readByte();
              struct.setIsUnifiedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // IS_STUDY_ABROAD
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.isStudyAbroad = iprot.readByte();
              struct.setIsStudyAbroadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // STUDY_ABROAD_COUNTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.studyAbroadCountry = iprot.readString();
              struct.setStudyAbroadCountryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProfileEducationDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetProfileId()) {
        oprot.writeFieldBegin(PROFILE_ID_FIELD_DESC);
        oprot.writeI32(struct.profileId);
        oprot.writeFieldEnd();
      }
      if (struct.startTime != null) {
        if (struct.isSetStartTime()) {
          oprot.writeFieldBegin(START_TIME_FIELD_DESC);
          oprot.writeString(struct.startTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.endTime != null) {
        if (struct.isSetEndTime()) {
          oprot.writeFieldBegin(END_TIME_FIELD_DESC);
          oprot.writeString(struct.endTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEndUntilNow()) {
        oprot.writeFieldBegin(END_UNTIL_NOW_FIELD_DESC);
        oprot.writeByte(struct.endUntilNow);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCollegeCode()) {
        oprot.writeFieldBegin(COLLEGE_CODE_FIELD_DESC);
        oprot.writeI32(struct.collegeCode);
        oprot.writeFieldEnd();
      }
      if (struct.collegeName != null) {
        if (struct.isSetCollegeName()) {
          oprot.writeFieldBegin(COLLEGE_NAME_FIELD_DESC);
          oprot.writeString(struct.collegeName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.collegeLogo != null) {
        if (struct.isSetCollegeLogo()) {
          oprot.writeFieldBegin(COLLEGE_LOGO_FIELD_DESC);
          oprot.writeString(struct.collegeLogo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.majorCode != null) {
        if (struct.isSetMajorCode()) {
          oprot.writeFieldBegin(MAJOR_CODE_FIELD_DESC);
          oprot.writeString(struct.majorCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.majorName != null) {
        if (struct.isSetMajorName()) {
          oprot.writeFieldBegin(MAJOR_NAME_FIELD_DESC);
          oprot.writeString(struct.majorName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDegree()) {
        oprot.writeFieldBegin(DEGREE_FIELD_DESC);
        oprot.writeByte(struct.degree);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsFull()) {
        oprot.writeFieldBegin(IS_FULL_FIELD_DESC);
        oprot.writeByte(struct.isFull);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsUnified()) {
        oprot.writeFieldBegin(IS_UNIFIED_FIELD_DESC);
        oprot.writeByte(struct.isUnified);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsStudyAbroad()) {
        oprot.writeFieldBegin(IS_STUDY_ABROAD_FIELD_DESC);
        oprot.writeByte(struct.isStudyAbroad);
        oprot.writeFieldEnd();
      }
      if (struct.studyAbroadCountry != null) {
        if (struct.isSetStudyAbroadCountry()) {
          oprot.writeFieldBegin(STUDY_ABROAD_COUNTRY_FIELD_DESC);
          oprot.writeString(struct.studyAbroadCountry);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateTime != null) {
        if (struct.isSetUpdateTime()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProfileEducationDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProfileEducationDOTupleScheme getScheme() {
      return new ProfileEducationDOTupleScheme();
    }
  }

  private static class ProfileEducationDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<ProfileEducationDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProfileEducationDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetProfileId()) {
        optionals.set(1);
      }
      if (struct.isSetStartTime()) {
        optionals.set(2);
      }
      if (struct.isSetEndTime()) {
        optionals.set(3);
      }
      if (struct.isSetEndUntilNow()) {
        optionals.set(4);
      }
      if (struct.isSetCollegeCode()) {
        optionals.set(5);
      }
      if (struct.isSetCollegeName()) {
        optionals.set(6);
      }
      if (struct.isSetCollegeLogo()) {
        optionals.set(7);
      }
      if (struct.isSetMajorCode()) {
        optionals.set(8);
      }
      if (struct.isSetMajorName()) {
        optionals.set(9);
      }
      if (struct.isSetDegree()) {
        optionals.set(10);
      }
      if (struct.isSetDescription()) {
        optionals.set(11);
      }
      if (struct.isSetIsFull()) {
        optionals.set(12);
      }
      if (struct.isSetIsUnified()) {
        optionals.set(13);
      }
      if (struct.isSetIsStudyAbroad()) {
        optionals.set(14);
      }
      if (struct.isSetStudyAbroadCountry()) {
        optionals.set(15);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(16);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetProfileId()) {
        oprot.writeI32(struct.profileId);
      }
      if (struct.isSetStartTime()) {
        oprot.writeString(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeString(struct.endTime);
      }
      if (struct.isSetEndUntilNow()) {
        oprot.writeByte(struct.endUntilNow);
      }
      if (struct.isSetCollegeCode()) {
        oprot.writeI32(struct.collegeCode);
      }
      if (struct.isSetCollegeName()) {
        oprot.writeString(struct.collegeName);
      }
      if (struct.isSetCollegeLogo()) {
        oprot.writeString(struct.collegeLogo);
      }
      if (struct.isSetMajorCode()) {
        oprot.writeString(struct.majorCode);
      }
      if (struct.isSetMajorName()) {
        oprot.writeString(struct.majorName);
      }
      if (struct.isSetDegree()) {
        oprot.writeByte(struct.degree);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetIsFull()) {
        oprot.writeByte(struct.isFull);
      }
      if (struct.isSetIsUnified()) {
        oprot.writeByte(struct.isUnified);
      }
      if (struct.isSetIsStudyAbroad()) {
        oprot.writeByte(struct.isStudyAbroad);
      }
      if (struct.isSetStudyAbroadCountry()) {
        oprot.writeString(struct.studyAbroadCountry);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProfileEducationDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.profileId = iprot.readI32();
        struct.setProfileIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.startTime = iprot.readString();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.endTime = iprot.readString();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.endUntilNow = iprot.readByte();
        struct.setEndUntilNowIsSet(true);
      }
      if (incoming.get(5)) {
        struct.collegeCode = iprot.readI32();
        struct.setCollegeCodeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.collegeName = iprot.readString();
        struct.setCollegeNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.collegeLogo = iprot.readString();
        struct.setCollegeLogoIsSet(true);
      }
      if (incoming.get(8)) {
        struct.majorCode = iprot.readString();
        struct.setMajorCodeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.majorName = iprot.readString();
        struct.setMajorNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.degree = iprot.readByte();
        struct.setDegreeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(12)) {
        struct.isFull = iprot.readByte();
        struct.setIsFullIsSet(true);
      }
      if (incoming.get(13)) {
        struct.isUnified = iprot.readByte();
        struct.setIsUnifiedIsSet(true);
      }
      if (incoming.get(14)) {
        struct.isStudyAbroad = iprot.readByte();
        struct.setIsStudyAbroadIsSet(true);
      }
      if (incoming.get(15)) {
        struct.studyAbroadCountry = iprot.readString();
        struct.setStudyAbroadCountryIsSet(true);
      }
      if (incoming.get(16)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

