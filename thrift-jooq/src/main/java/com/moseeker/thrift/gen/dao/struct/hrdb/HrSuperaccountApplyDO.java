/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.hrdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-04")
public class HrSuperaccountApplyDO implements org.apache.thrift.TBase<HrSuperaccountApplyDO, HrSuperaccountApplyDO._Fields>, java.io.Serializable, Cloneable, Comparable<HrSuperaccountApplyDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HrSuperaccountApplyDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LICENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("licence", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField OPERATE_FIELD_DESC = new org.apache.thrift.protocol.TField("operate", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CHILD_COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("childCompanyId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField MIGRATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("migrateTime", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ACCOUNT_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("accountLimit", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HrSuperaccountApplyDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HrSuperaccountApplyDOTupleSchemeFactory();

  public int id; // optional
  public int companyId; // optional
  public String licence; // optional
  public String createTime; // optional
  public String updateTime; // optional
  public int operate; // optional
  public int status; // optional
  public String message; // optional
  public String childCompanyId; // optional
  public String migrateTime; // optional
  public int accountLimit; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    COMPANY_ID((short)2, "companyId"),
    LICENCE((short)3, "licence"),
    CREATE_TIME((short)4, "createTime"),
    UPDATE_TIME((short)5, "updateTime"),
    OPERATE((short)6, "operate"),
    STATUS((short)7, "status"),
    MESSAGE((short)8, "message"),
    CHILD_COMPANY_ID((short)9, "childCompanyId"),
    MIGRATE_TIME((short)10, "migrateTime"),
    ACCOUNT_LIMIT((short)11, "accountLimit");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // COMPANY_ID
          return COMPANY_ID;
        case 3: // LICENCE
          return LICENCE;
        case 4: // CREATE_TIME
          return CREATE_TIME;
        case 5: // UPDATE_TIME
          return UPDATE_TIME;
        case 6: // OPERATE
          return OPERATE;
        case 7: // STATUS
          return STATUS;
        case 8: // MESSAGE
          return MESSAGE;
        case 9: // CHILD_COMPANY_ID
          return CHILD_COMPANY_ID;
        case 10: // MIGRATE_TIME
          return MIGRATE_TIME;
        case 11: // ACCOUNT_LIMIT
          return ACCOUNT_LIMIT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __COMPANYID_ISSET_ID = 1;
  private static final int __OPERATE_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private static final int __ACCOUNTLIMIT_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.COMPANY_ID,_Fields.LICENCE,_Fields.CREATE_TIME,_Fields.UPDATE_TIME,_Fields.OPERATE,_Fields.STATUS,_Fields.MESSAGE,_Fields.CHILD_COMPANY_ID,_Fields.MIGRATE_TIME,_Fields.ACCOUNT_LIMIT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LICENCE, new org.apache.thrift.meta_data.FieldMetaData("licence", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERATE, new org.apache.thrift.meta_data.FieldMetaData("operate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHILD_COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("childCompanyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MIGRATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("migrateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("accountLimit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HrSuperaccountApplyDO.class, metaDataMap);
  }

  public HrSuperaccountApplyDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HrSuperaccountApplyDO(HrSuperaccountApplyDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.companyId = other.companyId;
    if (other.isSetLicence()) {
      this.licence = other.licence;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
    this.operate = other.operate;
    this.status = other.status;
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    if (other.isSetChildCompanyId()) {
      this.childCompanyId = other.childCompanyId;
    }
    if (other.isSetMigrateTime()) {
      this.migrateTime = other.migrateTime;
    }
    this.accountLimit = other.accountLimit;
  }

  public HrSuperaccountApplyDO deepCopy() {
    return new HrSuperaccountApplyDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setCompanyIdIsSet(false);
    this.companyId = 0;
    this.licence = null;
    this.createTime = null;
    this.updateTime = null;
    setOperateIsSet(false);
    this.operate = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.message = null;
    this.childCompanyId = null;
    this.migrateTime = null;
    setAccountLimitIsSet(false);
    this.accountLimit = 0;
  }

  public int getId() {
    return this.id;
  }

  public HrSuperaccountApplyDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getCompanyId() {
    return this.companyId;
  }

  public HrSuperaccountApplyDO setCompanyId(int companyId) {
    this.companyId = companyId;
    setCompanyIdIsSet(true);
    return this;
  }

  public void unsetCompanyId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  public void setCompanyIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
  }

  public String getLicence() {
    return this.licence;
  }

  public HrSuperaccountApplyDO setLicence(String licence) {
    this.licence = licence;
    return this;
  }

  public void unsetLicence() {
    this.licence = null;
  }

  /** Returns true if field licence is set (has been assigned a value) and false otherwise */
  public boolean isSetLicence() {
    return this.licence != null;
  }

  public void setLicenceIsSet(boolean value) {
    if (!value) {
      this.licence = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public HrSuperaccountApplyDO setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public HrSuperaccountApplyDO setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public int getOperate() {
    return this.operate;
  }

  public HrSuperaccountApplyDO setOperate(int operate) {
    this.operate = operate;
    setOperateIsSet(true);
    return this;
  }

  public void unsetOperate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OPERATE_ISSET_ID);
  }

  /** Returns true if field operate is set (has been assigned a value) and false otherwise */
  public boolean isSetOperate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OPERATE_ISSET_ID);
  }

  public void setOperateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OPERATE_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public HrSuperaccountApplyDO setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getMessage() {
    return this.message;
  }

  public HrSuperaccountApplyDO setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public String getChildCompanyId() {
    return this.childCompanyId;
  }

  public HrSuperaccountApplyDO setChildCompanyId(String childCompanyId) {
    this.childCompanyId = childCompanyId;
    return this;
  }

  public void unsetChildCompanyId() {
    this.childCompanyId = null;
  }

  /** Returns true if field childCompanyId is set (has been assigned a value) and false otherwise */
  public boolean isSetChildCompanyId() {
    return this.childCompanyId != null;
  }

  public void setChildCompanyIdIsSet(boolean value) {
    if (!value) {
      this.childCompanyId = null;
    }
  }

  public String getMigrateTime() {
    return this.migrateTime;
  }

  public HrSuperaccountApplyDO setMigrateTime(String migrateTime) {
    this.migrateTime = migrateTime;
    return this;
  }

  public void unsetMigrateTime() {
    this.migrateTime = null;
  }

  /** Returns true if field migrateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMigrateTime() {
    return this.migrateTime != null;
  }

  public void setMigrateTimeIsSet(boolean value) {
    if (!value) {
      this.migrateTime = null;
    }
  }

  public int getAccountLimit() {
    return this.accountLimit;
  }

  public HrSuperaccountApplyDO setAccountLimit(int accountLimit) {
    this.accountLimit = accountLimit;
    setAccountLimitIsSet(true);
    return this;
  }

  public void unsetAccountLimit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTLIMIT_ISSET_ID);
  }

  /** Returns true if field accountLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountLimit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCOUNTLIMIT_ISSET_ID);
  }

  public void setAccountLimitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCOUNTLIMIT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompanyId();
      } else {
        setCompanyId((Integer)value);
      }
      break;

    case LICENCE:
      if (value == null) {
        unsetLicence();
      } else {
        setLicence((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;

    case OPERATE:
      if (value == null) {
        unsetOperate();
      } else {
        setOperate((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    case CHILD_COMPANY_ID:
      if (value == null) {
        unsetChildCompanyId();
      } else {
        setChildCompanyId((String)value);
      }
      break;

    case MIGRATE_TIME:
      if (value == null) {
        unsetMigrateTime();
      } else {
        setMigrateTime((String)value);
      }
      break;

    case ACCOUNT_LIMIT:
      if (value == null) {
        unsetAccountLimit();
      } else {
        setAccountLimit((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case COMPANY_ID:
      return getCompanyId();

    case LICENCE:
      return getLicence();

    case CREATE_TIME:
      return getCreateTime();

    case UPDATE_TIME:
      return getUpdateTime();

    case OPERATE:
      return getOperate();

    case STATUS:
      return getStatus();

    case MESSAGE:
      return getMessage();

    case CHILD_COMPANY_ID:
      return getChildCompanyId();

    case MIGRATE_TIME:
      return getMigrateTime();

    case ACCOUNT_LIMIT:
      return getAccountLimit();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case COMPANY_ID:
      return isSetCompanyId();
    case LICENCE:
      return isSetLicence();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case OPERATE:
      return isSetOperate();
    case STATUS:
      return isSetStatus();
    case MESSAGE:
      return isSetMessage();
    case CHILD_COMPANY_ID:
      return isSetChildCompanyId();
    case MIGRATE_TIME:
      return isSetMigrateTime();
    case ACCOUNT_LIMIT:
      return isSetAccountLimit();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HrSuperaccountApplyDO)
      return this.equals((HrSuperaccountApplyDO)that);
    return false;
  }

  public boolean equals(HrSuperaccountApplyDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_companyId = true && this.isSetCompanyId();
    boolean that_present_companyId = true && that.isSetCompanyId();
    if (this_present_companyId || that_present_companyId) {
      if (!(this_present_companyId && that_present_companyId))
        return false;
      if (this.companyId != that.companyId)
        return false;
    }

    boolean this_present_licence = true && this.isSetLicence();
    boolean that_present_licence = true && that.isSetLicence();
    if (this_present_licence || that_present_licence) {
      if (!(this_present_licence && that_present_licence))
        return false;
      if (!this.licence.equals(that.licence))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    boolean this_present_operate = true && this.isSetOperate();
    boolean that_present_operate = true && that.isSetOperate();
    if (this_present_operate || that_present_operate) {
      if (!(this_present_operate && that_present_operate))
        return false;
      if (this.operate != that.operate)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_childCompanyId = true && this.isSetChildCompanyId();
    boolean that_present_childCompanyId = true && that.isSetChildCompanyId();
    if (this_present_childCompanyId || that_present_childCompanyId) {
      if (!(this_present_childCompanyId && that_present_childCompanyId))
        return false;
      if (!this.childCompanyId.equals(that.childCompanyId))
        return false;
    }

    boolean this_present_migrateTime = true && this.isSetMigrateTime();
    boolean that_present_migrateTime = true && that.isSetMigrateTime();
    if (this_present_migrateTime || that_present_migrateTime) {
      if (!(this_present_migrateTime && that_present_migrateTime))
        return false;
      if (!this.migrateTime.equals(that.migrateTime))
        return false;
    }

    boolean this_present_accountLimit = true && this.isSetAccountLimit();
    boolean that_present_accountLimit = true && that.isSetAccountLimit();
    if (this_present_accountLimit || that_present_accountLimit) {
      if (!(this_present_accountLimit && that_present_accountLimit))
        return false;
      if (this.accountLimit != that.accountLimit)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetCompanyId()) ? 131071 : 524287);
    if (isSetCompanyId())
      hashCode = hashCode * 8191 + companyId;

    hashCode = hashCode * 8191 + ((isSetLicence()) ? 131071 : 524287);
    if (isSetLicence())
      hashCode = hashCode * 8191 + licence.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
    if (isSetCreateTime())
      hashCode = hashCode * 8191 + createTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
    if (isSetUpdateTime())
      hashCode = hashCode * 8191 + updateTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetOperate()) ? 131071 : 524287);
    if (isSetOperate())
      hashCode = hashCode * 8191 + operate;

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status;

    hashCode = hashCode * 8191 + ((isSetMessage()) ? 131071 : 524287);
    if (isSetMessage())
      hashCode = hashCode * 8191 + message.hashCode();

    hashCode = hashCode * 8191 + ((isSetChildCompanyId()) ? 131071 : 524287);
    if (isSetChildCompanyId())
      hashCode = hashCode * 8191 + childCompanyId.hashCode();

    hashCode = hashCode * 8191 + ((isSetMigrateTime()) ? 131071 : 524287);
    if (isSetMigrateTime())
      hashCode = hashCode * 8191 + migrateTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetAccountLimit()) ? 131071 : 524287);
    if (isSetAccountLimit())
      hashCode = hashCode * 8191 + accountLimit;

    return hashCode;
  }

  @Override
  public int compareTo(HrSuperaccountApplyDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLicence()).compareTo(other.isSetLicence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLicence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.licence, other.licence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperate()).compareTo(other.isSetOperate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operate, other.operate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChildCompanyId()).compareTo(other.isSetChildCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.childCompanyId, other.childCompanyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMigrateTime()).compareTo(other.isSetMigrateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMigrateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.migrateTime, other.migrateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountLimit()).compareTo(other.isSetAccountLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountLimit, other.accountLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HrSuperaccountApplyDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetCompanyId()) {
      if (!first) sb.append(", ");
      sb.append("companyId:");
      sb.append(this.companyId);
      first = false;
    }
    if (isSetLicence()) {
      if (!first) sb.append(", ");
      sb.append("licence:");
      if (this.licence == null) {
        sb.append("null");
      } else {
        sb.append(this.licence);
      }
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
    }
    if (isSetOperate()) {
      if (!first) sb.append(", ");
      sb.append("operate:");
      sb.append(this.operate);
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
    }
    if (isSetMessage()) {
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
    }
    if (isSetChildCompanyId()) {
      if (!first) sb.append(", ");
      sb.append("childCompanyId:");
      if (this.childCompanyId == null) {
        sb.append("null");
      } else {
        sb.append(this.childCompanyId);
      }
      first = false;
    }
    if (isSetMigrateTime()) {
      if (!first) sb.append(", ");
      sb.append("migrateTime:");
      if (this.migrateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.migrateTime);
      }
      first = false;
    }
    if (isSetAccountLimit()) {
      if (!first) sb.append(", ");
      sb.append("accountLimit:");
      sb.append(this.accountLimit);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HrSuperaccountApplyDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrSuperaccountApplyDOStandardScheme getScheme() {
      return new HrSuperaccountApplyDOStandardScheme();
    }
  }

  private static class HrSuperaccountApplyDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<HrSuperaccountApplyDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HrSuperaccountApplyDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.companyId = iprot.readI32();
              struct.setCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LICENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.licence = iprot.readString();
              struct.setLicenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OPERATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operate = iprot.readI32();
              struct.setOperateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CHILD_COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.childCompanyId = iprot.readString();
              struct.setChildCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MIGRATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.migrateTime = iprot.readString();
              struct.setMigrateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ACCOUNT_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accountLimit = iprot.readI32();
              struct.setAccountLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HrSuperaccountApplyDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompanyId()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.companyId);
        oprot.writeFieldEnd();
      }
      if (struct.licence != null) {
        if (struct.isSetLicence()) {
          oprot.writeFieldBegin(LICENCE_FIELD_DESC);
          oprot.writeString(struct.licence);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateTime != null) {
        if (struct.isSetUpdateTime()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOperate()) {
        oprot.writeFieldBegin(OPERATE_FIELD_DESC);
        oprot.writeI32(struct.operate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatus()) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.message != null) {
        if (struct.isSetMessage()) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
      }
      if (struct.childCompanyId != null) {
        if (struct.isSetChildCompanyId()) {
          oprot.writeFieldBegin(CHILD_COMPANY_ID_FIELD_DESC);
          oprot.writeString(struct.childCompanyId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.migrateTime != null) {
        if (struct.isSetMigrateTime()) {
          oprot.writeFieldBegin(MIGRATE_TIME_FIELD_DESC);
          oprot.writeString(struct.migrateTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAccountLimit()) {
        oprot.writeFieldBegin(ACCOUNT_LIMIT_FIELD_DESC);
        oprot.writeI32(struct.accountLimit);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HrSuperaccountApplyDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrSuperaccountApplyDOTupleScheme getScheme() {
      return new HrSuperaccountApplyDOTupleScheme();
    }
  }

  private static class HrSuperaccountApplyDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<HrSuperaccountApplyDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HrSuperaccountApplyDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCompanyId()) {
        optionals.set(1);
      }
      if (struct.isSetLicence()) {
        optionals.set(2);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(3);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(4);
      }
      if (struct.isSetOperate()) {
        optionals.set(5);
      }
      if (struct.isSetStatus()) {
        optionals.set(6);
      }
      if (struct.isSetMessage()) {
        optionals.set(7);
      }
      if (struct.isSetChildCompanyId()) {
        optionals.set(8);
      }
      if (struct.isSetMigrateTime()) {
        optionals.set(9);
      }
      if (struct.isSetAccountLimit()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetCompanyId()) {
        oprot.writeI32(struct.companyId);
      }
      if (struct.isSetLicence()) {
        oprot.writeString(struct.licence);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
      if (struct.isSetOperate()) {
        oprot.writeI32(struct.operate);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
      if (struct.isSetChildCompanyId()) {
        oprot.writeString(struct.childCompanyId);
      }
      if (struct.isSetMigrateTime()) {
        oprot.writeString(struct.migrateTime);
      }
      if (struct.isSetAccountLimit()) {
        oprot.writeI32(struct.accountLimit);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HrSuperaccountApplyDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.companyId = iprot.readI32();
        struct.setCompanyIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.licence = iprot.readString();
        struct.setLicenceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.operate = iprot.readI32();
        struct.setOperateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(8)) {
        struct.childCompanyId = iprot.readString();
        struct.setChildCompanyIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.migrateTime = iprot.readString();
        struct.setMigrateTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.accountLimit = iprot.readI32();
        struct.setAccountLimitIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

