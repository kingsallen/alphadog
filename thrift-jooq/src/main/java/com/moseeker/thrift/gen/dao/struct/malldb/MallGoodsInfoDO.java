/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.malldb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-10-18")
public class MallGoodsInfoDO implements org.apache.thrift.TBase<MallGoodsInfoDO, MallGoodsInfoDO._Fields>, java.io.Serializable, Cloneable, Comparable<MallGoodsInfoDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MallGoodsInfoDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PIC_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("pic_url", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CREDIT_FIELD_DESC = new org.apache.thrift.protocol.TField("credit", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField STOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("stock", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField EXCHANGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("exchange_num", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField EXCHANGE_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("exchange_order", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("detail", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.BYTE, (short)10);
  private static final org.apache.thrift.protocol.TField RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("rule", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("create_time", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("update_time", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MallGoodsInfoDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MallGoodsInfoDOTupleSchemeFactory();

  public int id; // optional
  public int company_id; // optional
  public String title; // optional
  public String pic_url; // optional
  public int credit; // optional
  public int stock; // optional
  public int exchange_num; // optional
  public int exchange_order; // optional
  public String detail; // optional
  public byte state; // optional
  public String rule; // optional
  public String create_time; // optional
  public String update_time; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    COMPANY_ID((short)2, "company_id"),
    TITLE((short)3, "title"),
    PIC_URL((short)4, "pic_url"),
    CREDIT((short)5, "credit"),
    STOCK((short)6, "stock"),
    EXCHANGE_NUM((short)7, "exchange_num"),
    EXCHANGE_ORDER((short)8, "exchange_order"),
    DETAIL((short)9, "detail"),
    STATE((short)10, "state"),
    RULE((short)11, "rule"),
    CREATE_TIME((short)12, "create_time"),
    UPDATE_TIME((short)13, "update_time");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // COMPANY_ID
          return COMPANY_ID;
        case 3: // TITLE
          return TITLE;
        case 4: // PIC_URL
          return PIC_URL;
        case 5: // CREDIT
          return CREDIT;
        case 6: // STOCK
          return STOCK;
        case 7: // EXCHANGE_NUM
          return EXCHANGE_NUM;
        case 8: // EXCHANGE_ORDER
          return EXCHANGE_ORDER;
        case 9: // DETAIL
          return DETAIL;
        case 10: // STATE
          return STATE;
        case 11: // RULE
          return RULE;
        case 12: // CREATE_TIME
          return CREATE_TIME;
        case 13: // UPDATE_TIME
          return UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __COMPANY_ID_ISSET_ID = 1;
  private static final int __CREDIT_ISSET_ID = 2;
  private static final int __STOCK_ISSET_ID = 3;
  private static final int __EXCHANGE_NUM_ISSET_ID = 4;
  private static final int __EXCHANGE_ORDER_ISSET_ID = 5;
  private static final int __STATE_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.COMPANY_ID,_Fields.TITLE,_Fields.PIC_URL,_Fields.CREDIT,_Fields.STOCK,_Fields.EXCHANGE_NUM,_Fields.EXCHANGE_ORDER,_Fields.DETAIL,_Fields.STATE,_Fields.RULE,_Fields.CREATE_TIME,_Fields.UPDATE_TIME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PIC_URL, new org.apache.thrift.meta_data.FieldMetaData("pic_url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREDIT, new org.apache.thrift.meta_data.FieldMetaData("credit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STOCK, new org.apache.thrift.meta_data.FieldMetaData("stock", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXCHANGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("exchange_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXCHANGE_ORDER, new org.apache.thrift.meta_data.FieldMetaData("exchange_order", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DETAIL, new org.apache.thrift.meta_data.FieldMetaData("detail", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.RULE, new org.apache.thrift.meta_data.FieldMetaData("rule", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("create_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("update_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MallGoodsInfoDO.class, metaDataMap);
  }

  public MallGoodsInfoDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MallGoodsInfoDO(MallGoodsInfoDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.company_id = other.company_id;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetPic_url()) {
      this.pic_url = other.pic_url;
    }
    this.credit = other.credit;
    this.stock = other.stock;
    this.exchange_num = other.exchange_num;
    this.exchange_order = other.exchange_order;
    if (other.isSetDetail()) {
      this.detail = other.detail;
    }
    this.state = other.state;
    if (other.isSetRule()) {
      this.rule = other.rule;
    }
    if (other.isSetCreate_time()) {
      this.create_time = other.create_time;
    }
    if (other.isSetUpdate_time()) {
      this.update_time = other.update_time;
    }
  }

  public MallGoodsInfoDO deepCopy() {
    return new MallGoodsInfoDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setCompany_idIsSet(false);
    this.company_id = 0;
    this.title = null;
    this.pic_url = null;
    setCreditIsSet(false);
    this.credit = 0;
    setStockIsSet(false);
    this.stock = 0;
    setExchange_numIsSet(false);
    this.exchange_num = 0;
    setExchange_orderIsSet(false);
    this.exchange_order = 0;
    this.detail = null;
    setStateIsSet(false);
    this.state = 0;
    this.rule = null;
    this.create_time = null;
    this.update_time = null;
  }

  public int getId() {
    return this.id;
  }

  public MallGoodsInfoDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getCompany_id() {
    return this.company_id;
  }

  public MallGoodsInfoDO setCompany_id(int company_id) {
    this.company_id = company_id;
    setCompany_idIsSet(true);
    return this;
  }

  public void unsetCompany_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
  }

  /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
  public boolean isSetCompany_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
  }

  public void setCompany_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public MallGoodsInfoDO setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getPic_url() {
    return this.pic_url;
  }

  public MallGoodsInfoDO setPic_url(String pic_url) {
    this.pic_url = pic_url;
    return this;
  }

  public void unsetPic_url() {
    this.pic_url = null;
  }

  /** Returns true if field pic_url is set (has been assigned a value) and false otherwise */
  public boolean isSetPic_url() {
    return this.pic_url != null;
  }

  public void setPic_urlIsSet(boolean value) {
    if (!value) {
      this.pic_url = null;
    }
  }

  public int getCredit() {
    return this.credit;
  }

  public MallGoodsInfoDO setCredit(int credit) {
    this.credit = credit;
    setCreditIsSet(true);
    return this;
  }

  public void unsetCredit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREDIT_ISSET_ID);
  }

  /** Returns true if field credit is set (has been assigned a value) and false otherwise */
  public boolean isSetCredit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREDIT_ISSET_ID);
  }

  public void setCreditIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREDIT_ISSET_ID, value);
  }

  public int getStock() {
    return this.stock;
  }

  public MallGoodsInfoDO setStock(int stock) {
    this.stock = stock;
    setStockIsSet(true);
    return this;
  }

  public void unsetStock() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STOCK_ISSET_ID);
  }

  /** Returns true if field stock is set (has been assigned a value) and false otherwise */
  public boolean isSetStock() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STOCK_ISSET_ID);
  }

  public void setStockIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STOCK_ISSET_ID, value);
  }

  public int getExchange_num() {
    return this.exchange_num;
  }

  public MallGoodsInfoDO setExchange_num(int exchange_num) {
    this.exchange_num = exchange_num;
    setExchange_numIsSet(true);
    return this;
  }

  public void unsetExchange_num() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXCHANGE_NUM_ISSET_ID);
  }

  /** Returns true if field exchange_num is set (has been assigned a value) and false otherwise */
  public boolean isSetExchange_num() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXCHANGE_NUM_ISSET_ID);
  }

  public void setExchange_numIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXCHANGE_NUM_ISSET_ID, value);
  }

  public int getExchange_order() {
    return this.exchange_order;
  }

  public MallGoodsInfoDO setExchange_order(int exchange_order) {
    this.exchange_order = exchange_order;
    setExchange_orderIsSet(true);
    return this;
  }

  public void unsetExchange_order() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXCHANGE_ORDER_ISSET_ID);
  }

  /** Returns true if field exchange_order is set (has been assigned a value) and false otherwise */
  public boolean isSetExchange_order() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXCHANGE_ORDER_ISSET_ID);
  }

  public void setExchange_orderIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXCHANGE_ORDER_ISSET_ID, value);
  }

  public String getDetail() {
    return this.detail;
  }

  public MallGoodsInfoDO setDetail(String detail) {
    this.detail = detail;
    return this;
  }

  public void unsetDetail() {
    this.detail = null;
  }

  /** Returns true if field detail is set (has been assigned a value) and false otherwise */
  public boolean isSetDetail() {
    return this.detail != null;
  }

  public void setDetailIsSet(boolean value) {
    if (!value) {
      this.detail = null;
    }
  }

  public byte getState() {
    return this.state;
  }

  public MallGoodsInfoDO setState(byte state) {
    this.state = state;
    setStateIsSet(true);
    return this;
  }

  public void unsetState() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  public void setStateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
  }

  public String getRule() {
    return this.rule;
  }

  public MallGoodsInfoDO setRule(String rule) {
    this.rule = rule;
    return this;
  }

  public void unsetRule() {
    this.rule = null;
  }

  /** Returns true if field rule is set (has been assigned a value) and false otherwise */
  public boolean isSetRule() {
    return this.rule != null;
  }

  public void setRuleIsSet(boolean value) {
    if (!value) {
      this.rule = null;
    }
  }

  public String getCreate_time() {
    return this.create_time;
  }

  public MallGoodsInfoDO setCreate_time(String create_time) {
    this.create_time = create_time;
    return this;
  }

  public void unsetCreate_time() {
    this.create_time = null;
  }

  /** Returns true if field create_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_time() {
    return this.create_time != null;
  }

  public void setCreate_timeIsSet(boolean value) {
    if (!value) {
      this.create_time = null;
    }
  }

  public String getUpdate_time() {
    return this.update_time;
  }

  public MallGoodsInfoDO setUpdate_time(String update_time) {
    this.update_time = update_time;
    return this;
  }

  public void unsetUpdate_time() {
    this.update_time = null;
  }

  /** Returns true if field update_time is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdate_time() {
    return this.update_time != null;
  }

  public void setUpdate_timeIsSet(boolean value) {
    if (!value) {
      this.update_time = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompany_id();
      } else {
        setCompany_id((Integer)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case PIC_URL:
      if (value == null) {
        unsetPic_url();
      } else {
        setPic_url((String)value);
      }
      break;

    case CREDIT:
      if (value == null) {
        unsetCredit();
      } else {
        setCredit((Integer)value);
      }
      break;

    case STOCK:
      if (value == null) {
        unsetStock();
      } else {
        setStock((Integer)value);
      }
      break;

    case EXCHANGE_NUM:
      if (value == null) {
        unsetExchange_num();
      } else {
        setExchange_num((Integer)value);
      }
      break;

    case EXCHANGE_ORDER:
      if (value == null) {
        unsetExchange_order();
      } else {
        setExchange_order((Integer)value);
      }
      break;

    case DETAIL:
      if (value == null) {
        unsetDetail();
      } else {
        setDetail((String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((Byte)value);
      }
      break;

    case RULE:
      if (value == null) {
        unsetRule();
      } else {
        setRule((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreate_time();
      } else {
        setCreate_time((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdate_time();
      } else {
        setUpdate_time((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case COMPANY_ID:
      return getCompany_id();

    case TITLE:
      return getTitle();

    case PIC_URL:
      return getPic_url();

    case CREDIT:
      return getCredit();

    case STOCK:
      return getStock();

    case EXCHANGE_NUM:
      return getExchange_num();

    case EXCHANGE_ORDER:
      return getExchange_order();

    case DETAIL:
      return getDetail();

    case STATE:
      return getState();

    case RULE:
      return getRule();

    case CREATE_TIME:
      return getCreate_time();

    case UPDATE_TIME:
      return getUpdate_time();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case COMPANY_ID:
      return isSetCompany_id();
    case TITLE:
      return isSetTitle();
    case PIC_URL:
      return isSetPic_url();
    case CREDIT:
      return isSetCredit();
    case STOCK:
      return isSetStock();
    case EXCHANGE_NUM:
      return isSetExchange_num();
    case EXCHANGE_ORDER:
      return isSetExchange_order();
    case DETAIL:
      return isSetDetail();
    case STATE:
      return isSetState();
    case RULE:
      return isSetRule();
    case CREATE_TIME:
      return isSetCreate_time();
    case UPDATE_TIME:
      return isSetUpdate_time();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MallGoodsInfoDO)
      return this.equals((MallGoodsInfoDO)that);
    return false;
  }

  public boolean equals(MallGoodsInfoDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_company_id = true && this.isSetCompany_id();
    boolean that_present_company_id = true && that.isSetCompany_id();
    if (this_present_company_id || that_present_company_id) {
      if (!(this_present_company_id && that_present_company_id))
        return false;
      if (this.company_id != that.company_id)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_pic_url = true && this.isSetPic_url();
    boolean that_present_pic_url = true && that.isSetPic_url();
    if (this_present_pic_url || that_present_pic_url) {
      if (!(this_present_pic_url && that_present_pic_url))
        return false;
      if (!this.pic_url.equals(that.pic_url))
        return false;
    }

    boolean this_present_credit = true && this.isSetCredit();
    boolean that_present_credit = true && that.isSetCredit();
    if (this_present_credit || that_present_credit) {
      if (!(this_present_credit && that_present_credit))
        return false;
      if (this.credit != that.credit)
        return false;
    }

    boolean this_present_stock = true && this.isSetStock();
    boolean that_present_stock = true && that.isSetStock();
    if (this_present_stock || that_present_stock) {
      if (!(this_present_stock && that_present_stock))
        return false;
      if (this.stock != that.stock)
        return false;
    }

    boolean this_present_exchange_num = true && this.isSetExchange_num();
    boolean that_present_exchange_num = true && that.isSetExchange_num();
    if (this_present_exchange_num || that_present_exchange_num) {
      if (!(this_present_exchange_num && that_present_exchange_num))
        return false;
      if (this.exchange_num != that.exchange_num)
        return false;
    }

    boolean this_present_exchange_order = true && this.isSetExchange_order();
    boolean that_present_exchange_order = true && that.isSetExchange_order();
    if (this_present_exchange_order || that_present_exchange_order) {
      if (!(this_present_exchange_order && that_present_exchange_order))
        return false;
      if (this.exchange_order != that.exchange_order)
        return false;
    }

    boolean this_present_detail = true && this.isSetDetail();
    boolean that_present_detail = true && that.isSetDetail();
    if (this_present_detail || that_present_detail) {
      if (!(this_present_detail && that_present_detail))
        return false;
      if (!this.detail.equals(that.detail))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (this.state != that.state)
        return false;
    }

    boolean this_present_rule = true && this.isSetRule();
    boolean that_present_rule = true && that.isSetRule();
    if (this_present_rule || that_present_rule) {
      if (!(this_present_rule && that_present_rule))
        return false;
      if (!this.rule.equals(that.rule))
        return false;
    }

    boolean this_present_create_time = true && this.isSetCreate_time();
    boolean that_present_create_time = true && that.isSetCreate_time();
    if (this_present_create_time || that_present_create_time) {
      if (!(this_present_create_time && that_present_create_time))
        return false;
      if (!this.create_time.equals(that.create_time))
        return false;
    }

    boolean this_present_update_time = true && this.isSetUpdate_time();
    boolean that_present_update_time = true && that.isSetUpdate_time();
    if (this_present_update_time || that_present_update_time) {
      if (!(this_present_update_time && that_present_update_time))
        return false;
      if (!this.update_time.equals(that.update_time))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetCompany_id()) ? 131071 : 524287);
    if (isSetCompany_id())
      hashCode = hashCode * 8191 + company_id;

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + ((isSetPic_url()) ? 131071 : 524287);
    if (isSetPic_url())
      hashCode = hashCode * 8191 + pic_url.hashCode();

    hashCode = hashCode * 8191 + ((isSetCredit()) ? 131071 : 524287);
    if (isSetCredit())
      hashCode = hashCode * 8191 + credit;

    hashCode = hashCode * 8191 + ((isSetStock()) ? 131071 : 524287);
    if (isSetStock())
      hashCode = hashCode * 8191 + stock;

    hashCode = hashCode * 8191 + ((isSetExchange_num()) ? 131071 : 524287);
    if (isSetExchange_num())
      hashCode = hashCode * 8191 + exchange_num;

    hashCode = hashCode * 8191 + ((isSetExchange_order()) ? 131071 : 524287);
    if (isSetExchange_order())
      hashCode = hashCode * 8191 + exchange_order;

    hashCode = hashCode * 8191 + ((isSetDetail()) ? 131071 : 524287);
    if (isSetDetail())
      hashCode = hashCode * 8191 + detail.hashCode();

    hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
    if (isSetState())
      hashCode = hashCode * 8191 + (int) (state);

    hashCode = hashCode * 8191 + ((isSetRule()) ? 131071 : 524287);
    if (isSetRule())
      hashCode = hashCode * 8191 + rule.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreate_time()) ? 131071 : 524287);
    if (isSetCreate_time())
      hashCode = hashCode * 8191 + create_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdate_time()) ? 131071 : 524287);
    if (isSetUpdate_time())
      hashCode = hashCode * 8191 + update_time.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MallGoodsInfoDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompany_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPic_url()).compareTo(other.isSetPic_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPic_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pic_url, other.pic_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCredit()).compareTo(other.isSetCredit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCredit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.credit, other.credit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStock()).compareTo(other.isSetStock());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStock()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stock, other.stock);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchange_num()).compareTo(other.isSetExchange_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchange_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchange_num, other.exchange_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchange_order()).compareTo(other.isSetExchange_order());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchange_order()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchange_order, other.exchange_order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetail()).compareTo(other.isSetDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detail, other.detail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRule()).compareTo(other.isSetRule());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRule()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rule, other.rule);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreate_time()).compareTo(other.isSetCreate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_time, other.create_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdate_time()).compareTo(other.isSetUpdate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.update_time, other.update_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MallGoodsInfoDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetCompany_id()) {
      if (!first) sb.append(", ");
      sb.append("company_id:");
      sb.append(this.company_id);
      first = false;
    }
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetPic_url()) {
      if (!first) sb.append(", ");
      sb.append("pic_url:");
      if (this.pic_url == null) {
        sb.append("null");
      } else {
        sb.append(this.pic_url);
      }
      first = false;
    }
    if (isSetCredit()) {
      if (!first) sb.append(", ");
      sb.append("credit:");
      sb.append(this.credit);
      first = false;
    }
    if (isSetStock()) {
      if (!first) sb.append(", ");
      sb.append("stock:");
      sb.append(this.stock);
      first = false;
    }
    if (isSetExchange_num()) {
      if (!first) sb.append(", ");
      sb.append("exchange_num:");
      sb.append(this.exchange_num);
      first = false;
    }
    if (isSetExchange_order()) {
      if (!first) sb.append(", ");
      sb.append("exchange_order:");
      sb.append(this.exchange_order);
      first = false;
    }
    if (isSetDetail()) {
      if (!first) sb.append(", ");
      sb.append("detail:");
      if (this.detail == null) {
        sb.append("null");
      } else {
        sb.append(this.detail);
      }
      first = false;
    }
    if (isSetState()) {
      if (!first) sb.append(", ");
      sb.append("state:");
      sb.append(this.state);
      first = false;
    }
    if (isSetRule()) {
      if (!first) sb.append(", ");
      sb.append("rule:");
      if (this.rule == null) {
        sb.append("null");
      } else {
        sb.append(this.rule);
      }
      first = false;
    }
    if (isSetCreate_time()) {
      if (!first) sb.append(", ");
      sb.append("create_time:");
      if (this.create_time == null) {
        sb.append("null");
      } else {
        sb.append(this.create_time);
      }
      first = false;
    }
    if (isSetUpdate_time()) {
      if (!first) sb.append(", ");
      sb.append("update_time:");
      if (this.update_time == null) {
        sb.append("null");
      } else {
        sb.append(this.update_time);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MallGoodsInfoDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MallGoodsInfoDOStandardScheme getScheme() {
      return new MallGoodsInfoDOStandardScheme();
    }
  }

  private static class MallGoodsInfoDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<MallGoodsInfoDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MallGoodsInfoDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.company_id = iprot.readI32();
              struct.setCompany_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PIC_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pic_url = iprot.readString();
              struct.setPic_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CREDIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.credit = iprot.readI32();
              struct.setCreditIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STOCK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stock = iprot.readI32();
              struct.setStockIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EXCHANGE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.exchange_num = iprot.readI32();
              struct.setExchange_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXCHANGE_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.exchange_order = iprot.readI32();
              struct.setExchange_orderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.detail = iprot.readString();
              struct.setDetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.state = iprot.readByte();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // RULE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rule = iprot.readString();
              struct.setRuleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.create_time = iprot.readString();
              struct.setCreate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.update_time = iprot.readString();
              struct.setUpdate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MallGoodsInfoDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompany_id()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.company_id);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pic_url != null) {
        if (struct.isSetPic_url()) {
          oprot.writeFieldBegin(PIC_URL_FIELD_DESC);
          oprot.writeString(struct.pic_url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCredit()) {
        oprot.writeFieldBegin(CREDIT_FIELD_DESC);
        oprot.writeI32(struct.credit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStock()) {
        oprot.writeFieldBegin(STOCK_FIELD_DESC);
        oprot.writeI32(struct.stock);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExchange_num()) {
        oprot.writeFieldBegin(EXCHANGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.exchange_num);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExchange_order()) {
        oprot.writeFieldBegin(EXCHANGE_ORDER_FIELD_DESC);
        oprot.writeI32(struct.exchange_order);
        oprot.writeFieldEnd();
      }
      if (struct.detail != null) {
        if (struct.isSetDetail()) {
          oprot.writeFieldBegin(DETAIL_FIELD_DESC);
          oprot.writeString(struct.detail);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetState()) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeByte(struct.state);
        oprot.writeFieldEnd();
      }
      if (struct.rule != null) {
        if (struct.isSetRule()) {
          oprot.writeFieldBegin(RULE_FIELD_DESC);
          oprot.writeString(struct.rule);
          oprot.writeFieldEnd();
        }
      }
      if (struct.create_time != null) {
        if (struct.isSetCreate_time()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.create_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.update_time != null) {
        if (struct.isSetUpdate_time()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.update_time);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MallGoodsInfoDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MallGoodsInfoDOTupleScheme getScheme() {
      return new MallGoodsInfoDOTupleScheme();
    }
  }

  private static class MallGoodsInfoDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<MallGoodsInfoDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MallGoodsInfoDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCompany_id()) {
        optionals.set(1);
      }
      if (struct.isSetTitle()) {
        optionals.set(2);
      }
      if (struct.isSetPic_url()) {
        optionals.set(3);
      }
      if (struct.isSetCredit()) {
        optionals.set(4);
      }
      if (struct.isSetStock()) {
        optionals.set(5);
      }
      if (struct.isSetExchange_num()) {
        optionals.set(6);
      }
      if (struct.isSetExchange_order()) {
        optionals.set(7);
      }
      if (struct.isSetDetail()) {
        optionals.set(8);
      }
      if (struct.isSetState()) {
        optionals.set(9);
      }
      if (struct.isSetRule()) {
        optionals.set(10);
      }
      if (struct.isSetCreate_time()) {
        optionals.set(11);
      }
      if (struct.isSetUpdate_time()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetCompany_id()) {
        oprot.writeI32(struct.company_id);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetPic_url()) {
        oprot.writeString(struct.pic_url);
      }
      if (struct.isSetCredit()) {
        oprot.writeI32(struct.credit);
      }
      if (struct.isSetStock()) {
        oprot.writeI32(struct.stock);
      }
      if (struct.isSetExchange_num()) {
        oprot.writeI32(struct.exchange_num);
      }
      if (struct.isSetExchange_order()) {
        oprot.writeI32(struct.exchange_order);
      }
      if (struct.isSetDetail()) {
        oprot.writeString(struct.detail);
      }
      if (struct.isSetState()) {
        oprot.writeByte(struct.state);
      }
      if (struct.isSetRule()) {
        oprot.writeString(struct.rule);
      }
      if (struct.isSetCreate_time()) {
        oprot.writeString(struct.create_time);
      }
      if (struct.isSetUpdate_time()) {
        oprot.writeString(struct.update_time);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MallGoodsInfoDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.company_id = iprot.readI32();
        struct.setCompany_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pic_url = iprot.readString();
        struct.setPic_urlIsSet(true);
      }
      if (incoming.get(4)) {
        struct.credit = iprot.readI32();
        struct.setCreditIsSet(true);
      }
      if (incoming.get(5)) {
        struct.stock = iprot.readI32();
        struct.setStockIsSet(true);
      }
      if (incoming.get(6)) {
        struct.exchange_num = iprot.readI32();
        struct.setExchange_numIsSet(true);
      }
      if (incoming.get(7)) {
        struct.exchange_order = iprot.readI32();
        struct.setExchange_orderIsSet(true);
      }
      if (incoming.get(8)) {
        struct.detail = iprot.readString();
        struct.setDetailIsSet(true);
      }
      if (incoming.get(9)) {
        struct.state = iprot.readByte();
        struct.setStateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.rule = iprot.readString();
        struct.setRuleIsSet(true);
      }
      if (incoming.get(11)) {
        struct.create_time = iprot.readString();
        struct.setCreate_timeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.update_time = iprot.readString();
        struct.setUpdate_timeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

