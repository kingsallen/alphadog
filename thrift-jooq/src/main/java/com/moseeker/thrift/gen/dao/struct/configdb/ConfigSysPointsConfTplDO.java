/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.configdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-04")
public class ConfigSysPointsConfTplDO implements org.apache.thrift.TBase<ConfigSysPointsConfTplDO, ConfigSysPointsConfTplDO._Fields>, java.io.Serializable, Cloneable, Comparable<ConfigSysPointsConfTplDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ConfigSysPointsConfTplDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField AWARD_FIELD_DESC = new org.apache.thrift.protocol.TField("award", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DISABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("disable", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("typeId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("tag", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField IS_INIT_AWARD_FIELD_DESC = new org.apache.thrift.protocol.TField("isInitAward", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField RECRUIT_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("recruitOrder", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField APPLIER_VIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("applierView", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ConfigSysPointsConfTplDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ConfigSysPointsConfTplDOTupleSchemeFactory();

  public int id; // optional
  public String status; // optional
  public int award; // optional
  public String description; // optional
  public int disable; // optional
  public int priority; // optional
  public int typeId; // optional
  public double tag; // optional
  public double isInitAward; // optional
  public int recruitOrder; // optional
  public String applierView; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    STATUS((short)2, "status"),
    AWARD((short)3, "award"),
    DESCRIPTION((short)4, "description"),
    DISABLE((short)5, "disable"),
    PRIORITY((short)6, "priority"),
    TYPE_ID((short)7, "typeId"),
    TAG((short)8, "tag"),
    IS_INIT_AWARD((short)9, "isInitAward"),
    RECRUIT_ORDER((short)10, "recruitOrder"),
    APPLIER_VIEW((short)11, "applierView");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // STATUS
          return STATUS;
        case 3: // AWARD
          return AWARD;
        case 4: // DESCRIPTION
          return DESCRIPTION;
        case 5: // DISABLE
          return DISABLE;
        case 6: // PRIORITY
          return PRIORITY;
        case 7: // TYPE_ID
          return TYPE_ID;
        case 8: // TAG
          return TAG;
        case 9: // IS_INIT_AWARD
          return IS_INIT_AWARD;
        case 10: // RECRUIT_ORDER
          return RECRUIT_ORDER;
        case 11: // APPLIER_VIEW
          return APPLIER_VIEW;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __AWARD_ISSET_ID = 1;
  private static final int __DISABLE_ISSET_ID = 2;
  private static final int __PRIORITY_ISSET_ID = 3;
  private static final int __TYPEID_ISSET_ID = 4;
  private static final int __TAG_ISSET_ID = 5;
  private static final int __ISINITAWARD_ISSET_ID = 6;
  private static final int __RECRUITORDER_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.STATUS,_Fields.AWARD,_Fields.DESCRIPTION,_Fields.DISABLE,_Fields.PRIORITY,_Fields.TYPE_ID,_Fields.TAG,_Fields.IS_INIT_AWARD,_Fields.RECRUIT_ORDER,_Fields.APPLIER_VIEW};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AWARD, new org.apache.thrift.meta_data.FieldMetaData("award", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISABLE, new org.apache.thrift.meta_data.FieldMetaData("disable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("typeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TAG, new org.apache.thrift.meta_data.FieldMetaData("tag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IS_INIT_AWARD, new org.apache.thrift.meta_data.FieldMetaData("isInitAward", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECRUIT_ORDER, new org.apache.thrift.meta_data.FieldMetaData("recruitOrder", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPLIER_VIEW, new org.apache.thrift.meta_data.FieldMetaData("applierView", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ConfigSysPointsConfTplDO.class, metaDataMap);
  }

  public ConfigSysPointsConfTplDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ConfigSysPointsConfTplDO(ConfigSysPointsConfTplDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    this.award = other.award;
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    this.disable = other.disable;
    this.priority = other.priority;
    this.typeId = other.typeId;
    this.tag = other.tag;
    this.isInitAward = other.isInitAward;
    this.recruitOrder = other.recruitOrder;
    if (other.isSetApplierView()) {
      this.applierView = other.applierView;
    }
  }

  public ConfigSysPointsConfTplDO deepCopy() {
    return new ConfigSysPointsConfTplDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.status = null;
    setAwardIsSet(false);
    this.award = 0;
    this.description = null;
    setDisableIsSet(false);
    this.disable = 0;
    setPriorityIsSet(false);
    this.priority = 0;
    setTypeIdIsSet(false);
    this.typeId = 0;
    setTagIsSet(false);
    this.tag = 0.0;
    setIsInitAwardIsSet(false);
    this.isInitAward = 0.0;
    setRecruitOrderIsSet(false);
    this.recruitOrder = 0;
    this.applierView = null;
  }

  public int getId() {
    return this.id;
  }

  public ConfigSysPointsConfTplDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getStatus() {
    return this.status;
  }

  public ConfigSysPointsConfTplDO setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getAward() {
    return this.award;
  }

  public ConfigSysPointsConfTplDO setAward(int award) {
    this.award = award;
    setAwardIsSet(true);
    return this;
  }

  public void unsetAward() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AWARD_ISSET_ID);
  }

  /** Returns true if field award is set (has been assigned a value) and false otherwise */
  public boolean isSetAward() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AWARD_ISSET_ID);
  }

  public void setAwardIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AWARD_ISSET_ID, value);
  }

  public String getDescription() {
    return this.description;
  }

  public ConfigSysPointsConfTplDO setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public int getDisable() {
    return this.disable;
  }

  public ConfigSysPointsConfTplDO setDisable(int disable) {
    this.disable = disable;
    setDisableIsSet(true);
    return this;
  }

  public void unsetDisable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISABLE_ISSET_ID);
  }

  /** Returns true if field disable is set (has been assigned a value) and false otherwise */
  public boolean isSetDisable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISABLE_ISSET_ID);
  }

  public void setDisableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISABLE_ISSET_ID, value);
  }

  public int getPriority() {
    return this.priority;
  }

  public ConfigSysPointsConfTplDO setPriority(int priority) {
    this.priority = priority;
    setPriorityIsSet(true);
    return this;
  }

  public void unsetPriority() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  public void setPriorityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
  }

  public int getTypeId() {
    return this.typeId;
  }

  public ConfigSysPointsConfTplDO setTypeId(int typeId) {
    this.typeId = typeId;
    setTypeIdIsSet(true);
    return this;
  }

  public void unsetTypeId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPEID_ISSET_ID);
  }

  /** Returns true if field typeId is set (has been assigned a value) and false otherwise */
  public boolean isSetTypeId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPEID_ISSET_ID);
  }

  public void setTypeIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPEID_ISSET_ID, value);
  }

  public double getTag() {
    return this.tag;
  }

  public ConfigSysPointsConfTplDO setTag(double tag) {
    this.tag = tag;
    setTagIsSet(true);
    return this;
  }

  public void unsetTag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TAG_ISSET_ID);
  }

  /** Returns true if field tag is set (has been assigned a value) and false otherwise */
  public boolean isSetTag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TAG_ISSET_ID);
  }

  public void setTagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TAG_ISSET_ID, value);
  }

  public double getIsInitAward() {
    return this.isInitAward;
  }

  public ConfigSysPointsConfTplDO setIsInitAward(double isInitAward) {
    this.isInitAward = isInitAward;
    setIsInitAwardIsSet(true);
    return this;
  }

  public void unsetIsInitAward() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISINITAWARD_ISSET_ID);
  }

  /** Returns true if field isInitAward is set (has been assigned a value) and false otherwise */
  public boolean isSetIsInitAward() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISINITAWARD_ISSET_ID);
  }

  public void setIsInitAwardIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISINITAWARD_ISSET_ID, value);
  }

  public int getRecruitOrder() {
    return this.recruitOrder;
  }

  public ConfigSysPointsConfTplDO setRecruitOrder(int recruitOrder) {
    this.recruitOrder = recruitOrder;
    setRecruitOrderIsSet(true);
    return this;
  }

  public void unsetRecruitOrder() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECRUITORDER_ISSET_ID);
  }

  /** Returns true if field recruitOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetRecruitOrder() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECRUITORDER_ISSET_ID);
  }

  public void setRecruitOrderIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECRUITORDER_ISSET_ID, value);
  }

  public String getApplierView() {
    return this.applierView;
  }

  public ConfigSysPointsConfTplDO setApplierView(String applierView) {
    this.applierView = applierView;
    return this;
  }

  public void unsetApplierView() {
    this.applierView = null;
  }

  /** Returns true if field applierView is set (has been assigned a value) and false otherwise */
  public boolean isSetApplierView() {
    return this.applierView != null;
  }

  public void setApplierViewIsSet(boolean value) {
    if (!value) {
      this.applierView = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case AWARD:
      if (value == null) {
        unsetAward();
      } else {
        setAward((Integer)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case DISABLE:
      if (value == null) {
        unsetDisable();
      } else {
        setDisable((Integer)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((Integer)value);
      }
      break;

    case TYPE_ID:
      if (value == null) {
        unsetTypeId();
      } else {
        setTypeId((Integer)value);
      }
      break;

    case TAG:
      if (value == null) {
        unsetTag();
      } else {
        setTag((Double)value);
      }
      break;

    case IS_INIT_AWARD:
      if (value == null) {
        unsetIsInitAward();
      } else {
        setIsInitAward((Double)value);
      }
      break;

    case RECRUIT_ORDER:
      if (value == null) {
        unsetRecruitOrder();
      } else {
        setRecruitOrder((Integer)value);
      }
      break;

    case APPLIER_VIEW:
      if (value == null) {
        unsetApplierView();
      } else {
        setApplierView((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case STATUS:
      return getStatus();

    case AWARD:
      return getAward();

    case DESCRIPTION:
      return getDescription();

    case DISABLE:
      return getDisable();

    case PRIORITY:
      return getPriority();

    case TYPE_ID:
      return getTypeId();

    case TAG:
      return getTag();

    case IS_INIT_AWARD:
      return getIsInitAward();

    case RECRUIT_ORDER:
      return getRecruitOrder();

    case APPLIER_VIEW:
      return getApplierView();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case STATUS:
      return isSetStatus();
    case AWARD:
      return isSetAward();
    case DESCRIPTION:
      return isSetDescription();
    case DISABLE:
      return isSetDisable();
    case PRIORITY:
      return isSetPriority();
    case TYPE_ID:
      return isSetTypeId();
    case TAG:
      return isSetTag();
    case IS_INIT_AWARD:
      return isSetIsInitAward();
    case RECRUIT_ORDER:
      return isSetRecruitOrder();
    case APPLIER_VIEW:
      return isSetApplierView();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ConfigSysPointsConfTplDO)
      return this.equals((ConfigSysPointsConfTplDO)that);
    return false;
  }

  public boolean equals(ConfigSysPointsConfTplDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_award = true && this.isSetAward();
    boolean that_present_award = true && that.isSetAward();
    if (this_present_award || that_present_award) {
      if (!(this_present_award && that_present_award))
        return false;
      if (this.award != that.award)
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_disable = true && this.isSetDisable();
    boolean that_present_disable = true && that.isSetDisable();
    if (this_present_disable || that_present_disable) {
      if (!(this_present_disable && that_present_disable))
        return false;
      if (this.disable != that.disable)
        return false;
    }

    boolean this_present_priority = true && this.isSetPriority();
    boolean that_present_priority = true && that.isSetPriority();
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (this.priority != that.priority)
        return false;
    }

    boolean this_present_typeId = true && this.isSetTypeId();
    boolean that_present_typeId = true && that.isSetTypeId();
    if (this_present_typeId || that_present_typeId) {
      if (!(this_present_typeId && that_present_typeId))
        return false;
      if (this.typeId != that.typeId)
        return false;
    }

    boolean this_present_tag = true && this.isSetTag();
    boolean that_present_tag = true && that.isSetTag();
    if (this_present_tag || that_present_tag) {
      if (!(this_present_tag && that_present_tag))
        return false;
      if (this.tag != that.tag)
        return false;
    }

    boolean this_present_isInitAward = true && this.isSetIsInitAward();
    boolean that_present_isInitAward = true && that.isSetIsInitAward();
    if (this_present_isInitAward || that_present_isInitAward) {
      if (!(this_present_isInitAward && that_present_isInitAward))
        return false;
      if (this.isInitAward != that.isInitAward)
        return false;
    }

    boolean this_present_recruitOrder = true && this.isSetRecruitOrder();
    boolean that_present_recruitOrder = true && that.isSetRecruitOrder();
    if (this_present_recruitOrder || that_present_recruitOrder) {
      if (!(this_present_recruitOrder && that_present_recruitOrder))
        return false;
      if (this.recruitOrder != that.recruitOrder)
        return false;
    }

    boolean this_present_applierView = true && this.isSetApplierView();
    boolean that_present_applierView = true && that.isSetApplierView();
    if (this_present_applierView || that_present_applierView) {
      if (!(this_present_applierView && that_present_applierView))
        return false;
      if (!this.applierView.equals(that.applierView))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.hashCode();

    hashCode = hashCode * 8191 + ((isSetAward()) ? 131071 : 524287);
    if (isSetAward())
      hashCode = hashCode * 8191 + award;

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + description.hashCode();

    hashCode = hashCode * 8191 + ((isSetDisable()) ? 131071 : 524287);
    if (isSetDisable())
      hashCode = hashCode * 8191 + disable;

    hashCode = hashCode * 8191 + ((isSetPriority()) ? 131071 : 524287);
    if (isSetPriority())
      hashCode = hashCode * 8191 + priority;

    hashCode = hashCode * 8191 + ((isSetTypeId()) ? 131071 : 524287);
    if (isSetTypeId())
      hashCode = hashCode * 8191 + typeId;

    hashCode = hashCode * 8191 + ((isSetTag()) ? 131071 : 524287);
    if (isSetTag())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(tag);

    hashCode = hashCode * 8191 + ((isSetIsInitAward()) ? 131071 : 524287);
    if (isSetIsInitAward())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(isInitAward);

    hashCode = hashCode * 8191 + ((isSetRecruitOrder()) ? 131071 : 524287);
    if (isSetRecruitOrder())
      hashCode = hashCode * 8191 + recruitOrder;

    hashCode = hashCode * 8191 + ((isSetApplierView()) ? 131071 : 524287);
    if (isSetApplierView())
      hashCode = hashCode * 8191 + applierView.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ConfigSysPointsConfTplDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAward()).compareTo(other.isSetAward());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAward()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.award, other.award);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisable()).compareTo(other.isSetDisable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable, other.disable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTypeId()).compareTo(other.isSetTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeId, other.typeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTag()).compareTo(other.isSetTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag, other.tag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsInitAward()).compareTo(other.isSetIsInitAward());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsInitAward()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isInitAward, other.isInitAward);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecruitOrder()).compareTo(other.isSetRecruitOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecruitOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recruitOrder, other.recruitOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplierView()).compareTo(other.isSetApplierView());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplierView()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applierView, other.applierView);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ConfigSysPointsConfTplDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetAward()) {
      if (!first) sb.append(", ");
      sb.append("award:");
      sb.append(this.award);
      first = false;
    }
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetDisable()) {
      if (!first) sb.append(", ");
      sb.append("disable:");
      sb.append(this.disable);
      first = false;
    }
    if (isSetPriority()) {
      if (!first) sb.append(", ");
      sb.append("priority:");
      sb.append(this.priority);
      first = false;
    }
    if (isSetTypeId()) {
      if (!first) sb.append(", ");
      sb.append("typeId:");
      sb.append(this.typeId);
      first = false;
    }
    if (isSetTag()) {
      if (!first) sb.append(", ");
      sb.append("tag:");
      sb.append(this.tag);
      first = false;
    }
    if (isSetIsInitAward()) {
      if (!first) sb.append(", ");
      sb.append("isInitAward:");
      sb.append(this.isInitAward);
      first = false;
    }
    if (isSetRecruitOrder()) {
      if (!first) sb.append(", ");
      sb.append("recruitOrder:");
      sb.append(this.recruitOrder);
      first = false;
    }
    if (isSetApplierView()) {
      if (!first) sb.append(", ");
      sb.append("applierView:");
      if (this.applierView == null) {
        sb.append("null");
      } else {
        sb.append(this.applierView);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ConfigSysPointsConfTplDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConfigSysPointsConfTplDOStandardScheme getScheme() {
      return new ConfigSysPointsConfTplDOStandardScheme();
    }
  }

  private static class ConfigSysPointsConfTplDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<ConfigSysPointsConfTplDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ConfigSysPointsConfTplDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AWARD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.award = iprot.readI32();
              struct.setAwardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DISABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.disable = iprot.readI32();
              struct.setDisableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priority = iprot.readI32();
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.typeId = iprot.readI32();
              struct.setTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TAG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tag = iprot.readDouble();
              struct.setTagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_INIT_AWARD
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.isInitAward = iprot.readDouble();
              struct.setIsInitAwardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RECRUIT_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recruitOrder = iprot.readI32();
              struct.setRecruitOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // APPLIER_VIEW
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applierView = iprot.readString();
              struct.setApplierViewIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ConfigSysPointsConfTplDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeString(struct.status);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAward()) {
        oprot.writeFieldBegin(AWARD_FIELD_DESC);
        oprot.writeI32(struct.award);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDisable()) {
        oprot.writeFieldBegin(DISABLE_FIELD_DESC);
        oprot.writeI32(struct.disable);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPriority()) {
        oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
        oprot.writeI32(struct.priority);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTypeId()) {
        oprot.writeFieldBegin(TYPE_ID_FIELD_DESC);
        oprot.writeI32(struct.typeId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTag()) {
        oprot.writeFieldBegin(TAG_FIELD_DESC);
        oprot.writeDouble(struct.tag);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsInitAward()) {
        oprot.writeFieldBegin(IS_INIT_AWARD_FIELD_DESC);
        oprot.writeDouble(struct.isInitAward);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRecruitOrder()) {
        oprot.writeFieldBegin(RECRUIT_ORDER_FIELD_DESC);
        oprot.writeI32(struct.recruitOrder);
        oprot.writeFieldEnd();
      }
      if (struct.applierView != null) {
        if (struct.isSetApplierView()) {
          oprot.writeFieldBegin(APPLIER_VIEW_FIELD_DESC);
          oprot.writeString(struct.applierView);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ConfigSysPointsConfTplDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConfigSysPointsConfTplDOTupleScheme getScheme() {
      return new ConfigSysPointsConfTplDOTupleScheme();
    }
  }

  private static class ConfigSysPointsConfTplDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<ConfigSysPointsConfTplDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ConfigSysPointsConfTplDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetStatus()) {
        optionals.set(1);
      }
      if (struct.isSetAward()) {
        optionals.set(2);
      }
      if (struct.isSetDescription()) {
        optionals.set(3);
      }
      if (struct.isSetDisable()) {
        optionals.set(4);
      }
      if (struct.isSetPriority()) {
        optionals.set(5);
      }
      if (struct.isSetTypeId()) {
        optionals.set(6);
      }
      if (struct.isSetTag()) {
        optionals.set(7);
      }
      if (struct.isSetIsInitAward()) {
        optionals.set(8);
      }
      if (struct.isSetRecruitOrder()) {
        optionals.set(9);
      }
      if (struct.isSetApplierView()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetAward()) {
        oprot.writeI32(struct.award);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetDisable()) {
        oprot.writeI32(struct.disable);
      }
      if (struct.isSetPriority()) {
        oprot.writeI32(struct.priority);
      }
      if (struct.isSetTypeId()) {
        oprot.writeI32(struct.typeId);
      }
      if (struct.isSetTag()) {
        oprot.writeDouble(struct.tag);
      }
      if (struct.isSetIsInitAward()) {
        oprot.writeDouble(struct.isInitAward);
      }
      if (struct.isSetRecruitOrder()) {
        oprot.writeI32(struct.recruitOrder);
      }
      if (struct.isSetApplierView()) {
        oprot.writeString(struct.applierView);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ConfigSysPointsConfTplDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(2)) {
        struct.award = iprot.readI32();
        struct.setAwardIsSet(true);
      }
      if (incoming.get(3)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.disable = iprot.readI32();
        struct.setDisableIsSet(true);
      }
      if (incoming.get(5)) {
        struct.priority = iprot.readI32();
        struct.setPriorityIsSet(true);
      }
      if (incoming.get(6)) {
        struct.typeId = iprot.readI32();
        struct.setTypeIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.tag = iprot.readDouble();
        struct.setTagIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isInitAward = iprot.readDouble();
        struct.setIsInitAwardIsSet(true);
      }
      if (incoming.get(9)) {
        struct.recruitOrder = iprot.readI32();
        struct.setRecruitOrderIsSet(true);
      }
      if (incoming.get(10)) {
        struct.applierView = iprot.readString();
        struct.setApplierViewIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

