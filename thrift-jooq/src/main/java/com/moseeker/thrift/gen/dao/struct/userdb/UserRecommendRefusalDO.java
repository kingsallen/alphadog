/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.userdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-08-15")
public class UserRecommendRefusalDO implements org.apache.thrift.TBase<UserRecommendRefusalDO, UserRecommendRefusalDO._Fields>, java.io.Serializable, Cloneable, Comparable<UserRecommendRefusalDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserRecommendRefusalDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField WECHAT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("wechatId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField REFUSE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("refuseTime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REFUSE_TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("refuseTimeout", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UserRecommendRefusalDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UserRecommendRefusalDOTupleSchemeFactory();

  public int id; // optional
  public int userId; // optional
  public int wechatId; // optional
  public String refuseTime; // optional
  public String refuseTimeout; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    USER_ID((short)2, "userId"),
    WECHAT_ID((short)3, "wechatId"),
    REFUSE_TIME((short)4, "refuseTime"),
    REFUSE_TIMEOUT((short)5, "refuseTimeout");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // USER_ID
          return USER_ID;
        case 3: // WECHAT_ID
          return WECHAT_ID;
        case 4: // REFUSE_TIME
          return REFUSE_TIME;
        case 5: // REFUSE_TIMEOUT
          return REFUSE_TIMEOUT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __WECHATID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.USER_ID,_Fields.WECHAT_ID,_Fields.REFUSE_TIME,_Fields.REFUSE_TIMEOUT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WECHAT_ID, new org.apache.thrift.meta_data.FieldMetaData("wechatId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REFUSE_TIME, new org.apache.thrift.meta_data.FieldMetaData("refuseTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUSE_TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("refuseTimeout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserRecommendRefusalDO.class, metaDataMap);
  }

  public UserRecommendRefusalDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserRecommendRefusalDO(UserRecommendRefusalDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.userId = other.userId;
    this.wechatId = other.wechatId;
    if (other.isSetRefuseTime()) {
      this.refuseTime = other.refuseTime;
    }
    if (other.isSetRefuseTimeout()) {
      this.refuseTimeout = other.refuseTimeout;
    }
  }

  public UserRecommendRefusalDO deepCopy() {
    return new UserRecommendRefusalDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    setWechatIdIsSet(false);
    this.wechatId = 0;
    this.refuseTime = null;
    this.refuseTimeout = null;
  }

  public int getId() {
    return this.id;
  }

  public UserRecommendRefusalDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public UserRecommendRefusalDO setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public int getWechatId() {
    return this.wechatId;
  }

  public UserRecommendRefusalDO setWechatId(int wechatId) {
    this.wechatId = wechatId;
    setWechatIdIsSet(true);
    return this;
  }

  public void unsetWechatId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WECHATID_ISSET_ID);
  }

  /** Returns true if field wechatId is set (has been assigned a value) and false otherwise */
  public boolean isSetWechatId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WECHATID_ISSET_ID);
  }

  public void setWechatIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WECHATID_ISSET_ID, value);
  }

  public String getRefuseTime() {
    return this.refuseTime;
  }

  public UserRecommendRefusalDO setRefuseTime(String refuseTime) {
    this.refuseTime = refuseTime;
    return this;
  }

  public void unsetRefuseTime() {
    this.refuseTime = null;
  }

  /** Returns true if field refuseTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRefuseTime() {
    return this.refuseTime != null;
  }

  public void setRefuseTimeIsSet(boolean value) {
    if (!value) {
      this.refuseTime = null;
    }
  }

  public String getRefuseTimeout() {
    return this.refuseTimeout;
  }

  public UserRecommendRefusalDO setRefuseTimeout(String refuseTimeout) {
    this.refuseTimeout = refuseTimeout;
    return this;
  }

  public void unsetRefuseTimeout() {
    this.refuseTimeout = null;
  }

  /** Returns true if field refuseTimeout is set (has been assigned a value) and false otherwise */
  public boolean isSetRefuseTimeout() {
    return this.refuseTimeout != null;
  }

  public void setRefuseTimeoutIsSet(boolean value) {
    if (!value) {
      this.refuseTimeout = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case WECHAT_ID:
      if (value == null) {
        unsetWechatId();
      } else {
        setWechatId((Integer)value);
      }
      break;

    case REFUSE_TIME:
      if (value == null) {
        unsetRefuseTime();
      } else {
        setRefuseTime((String)value);
      }
      break;

    case REFUSE_TIMEOUT:
      if (value == null) {
        unsetRefuseTimeout();
      } else {
        setRefuseTimeout((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case USER_ID:
      return getUserId();

    case WECHAT_ID:
      return getWechatId();

    case REFUSE_TIME:
      return getRefuseTime();

    case REFUSE_TIMEOUT:
      return getRefuseTimeout();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case USER_ID:
      return isSetUserId();
    case WECHAT_ID:
      return isSetWechatId();
    case REFUSE_TIME:
      return isSetRefuseTime();
    case REFUSE_TIMEOUT:
      return isSetRefuseTimeout();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserRecommendRefusalDO)
      return this.equals((UserRecommendRefusalDO)that);
    return false;
  }

  public boolean equals(UserRecommendRefusalDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_wechatId = true && this.isSetWechatId();
    boolean that_present_wechatId = true && that.isSetWechatId();
    if (this_present_wechatId || that_present_wechatId) {
      if (!(this_present_wechatId && that_present_wechatId))
        return false;
      if (this.wechatId != that.wechatId)
        return false;
    }

    boolean this_present_refuseTime = true && this.isSetRefuseTime();
    boolean that_present_refuseTime = true && that.isSetRefuseTime();
    if (this_present_refuseTime || that_present_refuseTime) {
      if (!(this_present_refuseTime && that_present_refuseTime))
        return false;
      if (!this.refuseTime.equals(that.refuseTime))
        return false;
    }

    boolean this_present_refuseTimeout = true && this.isSetRefuseTimeout();
    boolean that_present_refuseTimeout = true && that.isSetRefuseTimeout();
    if (this_present_refuseTimeout || that_present_refuseTimeout) {
      if (!(this_present_refuseTimeout && that_present_refuseTimeout))
        return false;
      if (!this.refuseTimeout.equals(that.refuseTimeout))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
    if (isSetUserId())
      hashCode = hashCode * 8191 + userId;

    hashCode = hashCode * 8191 + ((isSetWechatId()) ? 131071 : 524287);
    if (isSetWechatId())
      hashCode = hashCode * 8191 + wechatId;

    hashCode = hashCode * 8191 + ((isSetRefuseTime()) ? 131071 : 524287);
    if (isSetRefuseTime())
      hashCode = hashCode * 8191 + refuseTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetRefuseTimeout()) ? 131071 : 524287);
    if (isSetRefuseTimeout())
      hashCode = hashCode * 8191 + refuseTimeout.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(UserRecommendRefusalDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWechatId()).compareTo(other.isSetWechatId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWechatId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wechatId, other.wechatId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefuseTime()).compareTo(other.isSetRefuseTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefuseTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refuseTime, other.refuseTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefuseTimeout()).compareTo(other.isSetRefuseTimeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefuseTimeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refuseTimeout, other.refuseTimeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserRecommendRefusalDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
    }
    if (isSetWechatId()) {
      if (!first) sb.append(", ");
      sb.append("wechatId:");
      sb.append(this.wechatId);
      first = false;
    }
    if (isSetRefuseTime()) {
      if (!first) sb.append(", ");
      sb.append("refuseTime:");
      if (this.refuseTime == null) {
        sb.append("null");
      } else {
        sb.append(this.refuseTime);
      }
      first = false;
    }
    if (isSetRefuseTimeout()) {
      if (!first) sb.append(", ");
      sb.append("refuseTimeout:");
      if (this.refuseTimeout == null) {
        sb.append("null");
      } else {
        sb.append(this.refuseTimeout);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserRecommendRefusalDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserRecommendRefusalDOStandardScheme getScheme() {
      return new UserRecommendRefusalDOStandardScheme();
    }
  }

  private static class UserRecommendRefusalDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<UserRecommendRefusalDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserRecommendRefusalDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WECHAT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wechatId = iprot.readI32();
              struct.setWechatIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REFUSE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refuseTime = iprot.readString();
              struct.setRefuseTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REFUSE_TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refuseTimeout = iprot.readString();
              struct.setRefuseTimeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserRecommendRefusalDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUserId()) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWechatId()) {
        oprot.writeFieldBegin(WECHAT_ID_FIELD_DESC);
        oprot.writeI32(struct.wechatId);
        oprot.writeFieldEnd();
      }
      if (struct.refuseTime != null) {
        if (struct.isSetRefuseTime()) {
          oprot.writeFieldBegin(REFUSE_TIME_FIELD_DESC);
          oprot.writeString(struct.refuseTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.refuseTimeout != null) {
        if (struct.isSetRefuseTimeout()) {
          oprot.writeFieldBegin(REFUSE_TIMEOUT_FIELD_DESC);
          oprot.writeString(struct.refuseTimeout);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserRecommendRefusalDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserRecommendRefusalDOTupleScheme getScheme() {
      return new UserRecommendRefusalDOTupleScheme();
    }
  }

  private static class UserRecommendRefusalDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<UserRecommendRefusalDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserRecommendRefusalDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetUserId()) {
        optionals.set(1);
      }
      if (struct.isSetWechatId()) {
        optionals.set(2);
      }
      if (struct.isSetRefuseTime()) {
        optionals.set(3);
      }
      if (struct.isSetRefuseTimeout()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetWechatId()) {
        oprot.writeI32(struct.wechatId);
      }
      if (struct.isSetRefuseTime()) {
        oprot.writeString(struct.refuseTime);
      }
      if (struct.isSetRefuseTimeout()) {
        oprot.writeString(struct.refuseTimeout);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserRecommendRefusalDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.wechatId = iprot.readI32();
        struct.setWechatIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.refuseTime = iprot.readString();
        struct.setRefuseTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.refuseTimeout = iprot.readString();
        struct.setRefuseTimeoutIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

