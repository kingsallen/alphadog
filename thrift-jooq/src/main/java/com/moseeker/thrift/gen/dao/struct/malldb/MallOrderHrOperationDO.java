/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.malldb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-10-12")
public class MallOrderHrOperationDO implements org.apache.thrift.TBase<MallOrderHrOperationDO, MallOrderHrOperationDO._Fields>, java.io.Serializable, Cloneable, Comparable<MallOrderHrOperationDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MallOrderHrOperationDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("order_id", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField OPERATION_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("operation_state", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField EMPLOYEE_RECORD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("employee_record_id", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MallOrderHrOperationDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MallOrderHrOperationDOTupleSchemeFactory();

  public int id; // optional
  public int hr_id; // optional
  public int order_id; // optional
  public byte operation_state; // optional
  public int employee_record_id; // optional
  public String createTime; // optional
  public String updateTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    HR_ID((short)2, "hr_id"),
    ORDER_ID((short)3, "order_id"),
    OPERATION_STATE((short)4, "operation_state"),
    EMPLOYEE_RECORD_ID((short)5, "employee_record_id"),
    CREATE_TIME((short)6, "createTime"),
    UPDATE_TIME((short)7, "updateTime");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // HR_ID
          return HR_ID;
        case 3: // ORDER_ID
          return ORDER_ID;
        case 4: // OPERATION_STATE
          return OPERATION_STATE;
        case 5: // EMPLOYEE_RECORD_ID
          return EMPLOYEE_RECORD_ID;
        case 6: // CREATE_TIME
          return CREATE_TIME;
        case 7: // UPDATE_TIME
          return UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __HR_ID_ISSET_ID = 1;
  private static final int __ORDER_ID_ISSET_ID = 2;
  private static final int __OPERATION_STATE_ISSET_ID = 3;
  private static final int __EMPLOYEE_RECORD_ID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.HR_ID,_Fields.ORDER_ID,_Fields.OPERATION_STATE,_Fields.EMPLOYEE_RECORD_ID,_Fields.CREATE_TIME,_Fields.UPDATE_TIME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("order_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPERATION_STATE, new org.apache.thrift.meta_data.FieldMetaData("operation_state", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.EMPLOYEE_RECORD_ID, new org.apache.thrift.meta_data.FieldMetaData("employee_record_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MallOrderHrOperationDO.class, metaDataMap);
  }

  public MallOrderHrOperationDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MallOrderHrOperationDO(MallOrderHrOperationDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.hr_id = other.hr_id;
    this.order_id = other.order_id;
    this.operation_state = other.operation_state;
    this.employee_record_id = other.employee_record_id;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
  }

  public MallOrderHrOperationDO deepCopy() {
    return new MallOrderHrOperationDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setHr_idIsSet(false);
    this.hr_id = 0;
    setOrder_idIsSet(false);
    this.order_id = 0;
    setOperation_stateIsSet(false);
    this.operation_state = 0;
    setEmployee_record_idIsSet(false);
    this.employee_record_id = 0;
    this.createTime = null;
    this.updateTime = null;
  }

  public int getId() {
    return this.id;
  }

  public MallOrderHrOperationDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getHr_id() {
    return this.hr_id;
  }

  public MallOrderHrOperationDO setHr_id(int hr_id) {
    this.hr_id = hr_id;
    setHr_idIsSet(true);
    return this;
  }

  public void unsetHr_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
  }

  /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
  public boolean isSetHr_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
  }

  public void setHr_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
  }

  public int getOrder_id() {
    return this.order_id;
  }

  public MallOrderHrOperationDO setOrder_id(int order_id) {
    this.order_id = order_id;
    setOrder_idIsSet(true);
    return this;
  }

  public void unsetOrder_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ORDER_ID_ISSET_ID);
  }

  /** Returns true if field order_id is set (has been assigned a value) and false otherwise */
  public boolean isSetOrder_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ORDER_ID_ISSET_ID);
  }

  public void setOrder_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ORDER_ID_ISSET_ID, value);
  }

  public byte getOperation_state() {
    return this.operation_state;
  }

  public MallOrderHrOperationDO setOperation_state(byte operation_state) {
    this.operation_state = operation_state;
    setOperation_stateIsSet(true);
    return this;
  }

  public void unsetOperation_state() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OPERATION_STATE_ISSET_ID);
  }

  /** Returns true if field operation_state is set (has been assigned a value) and false otherwise */
  public boolean isSetOperation_state() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OPERATION_STATE_ISSET_ID);
  }

  public void setOperation_stateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OPERATION_STATE_ISSET_ID, value);
  }

  public int getEmployee_record_id() {
    return this.employee_record_id;
  }

  public MallOrderHrOperationDO setEmployee_record_id(int employee_record_id) {
    this.employee_record_id = employee_record_id;
    setEmployee_record_idIsSet(true);
    return this;
  }

  public void unsetEmployee_record_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMPLOYEE_RECORD_ID_ISSET_ID);
  }

  /** Returns true if field employee_record_id is set (has been assigned a value) and false otherwise */
  public boolean isSetEmployee_record_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMPLOYEE_RECORD_ID_ISSET_ID);
  }

  public void setEmployee_record_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMPLOYEE_RECORD_ID_ISSET_ID, value);
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public MallOrderHrOperationDO setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public MallOrderHrOperationDO setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case HR_ID:
      if (value == null) {
        unsetHr_id();
      } else {
        setHr_id((Integer)value);
      }
      break;

    case ORDER_ID:
      if (value == null) {
        unsetOrder_id();
      } else {
        setOrder_id((Integer)value);
      }
      break;

    case OPERATION_STATE:
      if (value == null) {
        unsetOperation_state();
      } else {
        setOperation_state((Byte)value);
      }
      break;

    case EMPLOYEE_RECORD_ID:
      if (value == null) {
        unsetEmployee_record_id();
      } else {
        setEmployee_record_id((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case HR_ID:
      return getHr_id();

    case ORDER_ID:
      return getOrder_id();

    case OPERATION_STATE:
      return getOperation_state();

    case EMPLOYEE_RECORD_ID:
      return getEmployee_record_id();

    case CREATE_TIME:
      return getCreateTime();

    case UPDATE_TIME:
      return getUpdateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case HR_ID:
      return isSetHr_id();
    case ORDER_ID:
      return isSetOrder_id();
    case OPERATION_STATE:
      return isSetOperation_state();
    case EMPLOYEE_RECORD_ID:
      return isSetEmployee_record_id();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MallOrderHrOperationDO)
      return this.equals((MallOrderHrOperationDO)that);
    return false;
  }

  public boolean equals(MallOrderHrOperationDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_hr_id = true && this.isSetHr_id();
    boolean that_present_hr_id = true && that.isSetHr_id();
    if (this_present_hr_id || that_present_hr_id) {
      if (!(this_present_hr_id && that_present_hr_id))
        return false;
      if (this.hr_id != that.hr_id)
        return false;
    }

    boolean this_present_order_id = true && this.isSetOrder_id();
    boolean that_present_order_id = true && that.isSetOrder_id();
    if (this_present_order_id || that_present_order_id) {
      if (!(this_present_order_id && that_present_order_id))
        return false;
      if (this.order_id != that.order_id)
        return false;
    }

    boolean this_present_operation_state = true && this.isSetOperation_state();
    boolean that_present_operation_state = true && that.isSetOperation_state();
    if (this_present_operation_state || that_present_operation_state) {
      if (!(this_present_operation_state && that_present_operation_state))
        return false;
      if (this.operation_state != that.operation_state)
        return false;
    }

    boolean this_present_employee_record_id = true && this.isSetEmployee_record_id();
    boolean that_present_employee_record_id = true && that.isSetEmployee_record_id();
    if (this_present_employee_record_id || that_present_employee_record_id) {
      if (!(this_present_employee_record_id && that_present_employee_record_id))
        return false;
      if (this.employee_record_id != that.employee_record_id)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetHr_id()) ? 131071 : 524287);
    if (isSetHr_id())
      hashCode = hashCode * 8191 + hr_id;

    hashCode = hashCode * 8191 + ((isSetOrder_id()) ? 131071 : 524287);
    if (isSetOrder_id())
      hashCode = hashCode * 8191 + order_id;

    hashCode = hashCode * 8191 + ((isSetOperation_state()) ? 131071 : 524287);
    if (isSetOperation_state())
      hashCode = hashCode * 8191 + (int) (operation_state);

    hashCode = hashCode * 8191 + ((isSetEmployee_record_id()) ? 131071 : 524287);
    if (isSetEmployee_record_id())
      hashCode = hashCode * 8191 + employee_record_id;

    hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
    if (isSetCreateTime())
      hashCode = hashCode * 8191 + createTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
    if (isSetUpdateTime())
      hashCode = hashCode * 8191 + updateTime.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MallOrderHrOperationDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHr_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrder_id()).compareTo(other.isSetOrder_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrder_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order_id, other.order_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperation_state()).compareTo(other.isSetOperation_state());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperation_state()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operation_state, other.operation_state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmployee_record_id()).compareTo(other.isSetEmployee_record_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmployee_record_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employee_record_id, other.employee_record_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MallOrderHrOperationDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetHr_id()) {
      if (!first) sb.append(", ");
      sb.append("hr_id:");
      sb.append(this.hr_id);
      first = false;
    }
    if (isSetOrder_id()) {
      if (!first) sb.append(", ");
      sb.append("order_id:");
      sb.append(this.order_id);
      first = false;
    }
    if (isSetOperation_state()) {
      if (!first) sb.append(", ");
      sb.append("operation_state:");
      sb.append(this.operation_state);
      first = false;
    }
    if (isSetEmployee_record_id()) {
      if (!first) sb.append(", ");
      sb.append("employee_record_id:");
      sb.append(this.employee_record_id);
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MallOrderHrOperationDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MallOrderHrOperationDOStandardScheme getScheme() {
      return new MallOrderHrOperationDOStandardScheme();
    }
  }

  private static class MallOrderHrOperationDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<MallOrderHrOperationDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MallOrderHrOperationDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hr_id = iprot.readI32();
              struct.setHr_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.order_id = iprot.readI32();
              struct.setOrder_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OPERATION_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.operation_state = iprot.readByte();
              struct.setOperation_stateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EMPLOYEE_RECORD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.employee_record_id = iprot.readI32();
              struct.setEmployee_record_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MallOrderHrOperationDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHr_id()) {
        oprot.writeFieldBegin(HR_ID_FIELD_DESC);
        oprot.writeI32(struct.hr_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrder_id()) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeI32(struct.order_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOperation_state()) {
        oprot.writeFieldBegin(OPERATION_STATE_FIELD_DESC);
        oprot.writeByte(struct.operation_state);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEmployee_record_id()) {
        oprot.writeFieldBegin(EMPLOYEE_RECORD_ID_FIELD_DESC);
        oprot.writeI32(struct.employee_record_id);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateTime != null) {
        if (struct.isSetUpdateTime()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MallOrderHrOperationDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MallOrderHrOperationDOTupleScheme getScheme() {
      return new MallOrderHrOperationDOTupleScheme();
    }
  }

  private static class MallOrderHrOperationDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<MallOrderHrOperationDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MallOrderHrOperationDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetHr_id()) {
        optionals.set(1);
      }
      if (struct.isSetOrder_id()) {
        optionals.set(2);
      }
      if (struct.isSetOperation_state()) {
        optionals.set(3);
      }
      if (struct.isSetEmployee_record_id()) {
        optionals.set(4);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(5);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetHr_id()) {
        oprot.writeI32(struct.hr_id);
      }
      if (struct.isSetOrder_id()) {
        oprot.writeI32(struct.order_id);
      }
      if (struct.isSetOperation_state()) {
        oprot.writeByte(struct.operation_state);
      }
      if (struct.isSetEmployee_record_id()) {
        oprot.writeI32(struct.employee_record_id);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MallOrderHrOperationDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hr_id = iprot.readI32();
        struct.setHr_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.order_id = iprot.readI32();
        struct.setOrder_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.operation_state = iprot.readByte();
        struct.setOperation_stateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.employee_record_id = iprot.readI32();
        struct.setEmployee_record_idIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

