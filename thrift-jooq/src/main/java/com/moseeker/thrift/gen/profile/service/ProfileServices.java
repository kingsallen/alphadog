/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.profile.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-06-26")
public class ProfileServices {

  public interface Iface {

    public boolean healthCheck() throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response getResources(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response getPagination(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response postResources(java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> resources) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response putResources(java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> resources) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response delResources(java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> resources) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response getResource(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response postResource(com.moseeker.thrift.gen.profile.struct.Profile profile) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response putResource(com.moseeker.thrift.gen.profile.struct.Profile profile) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response delResource(com.moseeker.thrift.gen.profile.struct.Profile profile) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response getCompleteness(int user_id, java.lang.String uuid, int profile_id) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response reCalculateUserCompleteness(int userId, java.lang.String mobile) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response reCalculateUserCompletenessBySettingId(int id) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response parseProfileAttachment(java.lang.String fileName, java.lang.String file) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response getProfileByApplication(com.moseeker.thrift.gen.profile.struct.ProfileApplicationForm profileForm) throws org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response resumeProfile(int uid, java.lang.String fileName, java.lang.String file) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public int upsertProfile(int userId, java.lang.String profile) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response resumeTalentProfile(java.lang.String fileName, java.lang.String file, int companyId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public java.util.List<com.moseeker.thrift.gen.profile.struct.UserProfile> fetchUserProfile(java.util.List<java.lang.Integer> userIdList) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response getProfileTokenDecrypt(java.lang.String token) throws org.apache.thrift.TException;

    public int parseText(java.lang.String profile, int reference, int appid) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.profile.struct.ProfileParseResult parseFileProfile(int employeeId, java.lang.String fileName, java.nio.ByteBuffer fileData) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.profile.struct.ProfileParseResult parseFileProfileByFilePath(java.lang.String filePath, int userId, java.lang.String syncId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.profile.struct.ProfileParseResult parseUserFileProfile(int employeeId, java.lang.String fileName, java.nio.ByteBuffer fileData) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.profile.struct.ProfileParseResult parseFileStreamProfile(int employeeId, java.lang.String fileOriginName, java.lang.String fileName, java.lang.String absoluteName, java.lang.String fileData) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public int employeeReferralProfile(int employeeId, java.lang.String name, java.lang.String mobile, java.util.List<java.lang.String> referralReasons, int position, byte relationship, java.lang.String recomReasonText, byte referralType) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public int updateUserProfile(int employeeId, java.lang.String name, java.lang.String mobile) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public void employeeDeleteReferralProfile(int employeeId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public int postCandidateInfo(int employeeId, com.moseeker.thrift.gen.profile.struct.CandidateInfo candidateInfo) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public java.util.Map<java.lang.String,java.lang.String> saveMobotReferralProfile(int employeeId, java.util.List<java.lang.Integer> ids) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public int saveMobotReferralProfileCache(int employeeId, java.lang.String mobile, java.lang.String name, java.util.List<java.lang.String> referralReasons, byte referralType, java.lang.String fileName, int relationship, java.lang.String recomReasonText) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public java.lang.String getMobotReferralCache(int employeeId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.profile.struct.ProfileParseResult parseHunterFileProfile(int headhunterId, java.lang.String fileName, java.nio.ByteBuffer fileData) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles uploadFiles(java.lang.String sceneId, java.lang.String unionid, java.lang.String fileName, java.nio.ByteBuffer fileData) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public java.util.List<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles> getUploadFiles(java.lang.String unionId, int pageSize, int pageNo) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public java.lang.String downLoadFiles(java.lang.String sceneId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles referralResumeInfo(java.lang.String sceneId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public boolean getSpecifyProfileResult(int employeeId, java.lang.String syncId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.profile.struct.ProfileParseResult checkResult(int employeeId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void healthCheck(org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void getResources(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void getPagination(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void postResources(java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> resources, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void putResources(java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> resources, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void delResources(java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> resources, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void getResource(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void postResource(com.moseeker.thrift.gen.profile.struct.Profile profile, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void putResource(com.moseeker.thrift.gen.profile.struct.Profile profile, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void delResource(com.moseeker.thrift.gen.profile.struct.Profile profile, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void getCompleteness(int user_id, java.lang.String uuid, int profile_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void reCalculateUserCompleteness(int userId, java.lang.String mobile, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void reCalculateUserCompletenessBySettingId(int id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void parseProfileAttachment(java.lang.String fileName, java.lang.String file, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void getProfileByApplication(com.moseeker.thrift.gen.profile.struct.ProfileApplicationForm profileForm, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void resumeProfile(int uid, java.lang.String fileName, java.lang.String file, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void upsertProfile(int userId, java.lang.String profile, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void resumeTalentProfile(java.lang.String fileName, java.lang.String file, int companyId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void fetchUserProfile(java.util.List<java.lang.Integer> userIdList, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.profile.struct.UserProfile>> resultHandler) throws org.apache.thrift.TException;

    public void getProfileTokenDecrypt(java.lang.String token, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void parseText(java.lang.String profile, int reference, int appid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void parseFileProfile(int employeeId, java.lang.String fileName, java.nio.ByteBuffer fileData, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> resultHandler) throws org.apache.thrift.TException;

    public void parseFileProfileByFilePath(java.lang.String filePath, int userId, java.lang.String syncId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> resultHandler) throws org.apache.thrift.TException;

    public void parseUserFileProfile(int employeeId, java.lang.String fileName, java.nio.ByteBuffer fileData, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> resultHandler) throws org.apache.thrift.TException;

    public void parseFileStreamProfile(int employeeId, java.lang.String fileOriginName, java.lang.String fileName, java.lang.String absoluteName, java.lang.String fileData, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> resultHandler) throws org.apache.thrift.TException;

    public void employeeReferralProfile(int employeeId, java.lang.String name, java.lang.String mobile, java.util.List<java.lang.String> referralReasons, int position, byte relationship, java.lang.String recomReasonText, byte referralType, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void updateUserProfile(int employeeId, java.lang.String name, java.lang.String mobile, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void employeeDeleteReferralProfile(int employeeId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void postCandidateInfo(int employeeId, com.moseeker.thrift.gen.profile.struct.CandidateInfo candidateInfo, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void saveMobotReferralProfile(int employeeId, java.util.List<java.lang.Integer> ids, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void saveMobotReferralProfileCache(int employeeId, java.lang.String mobile, java.lang.String name, java.util.List<java.lang.String> referralReasons, byte referralType, java.lang.String fileName, int relationship, java.lang.String recomReasonText, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void getMobotReferralCache(int employeeId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void parseHunterFileProfile(int headhunterId, java.lang.String fileName, java.nio.ByteBuffer fileData, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> resultHandler) throws org.apache.thrift.TException;

    public void uploadFiles(java.lang.String sceneId, java.lang.String unionid, java.lang.String fileName, java.nio.ByteBuffer fileData, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles> resultHandler) throws org.apache.thrift.TException;

    public void getUploadFiles(java.lang.String unionId, int pageSize, int pageNo, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles>> resultHandler) throws org.apache.thrift.TException;

    public void downLoadFiles(java.lang.String sceneId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void referralResumeInfo(java.lang.String sceneId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles> resultHandler) throws org.apache.thrift.TException;

    public void getSpecifyProfileResult(int employeeId, java.lang.String syncId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void checkResult(int employeeId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean healthCheck() throws org.apache.thrift.TException
    {
      send_healthCheck();
      return recv_healthCheck();
    }

    public void send_healthCheck() throws org.apache.thrift.TException
    {
      healthCheck_args args = new healthCheck_args();
      sendBase("healthCheck", args);
    }

    public boolean recv_healthCheck() throws org.apache.thrift.TException
    {
      healthCheck_result result = new healthCheck_result();
      receiveBase(result, "healthCheck");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "healthCheck failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response getResources(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_getResources(query);
      return recv_getResources();
    }

    public void send_getResources(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      getResources_args args = new getResources_args();
      args.setQuery(query);
      sendBase("getResources", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_getResources() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      getResources_result result = new getResources_result();
      receiveBase(result, "getResources");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getResources failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response getPagination(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_getPagination(query);
      return recv_getPagination();
    }

    public void send_getPagination(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      getPagination_args args = new getPagination_args();
      args.setQuery(query);
      sendBase("getPagination", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_getPagination() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      getPagination_result result = new getPagination_result();
      receiveBase(result, "getPagination");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPagination failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response postResources(java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> resources) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_postResources(resources);
      return recv_postResources();
    }

    public void send_postResources(java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> resources) throws org.apache.thrift.TException
    {
      postResources_args args = new postResources_args();
      args.setResources(resources);
      sendBase("postResources", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_postResources() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      postResources_result result = new postResources_result();
      receiveBase(result, "postResources");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postResources failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response putResources(java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> resources) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_putResources(resources);
      return recv_putResources();
    }

    public void send_putResources(java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> resources) throws org.apache.thrift.TException
    {
      putResources_args args = new putResources_args();
      args.setResources(resources);
      sendBase("putResources", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_putResources() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      putResources_result result = new putResources_result();
      receiveBase(result, "putResources");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "putResources failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response delResources(java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> resources) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_delResources(resources);
      return recv_delResources();
    }

    public void send_delResources(java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> resources) throws org.apache.thrift.TException
    {
      delResources_args args = new delResources_args();
      args.setResources(resources);
      sendBase("delResources", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_delResources() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      delResources_result result = new delResources_result();
      receiveBase(result, "delResources");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delResources failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response getResource(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      send_getResource(query);
      return recv_getResource();
    }

    public void send_getResource(com.moseeker.thrift.gen.common.struct.CommonQuery query) throws org.apache.thrift.TException
    {
      getResource_args args = new getResource_args();
      args.setQuery(query);
      sendBase("getResource", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_getResource() throws org.apache.thrift.TException
    {
      getResource_result result = new getResource_result();
      receiveBase(result, "getResource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getResource failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response postResource(com.moseeker.thrift.gen.profile.struct.Profile profile) throws org.apache.thrift.TException
    {
      send_postResource(profile);
      return recv_postResource();
    }

    public void send_postResource(com.moseeker.thrift.gen.profile.struct.Profile profile) throws org.apache.thrift.TException
    {
      postResource_args args = new postResource_args();
      args.setProfile(profile);
      sendBase("postResource", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_postResource() throws org.apache.thrift.TException
    {
      postResource_result result = new postResource_result();
      receiveBase(result, "postResource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postResource failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response putResource(com.moseeker.thrift.gen.profile.struct.Profile profile) throws org.apache.thrift.TException
    {
      send_putResource(profile);
      return recv_putResource();
    }

    public void send_putResource(com.moseeker.thrift.gen.profile.struct.Profile profile) throws org.apache.thrift.TException
    {
      putResource_args args = new putResource_args();
      args.setProfile(profile);
      sendBase("putResource", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_putResource() throws org.apache.thrift.TException
    {
      putResource_result result = new putResource_result();
      receiveBase(result, "putResource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "putResource failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response delResource(com.moseeker.thrift.gen.profile.struct.Profile profile) throws org.apache.thrift.TException
    {
      send_delResource(profile);
      return recv_delResource();
    }

    public void send_delResource(com.moseeker.thrift.gen.profile.struct.Profile profile) throws org.apache.thrift.TException
    {
      delResource_args args = new delResource_args();
      args.setProfile(profile);
      sendBase("delResource", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_delResource() throws org.apache.thrift.TException
    {
      delResource_result result = new delResource_result();
      receiveBase(result, "delResource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delResource failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response getCompleteness(int user_id, java.lang.String uuid, int profile_id) throws org.apache.thrift.TException
    {
      send_getCompleteness(user_id, uuid, profile_id);
      return recv_getCompleteness();
    }

    public void send_getCompleteness(int user_id, java.lang.String uuid, int profile_id) throws org.apache.thrift.TException
    {
      getCompleteness_args args = new getCompleteness_args();
      args.setUser_id(user_id);
      args.setUuid(uuid);
      args.setProfile_id(profile_id);
      sendBase("getCompleteness", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_getCompleteness() throws org.apache.thrift.TException
    {
      getCompleteness_result result = new getCompleteness_result();
      receiveBase(result, "getCompleteness");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCompleteness failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response reCalculateUserCompleteness(int userId, java.lang.String mobile) throws org.apache.thrift.TException
    {
      send_reCalculateUserCompleteness(userId, mobile);
      return recv_reCalculateUserCompleteness();
    }

    public void send_reCalculateUserCompleteness(int userId, java.lang.String mobile) throws org.apache.thrift.TException
    {
      reCalculateUserCompleteness_args args = new reCalculateUserCompleteness_args();
      args.setUserId(userId);
      args.setMobile(mobile);
      sendBase("reCalculateUserCompleteness", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_reCalculateUserCompleteness() throws org.apache.thrift.TException
    {
      reCalculateUserCompleteness_result result = new reCalculateUserCompleteness_result();
      receiveBase(result, "reCalculateUserCompleteness");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reCalculateUserCompleteness failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response reCalculateUserCompletenessBySettingId(int id) throws org.apache.thrift.TException
    {
      send_reCalculateUserCompletenessBySettingId(id);
      return recv_reCalculateUserCompletenessBySettingId();
    }

    public void send_reCalculateUserCompletenessBySettingId(int id) throws org.apache.thrift.TException
    {
      reCalculateUserCompletenessBySettingId_args args = new reCalculateUserCompletenessBySettingId_args();
      args.setId(id);
      sendBase("reCalculateUserCompletenessBySettingId", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_reCalculateUserCompletenessBySettingId() throws org.apache.thrift.TException
    {
      reCalculateUserCompletenessBySettingId_result result = new reCalculateUserCompletenessBySettingId_result();
      receiveBase(result, "reCalculateUserCompletenessBySettingId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reCalculateUserCompletenessBySettingId failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response parseProfileAttachment(java.lang.String fileName, java.lang.String file) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_parseProfileAttachment(fileName, file);
      return recv_parseProfileAttachment();
    }

    public void send_parseProfileAttachment(java.lang.String fileName, java.lang.String file) throws org.apache.thrift.TException
    {
      parseProfileAttachment_args args = new parseProfileAttachment_args();
      args.setFileName(fileName);
      args.setFile(file);
      sendBase("parseProfileAttachment", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_parseProfileAttachment() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      parseProfileAttachment_result result = new parseProfileAttachment_result();
      receiveBase(result, "parseProfileAttachment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "parseProfileAttachment failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response getProfileByApplication(com.moseeker.thrift.gen.profile.struct.ProfileApplicationForm profileForm) throws org.apache.thrift.TException
    {
      send_getProfileByApplication(profileForm);
      return recv_getProfileByApplication();
    }

    public void send_getProfileByApplication(com.moseeker.thrift.gen.profile.struct.ProfileApplicationForm profileForm) throws org.apache.thrift.TException
    {
      getProfileByApplication_args args = new getProfileByApplication_args();
      args.setProfileForm(profileForm);
      sendBase("getProfileByApplication", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_getProfileByApplication() throws org.apache.thrift.TException
    {
      getProfileByApplication_result result = new getProfileByApplication_result();
      receiveBase(result, "getProfileByApplication");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProfileByApplication failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response resumeProfile(int uid, java.lang.String fileName, java.lang.String file) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_resumeProfile(uid, fileName, file);
      return recv_resumeProfile();
    }

    public void send_resumeProfile(int uid, java.lang.String fileName, java.lang.String file) throws org.apache.thrift.TException
    {
      resumeProfile_args args = new resumeProfile_args();
      args.setUid(uid);
      args.setFileName(fileName);
      args.setFile(file);
      sendBase("resumeProfile", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_resumeProfile() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      resumeProfile_result result = new resumeProfile_result();
      receiveBase(result, "resumeProfile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "resumeProfile failed: unknown result");
    }

    public int upsertProfile(int userId, java.lang.String profile) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_upsertProfile(userId, profile);
      return recv_upsertProfile();
    }

    public void send_upsertProfile(int userId, java.lang.String profile) throws org.apache.thrift.TException
    {
      upsertProfile_args args = new upsertProfile_args();
      args.setUserId(userId);
      args.setProfile(profile);
      sendBase("upsertProfile", args);
    }

    public int recv_upsertProfile() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      upsertProfile_result result = new upsertProfile_result();
      receiveBase(result, "upsertProfile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "upsertProfile failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response resumeTalentProfile(java.lang.String fileName, java.lang.String file, int companyId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_resumeTalentProfile(fileName, file, companyId);
      return recv_resumeTalentProfile();
    }

    public void send_resumeTalentProfile(java.lang.String fileName, java.lang.String file, int companyId) throws org.apache.thrift.TException
    {
      resumeTalentProfile_args args = new resumeTalentProfile_args();
      args.setFileName(fileName);
      args.setFile(file);
      args.setCompanyId(companyId);
      sendBase("resumeTalentProfile", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_resumeTalentProfile() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      resumeTalentProfile_result result = new resumeTalentProfile_result();
      receiveBase(result, "resumeTalentProfile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "resumeTalentProfile failed: unknown result");
    }

    public java.util.List<com.moseeker.thrift.gen.profile.struct.UserProfile> fetchUserProfile(java.util.List<java.lang.Integer> userIdList) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_fetchUserProfile(userIdList);
      return recv_fetchUserProfile();
    }

    public void send_fetchUserProfile(java.util.List<java.lang.Integer> userIdList) throws org.apache.thrift.TException
    {
      fetchUserProfile_args args = new fetchUserProfile_args();
      args.setUserIdList(userIdList);
      sendBase("fetchUserProfile", args);
    }

    public java.util.List<com.moseeker.thrift.gen.profile.struct.UserProfile> recv_fetchUserProfile() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      fetchUserProfile_result result = new fetchUserProfile_result();
      receiveBase(result, "fetchUserProfile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchUserProfile failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response getProfileTokenDecrypt(java.lang.String token) throws org.apache.thrift.TException
    {
      send_getProfileTokenDecrypt(token);
      return recv_getProfileTokenDecrypt();
    }

    public void send_getProfileTokenDecrypt(java.lang.String token) throws org.apache.thrift.TException
    {
      getProfileTokenDecrypt_args args = new getProfileTokenDecrypt_args();
      args.setToken(token);
      sendBase("getProfileTokenDecrypt", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_getProfileTokenDecrypt() throws org.apache.thrift.TException
    {
      getProfileTokenDecrypt_result result = new getProfileTokenDecrypt_result();
      receiveBase(result, "getProfileTokenDecrypt");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProfileTokenDecrypt failed: unknown result");
    }

    public int parseText(java.lang.String profile, int reference, int appid) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_parseText(profile, reference, appid);
      return recv_parseText();
    }

    public void send_parseText(java.lang.String profile, int reference, int appid) throws org.apache.thrift.TException
    {
      parseText_args args = new parseText_args();
      args.setProfile(profile);
      args.setReference(reference);
      args.setAppid(appid);
      sendBase("parseText", args);
    }

    public int recv_parseText() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      parseText_result result = new parseText_result();
      receiveBase(result, "parseText");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "parseText failed: unknown result");
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileParseResult parseFileProfile(int employeeId, java.lang.String fileName, java.nio.ByteBuffer fileData) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_parseFileProfile(employeeId, fileName, fileData);
      return recv_parseFileProfile();
    }

    public void send_parseFileProfile(int employeeId, java.lang.String fileName, java.nio.ByteBuffer fileData) throws org.apache.thrift.TException
    {
      parseFileProfile_args args = new parseFileProfile_args();
      args.setEmployeeId(employeeId);
      args.setFileName(fileName);
      args.setFileData(fileData);
      sendBase("parseFileProfile", args);
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileParseResult recv_parseFileProfile() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      parseFileProfile_result result = new parseFileProfile_result();
      receiveBase(result, "parseFileProfile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "parseFileProfile failed: unknown result");
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileParseResult parseFileProfileByFilePath(java.lang.String filePath, int userId, java.lang.String syncId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_parseFileProfileByFilePath(filePath, userId, syncId);
      return recv_parseFileProfileByFilePath();
    }

    public void send_parseFileProfileByFilePath(java.lang.String filePath, int userId, java.lang.String syncId) throws org.apache.thrift.TException
    {
      parseFileProfileByFilePath_args args = new parseFileProfileByFilePath_args();
      args.setFilePath(filePath);
      args.setUserId(userId);
      args.setSyncId(syncId);
      sendBase("parseFileProfileByFilePath", args);
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileParseResult recv_parseFileProfileByFilePath() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      parseFileProfileByFilePath_result result = new parseFileProfileByFilePath_result();
      receiveBase(result, "parseFileProfileByFilePath");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "parseFileProfileByFilePath failed: unknown result");
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileParseResult parseUserFileProfile(int employeeId, java.lang.String fileName, java.nio.ByteBuffer fileData) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_parseUserFileProfile(employeeId, fileName, fileData);
      return recv_parseUserFileProfile();
    }

    public void send_parseUserFileProfile(int employeeId, java.lang.String fileName, java.nio.ByteBuffer fileData) throws org.apache.thrift.TException
    {
      parseUserFileProfile_args args = new parseUserFileProfile_args();
      args.setEmployeeId(employeeId);
      args.setFileName(fileName);
      args.setFileData(fileData);
      sendBase("parseUserFileProfile", args);
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileParseResult recv_parseUserFileProfile() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      parseUserFileProfile_result result = new parseUserFileProfile_result();
      receiveBase(result, "parseUserFileProfile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "parseUserFileProfile failed: unknown result");
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileParseResult parseFileStreamProfile(int employeeId, java.lang.String fileOriginName, java.lang.String fileName, java.lang.String absoluteName, java.lang.String fileData) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_parseFileStreamProfile(employeeId, fileOriginName, fileName, absoluteName, fileData);
      return recv_parseFileStreamProfile();
    }

    public void send_parseFileStreamProfile(int employeeId, java.lang.String fileOriginName, java.lang.String fileName, java.lang.String absoluteName, java.lang.String fileData) throws org.apache.thrift.TException
    {
      parseFileStreamProfile_args args = new parseFileStreamProfile_args();
      args.setEmployeeId(employeeId);
      args.setFileOriginName(fileOriginName);
      args.setFileName(fileName);
      args.setAbsoluteName(absoluteName);
      args.setFileData(fileData);
      sendBase("parseFileStreamProfile", args);
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileParseResult recv_parseFileStreamProfile() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      parseFileStreamProfile_result result = new parseFileStreamProfile_result();
      receiveBase(result, "parseFileStreamProfile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "parseFileStreamProfile failed: unknown result");
    }

    public int employeeReferralProfile(int employeeId, java.lang.String name, java.lang.String mobile, java.util.List<java.lang.String> referralReasons, int position, byte relationship, java.lang.String recomReasonText, byte referralType) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_employeeReferralProfile(employeeId, name, mobile, referralReasons, position, relationship, recomReasonText, referralType);
      return recv_employeeReferralProfile();
    }

    public void send_employeeReferralProfile(int employeeId, java.lang.String name, java.lang.String mobile, java.util.List<java.lang.String> referralReasons, int position, byte relationship, java.lang.String recomReasonText, byte referralType) throws org.apache.thrift.TException
    {
      employeeReferralProfile_args args = new employeeReferralProfile_args();
      args.setEmployeeId(employeeId);
      args.setName(name);
      args.setMobile(mobile);
      args.setReferralReasons(referralReasons);
      args.setPosition(position);
      args.setRelationship(relationship);
      args.setRecomReasonText(recomReasonText);
      args.setReferralType(referralType);
      sendBase("employeeReferralProfile", args);
    }

    public int recv_employeeReferralProfile() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      employeeReferralProfile_result result = new employeeReferralProfile_result();
      receiveBase(result, "employeeReferralProfile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "employeeReferralProfile failed: unknown result");
    }

    public int updateUserProfile(int employeeId, java.lang.String name, java.lang.String mobile) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_updateUserProfile(employeeId, name, mobile);
      return recv_updateUserProfile();
    }

    public void send_updateUserProfile(int employeeId, java.lang.String name, java.lang.String mobile) throws org.apache.thrift.TException
    {
      updateUserProfile_args args = new updateUserProfile_args();
      args.setEmployeeId(employeeId);
      args.setName(name);
      args.setMobile(mobile);
      sendBase("updateUserProfile", args);
    }

    public int recv_updateUserProfile() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      updateUserProfile_result result = new updateUserProfile_result();
      receiveBase(result, "updateUserProfile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateUserProfile failed: unknown result");
    }

    public void employeeDeleteReferralProfile(int employeeId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_employeeDeleteReferralProfile(employeeId);
      recv_employeeDeleteReferralProfile();
    }

    public void send_employeeDeleteReferralProfile(int employeeId) throws org.apache.thrift.TException
    {
      employeeDeleteReferralProfile_args args = new employeeDeleteReferralProfile_args();
      args.setEmployeeId(employeeId);
      sendBase("employeeDeleteReferralProfile", args);
    }

    public void recv_employeeDeleteReferralProfile() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      employeeDeleteReferralProfile_result result = new employeeDeleteReferralProfile_result();
      receiveBase(result, "employeeDeleteReferralProfile");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public int postCandidateInfo(int employeeId, com.moseeker.thrift.gen.profile.struct.CandidateInfo candidateInfo) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_postCandidateInfo(employeeId, candidateInfo);
      return recv_postCandidateInfo();
    }

    public void send_postCandidateInfo(int employeeId, com.moseeker.thrift.gen.profile.struct.CandidateInfo candidateInfo) throws org.apache.thrift.TException
    {
      postCandidateInfo_args args = new postCandidateInfo_args();
      args.setEmployeeId(employeeId);
      args.setCandidateInfo(candidateInfo);
      sendBase("postCandidateInfo", args);
    }

    public int recv_postCandidateInfo() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      postCandidateInfo_result result = new postCandidateInfo_result();
      receiveBase(result, "postCandidateInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postCandidateInfo failed: unknown result");
    }

    public java.util.Map<java.lang.String,java.lang.String> saveMobotReferralProfile(int employeeId, java.util.List<java.lang.Integer> ids) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_saveMobotReferralProfile(employeeId, ids);
      return recv_saveMobotReferralProfile();
    }

    public void send_saveMobotReferralProfile(int employeeId, java.util.List<java.lang.Integer> ids) throws org.apache.thrift.TException
    {
      saveMobotReferralProfile_args args = new saveMobotReferralProfile_args();
      args.setEmployeeId(employeeId);
      args.setIds(ids);
      sendBase("saveMobotReferralProfile", args);
    }

    public java.util.Map<java.lang.String,java.lang.String> recv_saveMobotReferralProfile() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      saveMobotReferralProfile_result result = new saveMobotReferralProfile_result();
      receiveBase(result, "saveMobotReferralProfile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveMobotReferralProfile failed: unknown result");
    }

    public int saveMobotReferralProfileCache(int employeeId, java.lang.String mobile, java.lang.String name, java.util.List<java.lang.String> referralReasons, byte referralType, java.lang.String fileName, int relationship, java.lang.String recomReasonText) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_saveMobotReferralProfileCache(employeeId, mobile, name, referralReasons, referralType, fileName, relationship, recomReasonText);
      return recv_saveMobotReferralProfileCache();
    }

    public void send_saveMobotReferralProfileCache(int employeeId, java.lang.String mobile, java.lang.String name, java.util.List<java.lang.String> referralReasons, byte referralType, java.lang.String fileName, int relationship, java.lang.String recomReasonText) throws org.apache.thrift.TException
    {
      saveMobotReferralProfileCache_args args = new saveMobotReferralProfileCache_args();
      args.setEmployeeId(employeeId);
      args.setMobile(mobile);
      args.setName(name);
      args.setReferralReasons(referralReasons);
      args.setReferralType(referralType);
      args.setFileName(fileName);
      args.setRelationship(relationship);
      args.setRecomReasonText(recomReasonText);
      sendBase("saveMobotReferralProfileCache", args);
    }

    public int recv_saveMobotReferralProfileCache() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      saveMobotReferralProfileCache_result result = new saveMobotReferralProfileCache_result();
      receiveBase(result, "saveMobotReferralProfileCache");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveMobotReferralProfileCache failed: unknown result");
    }

    public java.lang.String getMobotReferralCache(int employeeId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_getMobotReferralCache(employeeId);
      return recv_getMobotReferralCache();
    }

    public void send_getMobotReferralCache(int employeeId) throws org.apache.thrift.TException
    {
      getMobotReferralCache_args args = new getMobotReferralCache_args();
      args.setEmployeeId(employeeId);
      sendBase("getMobotReferralCache", args);
    }

    public java.lang.String recv_getMobotReferralCache() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      getMobotReferralCache_result result = new getMobotReferralCache_result();
      receiveBase(result, "getMobotReferralCache");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMobotReferralCache failed: unknown result");
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileParseResult parseHunterFileProfile(int headhunterId, java.lang.String fileName, java.nio.ByteBuffer fileData) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_parseHunterFileProfile(headhunterId, fileName, fileData);
      return recv_parseHunterFileProfile();
    }

    public void send_parseHunterFileProfile(int headhunterId, java.lang.String fileName, java.nio.ByteBuffer fileData) throws org.apache.thrift.TException
    {
      parseHunterFileProfile_args args = new parseHunterFileProfile_args();
      args.setHeadhunterId(headhunterId);
      args.setFileName(fileName);
      args.setFileData(fileData);
      sendBase("parseHunterFileProfile", args);
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileParseResult recv_parseHunterFileProfile() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      parseHunterFileProfile_result result = new parseHunterFileProfile_result();
      receiveBase(result, "parseHunterFileProfile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "parseHunterFileProfile failed: unknown result");
    }

    public com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles uploadFiles(java.lang.String sceneId, java.lang.String unionid, java.lang.String fileName, java.nio.ByteBuffer fileData) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_uploadFiles(sceneId, unionid, fileName, fileData);
      return recv_uploadFiles();
    }

    public void send_uploadFiles(java.lang.String sceneId, java.lang.String unionid, java.lang.String fileName, java.nio.ByteBuffer fileData) throws org.apache.thrift.TException
    {
      uploadFiles_args args = new uploadFiles_args();
      args.setSceneId(sceneId);
      args.setUnionid(unionid);
      args.setFileName(fileName);
      args.setFileData(fileData);
      sendBase("uploadFiles", args);
    }

    public com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles recv_uploadFiles() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      uploadFiles_result result = new uploadFiles_result();
      receiveBase(result, "uploadFiles");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "uploadFiles failed: unknown result");
    }

    public java.util.List<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles> getUploadFiles(java.lang.String unionId, int pageSize, int pageNo) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_getUploadFiles(unionId, pageSize, pageNo);
      return recv_getUploadFiles();
    }

    public void send_getUploadFiles(java.lang.String unionId, int pageSize, int pageNo) throws org.apache.thrift.TException
    {
      getUploadFiles_args args = new getUploadFiles_args();
      args.setUnionId(unionId);
      args.setPageSize(pageSize);
      args.setPageNo(pageNo);
      sendBase("getUploadFiles", args);
    }

    public java.util.List<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles> recv_getUploadFiles() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      getUploadFiles_result result = new getUploadFiles_result();
      receiveBase(result, "getUploadFiles");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUploadFiles failed: unknown result");
    }

    public java.lang.String downLoadFiles(java.lang.String sceneId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_downLoadFiles(sceneId);
      return recv_downLoadFiles();
    }

    public void send_downLoadFiles(java.lang.String sceneId) throws org.apache.thrift.TException
    {
      downLoadFiles_args args = new downLoadFiles_args();
      args.setSceneId(sceneId);
      sendBase("downLoadFiles", args);
    }

    public java.lang.String recv_downLoadFiles() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      downLoadFiles_result result = new downLoadFiles_result();
      receiveBase(result, "downLoadFiles");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "downLoadFiles failed: unknown result");
    }

    public com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles referralResumeInfo(java.lang.String sceneId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_referralResumeInfo(sceneId);
      return recv_referralResumeInfo();
    }

    public void send_referralResumeInfo(java.lang.String sceneId) throws org.apache.thrift.TException
    {
      referralResumeInfo_args args = new referralResumeInfo_args();
      args.setSceneId(sceneId);
      sendBase("referralResumeInfo", args);
    }

    public com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles recv_referralResumeInfo() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      referralResumeInfo_result result = new referralResumeInfo_result();
      receiveBase(result, "referralResumeInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "referralResumeInfo failed: unknown result");
    }

    public boolean getSpecifyProfileResult(int employeeId, java.lang.String syncId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_getSpecifyProfileResult(employeeId, syncId);
      return recv_getSpecifyProfileResult();
    }

    public void send_getSpecifyProfileResult(int employeeId, java.lang.String syncId) throws org.apache.thrift.TException
    {
      getSpecifyProfileResult_args args = new getSpecifyProfileResult_args();
      args.setEmployeeId(employeeId);
      args.setSyncId(syncId);
      sendBase("getSpecifyProfileResult", args);
    }

    public boolean recv_getSpecifyProfileResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      getSpecifyProfileResult_result result = new getSpecifyProfileResult_result();
      receiveBase(result, "getSpecifyProfileResult");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSpecifyProfileResult failed: unknown result");
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileParseResult checkResult(int employeeId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_checkResult(employeeId);
      return recv_checkResult();
    }

    public void send_checkResult(int employeeId) throws org.apache.thrift.TException
    {
      checkResult_args args = new checkResult_args();
      args.setEmployeeId(employeeId);
      sendBase("checkResult", args);
    }

    public com.moseeker.thrift.gen.profile.struct.ProfileParseResult recv_checkResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      checkResult_result result = new checkResult_result();
      receiveBase(result, "checkResult");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkResult failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void healthCheck(org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      healthCheck_call method_call = new healthCheck_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class healthCheck_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      public healthCheck_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("healthCheck", org.apache.thrift.protocol.TMessageType.CALL, 0));
        healthCheck_args args = new healthCheck_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_healthCheck();
      }
    }

    public void getResources(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getResources_call method_call = new getResources_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getResources_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private com.moseeker.thrift.gen.common.struct.CommonQuery query;
      public getResources_call(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getResources", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getResources_args args = new getResources_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getResources();
      }
    }

    public void getPagination(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPagination_call method_call = new getPagination_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPagination_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private com.moseeker.thrift.gen.common.struct.CommonQuery query;
      public getPagination_call(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPagination", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPagination_args args = new getPagination_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPagination();
      }
    }

    public void postResources(java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> resources, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postResources_call method_call = new postResources_call(resources, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postResources_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> resources;
      public postResources_call(java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> resources, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.resources = resources;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postResources", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postResources_args args = new postResources_args();
        args.setResources(resources);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postResources();
      }
    }

    public void putResources(java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> resources, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      putResources_call method_call = new putResources_call(resources, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class putResources_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> resources;
      public putResources_call(java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> resources, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.resources = resources;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("putResources", org.apache.thrift.protocol.TMessageType.CALL, 0));
        putResources_args args = new putResources_args();
        args.setResources(resources);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_putResources();
      }
    }

    public void delResources(java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> resources, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delResources_call method_call = new delResources_call(resources, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delResources_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> resources;
      public delResources_call(java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> resources, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.resources = resources;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delResources", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delResources_args args = new delResources_args();
        args.setResources(resources);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delResources();
      }
    }

    public void getResource(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getResource_call method_call = new getResource_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getResource_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private com.moseeker.thrift.gen.common.struct.CommonQuery query;
      public getResource_call(com.moseeker.thrift.gen.common.struct.CommonQuery query, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getResource_args args = new getResource_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getResource();
      }
    }

    public void postResource(com.moseeker.thrift.gen.profile.struct.Profile profile, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postResource_call method_call = new postResource_call(profile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postResource_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private com.moseeker.thrift.gen.profile.struct.Profile profile;
      public postResource_call(com.moseeker.thrift.gen.profile.struct.Profile profile, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.profile = profile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postResource_args args = new postResource_args();
        args.setProfile(profile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postResource();
      }
    }

    public void putResource(com.moseeker.thrift.gen.profile.struct.Profile profile, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      putResource_call method_call = new putResource_call(profile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class putResource_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private com.moseeker.thrift.gen.profile.struct.Profile profile;
      public putResource_call(com.moseeker.thrift.gen.profile.struct.Profile profile, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.profile = profile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("putResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        putResource_args args = new putResource_args();
        args.setProfile(profile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_putResource();
      }
    }

    public void delResource(com.moseeker.thrift.gen.profile.struct.Profile profile, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delResource_call method_call = new delResource_call(profile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delResource_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private com.moseeker.thrift.gen.profile.struct.Profile profile;
      public delResource_call(com.moseeker.thrift.gen.profile.struct.Profile profile, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.profile = profile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delResource_args args = new delResource_args();
        args.setProfile(profile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delResource();
      }
    }

    public void getCompleteness(int user_id, java.lang.String uuid, int profile_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCompleteness_call method_call = new getCompleteness_call(user_id, uuid, profile_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCompleteness_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private int user_id;
      private java.lang.String uuid;
      private int profile_id;
      public getCompleteness_call(int user_id, java.lang.String uuid, int profile_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_id = user_id;
        this.uuid = uuid;
        this.profile_id = profile_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCompleteness", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCompleteness_args args = new getCompleteness_args();
        args.setUser_id(user_id);
        args.setUuid(uuid);
        args.setProfile_id(profile_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCompleteness();
      }
    }

    public void reCalculateUserCompleteness(int userId, java.lang.String mobile, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reCalculateUserCompleteness_call method_call = new reCalculateUserCompleteness_call(userId, mobile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reCalculateUserCompleteness_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private int userId;
      private java.lang.String mobile;
      public reCalculateUserCompleteness_call(int userId, java.lang.String mobile, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.mobile = mobile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reCalculateUserCompleteness", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reCalculateUserCompleteness_args args = new reCalculateUserCompleteness_args();
        args.setUserId(userId);
        args.setMobile(mobile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reCalculateUserCompleteness();
      }
    }

    public void reCalculateUserCompletenessBySettingId(int id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reCalculateUserCompletenessBySettingId_call method_call = new reCalculateUserCompletenessBySettingId_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reCalculateUserCompletenessBySettingId_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private int id;
      public reCalculateUserCompletenessBySettingId_call(int id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reCalculateUserCompletenessBySettingId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reCalculateUserCompletenessBySettingId_args args = new reCalculateUserCompletenessBySettingId_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reCalculateUserCompletenessBySettingId();
      }
    }

    public void parseProfileAttachment(java.lang.String fileName, java.lang.String file, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      parseProfileAttachment_call method_call = new parseProfileAttachment_call(fileName, file, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class parseProfileAttachment_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private java.lang.String fileName;
      private java.lang.String file;
      public parseProfileAttachment_call(java.lang.String fileName, java.lang.String file, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileName = fileName;
        this.file = file;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("parseProfileAttachment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        parseProfileAttachment_args args = new parseProfileAttachment_args();
        args.setFileName(fileName);
        args.setFile(file);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_parseProfileAttachment();
      }
    }

    public void getProfileByApplication(com.moseeker.thrift.gen.profile.struct.ProfileApplicationForm profileForm, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProfileByApplication_call method_call = new getProfileByApplication_call(profileForm, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProfileByApplication_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private com.moseeker.thrift.gen.profile.struct.ProfileApplicationForm profileForm;
      public getProfileByApplication_call(com.moseeker.thrift.gen.profile.struct.ProfileApplicationForm profileForm, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.profileForm = profileForm;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProfileByApplication", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProfileByApplication_args args = new getProfileByApplication_args();
        args.setProfileForm(profileForm);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProfileByApplication();
      }
    }

    public void resumeProfile(int uid, java.lang.String fileName, java.lang.String file, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      resumeProfile_call method_call = new resumeProfile_call(uid, fileName, file, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class resumeProfile_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private int uid;
      private java.lang.String fileName;
      private java.lang.String file;
      public resumeProfile_call(int uid, java.lang.String fileName, java.lang.String file, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.fileName = fileName;
        this.file = file;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resumeProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        resumeProfile_args args = new resumeProfile_args();
        args.setUid(uid);
        args.setFileName(fileName);
        args.setFile(file);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_resumeProfile();
      }
    }

    public void upsertProfile(int userId, java.lang.String profile, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      upsertProfile_call method_call = new upsertProfile_call(userId, profile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class upsertProfile_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private int userId;
      private java.lang.String profile;
      public upsertProfile_call(int userId, java.lang.String profile, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.profile = profile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("upsertProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        upsertProfile_args args = new upsertProfile_args();
        args.setUserId(userId);
        args.setProfile(profile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_upsertProfile();
      }
    }

    public void resumeTalentProfile(java.lang.String fileName, java.lang.String file, int companyId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      resumeTalentProfile_call method_call = new resumeTalentProfile_call(fileName, file, companyId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class resumeTalentProfile_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private java.lang.String fileName;
      private java.lang.String file;
      private int companyId;
      public resumeTalentProfile_call(java.lang.String fileName, java.lang.String file, int companyId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileName = fileName;
        this.file = file;
        this.companyId = companyId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resumeTalentProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        resumeTalentProfile_args args = new resumeTalentProfile_args();
        args.setFileName(fileName);
        args.setFile(file);
        args.setCompanyId(companyId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_resumeTalentProfile();
      }
    }

    public void fetchUserProfile(java.util.List<java.lang.Integer> userIdList, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.profile.struct.UserProfile>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fetchUserProfile_call method_call = new fetchUserProfile_call(userIdList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetchUserProfile_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.moseeker.thrift.gen.profile.struct.UserProfile>> {
      private java.util.List<java.lang.Integer> userIdList;
      public fetchUserProfile_call(java.util.List<java.lang.Integer> userIdList, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.profile.struct.UserProfile>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userIdList = userIdList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchUserProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetchUserProfile_args args = new fetchUserProfile_args();
        args.setUserIdList(userIdList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.moseeker.thrift.gen.profile.struct.UserProfile> getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetchUserProfile();
      }
    }

    public void getProfileTokenDecrypt(java.lang.String token, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProfileTokenDecrypt_call method_call = new getProfileTokenDecrypt_call(token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProfileTokenDecrypt_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private java.lang.String token;
      public getProfileTokenDecrypt_call(java.lang.String token, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProfileTokenDecrypt", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProfileTokenDecrypt_args args = new getProfileTokenDecrypt_args();
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProfileTokenDecrypt();
      }
    }

    public void parseText(java.lang.String profile, int reference, int appid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      parseText_call method_call = new parseText_call(profile, reference, appid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class parseText_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private java.lang.String profile;
      private int reference;
      private int appid;
      public parseText_call(java.lang.String profile, int reference, int appid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.profile = profile;
        this.reference = reference;
        this.appid = appid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("parseText", org.apache.thrift.protocol.TMessageType.CALL, 0));
        parseText_args args = new parseText_args();
        args.setProfile(profile);
        args.setReference(reference);
        args.setAppid(appid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_parseText();
      }
    }

    public void parseFileProfile(int employeeId, java.lang.String fileName, java.nio.ByteBuffer fileData, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      parseFileProfile_call method_call = new parseFileProfile_call(employeeId, fileName, fileData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class parseFileProfile_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> {
      private int employeeId;
      private java.lang.String fileName;
      private java.nio.ByteBuffer fileData;
      public parseFileProfile_call(int employeeId, java.lang.String fileName, java.nio.ByteBuffer fileData, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.employeeId = employeeId;
        this.fileName = fileName;
        this.fileData = fileData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("parseFileProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        parseFileProfile_args args = new parseFileProfile_args();
        args.setEmployeeId(employeeId);
        args.setFileName(fileName);
        args.setFileData(fileData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.profile.struct.ProfileParseResult getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_parseFileProfile();
      }
    }

    public void parseFileProfileByFilePath(java.lang.String filePath, int userId, java.lang.String syncId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      parseFileProfileByFilePath_call method_call = new parseFileProfileByFilePath_call(filePath, userId, syncId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class parseFileProfileByFilePath_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> {
      private java.lang.String filePath;
      private int userId;
      private java.lang.String syncId;
      public parseFileProfileByFilePath_call(java.lang.String filePath, int userId, java.lang.String syncId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.filePath = filePath;
        this.userId = userId;
        this.syncId = syncId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("parseFileProfileByFilePath", org.apache.thrift.protocol.TMessageType.CALL, 0));
        parseFileProfileByFilePath_args args = new parseFileProfileByFilePath_args();
        args.setFilePath(filePath);
        args.setUserId(userId);
        args.setSyncId(syncId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.profile.struct.ProfileParseResult getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_parseFileProfileByFilePath();
      }
    }

    public void parseUserFileProfile(int employeeId, java.lang.String fileName, java.nio.ByteBuffer fileData, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      parseUserFileProfile_call method_call = new parseUserFileProfile_call(employeeId, fileName, fileData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class parseUserFileProfile_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> {
      private int employeeId;
      private java.lang.String fileName;
      private java.nio.ByteBuffer fileData;
      public parseUserFileProfile_call(int employeeId, java.lang.String fileName, java.nio.ByteBuffer fileData, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.employeeId = employeeId;
        this.fileName = fileName;
        this.fileData = fileData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("parseUserFileProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        parseUserFileProfile_args args = new parseUserFileProfile_args();
        args.setEmployeeId(employeeId);
        args.setFileName(fileName);
        args.setFileData(fileData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.profile.struct.ProfileParseResult getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_parseUserFileProfile();
      }
    }

    public void parseFileStreamProfile(int employeeId, java.lang.String fileOriginName, java.lang.String fileName, java.lang.String absoluteName, java.lang.String fileData, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      parseFileStreamProfile_call method_call = new parseFileStreamProfile_call(employeeId, fileOriginName, fileName, absoluteName, fileData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class parseFileStreamProfile_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> {
      private int employeeId;
      private java.lang.String fileOriginName;
      private java.lang.String fileName;
      private java.lang.String absoluteName;
      private java.lang.String fileData;
      public parseFileStreamProfile_call(int employeeId, java.lang.String fileOriginName, java.lang.String fileName, java.lang.String absoluteName, java.lang.String fileData, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.employeeId = employeeId;
        this.fileOriginName = fileOriginName;
        this.fileName = fileName;
        this.absoluteName = absoluteName;
        this.fileData = fileData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("parseFileStreamProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        parseFileStreamProfile_args args = new parseFileStreamProfile_args();
        args.setEmployeeId(employeeId);
        args.setFileOriginName(fileOriginName);
        args.setFileName(fileName);
        args.setAbsoluteName(absoluteName);
        args.setFileData(fileData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.profile.struct.ProfileParseResult getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_parseFileStreamProfile();
      }
    }

    public void employeeReferralProfile(int employeeId, java.lang.String name, java.lang.String mobile, java.util.List<java.lang.String> referralReasons, int position, byte relationship, java.lang.String recomReasonText, byte referralType, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      employeeReferralProfile_call method_call = new employeeReferralProfile_call(employeeId, name, mobile, referralReasons, position, relationship, recomReasonText, referralType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class employeeReferralProfile_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private int employeeId;
      private java.lang.String name;
      private java.lang.String mobile;
      private java.util.List<java.lang.String> referralReasons;
      private int position;
      private byte relationship;
      private java.lang.String recomReasonText;
      private byte referralType;
      public employeeReferralProfile_call(int employeeId, java.lang.String name, java.lang.String mobile, java.util.List<java.lang.String> referralReasons, int position, byte relationship, java.lang.String recomReasonText, byte referralType, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.employeeId = employeeId;
        this.name = name;
        this.mobile = mobile;
        this.referralReasons = referralReasons;
        this.position = position;
        this.relationship = relationship;
        this.recomReasonText = recomReasonText;
        this.referralType = referralType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("employeeReferralProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        employeeReferralProfile_args args = new employeeReferralProfile_args();
        args.setEmployeeId(employeeId);
        args.setName(name);
        args.setMobile(mobile);
        args.setReferralReasons(referralReasons);
        args.setPosition(position);
        args.setRelationship(relationship);
        args.setRecomReasonText(recomReasonText);
        args.setReferralType(referralType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_employeeReferralProfile();
      }
    }

    public void updateUserProfile(int employeeId, java.lang.String name, java.lang.String mobile, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateUserProfile_call method_call = new updateUserProfile_call(employeeId, name, mobile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateUserProfile_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private int employeeId;
      private java.lang.String name;
      private java.lang.String mobile;
      public updateUserProfile_call(int employeeId, java.lang.String name, java.lang.String mobile, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.employeeId = employeeId;
        this.name = name;
        this.mobile = mobile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateUserProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateUserProfile_args args = new updateUserProfile_args();
        args.setEmployeeId(employeeId);
        args.setName(name);
        args.setMobile(mobile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateUserProfile();
      }
    }

    public void employeeDeleteReferralProfile(int employeeId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      employeeDeleteReferralProfile_call method_call = new employeeDeleteReferralProfile_call(employeeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class employeeDeleteReferralProfile_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int employeeId;
      public employeeDeleteReferralProfile_call(int employeeId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.employeeId = employeeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("employeeDeleteReferralProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        employeeDeleteReferralProfile_args args = new employeeDeleteReferralProfile_args();
        args.setEmployeeId(employeeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void postCandidateInfo(int employeeId, com.moseeker.thrift.gen.profile.struct.CandidateInfo candidateInfo, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postCandidateInfo_call method_call = new postCandidateInfo_call(employeeId, candidateInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postCandidateInfo_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private int employeeId;
      private com.moseeker.thrift.gen.profile.struct.CandidateInfo candidateInfo;
      public postCandidateInfo_call(int employeeId, com.moseeker.thrift.gen.profile.struct.CandidateInfo candidateInfo, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.employeeId = employeeId;
        this.candidateInfo = candidateInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postCandidateInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postCandidateInfo_args args = new postCandidateInfo_args();
        args.setEmployeeId(employeeId);
        args.setCandidateInfo(candidateInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postCandidateInfo();
      }
    }

    public void saveMobotReferralProfile(int employeeId, java.util.List<java.lang.Integer> ids, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveMobotReferralProfile_call method_call = new saveMobotReferralProfile_call(employeeId, ids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveMobotReferralProfile_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,java.lang.String>> {
      private int employeeId;
      private java.util.List<java.lang.Integer> ids;
      public saveMobotReferralProfile_call(int employeeId, java.util.List<java.lang.Integer> ids, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.employeeId = employeeId;
        this.ids = ids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveMobotReferralProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveMobotReferralProfile_args args = new saveMobotReferralProfile_args();
        args.setEmployeeId(employeeId);
        args.setIds(ids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.Map<java.lang.String,java.lang.String> getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveMobotReferralProfile();
      }
    }

    public void saveMobotReferralProfileCache(int employeeId, java.lang.String mobile, java.lang.String name, java.util.List<java.lang.String> referralReasons, byte referralType, java.lang.String fileName, int relationship, java.lang.String recomReasonText, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveMobotReferralProfileCache_call method_call = new saveMobotReferralProfileCache_call(employeeId, mobile, name, referralReasons, referralType, fileName, relationship, recomReasonText, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveMobotReferralProfileCache_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private int employeeId;
      private java.lang.String mobile;
      private java.lang.String name;
      private java.util.List<java.lang.String> referralReasons;
      private byte referralType;
      private java.lang.String fileName;
      private int relationship;
      private java.lang.String recomReasonText;
      public saveMobotReferralProfileCache_call(int employeeId, java.lang.String mobile, java.lang.String name, java.util.List<java.lang.String> referralReasons, byte referralType, java.lang.String fileName, int relationship, java.lang.String recomReasonText, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.employeeId = employeeId;
        this.mobile = mobile;
        this.name = name;
        this.referralReasons = referralReasons;
        this.referralType = referralType;
        this.fileName = fileName;
        this.relationship = relationship;
        this.recomReasonText = recomReasonText;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveMobotReferralProfileCache", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveMobotReferralProfileCache_args args = new saveMobotReferralProfileCache_args();
        args.setEmployeeId(employeeId);
        args.setMobile(mobile);
        args.setName(name);
        args.setReferralReasons(referralReasons);
        args.setReferralType(referralType);
        args.setFileName(fileName);
        args.setRelationship(relationship);
        args.setRecomReasonText(recomReasonText);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveMobotReferralProfileCache();
      }
    }

    public void getMobotReferralCache(int employeeId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMobotReferralCache_call method_call = new getMobotReferralCache_call(employeeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMobotReferralCache_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private int employeeId;
      public getMobotReferralCache_call(int employeeId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.employeeId = employeeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMobotReferralCache", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMobotReferralCache_args args = new getMobotReferralCache_args();
        args.setEmployeeId(employeeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMobotReferralCache();
      }
    }

    public void parseHunterFileProfile(int headhunterId, java.lang.String fileName, java.nio.ByteBuffer fileData, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      parseHunterFileProfile_call method_call = new parseHunterFileProfile_call(headhunterId, fileName, fileData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class parseHunterFileProfile_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> {
      private int headhunterId;
      private java.lang.String fileName;
      private java.nio.ByteBuffer fileData;
      public parseHunterFileProfile_call(int headhunterId, java.lang.String fileName, java.nio.ByteBuffer fileData, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.headhunterId = headhunterId;
        this.fileName = fileName;
        this.fileData = fileData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("parseHunterFileProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        parseHunterFileProfile_args args = new parseHunterFileProfile_args();
        args.setHeadhunterId(headhunterId);
        args.setFileName(fileName);
        args.setFileData(fileData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.profile.struct.ProfileParseResult getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_parseHunterFileProfile();
      }
    }

    public void uploadFiles(java.lang.String sceneId, java.lang.String unionid, java.lang.String fileName, java.nio.ByteBuffer fileData, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      uploadFiles_call method_call = new uploadFiles_call(sceneId, unionid, fileName, fileData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class uploadFiles_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles> {
      private java.lang.String sceneId;
      private java.lang.String unionid;
      private java.lang.String fileName;
      private java.nio.ByteBuffer fileData;
      public uploadFiles_call(java.lang.String sceneId, java.lang.String unionid, java.lang.String fileName, java.nio.ByteBuffer fileData, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sceneId = sceneId;
        this.unionid = unionid;
        this.fileName = fileName;
        this.fileData = fileData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("uploadFiles", org.apache.thrift.protocol.TMessageType.CALL, 0));
        uploadFiles_args args = new uploadFiles_args();
        args.setSceneId(sceneId);
        args.setUnionid(unionid);
        args.setFileName(fileName);
        args.setFileData(fileData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_uploadFiles();
      }
    }

    public void getUploadFiles(java.lang.String unionId, int pageSize, int pageNo, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUploadFiles_call method_call = new getUploadFiles_call(unionId, pageSize, pageNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUploadFiles_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles>> {
      private java.lang.String unionId;
      private int pageSize;
      private int pageNo;
      public getUploadFiles_call(java.lang.String unionId, int pageSize, int pageNo, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.unionId = unionId;
        this.pageSize = pageSize;
        this.pageNo = pageNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUploadFiles", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUploadFiles_args args = new getUploadFiles_args();
        args.setUnionId(unionId);
        args.setPageSize(pageSize);
        args.setPageNo(pageNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles> getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUploadFiles();
      }
    }

    public void downLoadFiles(java.lang.String sceneId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      downLoadFiles_call method_call = new downLoadFiles_call(sceneId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class downLoadFiles_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String sceneId;
      public downLoadFiles_call(java.lang.String sceneId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sceneId = sceneId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("downLoadFiles", org.apache.thrift.protocol.TMessageType.CALL, 0));
        downLoadFiles_args args = new downLoadFiles_args();
        args.setSceneId(sceneId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_downLoadFiles();
      }
    }

    public void referralResumeInfo(java.lang.String sceneId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      referralResumeInfo_call method_call = new referralResumeInfo_call(sceneId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class referralResumeInfo_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles> {
      private java.lang.String sceneId;
      public referralResumeInfo_call(java.lang.String sceneId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sceneId = sceneId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("referralResumeInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        referralResumeInfo_args args = new referralResumeInfo_args();
        args.setSceneId(sceneId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_referralResumeInfo();
      }
    }

    public void getSpecifyProfileResult(int employeeId, java.lang.String syncId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSpecifyProfileResult_call method_call = new getSpecifyProfileResult_call(employeeId, syncId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSpecifyProfileResult_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int employeeId;
      private java.lang.String syncId;
      public getSpecifyProfileResult_call(int employeeId, java.lang.String syncId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.employeeId = employeeId;
        this.syncId = syncId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSpecifyProfileResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSpecifyProfileResult_args args = new getSpecifyProfileResult_args();
        args.setEmployeeId(employeeId);
        args.setSyncId(syncId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSpecifyProfileResult();
      }
    }

    public void checkResult(int employeeId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkResult_call method_call = new checkResult_call(employeeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkResult_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> {
      private int employeeId;
      public checkResult_call(int employeeId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.employeeId = employeeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkResult_args args = new checkResult_args();
        args.setEmployeeId(employeeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.profile.struct.ProfileParseResult getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkResult();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("healthCheck", new healthCheck());
      processMap.put("getResources", new getResources());
      processMap.put("getPagination", new getPagination());
      processMap.put("postResources", new postResources());
      processMap.put("putResources", new putResources());
      processMap.put("delResources", new delResources());
      processMap.put("getResource", new getResource());
      processMap.put("postResource", new postResource());
      processMap.put("putResource", new putResource());
      processMap.put("delResource", new delResource());
      processMap.put("getCompleteness", new getCompleteness());
      processMap.put("reCalculateUserCompleteness", new reCalculateUserCompleteness());
      processMap.put("reCalculateUserCompletenessBySettingId", new reCalculateUserCompletenessBySettingId());
      processMap.put("parseProfileAttachment", new parseProfileAttachment());
      processMap.put("getProfileByApplication", new getProfileByApplication());
      processMap.put("resumeProfile", new resumeProfile());
      processMap.put("upsertProfile", new upsertProfile());
      processMap.put("resumeTalentProfile", new resumeTalentProfile());
      processMap.put("fetchUserProfile", new fetchUserProfile());
      processMap.put("getProfileTokenDecrypt", new getProfileTokenDecrypt());
      processMap.put("parseText", new parseText());
      processMap.put("parseFileProfile", new parseFileProfile());
      processMap.put("parseFileProfileByFilePath", new parseFileProfileByFilePath());
      processMap.put("parseUserFileProfile", new parseUserFileProfile());
      processMap.put("parseFileStreamProfile", new parseFileStreamProfile());
      processMap.put("employeeReferralProfile", new employeeReferralProfile());
      processMap.put("updateUserProfile", new updateUserProfile());
      processMap.put("employeeDeleteReferralProfile", new employeeDeleteReferralProfile());
      processMap.put("postCandidateInfo", new postCandidateInfo());
      processMap.put("saveMobotReferralProfile", new saveMobotReferralProfile());
      processMap.put("saveMobotReferralProfileCache", new saveMobotReferralProfileCache());
      processMap.put("getMobotReferralCache", new getMobotReferralCache());
      processMap.put("parseHunterFileProfile", new parseHunterFileProfile());
      processMap.put("uploadFiles", new uploadFiles());
      processMap.put("getUploadFiles", new getUploadFiles());
      processMap.put("downLoadFiles", new downLoadFiles());
      processMap.put("referralResumeInfo", new referralResumeInfo());
      processMap.put("getSpecifyProfileResult", new getSpecifyProfileResult());
      processMap.put("checkResult", new checkResult());
      return processMap;
    }

    public static class healthCheck<I extends Iface> extends org.apache.thrift.ProcessFunction<I, healthCheck_args> {
      public healthCheck() {
        super("healthCheck");
      }

      public healthCheck_args getEmptyArgsInstance() {
        return new healthCheck_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public healthCheck_result getResult(I iface, healthCheck_args args) throws org.apache.thrift.TException {
        healthCheck_result result = new healthCheck_result();
        result.success = iface.healthCheck();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getResources<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getResources_args> {
      public getResources() {
        super("getResources");
      }

      public getResources_args getEmptyArgsInstance() {
        return new getResources_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getResources_result getResult(I iface, getResources_args args) throws org.apache.thrift.TException {
        getResources_result result = new getResources_result();
        try {
          result.success = iface.getResources(args.query);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getPagination<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPagination_args> {
      public getPagination() {
        super("getPagination");
      }

      public getPagination_args getEmptyArgsInstance() {
        return new getPagination_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getPagination_result getResult(I iface, getPagination_args args) throws org.apache.thrift.TException {
        getPagination_result result = new getPagination_result();
        try {
          result.success = iface.getPagination(args.query);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class postResources<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postResources_args> {
      public postResources() {
        super("postResources");
      }

      public postResources_args getEmptyArgsInstance() {
        return new postResources_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public postResources_result getResult(I iface, postResources_args args) throws org.apache.thrift.TException {
        postResources_result result = new postResources_result();
        try {
          result.success = iface.postResources(args.resources);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class putResources<I extends Iface> extends org.apache.thrift.ProcessFunction<I, putResources_args> {
      public putResources() {
        super("putResources");
      }

      public putResources_args getEmptyArgsInstance() {
        return new putResources_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public putResources_result getResult(I iface, putResources_args args) throws org.apache.thrift.TException {
        putResources_result result = new putResources_result();
        try {
          result.success = iface.putResources(args.resources);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class delResources<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delResources_args> {
      public delResources() {
        super("delResources");
      }

      public delResources_args getEmptyArgsInstance() {
        return new delResources_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public delResources_result getResult(I iface, delResources_args args) throws org.apache.thrift.TException {
        delResources_result result = new delResources_result();
        try {
          result.success = iface.delResources(args.resources);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getResource_args> {
      public getResource() {
        super("getResource");
      }

      public getResource_args getEmptyArgsInstance() {
        return new getResource_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getResource_result getResult(I iface, getResource_args args) throws org.apache.thrift.TException {
        getResource_result result = new getResource_result();
        result.success = iface.getResource(args.query);
        return result;
      }
    }

    public static class postResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postResource_args> {
      public postResource() {
        super("postResource");
      }

      public postResource_args getEmptyArgsInstance() {
        return new postResource_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public postResource_result getResult(I iface, postResource_args args) throws org.apache.thrift.TException {
        postResource_result result = new postResource_result();
        result.success = iface.postResource(args.profile);
        return result;
      }
    }

    public static class putResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, putResource_args> {
      public putResource() {
        super("putResource");
      }

      public putResource_args getEmptyArgsInstance() {
        return new putResource_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public putResource_result getResult(I iface, putResource_args args) throws org.apache.thrift.TException {
        putResource_result result = new putResource_result();
        result.success = iface.putResource(args.profile);
        return result;
      }
    }

    public static class delResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delResource_args> {
      public delResource() {
        super("delResource");
      }

      public delResource_args getEmptyArgsInstance() {
        return new delResource_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public delResource_result getResult(I iface, delResource_args args) throws org.apache.thrift.TException {
        delResource_result result = new delResource_result();
        result.success = iface.delResource(args.profile);
        return result;
      }
    }

    public static class getCompleteness<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCompleteness_args> {
      public getCompleteness() {
        super("getCompleteness");
      }

      public getCompleteness_args getEmptyArgsInstance() {
        return new getCompleteness_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getCompleteness_result getResult(I iface, getCompleteness_args args) throws org.apache.thrift.TException {
        getCompleteness_result result = new getCompleteness_result();
        result.success = iface.getCompleteness(args.user_id, args.uuid, args.profile_id);
        return result;
      }
    }

    public static class reCalculateUserCompleteness<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reCalculateUserCompleteness_args> {
      public reCalculateUserCompleteness() {
        super("reCalculateUserCompleteness");
      }

      public reCalculateUserCompleteness_args getEmptyArgsInstance() {
        return new reCalculateUserCompleteness_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public reCalculateUserCompleteness_result getResult(I iface, reCalculateUserCompleteness_args args) throws org.apache.thrift.TException {
        reCalculateUserCompleteness_result result = new reCalculateUserCompleteness_result();
        result.success = iface.reCalculateUserCompleteness(args.userId, args.mobile);
        return result;
      }
    }

    public static class reCalculateUserCompletenessBySettingId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reCalculateUserCompletenessBySettingId_args> {
      public reCalculateUserCompletenessBySettingId() {
        super("reCalculateUserCompletenessBySettingId");
      }

      public reCalculateUserCompletenessBySettingId_args getEmptyArgsInstance() {
        return new reCalculateUserCompletenessBySettingId_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public reCalculateUserCompletenessBySettingId_result getResult(I iface, reCalculateUserCompletenessBySettingId_args args) throws org.apache.thrift.TException {
        reCalculateUserCompletenessBySettingId_result result = new reCalculateUserCompletenessBySettingId_result();
        result.success = iface.reCalculateUserCompletenessBySettingId(args.id);
        return result;
      }
    }

    public static class parseProfileAttachment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, parseProfileAttachment_args> {
      public parseProfileAttachment() {
        super("parseProfileAttachment");
      }

      public parseProfileAttachment_args getEmptyArgsInstance() {
        return new parseProfileAttachment_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public parseProfileAttachment_result getResult(I iface, parseProfileAttachment_args args) throws org.apache.thrift.TException {
        parseProfileAttachment_result result = new parseProfileAttachment_result();
        try {
          result.success = iface.parseProfileAttachment(args.fileName, args.file);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getProfileByApplication<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProfileByApplication_args> {
      public getProfileByApplication() {
        super("getProfileByApplication");
      }

      public getProfileByApplication_args getEmptyArgsInstance() {
        return new getProfileByApplication_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getProfileByApplication_result getResult(I iface, getProfileByApplication_args args) throws org.apache.thrift.TException {
        getProfileByApplication_result result = new getProfileByApplication_result();
        result.success = iface.getProfileByApplication(args.profileForm);
        return result;
      }
    }

    public static class resumeProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, resumeProfile_args> {
      public resumeProfile() {
        super("resumeProfile");
      }

      public resumeProfile_args getEmptyArgsInstance() {
        return new resumeProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public resumeProfile_result getResult(I iface, resumeProfile_args args) throws org.apache.thrift.TException {
        resumeProfile_result result = new resumeProfile_result();
        try {
          result.success = iface.resumeProfile(args.uid, args.fileName, args.file);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class upsertProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, upsertProfile_args> {
      public upsertProfile() {
        super("upsertProfile");
      }

      public upsertProfile_args getEmptyArgsInstance() {
        return new upsertProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public upsertProfile_result getResult(I iface, upsertProfile_args args) throws org.apache.thrift.TException {
        upsertProfile_result result = new upsertProfile_result();
        try {
          result.success = iface.upsertProfile(args.userId, args.profile);
          result.setSuccessIsSet(true);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class resumeTalentProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, resumeTalentProfile_args> {
      public resumeTalentProfile() {
        super("resumeTalentProfile");
      }

      public resumeTalentProfile_args getEmptyArgsInstance() {
        return new resumeTalentProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public resumeTalentProfile_result getResult(I iface, resumeTalentProfile_args args) throws org.apache.thrift.TException {
        resumeTalentProfile_result result = new resumeTalentProfile_result();
        try {
          result.success = iface.resumeTalentProfile(args.fileName, args.file, args.companyId);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class fetchUserProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchUserProfile_args> {
      public fetchUserProfile() {
        super("fetchUserProfile");
      }

      public fetchUserProfile_args getEmptyArgsInstance() {
        return new fetchUserProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public fetchUserProfile_result getResult(I iface, fetchUserProfile_args args) throws org.apache.thrift.TException {
        fetchUserProfile_result result = new fetchUserProfile_result();
        try {
          result.success = iface.fetchUserProfile(args.userIdList);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getProfileTokenDecrypt<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProfileTokenDecrypt_args> {
      public getProfileTokenDecrypt() {
        super("getProfileTokenDecrypt");
      }

      public getProfileTokenDecrypt_args getEmptyArgsInstance() {
        return new getProfileTokenDecrypt_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getProfileTokenDecrypt_result getResult(I iface, getProfileTokenDecrypt_args args) throws org.apache.thrift.TException {
        getProfileTokenDecrypt_result result = new getProfileTokenDecrypt_result();
        result.success = iface.getProfileTokenDecrypt(args.token);
        return result;
      }
    }

    public static class parseText<I extends Iface> extends org.apache.thrift.ProcessFunction<I, parseText_args> {
      public parseText() {
        super("parseText");
      }

      public parseText_args getEmptyArgsInstance() {
        return new parseText_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public parseText_result getResult(I iface, parseText_args args) throws org.apache.thrift.TException {
        parseText_result result = new parseText_result();
        try {
          result.success = iface.parseText(args.profile, args.reference, args.appid);
          result.setSuccessIsSet(true);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class parseFileProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, parseFileProfile_args> {
      public parseFileProfile() {
        super("parseFileProfile");
      }

      public parseFileProfile_args getEmptyArgsInstance() {
        return new parseFileProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public parseFileProfile_result getResult(I iface, parseFileProfile_args args) throws org.apache.thrift.TException {
        parseFileProfile_result result = new parseFileProfile_result();
        try {
          result.success = iface.parseFileProfile(args.employeeId, args.fileName, args.fileData);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class parseFileProfileByFilePath<I extends Iface> extends org.apache.thrift.ProcessFunction<I, parseFileProfileByFilePath_args> {
      public parseFileProfileByFilePath() {
        super("parseFileProfileByFilePath");
      }

      public parseFileProfileByFilePath_args getEmptyArgsInstance() {
        return new parseFileProfileByFilePath_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public parseFileProfileByFilePath_result getResult(I iface, parseFileProfileByFilePath_args args) throws org.apache.thrift.TException {
        parseFileProfileByFilePath_result result = new parseFileProfileByFilePath_result();
        try {
          result.success = iface.parseFileProfileByFilePath(args.filePath, args.userId, args.syncId);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class parseUserFileProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, parseUserFileProfile_args> {
      public parseUserFileProfile() {
        super("parseUserFileProfile");
      }

      public parseUserFileProfile_args getEmptyArgsInstance() {
        return new parseUserFileProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public parseUserFileProfile_result getResult(I iface, parseUserFileProfile_args args) throws org.apache.thrift.TException {
        parseUserFileProfile_result result = new parseUserFileProfile_result();
        try {
          result.success = iface.parseUserFileProfile(args.employeeId, args.fileName, args.fileData);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class parseFileStreamProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, parseFileStreamProfile_args> {
      public parseFileStreamProfile() {
        super("parseFileStreamProfile");
      }

      public parseFileStreamProfile_args getEmptyArgsInstance() {
        return new parseFileStreamProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public parseFileStreamProfile_result getResult(I iface, parseFileStreamProfile_args args) throws org.apache.thrift.TException {
        parseFileStreamProfile_result result = new parseFileStreamProfile_result();
        try {
          result.success = iface.parseFileStreamProfile(args.employeeId, args.fileOriginName, args.fileName, args.absoluteName, args.fileData);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class employeeReferralProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, employeeReferralProfile_args> {
      public employeeReferralProfile() {
        super("employeeReferralProfile");
      }

      public employeeReferralProfile_args getEmptyArgsInstance() {
        return new employeeReferralProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public employeeReferralProfile_result getResult(I iface, employeeReferralProfile_args args) throws org.apache.thrift.TException {
        employeeReferralProfile_result result = new employeeReferralProfile_result();
        try {
          result.success = iface.employeeReferralProfile(args.employeeId, args.name, args.mobile, args.referralReasons, args.position, args.relationship, args.recomReasonText, args.referralType);
          result.setSuccessIsSet(true);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateUserProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateUserProfile_args> {
      public updateUserProfile() {
        super("updateUserProfile");
      }

      public updateUserProfile_args getEmptyArgsInstance() {
        return new updateUserProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public updateUserProfile_result getResult(I iface, updateUserProfile_args args) throws org.apache.thrift.TException {
        updateUserProfile_result result = new updateUserProfile_result();
        try {
          result.success = iface.updateUserProfile(args.employeeId, args.name, args.mobile);
          result.setSuccessIsSet(true);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class employeeDeleteReferralProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, employeeDeleteReferralProfile_args> {
      public employeeDeleteReferralProfile() {
        super("employeeDeleteReferralProfile");
      }

      public employeeDeleteReferralProfile_args getEmptyArgsInstance() {
        return new employeeDeleteReferralProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public employeeDeleteReferralProfile_result getResult(I iface, employeeDeleteReferralProfile_args args) throws org.apache.thrift.TException {
        employeeDeleteReferralProfile_result result = new employeeDeleteReferralProfile_result();
        try {
          iface.employeeDeleteReferralProfile(args.employeeId);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class postCandidateInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postCandidateInfo_args> {
      public postCandidateInfo() {
        super("postCandidateInfo");
      }

      public postCandidateInfo_args getEmptyArgsInstance() {
        return new postCandidateInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public postCandidateInfo_result getResult(I iface, postCandidateInfo_args args) throws org.apache.thrift.TException {
        postCandidateInfo_result result = new postCandidateInfo_result();
        try {
          result.success = iface.postCandidateInfo(args.employeeId, args.candidateInfo);
          result.setSuccessIsSet(true);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class saveMobotReferralProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveMobotReferralProfile_args> {
      public saveMobotReferralProfile() {
        super("saveMobotReferralProfile");
      }

      public saveMobotReferralProfile_args getEmptyArgsInstance() {
        return new saveMobotReferralProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public saveMobotReferralProfile_result getResult(I iface, saveMobotReferralProfile_args args) throws org.apache.thrift.TException {
        saveMobotReferralProfile_result result = new saveMobotReferralProfile_result();
        try {
          result.success = iface.saveMobotReferralProfile(args.employeeId, args.ids);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class saveMobotReferralProfileCache<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveMobotReferralProfileCache_args> {
      public saveMobotReferralProfileCache() {
        super("saveMobotReferralProfileCache");
      }

      public saveMobotReferralProfileCache_args getEmptyArgsInstance() {
        return new saveMobotReferralProfileCache_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public saveMobotReferralProfileCache_result getResult(I iface, saveMobotReferralProfileCache_args args) throws org.apache.thrift.TException {
        saveMobotReferralProfileCache_result result = new saveMobotReferralProfileCache_result();
        try {
          result.success = iface.saveMobotReferralProfileCache(args.employeeId, args.mobile, args.name, args.referralReasons, args.referralType, args.fileName, args.relationship, args.recomReasonText);
          result.setSuccessIsSet(true);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getMobotReferralCache<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMobotReferralCache_args> {
      public getMobotReferralCache() {
        super("getMobotReferralCache");
      }

      public getMobotReferralCache_args getEmptyArgsInstance() {
        return new getMobotReferralCache_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getMobotReferralCache_result getResult(I iface, getMobotReferralCache_args args) throws org.apache.thrift.TException {
        getMobotReferralCache_result result = new getMobotReferralCache_result();
        try {
          result.success = iface.getMobotReferralCache(args.employeeId);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class parseHunterFileProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, parseHunterFileProfile_args> {
      public parseHunterFileProfile() {
        super("parseHunterFileProfile");
      }

      public parseHunterFileProfile_args getEmptyArgsInstance() {
        return new parseHunterFileProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public parseHunterFileProfile_result getResult(I iface, parseHunterFileProfile_args args) throws org.apache.thrift.TException {
        parseHunterFileProfile_result result = new parseHunterFileProfile_result();
        try {
          result.success = iface.parseHunterFileProfile(args.headhunterId, args.fileName, args.fileData);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class uploadFiles<I extends Iface> extends org.apache.thrift.ProcessFunction<I, uploadFiles_args> {
      public uploadFiles() {
        super("uploadFiles");
      }

      public uploadFiles_args getEmptyArgsInstance() {
        return new uploadFiles_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public uploadFiles_result getResult(I iface, uploadFiles_args args) throws org.apache.thrift.TException {
        uploadFiles_result result = new uploadFiles_result();
        try {
          result.success = iface.uploadFiles(args.sceneId, args.unionid, args.fileName, args.fileData);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getUploadFiles<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUploadFiles_args> {
      public getUploadFiles() {
        super("getUploadFiles");
      }

      public getUploadFiles_args getEmptyArgsInstance() {
        return new getUploadFiles_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getUploadFiles_result getResult(I iface, getUploadFiles_args args) throws org.apache.thrift.TException {
        getUploadFiles_result result = new getUploadFiles_result();
        try {
          result.success = iface.getUploadFiles(args.unionId, args.pageSize, args.pageNo);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class downLoadFiles<I extends Iface> extends org.apache.thrift.ProcessFunction<I, downLoadFiles_args> {
      public downLoadFiles() {
        super("downLoadFiles");
      }

      public downLoadFiles_args getEmptyArgsInstance() {
        return new downLoadFiles_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public downLoadFiles_result getResult(I iface, downLoadFiles_args args) throws org.apache.thrift.TException {
        downLoadFiles_result result = new downLoadFiles_result();
        try {
          result.success = iface.downLoadFiles(args.sceneId);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class referralResumeInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, referralResumeInfo_args> {
      public referralResumeInfo() {
        super("referralResumeInfo");
      }

      public referralResumeInfo_args getEmptyArgsInstance() {
        return new referralResumeInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public referralResumeInfo_result getResult(I iface, referralResumeInfo_args args) throws org.apache.thrift.TException {
        referralResumeInfo_result result = new referralResumeInfo_result();
        try {
          result.success = iface.referralResumeInfo(args.sceneId);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getSpecifyProfileResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSpecifyProfileResult_args> {
      public getSpecifyProfileResult() {
        super("getSpecifyProfileResult");
      }

      public getSpecifyProfileResult_args getEmptyArgsInstance() {
        return new getSpecifyProfileResult_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getSpecifyProfileResult_result getResult(I iface, getSpecifyProfileResult_args args) throws org.apache.thrift.TException {
        getSpecifyProfileResult_result result = new getSpecifyProfileResult_result();
        try {
          result.success = iface.getSpecifyProfileResult(args.employeeId, args.syncId);
          result.setSuccessIsSet(true);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class checkResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkResult_args> {
      public checkResult() {
        super("checkResult");
      }

      public checkResult_args getEmptyArgsInstance() {
        return new checkResult_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public checkResult_result getResult(I iface, checkResult_args args) throws org.apache.thrift.TException {
        checkResult_result result = new checkResult_result();
        try {
          result.success = iface.checkResult(args.employeeId);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("healthCheck", new healthCheck());
      processMap.put("getResources", new getResources());
      processMap.put("getPagination", new getPagination());
      processMap.put("postResources", new postResources());
      processMap.put("putResources", new putResources());
      processMap.put("delResources", new delResources());
      processMap.put("getResource", new getResource());
      processMap.put("postResource", new postResource());
      processMap.put("putResource", new putResource());
      processMap.put("delResource", new delResource());
      processMap.put("getCompleteness", new getCompleteness());
      processMap.put("reCalculateUserCompleteness", new reCalculateUserCompleteness());
      processMap.put("reCalculateUserCompletenessBySettingId", new reCalculateUserCompletenessBySettingId());
      processMap.put("parseProfileAttachment", new parseProfileAttachment());
      processMap.put("getProfileByApplication", new getProfileByApplication());
      processMap.put("resumeProfile", new resumeProfile());
      processMap.put("upsertProfile", new upsertProfile());
      processMap.put("resumeTalentProfile", new resumeTalentProfile());
      processMap.put("fetchUserProfile", new fetchUserProfile());
      processMap.put("getProfileTokenDecrypt", new getProfileTokenDecrypt());
      processMap.put("parseText", new parseText());
      processMap.put("parseFileProfile", new parseFileProfile());
      processMap.put("parseFileProfileByFilePath", new parseFileProfileByFilePath());
      processMap.put("parseUserFileProfile", new parseUserFileProfile());
      processMap.put("parseFileStreamProfile", new parseFileStreamProfile());
      processMap.put("employeeReferralProfile", new employeeReferralProfile());
      processMap.put("updateUserProfile", new updateUserProfile());
      processMap.put("employeeDeleteReferralProfile", new employeeDeleteReferralProfile());
      processMap.put("postCandidateInfo", new postCandidateInfo());
      processMap.put("saveMobotReferralProfile", new saveMobotReferralProfile());
      processMap.put("saveMobotReferralProfileCache", new saveMobotReferralProfileCache());
      processMap.put("getMobotReferralCache", new getMobotReferralCache());
      processMap.put("parseHunterFileProfile", new parseHunterFileProfile());
      processMap.put("uploadFiles", new uploadFiles());
      processMap.put("getUploadFiles", new getUploadFiles());
      processMap.put("downLoadFiles", new downLoadFiles());
      processMap.put("referralResumeInfo", new referralResumeInfo());
      processMap.put("getSpecifyProfileResult", new getSpecifyProfileResult());
      processMap.put("checkResult", new checkResult());
      return processMap;
    }

    public static class healthCheck<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, healthCheck_args, java.lang.Boolean> {
      public healthCheck() {
        super("healthCheck");
      }

      public healthCheck_args getEmptyArgsInstance() {
        return new healthCheck_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() {
          public void onComplete(java.lang.Boolean o) {
            healthCheck_result result = new healthCheck_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            healthCheck_result result = new healthCheck_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, healthCheck_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.healthCheck(resultHandler);
      }
    }

    public static class getResources<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getResources_args, com.moseeker.thrift.gen.common.struct.Response> {
      public getResources() {
        super("getResources");
      }

      public getResources_args getEmptyArgsInstance() {
        return new getResources_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            getResources_result result = new getResources_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getResources_result result = new getResources_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getResources_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.getResources(args.query,resultHandler);
      }
    }

    public static class getPagination<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPagination_args, com.moseeker.thrift.gen.common.struct.Response> {
      public getPagination() {
        super("getPagination");
      }

      public getPagination_args getEmptyArgsInstance() {
        return new getPagination_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            getPagination_result result = new getPagination_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getPagination_result result = new getPagination_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPagination_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.getPagination(args.query,resultHandler);
      }
    }

    public static class postResources<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postResources_args, com.moseeker.thrift.gen.common.struct.Response> {
      public postResources() {
        super("postResources");
      }

      public postResources_args getEmptyArgsInstance() {
        return new postResources_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            postResources_result result = new postResources_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            postResources_result result = new postResources_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postResources_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.postResources(args.resources,resultHandler);
      }
    }

    public static class putResources<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, putResources_args, com.moseeker.thrift.gen.common.struct.Response> {
      public putResources() {
        super("putResources");
      }

      public putResources_args getEmptyArgsInstance() {
        return new putResources_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            putResources_result result = new putResources_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            putResources_result result = new putResources_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, putResources_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.putResources(args.resources,resultHandler);
      }
    }

    public static class delResources<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delResources_args, com.moseeker.thrift.gen.common.struct.Response> {
      public delResources() {
        super("delResources");
      }

      public delResources_args getEmptyArgsInstance() {
        return new delResources_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            delResources_result result = new delResources_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            delResources_result result = new delResources_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delResources_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.delResources(args.resources,resultHandler);
      }
    }

    public static class getResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getResource_args, com.moseeker.thrift.gen.common.struct.Response> {
      public getResource() {
        super("getResource");
      }

      public getResource_args getEmptyArgsInstance() {
        return new getResource_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            getResource_result result = new getResource_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getResource_result result = new getResource_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getResource_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.getResource(args.query,resultHandler);
      }
    }

    public static class postResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postResource_args, com.moseeker.thrift.gen.common.struct.Response> {
      public postResource() {
        super("postResource");
      }

      public postResource_args getEmptyArgsInstance() {
        return new postResource_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            postResource_result result = new postResource_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            postResource_result result = new postResource_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postResource_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.postResource(args.profile,resultHandler);
      }
    }

    public static class putResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, putResource_args, com.moseeker.thrift.gen.common.struct.Response> {
      public putResource() {
        super("putResource");
      }

      public putResource_args getEmptyArgsInstance() {
        return new putResource_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            putResource_result result = new putResource_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            putResource_result result = new putResource_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, putResource_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.putResource(args.profile,resultHandler);
      }
    }

    public static class delResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delResource_args, com.moseeker.thrift.gen.common.struct.Response> {
      public delResource() {
        super("delResource");
      }

      public delResource_args getEmptyArgsInstance() {
        return new delResource_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            delResource_result result = new delResource_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            delResource_result result = new delResource_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delResource_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.delResource(args.profile,resultHandler);
      }
    }

    public static class getCompleteness<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCompleteness_args, com.moseeker.thrift.gen.common.struct.Response> {
      public getCompleteness() {
        super("getCompleteness");
      }

      public getCompleteness_args getEmptyArgsInstance() {
        return new getCompleteness_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            getCompleteness_result result = new getCompleteness_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getCompleteness_result result = new getCompleteness_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCompleteness_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.getCompleteness(args.user_id, args.uuid, args.profile_id,resultHandler);
      }
    }

    public static class reCalculateUserCompleteness<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reCalculateUserCompleteness_args, com.moseeker.thrift.gen.common.struct.Response> {
      public reCalculateUserCompleteness() {
        super("reCalculateUserCompleteness");
      }

      public reCalculateUserCompleteness_args getEmptyArgsInstance() {
        return new reCalculateUserCompleteness_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            reCalculateUserCompleteness_result result = new reCalculateUserCompleteness_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            reCalculateUserCompleteness_result result = new reCalculateUserCompleteness_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reCalculateUserCompleteness_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.reCalculateUserCompleteness(args.userId, args.mobile,resultHandler);
      }
    }

    public static class reCalculateUserCompletenessBySettingId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reCalculateUserCompletenessBySettingId_args, com.moseeker.thrift.gen.common.struct.Response> {
      public reCalculateUserCompletenessBySettingId() {
        super("reCalculateUserCompletenessBySettingId");
      }

      public reCalculateUserCompletenessBySettingId_args getEmptyArgsInstance() {
        return new reCalculateUserCompletenessBySettingId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            reCalculateUserCompletenessBySettingId_result result = new reCalculateUserCompletenessBySettingId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            reCalculateUserCompletenessBySettingId_result result = new reCalculateUserCompletenessBySettingId_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reCalculateUserCompletenessBySettingId_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.reCalculateUserCompletenessBySettingId(args.id,resultHandler);
      }
    }

    public static class parseProfileAttachment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, parseProfileAttachment_args, com.moseeker.thrift.gen.common.struct.Response> {
      public parseProfileAttachment() {
        super("parseProfileAttachment");
      }

      public parseProfileAttachment_args getEmptyArgsInstance() {
        return new parseProfileAttachment_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            parseProfileAttachment_result result = new parseProfileAttachment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            parseProfileAttachment_result result = new parseProfileAttachment_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, parseProfileAttachment_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.parseProfileAttachment(args.fileName, args.file,resultHandler);
      }
    }

    public static class getProfileByApplication<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProfileByApplication_args, com.moseeker.thrift.gen.common.struct.Response> {
      public getProfileByApplication() {
        super("getProfileByApplication");
      }

      public getProfileByApplication_args getEmptyArgsInstance() {
        return new getProfileByApplication_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            getProfileByApplication_result result = new getProfileByApplication_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getProfileByApplication_result result = new getProfileByApplication_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProfileByApplication_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.getProfileByApplication(args.profileForm,resultHandler);
      }
    }

    public static class resumeProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, resumeProfile_args, com.moseeker.thrift.gen.common.struct.Response> {
      public resumeProfile() {
        super("resumeProfile");
      }

      public resumeProfile_args getEmptyArgsInstance() {
        return new resumeProfile_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            resumeProfile_result result = new resumeProfile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            resumeProfile_result result = new resumeProfile_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, resumeProfile_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.resumeProfile(args.uid, args.fileName, args.file,resultHandler);
      }
    }

    public static class upsertProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, upsertProfile_args, java.lang.Integer> {
      public upsertProfile() {
        super("upsertProfile");
      }

      public upsertProfile_args getEmptyArgsInstance() {
        return new upsertProfile_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() {
          public void onComplete(java.lang.Integer o) {
            upsertProfile_result result = new upsertProfile_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            upsertProfile_result result = new upsertProfile_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, upsertProfile_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.upsertProfile(args.userId, args.profile,resultHandler);
      }
    }

    public static class resumeTalentProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, resumeTalentProfile_args, com.moseeker.thrift.gen.common.struct.Response> {
      public resumeTalentProfile() {
        super("resumeTalentProfile");
      }

      public resumeTalentProfile_args getEmptyArgsInstance() {
        return new resumeTalentProfile_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            resumeTalentProfile_result result = new resumeTalentProfile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            resumeTalentProfile_result result = new resumeTalentProfile_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, resumeTalentProfile_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.resumeTalentProfile(args.fileName, args.file, args.companyId,resultHandler);
      }
    }

    public static class fetchUserProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fetchUserProfile_args, java.util.List<com.moseeker.thrift.gen.profile.struct.UserProfile>> {
      public fetchUserProfile() {
        super("fetchUserProfile");
      }

      public fetchUserProfile_args getEmptyArgsInstance() {
        return new fetchUserProfile_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.profile.struct.UserProfile>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.profile.struct.UserProfile>>() {
          public void onComplete(java.util.List<com.moseeker.thrift.gen.profile.struct.UserProfile> o) {
            fetchUserProfile_result result = new fetchUserProfile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            fetchUserProfile_result result = new fetchUserProfile_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, fetchUserProfile_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.profile.struct.UserProfile>> resultHandler) throws org.apache.thrift.TException {
        iface.fetchUserProfile(args.userIdList,resultHandler);
      }
    }

    public static class getProfileTokenDecrypt<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProfileTokenDecrypt_args, com.moseeker.thrift.gen.common.struct.Response> {
      public getProfileTokenDecrypt() {
        super("getProfileTokenDecrypt");
      }

      public getProfileTokenDecrypt_args getEmptyArgsInstance() {
        return new getProfileTokenDecrypt_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            getProfileTokenDecrypt_result result = new getProfileTokenDecrypt_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getProfileTokenDecrypt_result result = new getProfileTokenDecrypt_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProfileTokenDecrypt_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.getProfileTokenDecrypt(args.token,resultHandler);
      }
    }

    public static class parseText<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, parseText_args, java.lang.Integer> {
      public parseText() {
        super("parseText");
      }

      public parseText_args getEmptyArgsInstance() {
        return new parseText_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() {
          public void onComplete(java.lang.Integer o) {
            parseText_result result = new parseText_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            parseText_result result = new parseText_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, parseText_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.parseText(args.profile, args.reference, args.appid,resultHandler);
      }
    }

    public static class parseFileProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, parseFileProfile_args, com.moseeker.thrift.gen.profile.struct.ProfileParseResult> {
      public parseFileProfile() {
        super("parseFileProfile");
      }

      public parseFileProfile_args getEmptyArgsInstance() {
        return new parseFileProfile_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult>() {
          public void onComplete(com.moseeker.thrift.gen.profile.struct.ProfileParseResult o) {
            parseFileProfile_result result = new parseFileProfile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            parseFileProfile_result result = new parseFileProfile_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, parseFileProfile_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> resultHandler) throws org.apache.thrift.TException {
        iface.parseFileProfile(args.employeeId, args.fileName, args.fileData,resultHandler);
      }
    }

    public static class parseFileProfileByFilePath<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, parseFileProfileByFilePath_args, com.moseeker.thrift.gen.profile.struct.ProfileParseResult> {
      public parseFileProfileByFilePath() {
        super("parseFileProfileByFilePath");
      }

      public parseFileProfileByFilePath_args getEmptyArgsInstance() {
        return new parseFileProfileByFilePath_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult>() {
          public void onComplete(com.moseeker.thrift.gen.profile.struct.ProfileParseResult o) {
            parseFileProfileByFilePath_result result = new parseFileProfileByFilePath_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            parseFileProfileByFilePath_result result = new parseFileProfileByFilePath_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, parseFileProfileByFilePath_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> resultHandler) throws org.apache.thrift.TException {
        iface.parseFileProfileByFilePath(args.filePath, args.userId, args.syncId,resultHandler);
      }
    }

    public static class parseUserFileProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, parseUserFileProfile_args, com.moseeker.thrift.gen.profile.struct.ProfileParseResult> {
      public parseUserFileProfile() {
        super("parseUserFileProfile");
      }

      public parseUserFileProfile_args getEmptyArgsInstance() {
        return new parseUserFileProfile_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult>() {
          public void onComplete(com.moseeker.thrift.gen.profile.struct.ProfileParseResult o) {
            parseUserFileProfile_result result = new parseUserFileProfile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            parseUserFileProfile_result result = new parseUserFileProfile_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, parseUserFileProfile_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> resultHandler) throws org.apache.thrift.TException {
        iface.parseUserFileProfile(args.employeeId, args.fileName, args.fileData,resultHandler);
      }
    }

    public static class parseFileStreamProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, parseFileStreamProfile_args, com.moseeker.thrift.gen.profile.struct.ProfileParseResult> {
      public parseFileStreamProfile() {
        super("parseFileStreamProfile");
      }

      public parseFileStreamProfile_args getEmptyArgsInstance() {
        return new parseFileStreamProfile_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult>() {
          public void onComplete(com.moseeker.thrift.gen.profile.struct.ProfileParseResult o) {
            parseFileStreamProfile_result result = new parseFileStreamProfile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            parseFileStreamProfile_result result = new parseFileStreamProfile_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, parseFileStreamProfile_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> resultHandler) throws org.apache.thrift.TException {
        iface.parseFileStreamProfile(args.employeeId, args.fileOriginName, args.fileName, args.absoluteName, args.fileData,resultHandler);
      }
    }

    public static class employeeReferralProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, employeeReferralProfile_args, java.lang.Integer> {
      public employeeReferralProfile() {
        super("employeeReferralProfile");
      }

      public employeeReferralProfile_args getEmptyArgsInstance() {
        return new employeeReferralProfile_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() {
          public void onComplete(java.lang.Integer o) {
            employeeReferralProfile_result result = new employeeReferralProfile_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            employeeReferralProfile_result result = new employeeReferralProfile_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, employeeReferralProfile_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.employeeReferralProfile(args.employeeId, args.name, args.mobile, args.referralReasons, args.position, args.relationship, args.recomReasonText, args.referralType,resultHandler);
      }
    }

    public static class updateUserProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateUserProfile_args, java.lang.Integer> {
      public updateUserProfile() {
        super("updateUserProfile");
      }

      public updateUserProfile_args getEmptyArgsInstance() {
        return new updateUserProfile_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() {
          public void onComplete(java.lang.Integer o) {
            updateUserProfile_result result = new updateUserProfile_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateUserProfile_result result = new updateUserProfile_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateUserProfile_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.updateUserProfile(args.employeeId, args.name, args.mobile,resultHandler);
      }
    }

    public static class employeeDeleteReferralProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, employeeDeleteReferralProfile_args, Void> {
      public employeeDeleteReferralProfile() {
        super("employeeDeleteReferralProfile");
      }

      public employeeDeleteReferralProfile_args getEmptyArgsInstance() {
        return new employeeDeleteReferralProfile_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            employeeDeleteReferralProfile_result result = new employeeDeleteReferralProfile_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            employeeDeleteReferralProfile_result result = new employeeDeleteReferralProfile_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, employeeDeleteReferralProfile_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.employeeDeleteReferralProfile(args.employeeId,resultHandler);
      }
    }

    public static class postCandidateInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postCandidateInfo_args, java.lang.Integer> {
      public postCandidateInfo() {
        super("postCandidateInfo");
      }

      public postCandidateInfo_args getEmptyArgsInstance() {
        return new postCandidateInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() {
          public void onComplete(java.lang.Integer o) {
            postCandidateInfo_result result = new postCandidateInfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            postCandidateInfo_result result = new postCandidateInfo_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postCandidateInfo_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.postCandidateInfo(args.employeeId, args.candidateInfo,resultHandler);
      }
    }

    public static class saveMobotReferralProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveMobotReferralProfile_args, java.util.Map<java.lang.String,java.lang.String>> {
      public saveMobotReferralProfile() {
        super("saveMobotReferralProfile");
      }

      public saveMobotReferralProfile_args getEmptyArgsInstance() {
        return new saveMobotReferralProfile_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>>() {
          public void onComplete(java.util.Map<java.lang.String,java.lang.String> o) {
            saveMobotReferralProfile_result result = new saveMobotReferralProfile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            saveMobotReferralProfile_result result = new saveMobotReferralProfile_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveMobotReferralProfile_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.saveMobotReferralProfile(args.employeeId, args.ids,resultHandler);
      }
    }

    public static class saveMobotReferralProfileCache<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveMobotReferralProfileCache_args, java.lang.Integer> {
      public saveMobotReferralProfileCache() {
        super("saveMobotReferralProfileCache");
      }

      public saveMobotReferralProfileCache_args getEmptyArgsInstance() {
        return new saveMobotReferralProfileCache_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() {
          public void onComplete(java.lang.Integer o) {
            saveMobotReferralProfileCache_result result = new saveMobotReferralProfileCache_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            saveMobotReferralProfileCache_result result = new saveMobotReferralProfileCache_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveMobotReferralProfileCache_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.saveMobotReferralProfileCache(args.employeeId, args.mobile, args.name, args.referralReasons, args.referralType, args.fileName, args.relationship, args.recomReasonText,resultHandler);
      }
    }

    public static class getMobotReferralCache<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMobotReferralCache_args, java.lang.String> {
      public getMobotReferralCache() {
        super("getMobotReferralCache");
      }

      public getMobotReferralCache_args getEmptyArgsInstance() {
        return new getMobotReferralCache_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
          public void onComplete(java.lang.String o) {
            getMobotReferralCache_result result = new getMobotReferralCache_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getMobotReferralCache_result result = new getMobotReferralCache_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMobotReferralCache_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getMobotReferralCache(args.employeeId,resultHandler);
      }
    }

    public static class parseHunterFileProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, parseHunterFileProfile_args, com.moseeker.thrift.gen.profile.struct.ProfileParseResult> {
      public parseHunterFileProfile() {
        super("parseHunterFileProfile");
      }

      public parseHunterFileProfile_args getEmptyArgsInstance() {
        return new parseHunterFileProfile_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult>() {
          public void onComplete(com.moseeker.thrift.gen.profile.struct.ProfileParseResult o) {
            parseHunterFileProfile_result result = new parseHunterFileProfile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            parseHunterFileProfile_result result = new parseHunterFileProfile_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, parseHunterFileProfile_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> resultHandler) throws org.apache.thrift.TException {
        iface.parseHunterFileProfile(args.headhunterId, args.fileName, args.fileData,resultHandler);
      }
    }

    public static class uploadFiles<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, uploadFiles_args, com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles> {
      public uploadFiles() {
        super("uploadFiles");
      }

      public uploadFiles_args getEmptyArgsInstance() {
        return new uploadFiles_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles>() {
          public void onComplete(com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles o) {
            uploadFiles_result result = new uploadFiles_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            uploadFiles_result result = new uploadFiles_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, uploadFiles_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles> resultHandler) throws org.apache.thrift.TException {
        iface.uploadFiles(args.sceneId, args.unionid, args.fileName, args.fileData,resultHandler);
      }
    }

    public static class getUploadFiles<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUploadFiles_args, java.util.List<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles>> {
      public getUploadFiles() {
        super("getUploadFiles");
      }

      public getUploadFiles_args getEmptyArgsInstance() {
        return new getUploadFiles_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles>>() {
          public void onComplete(java.util.List<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles> o) {
            getUploadFiles_result result = new getUploadFiles_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getUploadFiles_result result = new getUploadFiles_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUploadFiles_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles>> resultHandler) throws org.apache.thrift.TException {
        iface.getUploadFiles(args.unionId, args.pageSize, args.pageNo,resultHandler);
      }
    }

    public static class downLoadFiles<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, downLoadFiles_args, java.lang.String> {
      public downLoadFiles() {
        super("downLoadFiles");
      }

      public downLoadFiles_args getEmptyArgsInstance() {
        return new downLoadFiles_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
          public void onComplete(java.lang.String o) {
            downLoadFiles_result result = new downLoadFiles_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            downLoadFiles_result result = new downLoadFiles_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, downLoadFiles_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.downLoadFiles(args.sceneId,resultHandler);
      }
    }

    public static class referralResumeInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, referralResumeInfo_args, com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles> {
      public referralResumeInfo() {
        super("referralResumeInfo");
      }

      public referralResumeInfo_args getEmptyArgsInstance() {
        return new referralResumeInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles>() {
          public void onComplete(com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles o) {
            referralResumeInfo_result result = new referralResumeInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            referralResumeInfo_result result = new referralResumeInfo_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, referralResumeInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles> resultHandler) throws org.apache.thrift.TException {
        iface.referralResumeInfo(args.sceneId,resultHandler);
      }
    }

    public static class getSpecifyProfileResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSpecifyProfileResult_args, java.lang.Boolean> {
      public getSpecifyProfileResult() {
        super("getSpecifyProfileResult");
      }

      public getSpecifyProfileResult_args getEmptyArgsInstance() {
        return new getSpecifyProfileResult_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() {
          public void onComplete(java.lang.Boolean o) {
            getSpecifyProfileResult_result result = new getSpecifyProfileResult_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getSpecifyProfileResult_result result = new getSpecifyProfileResult_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSpecifyProfileResult_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.getSpecifyProfileResult(args.employeeId, args.syncId,resultHandler);
      }
    }

    public static class checkResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkResult_args, com.moseeker.thrift.gen.profile.struct.ProfileParseResult> {
      public checkResult() {
        super("checkResult");
      }

      public checkResult_args getEmptyArgsInstance() {
        return new checkResult_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult>() {
          public void onComplete(com.moseeker.thrift.gen.profile.struct.ProfileParseResult o) {
            checkResult_result result = new checkResult_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            checkResult_result result = new checkResult_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkResult_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.profile.struct.ProfileParseResult> resultHandler) throws org.apache.thrift.TException {
        iface.checkResult(args.employeeId,resultHandler);
      }
    }

  }

  public static class healthCheck_args implements org.apache.thrift.TBase<healthCheck_args, healthCheck_args._Fields>, java.io.Serializable, Cloneable, Comparable<healthCheck_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("healthCheck_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new healthCheck_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new healthCheck_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(healthCheck_args.class, metaDataMap);
    }

    public healthCheck_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public healthCheck_args(healthCheck_args other) {
    }

    public healthCheck_args deepCopy() {
      return new healthCheck_args(this);
    }


    public void clear() {
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof healthCheck_args)
        return this.equals((healthCheck_args)that);
      return false;
    }

    public boolean equals(healthCheck_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }


    public int compareTo(healthCheck_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("healthCheck_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class healthCheck_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public healthCheck_argsStandardScheme getScheme() {
        return new healthCheck_argsStandardScheme();
      }
    }

    private static class healthCheck_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<healthCheck_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, healthCheck_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, healthCheck_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class healthCheck_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public healthCheck_argsTupleScheme getScheme() {
        return new healthCheck_argsTupleScheme();
      }
    }

    private static class healthCheck_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<healthCheck_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, healthCheck_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, healthCheck_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class healthCheck_result implements org.apache.thrift.TBase<healthCheck_result, healthCheck_result._Fields>, java.io.Serializable, Cloneable, Comparable<healthCheck_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("healthCheck_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new healthCheck_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new healthCheck_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(healthCheck_result.class, metaDataMap);
    }

    public healthCheck_result() {
    }

    public healthCheck_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public healthCheck_result(healthCheck_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public healthCheck_result deepCopy() {
      return new healthCheck_result(this);
    }


    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public healthCheck_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof healthCheck_result)
        return this.equals((healthCheck_result)that);
      return false;
    }

    public boolean equals(healthCheck_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }


    public int compareTo(healthCheck_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("healthCheck_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class healthCheck_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public healthCheck_resultStandardScheme getScheme() {
        return new healthCheck_resultStandardScheme();
      }
    }

    private static class healthCheck_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<healthCheck_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, healthCheck_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, healthCheck_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class healthCheck_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public healthCheck_resultTupleScheme getScheme() {
        return new healthCheck_resultTupleScheme();
      }
    }

    private static class healthCheck_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<healthCheck_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, healthCheck_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, healthCheck_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getResources_args implements org.apache.thrift.TBase<getResources_args, getResources_args._Fields>, java.io.Serializable, Cloneable, Comparable<getResources_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getResources_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getResources_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getResources_argsTupleSchemeFactory();

    public  com.moseeker.thrift.gen.common.struct.CommonQuery query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.CommonQuery.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getResources_args.class, metaDataMap);
    }

    public getResources_args() {
    }

    public getResources_args(
      com.moseeker.thrift.gen.common.struct.CommonQuery query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResources_args(getResources_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.common.struct.CommonQuery(other.query);
      }
    }

    public getResources_args deepCopy() {
      return new getResources_args(this);
    }


    public void clear() {
      this.query = null;
    }


    public com.moseeker.thrift.gen.common.struct.CommonQuery getQuery() {
      return this.query;
    }

    public getResources_args setQuery( com.moseeker.thrift.gen.common.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.common.struct.CommonQuery)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getResources_args)
        return this.equals((getResources_args)that);
      return false;
    }

    public boolean equals(getResources_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      return hashCode;
    }


    public int compareTo(getResources_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getResources_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getResources_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getResources_argsStandardScheme getScheme() {
        return new getResources_argsStandardScheme();
      }
    }

    private static class getResources_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getResources_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getResources_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getResources_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getResources_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getResources_argsTupleScheme getScheme() {
        return new getResources_argsTupleScheme();
      }
    }

    private static class getResources_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getResources_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, getResources_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, getResources_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getResources_result implements org.apache.thrift.TBase<getResources_result, getResources_result._Fields>, java.io.Serializable, Cloneable, Comparable<getResources_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getResources_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getResources_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getResources_resultTupleSchemeFactory();

    public  com.moseeker.thrift.gen.common.struct.Response success; // required
    public  com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getResources_result.class, metaDataMap);
    }

    public getResources_result() {
    }

    public getResources_result(
      com.moseeker.thrift.gen.common.struct.Response success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResources_result(getResources_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public getResources_result deepCopy() {
      return new getResources_result(this);
    }


    public void clear() {
      this.success = null;
      this.e = null;
    }


    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public getResources_result setSuccess( com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }


    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public getResources_result setE( com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getResources_result)
        return this.equals((getResources_result)that);
      return false;
    }

    public boolean equals(getResources_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }


    public int compareTo(getResources_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getResources_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getResources_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getResources_resultStandardScheme getScheme() {
        return new getResources_resultStandardScheme();
      }
    }

    private static class getResources_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getResources_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getResources_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getResources_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getResources_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getResources_resultTupleScheme getScheme() {
        return new getResources_resultTupleScheme();
      }
    }

    private static class getResources_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getResources_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, getResources_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, getResources_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPagination_args implements org.apache.thrift.TBase<getPagination_args, getPagination_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPagination_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPagination_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPagination_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPagination_argsTupleSchemeFactory();

    public  com.moseeker.thrift.gen.common.struct.CommonQuery query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)2, "query");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.CommonQuery.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPagination_args.class, metaDataMap);
    }

    public getPagination_args() {
    }

    public getPagination_args(
      com.moseeker.thrift.gen.common.struct.CommonQuery query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPagination_args(getPagination_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.common.struct.CommonQuery(other.query);
      }
    }

    public getPagination_args deepCopy() {
      return new getPagination_args(this);
    }


    public void clear() {
      this.query = null;
    }


    public com.moseeker.thrift.gen.common.struct.CommonQuery getQuery() {
      return this.query;
    }

    public getPagination_args setQuery( com.moseeker.thrift.gen.common.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.common.struct.CommonQuery)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPagination_args)
        return this.equals((getPagination_args)that);
      return false;
    }

    public boolean equals(getPagination_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      return hashCode;
    }


    public int compareTo(getPagination_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPagination_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPagination_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPagination_argsStandardScheme getScheme() {
        return new getPagination_argsStandardScheme();
      }
    }

    private static class getPagination_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPagination_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPagination_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 2: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPagination_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPagination_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPagination_argsTupleScheme getScheme() {
        return new getPagination_argsTupleScheme();
      }
    }

    private static class getPagination_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPagination_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, getPagination_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, getPagination_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPagination_result implements org.apache.thrift.TBase<getPagination_result, getPagination_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPagination_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPagination_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPagination_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPagination_resultTupleSchemeFactory();

    public  com.moseeker.thrift.gen.common.struct.Response success; // required
    public  com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPagination_result.class, metaDataMap);
    }

    public getPagination_result() {
    }

    public getPagination_result(
      com.moseeker.thrift.gen.common.struct.Response success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPagination_result(getPagination_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public getPagination_result deepCopy() {
      return new getPagination_result(this);
    }


    public void clear() {
      this.success = null;
      this.e = null;
    }


    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public getPagination_result setSuccess( com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }


    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public getPagination_result setE( com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPagination_result)
        return this.equals((getPagination_result)that);
      return false;
    }

    public boolean equals(getPagination_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }


    public int compareTo(getPagination_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPagination_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPagination_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPagination_resultStandardScheme getScheme() {
        return new getPagination_resultStandardScheme();
      }
    }

    private static class getPagination_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPagination_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPagination_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPagination_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPagination_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPagination_resultTupleScheme getScheme() {
        return new getPagination_resultTupleScheme();
      }
    }

    private static class getPagination_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPagination_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, getPagination_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, getPagination_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class postResources_args implements org.apache.thrift.TBase<postResources_args, postResources_args._Fields>, java.io.Serializable, Cloneable, Comparable<postResources_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postResources_args");

    private static final org.apache.thrift.protocol.TField RESOURCES_FIELD_DESC = new org.apache.thrift.protocol.TField("resources", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new postResources_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new postResources_argsTupleSchemeFactory();

    public  java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> resources; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RESOURCES((short)1, "resources");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RESOURCES
            return RESOURCES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RESOURCES, new org.apache.thrift.meta_data.FieldMetaData("resources", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Profile.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postResources_args.class, metaDataMap);
    }

    public postResources_args() {
    }

    public postResources_args(
      java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> resources)
    {
      this();
      this.resources = resources;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postResources_args(postResources_args other) {
      if (other.isSetResources()) {
        java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> __this__resources = new java.util.ArrayList<com.moseeker.thrift.gen.profile.struct.Profile>(other.resources.size());
        for (com.moseeker.thrift.gen.profile.struct.Profile other_element : other.resources) {
          __this__resources.add(new com.moseeker.thrift.gen.profile.struct.Profile(other_element));
        }
        this.resources = __this__resources;
      }
    }

    public postResources_args deepCopy() {
      return new postResources_args(this);
    }


    public void clear() {
      this.resources = null;
    }

    public int getResourcesSize() {
      return (this.resources == null) ? 0 : this.resources.size();
    }


    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.Profile> getResourcesIterator() {
      return (this.resources == null) ? null : this.resources.iterator();
    }

    public void addToResources(com.moseeker.thrift.gen.profile.struct.Profile elem) {
      if (this.resources == null) {
        this.resources = new java.util.ArrayList<com.moseeker.thrift.gen.profile.struct.Profile>();
      }
      this.resources.add(elem);
    }


    public java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> getResources() {
      return this.resources;
    }

    public postResources_args setResources( java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> resources) {
      this.resources = resources;
      return this;
    }

    public void unsetResources() {
      this.resources = null;
    }

    /** Returns true if field resources is set (has been assigned a value) and false otherwise */
    public boolean isSetResources() {
      return this.resources != null;
    }

    public void setResourcesIsSet(boolean value) {
      if (!value) {
        this.resources = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case RESOURCES:
        if (value == null) {
          unsetResources();
        } else {
          setResources((java.util.List<com.moseeker.thrift.gen.profile.struct.Profile>)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RESOURCES:
        return getResources();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RESOURCES:
        return isSetResources();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof postResources_args)
        return this.equals((postResources_args)that);
      return false;
    }

    public boolean equals(postResources_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_resources = true && this.isSetResources();
      boolean that_present_resources = true && that.isSetResources();
      if (this_present_resources || that_present_resources) {
        if (!(this_present_resources && that_present_resources))
          return false;
        if (!this.resources.equals(that.resources))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetResources()) ? 131071 : 524287);
      if (isSetResources())
        hashCode = hashCode * 8191 + resources.hashCode();

      return hashCode;
    }


    public int compareTo(postResources_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetResources()).compareTo(other.isSetResources());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResources()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resources, other.resources);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("postResources_args(");
      boolean first = true;

      sb.append("resources:");
      if (this.resources == null) {
        sb.append("null");
      } else {
        sb.append(this.resources);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postResources_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public postResources_argsStandardScheme getScheme() {
        return new postResources_argsStandardScheme();
      }
    }

    private static class postResources_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<postResources_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postResources_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // RESOURCES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list66 = iprot.readListBegin();
                  struct.resources = new java.util.ArrayList<com.moseeker.thrift.gen.profile.struct.Profile>(_list66.size);
                   com.moseeker.thrift.gen.profile.struct.Profile _elem67;
                  for (int _i68 = 0; _i68 < _list66.size; ++_i68)
                  {
                    _elem67 = new com.moseeker.thrift.gen.profile.struct.Profile();
                    _elem67.read(iprot);
                    struct.resources.add(_elem67);
                  }
                  iprot.readListEnd();
                }
                struct.setResourcesIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postResources_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.resources != null) {
          oprot.writeFieldBegin(RESOURCES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.resources.size()));
            for (com.moseeker.thrift.gen.profile.struct.Profile _iter69 : struct.resources)
            {
              _iter69.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postResources_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public postResources_argsTupleScheme getScheme() {
        return new postResources_argsTupleScheme();
      }
    }

    private static class postResources_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<postResources_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, postResources_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetResources()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetResources()) {
          {
            oprot.writeI32(struct.resources.size());
            for (com.moseeker.thrift.gen.profile.struct.Profile _iter70 : struct.resources)
            {
              _iter70.write(oprot);
            }
          }
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, postResources_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.resources = new java.util.ArrayList<com.moseeker.thrift.gen.profile.struct.Profile>(_list71.size);
             com.moseeker.thrift.gen.profile.struct.Profile _elem72;
            for (int _i73 = 0; _i73 < _list71.size; ++_i73)
            {
              _elem72 = new com.moseeker.thrift.gen.profile.struct.Profile();
              _elem72.read(iprot);
              struct.resources.add(_elem72);
            }
          }
          struct.setResourcesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class postResources_result implements org.apache.thrift.TBase<postResources_result, postResources_result._Fields>, java.io.Serializable, Cloneable, Comparable<postResources_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postResources_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new postResources_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new postResources_resultTupleSchemeFactory();

    public  com.moseeker.thrift.gen.common.struct.Response success; // required
    public  com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postResources_result.class, metaDataMap);
    }

    public postResources_result() {
    }

    public postResources_result(
      com.moseeker.thrift.gen.common.struct.Response success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postResources_result(postResources_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public postResources_result deepCopy() {
      return new postResources_result(this);
    }


    public void clear() {
      this.success = null;
      this.e = null;
    }


    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public postResources_result setSuccess( com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }


    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public postResources_result setE( com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof postResources_result)
        return this.equals((postResources_result)that);
      return false;
    }

    public boolean equals(postResources_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }


    public int compareTo(postResources_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("postResources_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postResources_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public postResources_resultStandardScheme getScheme() {
        return new postResources_resultStandardScheme();
      }
    }

    private static class postResources_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<postResources_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postResources_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postResources_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postResources_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public postResources_resultTupleScheme getScheme() {
        return new postResources_resultTupleScheme();
      }
    }

    private static class postResources_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<postResources_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, postResources_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, postResources_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class putResources_args implements org.apache.thrift.TBase<putResources_args, putResources_args._Fields>, java.io.Serializable, Cloneable, Comparable<putResources_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putResources_args");

    private static final org.apache.thrift.protocol.TField RESOURCES_FIELD_DESC = new org.apache.thrift.protocol.TField("resources", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new putResources_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new putResources_argsTupleSchemeFactory();

    public  java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> resources; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RESOURCES((short)1, "resources");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RESOURCES
            return RESOURCES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RESOURCES, new org.apache.thrift.meta_data.FieldMetaData("resources", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Profile.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putResources_args.class, metaDataMap);
    }

    public putResources_args() {
    }

    public putResources_args(
      java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> resources)
    {
      this();
      this.resources = resources;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putResources_args(putResources_args other) {
      if (other.isSetResources()) {
        java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> __this__resources = new java.util.ArrayList<com.moseeker.thrift.gen.profile.struct.Profile>(other.resources.size());
        for (com.moseeker.thrift.gen.profile.struct.Profile other_element : other.resources) {
          __this__resources.add(new com.moseeker.thrift.gen.profile.struct.Profile(other_element));
        }
        this.resources = __this__resources;
      }
    }

    public putResources_args deepCopy() {
      return new putResources_args(this);
    }


    public void clear() {
      this.resources = null;
    }

    public int getResourcesSize() {
      return (this.resources == null) ? 0 : this.resources.size();
    }


    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.Profile> getResourcesIterator() {
      return (this.resources == null) ? null : this.resources.iterator();
    }

    public void addToResources(com.moseeker.thrift.gen.profile.struct.Profile elem) {
      if (this.resources == null) {
        this.resources = new java.util.ArrayList<com.moseeker.thrift.gen.profile.struct.Profile>();
      }
      this.resources.add(elem);
    }


    public java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> getResources() {
      return this.resources;
    }

    public putResources_args setResources( java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> resources) {
      this.resources = resources;
      return this;
    }

    public void unsetResources() {
      this.resources = null;
    }

    /** Returns true if field resources is set (has been assigned a value) and false otherwise */
    public boolean isSetResources() {
      return this.resources != null;
    }

    public void setResourcesIsSet(boolean value) {
      if (!value) {
        this.resources = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case RESOURCES:
        if (value == null) {
          unsetResources();
        } else {
          setResources((java.util.List<com.moseeker.thrift.gen.profile.struct.Profile>)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RESOURCES:
        return getResources();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RESOURCES:
        return isSetResources();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof putResources_args)
        return this.equals((putResources_args)that);
      return false;
    }

    public boolean equals(putResources_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_resources = true && this.isSetResources();
      boolean that_present_resources = true && that.isSetResources();
      if (this_present_resources || that_present_resources) {
        if (!(this_present_resources && that_present_resources))
          return false;
        if (!this.resources.equals(that.resources))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetResources()) ? 131071 : 524287);
      if (isSetResources())
        hashCode = hashCode * 8191 + resources.hashCode();

      return hashCode;
    }


    public int compareTo(putResources_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetResources()).compareTo(other.isSetResources());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResources()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resources, other.resources);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("putResources_args(");
      boolean first = true;

      sb.append("resources:");
      if (this.resources == null) {
        sb.append("null");
      } else {
        sb.append(this.resources);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putResources_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public putResources_argsStandardScheme getScheme() {
        return new putResources_argsStandardScheme();
      }
    }

    private static class putResources_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<putResources_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putResources_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // RESOURCES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list74 = iprot.readListBegin();
                  struct.resources = new java.util.ArrayList<com.moseeker.thrift.gen.profile.struct.Profile>(_list74.size);
                   com.moseeker.thrift.gen.profile.struct.Profile _elem75;
                  for (int _i76 = 0; _i76 < _list74.size; ++_i76)
                  {
                    _elem75 = new com.moseeker.thrift.gen.profile.struct.Profile();
                    _elem75.read(iprot);
                    struct.resources.add(_elem75);
                  }
                  iprot.readListEnd();
                }
                struct.setResourcesIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putResources_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.resources != null) {
          oprot.writeFieldBegin(RESOURCES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.resources.size()));
            for (com.moseeker.thrift.gen.profile.struct.Profile _iter77 : struct.resources)
            {
              _iter77.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putResources_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public putResources_argsTupleScheme getScheme() {
        return new putResources_argsTupleScheme();
      }
    }

    private static class putResources_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<putResources_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, putResources_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetResources()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetResources()) {
          {
            oprot.writeI32(struct.resources.size());
            for (com.moseeker.thrift.gen.profile.struct.Profile _iter78 : struct.resources)
            {
              _iter78.write(oprot);
            }
          }
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, putResources_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list79 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.resources = new java.util.ArrayList<com.moseeker.thrift.gen.profile.struct.Profile>(_list79.size);
             com.moseeker.thrift.gen.profile.struct.Profile _elem80;
            for (int _i81 = 0; _i81 < _list79.size; ++_i81)
            {
              _elem80 = new com.moseeker.thrift.gen.profile.struct.Profile();
              _elem80.read(iprot);
              struct.resources.add(_elem80);
            }
          }
          struct.setResourcesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class putResources_result implements org.apache.thrift.TBase<putResources_result, putResources_result._Fields>, java.io.Serializable, Cloneable, Comparable<putResources_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putResources_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new putResources_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new putResources_resultTupleSchemeFactory();

    public  com.moseeker.thrift.gen.common.struct.Response success; // required
    public  com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putResources_result.class, metaDataMap);
    }

    public putResources_result() {
    }

    public putResources_result(
      com.moseeker.thrift.gen.common.struct.Response success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putResources_result(putResources_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public putResources_result deepCopy() {
      return new putResources_result(this);
    }


    public void clear() {
      this.success = null;
      this.e = null;
    }


    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public putResources_result setSuccess( com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }


    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public putResources_result setE( com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof putResources_result)
        return this.equals((putResources_result)that);
      return false;
    }

    public boolean equals(putResources_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }


    public int compareTo(putResources_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("putResources_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putResources_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public putResources_resultStandardScheme getScheme() {
        return new putResources_resultStandardScheme();
      }
    }

    private static class putResources_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<putResources_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putResources_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putResources_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putResources_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public putResources_resultTupleScheme getScheme() {
        return new putResources_resultTupleScheme();
      }
    }

    private static class putResources_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<putResources_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, putResources_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, putResources_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class delResources_args implements org.apache.thrift.TBase<delResources_args, delResources_args._Fields>, java.io.Serializable, Cloneable, Comparable<delResources_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delResources_args");

    private static final org.apache.thrift.protocol.TField RESOURCES_FIELD_DESC = new org.apache.thrift.protocol.TField("resources", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new delResources_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new delResources_argsTupleSchemeFactory();

    public  java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> resources; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RESOURCES((short)1, "resources");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RESOURCES
            return RESOURCES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RESOURCES, new org.apache.thrift.meta_data.FieldMetaData("resources", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Profile.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delResources_args.class, metaDataMap);
    }

    public delResources_args() {
    }

    public delResources_args(
      java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> resources)
    {
      this();
      this.resources = resources;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delResources_args(delResources_args other) {
      if (other.isSetResources()) {
        java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> __this__resources = new java.util.ArrayList<com.moseeker.thrift.gen.profile.struct.Profile>(other.resources.size());
        for (com.moseeker.thrift.gen.profile.struct.Profile other_element : other.resources) {
          __this__resources.add(new com.moseeker.thrift.gen.profile.struct.Profile(other_element));
        }
        this.resources = __this__resources;
      }
    }

    public delResources_args deepCopy() {
      return new delResources_args(this);
    }


    public void clear() {
      this.resources = null;
    }

    public int getResourcesSize() {
      return (this.resources == null) ? 0 : this.resources.size();
    }


    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.Profile> getResourcesIterator() {
      return (this.resources == null) ? null : this.resources.iterator();
    }

    public void addToResources(com.moseeker.thrift.gen.profile.struct.Profile elem) {
      if (this.resources == null) {
        this.resources = new java.util.ArrayList<com.moseeker.thrift.gen.profile.struct.Profile>();
      }
      this.resources.add(elem);
    }


    public java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> getResources() {
      return this.resources;
    }

    public delResources_args setResources( java.util.List<com.moseeker.thrift.gen.profile.struct.Profile> resources) {
      this.resources = resources;
      return this;
    }

    public void unsetResources() {
      this.resources = null;
    }

    /** Returns true if field resources is set (has been assigned a value) and false otherwise */
    public boolean isSetResources() {
      return this.resources != null;
    }

    public void setResourcesIsSet(boolean value) {
      if (!value) {
        this.resources = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case RESOURCES:
        if (value == null) {
          unsetResources();
        } else {
          setResources((java.util.List<com.moseeker.thrift.gen.profile.struct.Profile>)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RESOURCES:
        return getResources();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RESOURCES:
        return isSetResources();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof delResources_args)
        return this.equals((delResources_args)that);
      return false;
    }

    public boolean equals(delResources_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_resources = true && this.isSetResources();
      boolean that_present_resources = true && that.isSetResources();
      if (this_present_resources || that_present_resources) {
        if (!(this_present_resources && that_present_resources))
          return false;
        if (!this.resources.equals(that.resources))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetResources()) ? 131071 : 524287);
      if (isSetResources())
        hashCode = hashCode * 8191 + resources.hashCode();

      return hashCode;
    }


    public int compareTo(delResources_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetResources()).compareTo(other.isSetResources());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResources()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resources, other.resources);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("delResources_args(");
      boolean first = true;

      sb.append("resources:");
      if (this.resources == null) {
        sb.append("null");
      } else {
        sb.append(this.resources);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delResources_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public delResources_argsStandardScheme getScheme() {
        return new delResources_argsStandardScheme();
      }
    }

    private static class delResources_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<delResources_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delResources_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // RESOURCES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list82 = iprot.readListBegin();
                  struct.resources = new java.util.ArrayList<com.moseeker.thrift.gen.profile.struct.Profile>(_list82.size);
                   com.moseeker.thrift.gen.profile.struct.Profile _elem83;
                  for (int _i84 = 0; _i84 < _list82.size; ++_i84)
                  {
                    _elem83 = new com.moseeker.thrift.gen.profile.struct.Profile();
                    _elem83.read(iprot);
                    struct.resources.add(_elem83);
                  }
                  iprot.readListEnd();
                }
                struct.setResourcesIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delResources_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.resources != null) {
          oprot.writeFieldBegin(RESOURCES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.resources.size()));
            for (com.moseeker.thrift.gen.profile.struct.Profile _iter85 : struct.resources)
            {
              _iter85.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delResources_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public delResources_argsTupleScheme getScheme() {
        return new delResources_argsTupleScheme();
      }
    }

    private static class delResources_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<delResources_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, delResources_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetResources()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetResources()) {
          {
            oprot.writeI32(struct.resources.size());
            for (com.moseeker.thrift.gen.profile.struct.Profile _iter86 : struct.resources)
            {
              _iter86.write(oprot);
            }
          }
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, delResources_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.resources = new java.util.ArrayList<com.moseeker.thrift.gen.profile.struct.Profile>(_list87.size);
             com.moseeker.thrift.gen.profile.struct.Profile _elem88;
            for (int _i89 = 0; _i89 < _list87.size; ++_i89)
            {
              _elem88 = new com.moseeker.thrift.gen.profile.struct.Profile();
              _elem88.read(iprot);
              struct.resources.add(_elem88);
            }
          }
          struct.setResourcesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class delResources_result implements org.apache.thrift.TBase<delResources_result, delResources_result._Fields>, java.io.Serializable, Cloneable, Comparable<delResources_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delResources_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new delResources_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new delResources_resultTupleSchemeFactory();

    public  com.moseeker.thrift.gen.common.struct.Response success; // required
    public  com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delResources_result.class, metaDataMap);
    }

    public delResources_result() {
    }

    public delResources_result(
      com.moseeker.thrift.gen.common.struct.Response success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delResources_result(delResources_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public delResources_result deepCopy() {
      return new delResources_result(this);
    }


    public void clear() {
      this.success = null;
      this.e = null;
    }


    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public delResources_result setSuccess( com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }


    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public delResources_result setE( com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof delResources_result)
        return this.equals((delResources_result)that);
      return false;
    }

    public boolean equals(delResources_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }


    public int compareTo(delResources_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("delResources_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delResources_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public delResources_resultStandardScheme getScheme() {
        return new delResources_resultStandardScheme();
      }
    }

    private static class delResources_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<delResources_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delResources_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delResources_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delResources_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public delResources_resultTupleScheme getScheme() {
        return new delResources_resultTupleScheme();
      }
    }

    private static class delResources_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<delResources_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, delResources_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, delResources_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getResource_args implements org.apache.thrift.TBase<getResource_args, getResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<getResource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getResource_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getResource_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getResource_argsTupleSchemeFactory();

    public  com.moseeker.thrift.gen.common.struct.CommonQuery query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.CommonQuery.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getResource_args.class, metaDataMap);
    }

    public getResource_args() {
    }

    public getResource_args(
      com.moseeker.thrift.gen.common.struct.CommonQuery query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResource_args(getResource_args other) {
      if (other.isSetQuery()) {
        this.query = new com.moseeker.thrift.gen.common.struct.CommonQuery(other.query);
      }
    }

    public getResource_args deepCopy() {
      return new getResource_args(this);
    }


    public void clear() {
      this.query = null;
    }


    public com.moseeker.thrift.gen.common.struct.CommonQuery getQuery() {
      return this.query;
    }

    public getResource_args setQuery( com.moseeker.thrift.gen.common.struct.CommonQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.moseeker.thrift.gen.common.struct.CommonQuery)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getResource_args)
        return this.equals((getResource_args)that);
      return false;
    }

    public boolean equals(getResource_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      return hashCode;
    }


    public int compareTo(getResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getResource_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getResource_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getResource_argsStandardScheme getScheme() {
        return new getResource_argsStandardScheme();
      }
    }

    private static class getResource_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getResource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getResource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getResource_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getResource_argsTupleScheme getScheme() {
        return new getResource_argsTupleScheme();
      }
    }

    private static class getResource_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getResource_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, getResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, getResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new com.moseeker.thrift.gen.common.struct.CommonQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getResource_result implements org.apache.thrift.TBase<getResource_result, getResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<getResource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getResource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getResource_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getResource_resultTupleSchemeFactory();

    public  com.moseeker.thrift.gen.common.struct.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getResource_result.class, metaDataMap);
    }

    public getResource_result() {
    }

    public getResource_result(
      com.moseeker.thrift.gen.common.struct.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResource_result(getResource_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
    }

    public getResource_result deepCopy() {
      return new getResource_result(this);
    }


    public void clear() {
      this.success = null;
    }


    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public getResource_result setSuccess( com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getResource_result)
        return this.equals((getResource_result)that);
      return false;
    }

    public boolean equals(getResource_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }


    public int compareTo(getResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getResource_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getResource_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getResource_resultStandardScheme getScheme() {
        return new getResource_resultStandardScheme();
      }
    }

    private static class getResource_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getResource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getResource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getResource_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getResource_resultTupleScheme getScheme() {
        return new getResource_resultTupleScheme();
      }
    }

    private static class getResource_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getResource_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, getResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, getResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class postResource_args implements org.apache.thrift.TBase<postResource_args, postResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<postResource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postResource_args");

    private static final org.apache.thrift.protocol.TField PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("profile", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new postResource_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new postResource_argsTupleSchemeFactory();

    public  com.moseeker.thrift.gen.profile.struct.Profile profile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE((short)1, "profile");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE
            return PROFILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE, new org.apache.thrift.meta_data.FieldMetaData("profile", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Profile.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postResource_args.class, metaDataMap);
    }

    public postResource_args() {
    }

    public postResource_args(
      com.moseeker.thrift.gen.profile.struct.Profile profile)
    {
      this();
      this.profile = profile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postResource_args(postResource_args other) {
      if (other.isSetProfile()) {
        this.profile = new com.moseeker.thrift.gen.profile.struct.Profile(other.profile);
      }
    }

    public postResource_args deepCopy() {
      return new postResource_args(this);
    }


    public void clear() {
      this.profile = null;
    }


    public com.moseeker.thrift.gen.profile.struct.Profile getProfile() {
      return this.profile;
    }

    public postResource_args setProfile( com.moseeker.thrift.gen.profile.struct.Profile profile) {
      this.profile = profile;
      return this;
    }

    public void unsetProfile() {
      this.profile = null;
    }

    /** Returns true if field profile is set (has been assigned a value) and false otherwise */
    public boolean isSetProfile() {
      return this.profile != null;
    }

    public void setProfileIsSet(boolean value) {
      if (!value) {
        this.profile = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case PROFILE:
        if (value == null) {
          unsetProfile();
        } else {
          setProfile((com.moseeker.thrift.gen.profile.struct.Profile)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE:
        return getProfile();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROFILE:
        return isSetProfile();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof postResource_args)
        return this.equals((postResource_args)that);
      return false;
    }

    public boolean equals(postResource_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_profile = true && this.isSetProfile();
      boolean that_present_profile = true && that.isSetProfile();
      if (this_present_profile || that_present_profile) {
        if (!(this_present_profile && that_present_profile))
          return false;
        if (!this.profile.equals(that.profile))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProfile()) ? 131071 : 524287);
      if (isSetProfile())
        hashCode = hashCode * 8191 + profile.hashCode();

      return hashCode;
    }


    public int compareTo(postResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProfile()).compareTo(other.isSetProfile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile, other.profile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("postResource_args(");
      boolean first = true;

      sb.append("profile:");
      if (this.profile == null) {
        sb.append("null");
      } else {
        sb.append(this.profile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (profile != null) {
        profile.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postResource_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public postResource_argsStandardScheme getScheme() {
        return new postResource_argsStandardScheme();
      }
    }

    private static class postResource_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<postResource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.profile = new com.moseeker.thrift.gen.profile.struct.Profile();
                struct.profile.read(iprot);
                struct.setProfileIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postResource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profile != null) {
          oprot.writeFieldBegin(PROFILE_FIELD_DESC);
          struct.profile.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postResource_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public postResource_argsTupleScheme getScheme() {
        return new postResource_argsTupleScheme();
      }
    }

    private static class postResource_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<postResource_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, postResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProfile()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProfile()) {
          struct.profile.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, postResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.profile = new com.moseeker.thrift.gen.profile.struct.Profile();
          struct.profile.read(iprot);
          struct.setProfileIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class postResource_result implements org.apache.thrift.TBase<postResource_result, postResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<postResource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postResource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new postResource_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new postResource_resultTupleSchemeFactory();

    public  com.moseeker.thrift.gen.common.struct.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postResource_result.class, metaDataMap);
    }

    public postResource_result() {
    }

    public postResource_result(
      com.moseeker.thrift.gen.common.struct.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postResource_result(postResource_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
    }

    public postResource_result deepCopy() {
      return new postResource_result(this);
    }


    public void clear() {
      this.success = null;
    }


    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public postResource_result setSuccess( com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof postResource_result)
        return this.equals((postResource_result)that);
      return false;
    }

    public boolean equals(postResource_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }


    public int compareTo(postResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("postResource_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postResource_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public postResource_resultStandardScheme getScheme() {
        return new postResource_resultStandardScheme();
      }
    }

    private static class postResource_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<postResource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postResource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postResource_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public postResource_resultTupleScheme getScheme() {
        return new postResource_resultTupleScheme();
      }
    }

    private static class postResource_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<postResource_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, postResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, postResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class putResource_args implements org.apache.thrift.TBase<putResource_args, putResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<putResource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putResource_args");

    private static final org.apache.thrift.protocol.TField PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("profile", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new putResource_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new putResource_argsTupleSchemeFactory();

    public  com.moseeker.thrift.gen.profile.struct.Profile profile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE((short)1, "profile");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE
            return PROFILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE, new org.apache.thrift.meta_data.FieldMetaData("profile", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Profile.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putResource_args.class, metaDataMap);
    }

    public putResource_args() {
    }

    public putResource_args(
      com.moseeker.thrift.gen.profile.struct.Profile profile)
    {
      this();
      this.profile = profile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putResource_args(putResource_args other) {
      if (other.isSetProfile()) {
        this.profile = new com.moseeker.thrift.gen.profile.struct.Profile(other.profile);
      }
    }

    public putResource_args deepCopy() {
      return new putResource_args(this);
    }


    public void clear() {
      this.profile = null;
    }


    public com.moseeker.thrift.gen.profile.struct.Profile getProfile() {
      return this.profile;
    }

    public putResource_args setProfile( com.moseeker.thrift.gen.profile.struct.Profile profile) {
      this.profile = profile;
      return this;
    }

    public void unsetProfile() {
      this.profile = null;
    }

    /** Returns true if field profile is set (has been assigned a value) and false otherwise */
    public boolean isSetProfile() {
      return this.profile != null;
    }

    public void setProfileIsSet(boolean value) {
      if (!value) {
        this.profile = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case PROFILE:
        if (value == null) {
          unsetProfile();
        } else {
          setProfile((com.moseeker.thrift.gen.profile.struct.Profile)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE:
        return getProfile();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROFILE:
        return isSetProfile();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof putResource_args)
        return this.equals((putResource_args)that);
      return false;
    }

    public boolean equals(putResource_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_profile = true && this.isSetProfile();
      boolean that_present_profile = true && that.isSetProfile();
      if (this_present_profile || that_present_profile) {
        if (!(this_present_profile && that_present_profile))
          return false;
        if (!this.profile.equals(that.profile))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProfile()) ? 131071 : 524287);
      if (isSetProfile())
        hashCode = hashCode * 8191 + profile.hashCode();

      return hashCode;
    }


    public int compareTo(putResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProfile()).compareTo(other.isSetProfile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile, other.profile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("putResource_args(");
      boolean first = true;

      sb.append("profile:");
      if (this.profile == null) {
        sb.append("null");
      } else {
        sb.append(this.profile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (profile != null) {
        profile.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putResource_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public putResource_argsStandardScheme getScheme() {
        return new putResource_argsStandardScheme();
      }
    }

    private static class putResource_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<putResource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.profile = new com.moseeker.thrift.gen.profile.struct.Profile();
                struct.profile.read(iprot);
                struct.setProfileIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putResource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profile != null) {
          oprot.writeFieldBegin(PROFILE_FIELD_DESC);
          struct.profile.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putResource_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public putResource_argsTupleScheme getScheme() {
        return new putResource_argsTupleScheme();
      }
    }

    private static class putResource_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<putResource_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, putResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProfile()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProfile()) {
          struct.profile.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, putResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.profile = new com.moseeker.thrift.gen.profile.struct.Profile();
          struct.profile.read(iprot);
          struct.setProfileIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class putResource_result implements org.apache.thrift.TBase<putResource_result, putResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<putResource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putResource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new putResource_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new putResource_resultTupleSchemeFactory();

    public  com.moseeker.thrift.gen.common.struct.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putResource_result.class, metaDataMap);
    }

    public putResource_result() {
    }

    public putResource_result(
      com.moseeker.thrift.gen.common.struct.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putResource_result(putResource_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
    }

    public putResource_result deepCopy() {
      return new putResource_result(this);
    }


    public void clear() {
      this.success = null;
    }


    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public putResource_result setSuccess( com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof putResource_result)
        return this.equals((putResource_result)that);
      return false;
    }

    public boolean equals(putResource_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }


    public int compareTo(putResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("putResource_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putResource_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public putResource_resultStandardScheme getScheme() {
        return new putResource_resultStandardScheme();
      }
    }

    private static class putResource_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<putResource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putResource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putResource_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public putResource_resultTupleScheme getScheme() {
        return new putResource_resultTupleScheme();
      }
    }

    private static class putResource_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<putResource_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, putResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, putResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class delResource_args implements org.apache.thrift.TBase<delResource_args, delResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<delResource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delResource_args");

    private static final org.apache.thrift.protocol.TField PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("profile", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new delResource_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new delResource_argsTupleSchemeFactory();

    public  com.moseeker.thrift.gen.profile.struct.Profile profile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE((short)1, "profile");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE
            return PROFILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE, new org.apache.thrift.meta_data.FieldMetaData("profile", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.Profile.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delResource_args.class, metaDataMap);
    }

    public delResource_args() {
    }

    public delResource_args(
      com.moseeker.thrift.gen.profile.struct.Profile profile)
    {
      this();
      this.profile = profile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delResource_args(delResource_args other) {
      if (other.isSetProfile()) {
        this.profile = new com.moseeker.thrift.gen.profile.struct.Profile(other.profile);
      }
    }

    public delResource_args deepCopy() {
      return new delResource_args(this);
    }


    public void clear() {
      this.profile = null;
    }


    public com.moseeker.thrift.gen.profile.struct.Profile getProfile() {
      return this.profile;
    }

    public delResource_args setProfile( com.moseeker.thrift.gen.profile.struct.Profile profile) {
      this.profile = profile;
      return this;
    }

    public void unsetProfile() {
      this.profile = null;
    }

    /** Returns true if field profile is set (has been assigned a value) and false otherwise */
    public boolean isSetProfile() {
      return this.profile != null;
    }

    public void setProfileIsSet(boolean value) {
      if (!value) {
        this.profile = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case PROFILE:
        if (value == null) {
          unsetProfile();
        } else {
          setProfile((com.moseeker.thrift.gen.profile.struct.Profile)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE:
        return getProfile();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROFILE:
        return isSetProfile();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof delResource_args)
        return this.equals((delResource_args)that);
      return false;
    }

    public boolean equals(delResource_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_profile = true && this.isSetProfile();
      boolean that_present_profile = true && that.isSetProfile();
      if (this_present_profile || that_present_profile) {
        if (!(this_present_profile && that_present_profile))
          return false;
        if (!this.profile.equals(that.profile))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProfile()) ? 131071 : 524287);
      if (isSetProfile())
        hashCode = hashCode * 8191 + profile.hashCode();

      return hashCode;
    }


    public int compareTo(delResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProfile()).compareTo(other.isSetProfile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile, other.profile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("delResource_args(");
      boolean first = true;

      sb.append("profile:");
      if (this.profile == null) {
        sb.append("null");
      } else {
        sb.append(this.profile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (profile != null) {
        profile.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delResource_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public delResource_argsStandardScheme getScheme() {
        return new delResource_argsStandardScheme();
      }
    }

    private static class delResource_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<delResource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.profile = new com.moseeker.thrift.gen.profile.struct.Profile();
                struct.profile.read(iprot);
                struct.setProfileIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delResource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profile != null) {
          oprot.writeFieldBegin(PROFILE_FIELD_DESC);
          struct.profile.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delResource_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public delResource_argsTupleScheme getScheme() {
        return new delResource_argsTupleScheme();
      }
    }

    private static class delResource_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<delResource_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, delResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProfile()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProfile()) {
          struct.profile.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, delResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.profile = new com.moseeker.thrift.gen.profile.struct.Profile();
          struct.profile.read(iprot);
          struct.setProfileIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class delResource_result implements org.apache.thrift.TBase<delResource_result, delResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<delResource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delResource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new delResource_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new delResource_resultTupleSchemeFactory();

    public  com.moseeker.thrift.gen.common.struct.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delResource_result.class, metaDataMap);
    }

    public delResource_result() {
    }

    public delResource_result(
      com.moseeker.thrift.gen.common.struct.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delResource_result(delResource_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
    }

    public delResource_result deepCopy() {
      return new delResource_result(this);
    }


    public void clear() {
      this.success = null;
    }


    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public delResource_result setSuccess( com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof delResource_result)
        return this.equals((delResource_result)that);
      return false;
    }

    public boolean equals(delResource_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }


    public int compareTo(delResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("delResource_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delResource_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public delResource_resultStandardScheme getScheme() {
        return new delResource_resultStandardScheme();
      }
    }

    private static class delResource_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<delResource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delResource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delResource_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public delResource_resultTupleScheme getScheme() {
        return new delResource_resultTupleScheme();
      }
    }

    private static class delResource_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<delResource_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, delResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, delResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCompleteness_args implements org.apache.thrift.TBase<getCompleteness_args, getCompleteness_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCompleteness_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompleteness_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PROFILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("profile_id", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCompleteness_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCompleteness_argsTupleSchemeFactory();

    public int user_id; // required
    public  java.lang.String uuid; // required
    public int profile_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "user_id"),
      UUID((short)2, "uuid"),
      PROFILE_ID((short)3, "profile_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // UUID
            return UUID;
          case 3: // PROFILE_ID
            return PROFILE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USER_ID_ISSET_ID = 0;
    private static final int __PROFILE_ID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROFILE_ID, new org.apache.thrift.meta_data.FieldMetaData("profile_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompleteness_args.class, metaDataMap);
    }

    public getCompleteness_args() {
    }

    public getCompleteness_args(
      int user_id,
      java.lang.String uuid,
      int profile_id)
    {
      this();
      this.user_id = user_id;
      setUser_idIsSet(true);
      this.uuid = uuid;
      this.profile_id = profile_id;
      setProfile_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompleteness_args(getCompleteness_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.user_id = other.user_id;
      if (other.isSetUuid()) {
        this.uuid = other.uuid;
      }
      this.profile_id = other.profile_id;
    }

    public getCompleteness_args deepCopy() {
      return new getCompleteness_args(this);
    }


    public void clear() {
      setUser_idIsSet(false);
      this.user_id = 0;
      this.uuid = null;
      setProfile_idIsSet(false);
      this.profile_id = 0;
    }

    public int getUser_id() {
      return this.user_id;
    }

    public getCompleteness_args setUser_id(int user_id) {
      this.user_id = user_id;
      setUser_idIsSet(true);
      return this;
    }

    public void unsetUser_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USER_ID_ISSET_ID);
    }

    /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USER_ID_ISSET_ID);
    }

    public void setUser_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USER_ID_ISSET_ID, value);
    }


    public java.lang.String getUuid() {
      return this.uuid;
    }

    public getCompleteness_args setUuid( java.lang.String uuid) {
      this.uuid = uuid;
      return this;
    }

    public void unsetUuid() {
      this.uuid = null;
    }

    /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
    public boolean isSetUuid() {
      return this.uuid != null;
    }

    public void setUuidIsSet(boolean value) {
      if (!value) {
        this.uuid = null;
      }
    }

    public int getProfile_id() {
      return this.profile_id;
    }

    public getCompleteness_args setProfile_id(int profile_id) {
      this.profile_id = profile_id;
      setProfile_idIsSet(true);
      return this;
    }

    public void unsetProfile_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROFILE_ID_ISSET_ID);
    }

    /** Returns true if field profile_id is set (has been assigned a value) and false otherwise */
    public boolean isSetProfile_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROFILE_ID_ISSET_ID);
    }

    public void setProfile_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROFILE_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUser_id();
        } else {
          setUser_id((java.lang.Integer)value);
        }
        break;

      case UUID:
        if (value == null) {
          unsetUuid();
        } else {
          setUuid((java.lang.String)value);
        }
        break;

      case PROFILE_ID:
        if (value == null) {
          unsetProfile_id();
        } else {
          setProfile_id((java.lang.Integer)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUser_id();

      case UUID:
        return getUuid();

      case PROFILE_ID:
        return getProfile_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUser_id();
      case UUID:
        return isSetUuid();
      case PROFILE_ID:
        return isSetProfile_id();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCompleteness_args)
        return this.equals((getCompleteness_args)that);
      return false;
    }

    public boolean equals(getCompleteness_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_user_id = true;
      boolean that_present_user_id = true;
      if (this_present_user_id || that_present_user_id) {
        if (!(this_present_user_id && that_present_user_id))
          return false;
        if (this.user_id != that.user_id)
          return false;
      }

      boolean this_present_uuid = true && this.isSetUuid();
      boolean that_present_uuid = true && that.isSetUuid();
      if (this_present_uuid || that_present_uuid) {
        if (!(this_present_uuid && that_present_uuid))
          return false;
        if (!this.uuid.equals(that.uuid))
          return false;
      }

      boolean this_present_profile_id = true;
      boolean that_present_profile_id = true;
      if (this_present_profile_id || that_present_profile_id) {
        if (!(this_present_profile_id && that_present_profile_id))
          return false;
        if (this.profile_id != that.profile_id)
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + user_id;

      hashCode = hashCode * 8191 + ((isSetUuid()) ? 131071 : 524287);
      if (isSetUuid())
        hashCode = hashCode * 8191 + uuid.hashCode();

      hashCode = hashCode * 8191 + profile_id;

      return hashCode;
    }


    public int compareTo(getCompleteness_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUser_id()).compareTo(other.isSetUser_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, other.user_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUuid()).compareTo(other.isSetUuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUuid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProfile_id()).compareTo(other.isSetProfile_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfile_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile_id, other.profile_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCompleteness_args(");
      boolean first = true;

      sb.append("user_id:");
      sb.append(this.user_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("uuid:");
      if (this.uuid == null) {
        sb.append("null");
      } else {
        sb.append(this.uuid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("profile_id:");
      sb.append(this.profile_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCompleteness_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCompleteness_argsStandardScheme getScheme() {
        return new getCompleteness_argsStandardScheme();
      }
    }

    private static class getCompleteness_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCompleteness_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCompleteness_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.user_id = iprot.readI32();
                struct.setUser_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UUID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uuid = iprot.readString();
                struct.setUuidIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PROFILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.profile_id = iprot.readI32();
                struct.setProfile_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCompleteness_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.user_id);
        oprot.writeFieldEnd();
        if (struct.uuid != null) {
          oprot.writeFieldBegin(UUID_FIELD_DESC);
          oprot.writeString(struct.uuid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PROFILE_ID_FIELD_DESC);
        oprot.writeI32(struct.profile_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCompleteness_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCompleteness_argsTupleScheme getScheme() {
        return new getCompleteness_argsTupleScheme();
      }
    }

    private static class getCompleteness_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCompleteness_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, getCompleteness_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUser_id()) {
          optionals.set(0);
        }
        if (struct.isSetUuid()) {
          optionals.set(1);
        }
        if (struct.isSetProfile_id()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUser_id()) {
          oprot.writeI32(struct.user_id);
        }
        if (struct.isSetUuid()) {
          oprot.writeString(struct.uuid);
        }
        if (struct.isSetProfile_id()) {
          oprot.writeI32(struct.profile_id);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, getCompleteness_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.user_id = iprot.readI32();
          struct.setUser_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uuid = iprot.readString();
          struct.setUuidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.profile_id = iprot.readI32();
          struct.setProfile_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCompleteness_result implements org.apache.thrift.TBase<getCompleteness_result, getCompleteness_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCompleteness_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompleteness_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCompleteness_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCompleteness_resultTupleSchemeFactory();

    public  com.moseeker.thrift.gen.common.struct.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompleteness_result.class, metaDataMap);
    }

    public getCompleteness_result() {
    }

    public getCompleteness_result(
      com.moseeker.thrift.gen.common.struct.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompleteness_result(getCompleteness_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
    }

    public getCompleteness_result deepCopy() {
      return new getCompleteness_result(this);
    }


    public void clear() {
      this.success = null;
    }


    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public getCompleteness_result setSuccess( com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCompleteness_result)
        return this.equals((getCompleteness_result)that);
      return false;
    }

    public boolean equals(getCompleteness_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }


    public int compareTo(getCompleteness_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCompleteness_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCompleteness_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCompleteness_resultStandardScheme getScheme() {
        return new getCompleteness_resultStandardScheme();
      }
    }

    private static class getCompleteness_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCompleteness_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCompleteness_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCompleteness_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCompleteness_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCompleteness_resultTupleScheme getScheme() {
        return new getCompleteness_resultTupleScheme();
      }
    }

    private static class getCompleteness_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCompleteness_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, getCompleteness_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, getCompleteness_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class reCalculateUserCompleteness_args implements org.apache.thrift.TBase<reCalculateUserCompleteness_args, reCalculateUserCompleteness_args._Fields>, java.io.Serializable, Cloneable, Comparable<reCalculateUserCompleteness_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reCalculateUserCompleteness_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new reCalculateUserCompleteness_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new reCalculateUserCompleteness_argsTupleSchemeFactory();

    public int userId; // required
    public  java.lang.String mobile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      MOBILE((short)2, "mobile");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // MOBILE
            return MOBILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reCalculateUserCompleteness_args.class, metaDataMap);
    }

    public reCalculateUserCompleteness_args() {
    }

    public reCalculateUserCompleteness_args(
      int userId,
      java.lang.String mobile)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.mobile = mobile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reCalculateUserCompleteness_args(reCalculateUserCompleteness_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      if (other.isSetMobile()) {
        this.mobile = other.mobile;
      }
    }

    public reCalculateUserCompleteness_args deepCopy() {
      return new reCalculateUserCompleteness_args(this);
    }


    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      this.mobile = null;
    }

    public int getUserId() {
      return this.userId;
    }

    public reCalculateUserCompleteness_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }


    public java.lang.String getMobile() {
      return this.mobile;
    }

    public reCalculateUserCompleteness_args setMobile( java.lang.String mobile) {
      this.mobile = mobile;
      return this;
    }

    public void unsetMobile() {
      this.mobile = null;
    }

    /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
    public boolean isSetMobile() {
      return this.mobile != null;
    }

    public void setMobileIsSet(boolean value) {
      if (!value) {
        this.mobile = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.Integer)value);
        }
        break;

      case MOBILE:
        if (value == null) {
          unsetMobile();
        } else {
          setMobile((java.lang.String)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case MOBILE:
        return getMobile();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case MOBILE:
        return isSetMobile();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof reCalculateUserCompleteness_args)
        return this.equals((reCalculateUserCompleteness_args)that);
      return false;
    }

    public boolean equals(reCalculateUserCompleteness_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_mobile = true && this.isSetMobile();
      boolean that_present_mobile = true && that.isSetMobile();
      if (this_present_mobile || that_present_mobile) {
        if (!(this_present_mobile && that_present_mobile))
          return false;
        if (!this.mobile.equals(that.mobile))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + userId;

      hashCode = hashCode * 8191 + ((isSetMobile()) ? 131071 : 524287);
      if (isSetMobile())
        hashCode = hashCode * 8191 + mobile.hashCode();

      return hashCode;
    }


    public int compareTo(reCalculateUserCompleteness_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("reCalculateUserCompleteness_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reCalculateUserCompleteness_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reCalculateUserCompleteness_argsStandardScheme getScheme() {
        return new reCalculateUserCompleteness_argsStandardScheme();
      }
    }

    private static class reCalculateUserCompleteness_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<reCalculateUserCompleteness_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reCalculateUserCompleteness_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MOBILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobile = iprot.readString();
                struct.setMobileIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reCalculateUserCompleteness_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        if (struct.mobile != null) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reCalculateUserCompleteness_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reCalculateUserCompleteness_argsTupleScheme getScheme() {
        return new reCalculateUserCompleteness_argsTupleScheme();
      }
    }

    private static class reCalculateUserCompleteness_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<reCalculateUserCompleteness_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, reCalculateUserCompleteness_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetMobile()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetMobile()) {
          oprot.writeString(struct.mobile);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, reCalculateUserCompleteness_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mobile = iprot.readString();
          struct.setMobileIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class reCalculateUserCompleteness_result implements org.apache.thrift.TBase<reCalculateUserCompleteness_result, reCalculateUserCompleteness_result._Fields>, java.io.Serializable, Cloneable, Comparable<reCalculateUserCompleteness_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reCalculateUserCompleteness_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new reCalculateUserCompleteness_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new reCalculateUserCompleteness_resultTupleSchemeFactory();

    public  com.moseeker.thrift.gen.common.struct.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reCalculateUserCompleteness_result.class, metaDataMap);
    }

    public reCalculateUserCompleteness_result() {
    }

    public reCalculateUserCompleteness_result(
      com.moseeker.thrift.gen.common.struct.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reCalculateUserCompleteness_result(reCalculateUserCompleteness_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
    }

    public reCalculateUserCompleteness_result deepCopy() {
      return new reCalculateUserCompleteness_result(this);
    }


    public void clear() {
      this.success = null;
    }


    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public reCalculateUserCompleteness_result setSuccess( com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof reCalculateUserCompleteness_result)
        return this.equals((reCalculateUserCompleteness_result)that);
      return false;
    }

    public boolean equals(reCalculateUserCompleteness_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }


    public int compareTo(reCalculateUserCompleteness_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("reCalculateUserCompleteness_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reCalculateUserCompleteness_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reCalculateUserCompleteness_resultStandardScheme getScheme() {
        return new reCalculateUserCompleteness_resultStandardScheme();
      }
    }

    private static class reCalculateUserCompleteness_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<reCalculateUserCompleteness_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reCalculateUserCompleteness_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reCalculateUserCompleteness_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reCalculateUserCompleteness_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reCalculateUserCompleteness_resultTupleScheme getScheme() {
        return new reCalculateUserCompleteness_resultTupleScheme();
      }
    }

    private static class reCalculateUserCompleteness_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<reCalculateUserCompleteness_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, reCalculateUserCompleteness_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, reCalculateUserCompleteness_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class reCalculateUserCompletenessBySettingId_args implements org.apache.thrift.TBase<reCalculateUserCompletenessBySettingId_args, reCalculateUserCompletenessBySettingId_args._Fields>, java.io.Serializable, Cloneable, Comparable<reCalculateUserCompletenessBySettingId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reCalculateUserCompletenessBySettingId_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new reCalculateUserCompletenessBySettingId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new reCalculateUserCompletenessBySettingId_argsTupleSchemeFactory();

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reCalculateUserCompletenessBySettingId_args.class, metaDataMap);
    }

    public reCalculateUserCompletenessBySettingId_args() {
    }

    public reCalculateUserCompletenessBySettingId_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reCalculateUserCompletenessBySettingId_args(reCalculateUserCompletenessBySettingId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public reCalculateUserCompletenessBySettingId_args deepCopy() {
      return new reCalculateUserCompletenessBySettingId_args(this);
    }


    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public reCalculateUserCompletenessBySettingId_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((java.lang.Integer)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof reCalculateUserCompletenessBySettingId_args)
        return this.equals((reCalculateUserCompletenessBySettingId_args)that);
      return false;
    }

    public boolean equals(reCalculateUserCompletenessBySettingId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + id;

      return hashCode;
    }


    public int compareTo(reCalculateUserCompletenessBySettingId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("reCalculateUserCompletenessBySettingId_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reCalculateUserCompletenessBySettingId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reCalculateUserCompletenessBySettingId_argsStandardScheme getScheme() {
        return new reCalculateUserCompletenessBySettingId_argsStandardScheme();
      }
    }

    private static class reCalculateUserCompletenessBySettingId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<reCalculateUserCompletenessBySettingId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reCalculateUserCompletenessBySettingId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reCalculateUserCompletenessBySettingId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reCalculateUserCompletenessBySettingId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reCalculateUserCompletenessBySettingId_argsTupleScheme getScheme() {
        return new reCalculateUserCompletenessBySettingId_argsTupleScheme();
      }
    }

    private static class reCalculateUserCompletenessBySettingId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<reCalculateUserCompletenessBySettingId_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, reCalculateUserCompletenessBySettingId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, reCalculateUserCompletenessBySettingId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class reCalculateUserCompletenessBySettingId_result implements org.apache.thrift.TBase<reCalculateUserCompletenessBySettingId_result, reCalculateUserCompletenessBySettingId_result._Fields>, java.io.Serializable, Cloneable, Comparable<reCalculateUserCompletenessBySettingId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reCalculateUserCompletenessBySettingId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new reCalculateUserCompletenessBySettingId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new reCalculateUserCompletenessBySettingId_resultTupleSchemeFactory();

    public  com.moseeker.thrift.gen.common.struct.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reCalculateUserCompletenessBySettingId_result.class, metaDataMap);
    }

    public reCalculateUserCompletenessBySettingId_result() {
    }

    public reCalculateUserCompletenessBySettingId_result(
      com.moseeker.thrift.gen.common.struct.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reCalculateUserCompletenessBySettingId_result(reCalculateUserCompletenessBySettingId_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
    }

    public reCalculateUserCompletenessBySettingId_result deepCopy() {
      return new reCalculateUserCompletenessBySettingId_result(this);
    }


    public void clear() {
      this.success = null;
    }


    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public reCalculateUserCompletenessBySettingId_result setSuccess( com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof reCalculateUserCompletenessBySettingId_result)
        return this.equals((reCalculateUserCompletenessBySettingId_result)that);
      return false;
    }

    public boolean equals(reCalculateUserCompletenessBySettingId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }


    public int compareTo(reCalculateUserCompletenessBySettingId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("reCalculateUserCompletenessBySettingId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reCalculateUserCompletenessBySettingId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reCalculateUserCompletenessBySettingId_resultStandardScheme getScheme() {
        return new reCalculateUserCompletenessBySettingId_resultStandardScheme();
      }
    }

    private static class reCalculateUserCompletenessBySettingId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<reCalculateUserCompletenessBySettingId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reCalculateUserCompletenessBySettingId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reCalculateUserCompletenessBySettingId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reCalculateUserCompletenessBySettingId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reCalculateUserCompletenessBySettingId_resultTupleScheme getScheme() {
        return new reCalculateUserCompletenessBySettingId_resultTupleScheme();
      }
    }

    private static class reCalculateUserCompletenessBySettingId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<reCalculateUserCompletenessBySettingId_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, reCalculateUserCompletenessBySettingId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, reCalculateUserCompletenessBySettingId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class parseProfileAttachment_args implements org.apache.thrift.TBase<parseProfileAttachment_args, parseProfileAttachment_args._Fields>, java.io.Serializable, Cloneable, Comparable<parseProfileAttachment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parseProfileAttachment_args");

    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("file", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new parseProfileAttachment_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new parseProfileAttachment_argsTupleSchemeFactory();

    public  java.lang.String fileName; // required
    public  java.lang.String file; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_NAME((short)1, "fileName"),
      FILE((short)2, "file");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_NAME
            return FILE_NAME;
          case 2: // FILE
            return FILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE, new org.apache.thrift.meta_data.FieldMetaData("file", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parseProfileAttachment_args.class, metaDataMap);
    }

    public parseProfileAttachment_args() {
    }

    public parseProfileAttachment_args(
      java.lang.String fileName,
      java.lang.String file)
    {
      this();
      this.fileName = fileName;
      this.file = file;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public parseProfileAttachment_args(parseProfileAttachment_args other) {
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
      if (other.isSetFile()) {
        this.file = other.file;
      }
    }

    public parseProfileAttachment_args deepCopy() {
      return new parseProfileAttachment_args(this);
    }


    public void clear() {
      this.fileName = null;
      this.file = null;
    }


    public java.lang.String getFileName() {
      return this.fileName;
    }

    public parseProfileAttachment_args setFileName( java.lang.String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }


    public java.lang.String getFile() {
      return this.file;
    }

    public parseProfileAttachment_args setFile( java.lang.String file) {
      this.file = file;
      return this;
    }

    public void unsetFile() {
      this.file = null;
    }

    /** Returns true if field file is set (has been assigned a value) and false otherwise */
    public boolean isSetFile() {
      return this.file != null;
    }

    public void setFileIsSet(boolean value) {
      if (!value) {
        this.file = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((java.lang.String)value);
        }
        break;

      case FILE:
        if (value == null) {
          unsetFile();
        } else {
          setFile((java.lang.String)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_NAME:
        return getFileName();

      case FILE:
        return getFile();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FILE_NAME:
        return isSetFileName();
      case FILE:
        return isSetFile();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof parseProfileAttachment_args)
        return this.equals((parseProfileAttachment_args)that);
      return false;
    }

    public boolean equals(parseProfileAttachment_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      boolean this_present_file = true && this.isSetFile();
      boolean that_present_file = true && that.isSetFile();
      if (this_present_file || that_present_file) {
        if (!(this_present_file && that_present_file))
          return false;
        if (!this.file.equals(that.file))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFileName()) ? 131071 : 524287);
      if (isSetFileName())
        hashCode = hashCode * 8191 + fileName.hashCode();

      hashCode = hashCode * 8191 + ((isSetFile()) ? 131071 : 524287);
      if (isSetFile())
        hashCode = hashCode * 8191 + file.hashCode();

      return hashCode;
    }


    public int compareTo(parseProfileAttachment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFile()).compareTo(other.isSetFile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file, other.file);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("parseProfileAttachment_args(");
      boolean first = true;

      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("file:");
      if (this.file == null) {
        sb.append("null");
      } else {
        sb.append(this.file);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class parseProfileAttachment_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parseProfileAttachment_argsStandardScheme getScheme() {
        return new parseProfileAttachment_argsStandardScheme();
      }
    }

    private static class parseProfileAttachment_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<parseProfileAttachment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, parseProfileAttachment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.file = iprot.readString();
                struct.setFileIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, parseProfileAttachment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        if (struct.file != null) {
          oprot.writeFieldBegin(FILE_FIELD_DESC);
          oprot.writeString(struct.file);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class parseProfileAttachment_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parseProfileAttachment_argsTupleScheme getScheme() {
        return new parseProfileAttachment_argsTupleScheme();
      }
    }

    private static class parseProfileAttachment_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<parseProfileAttachment_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, parseProfileAttachment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFileName()) {
          optionals.set(0);
        }
        if (struct.isSetFile()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
        if (struct.isSetFile()) {
          oprot.writeString(struct.file);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, parseProfileAttachment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.file = iprot.readString();
          struct.setFileIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class parseProfileAttachment_result implements org.apache.thrift.TBase<parseProfileAttachment_result, parseProfileAttachment_result._Fields>, java.io.Serializable, Cloneable, Comparable<parseProfileAttachment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parseProfileAttachment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new parseProfileAttachment_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new parseProfileAttachment_resultTupleSchemeFactory();

    public  com.moseeker.thrift.gen.common.struct.Response success; // required
    public  com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parseProfileAttachment_result.class, metaDataMap);
    }

    public parseProfileAttachment_result() {
    }

    public parseProfileAttachment_result(
      com.moseeker.thrift.gen.common.struct.Response success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public parseProfileAttachment_result(parseProfileAttachment_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public parseProfileAttachment_result deepCopy() {
      return new parseProfileAttachment_result(this);
    }


    public void clear() {
      this.success = null;
      this.e = null;
    }


    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public parseProfileAttachment_result setSuccess( com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }


    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public parseProfileAttachment_result setE( com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof parseProfileAttachment_result)
        return this.equals((parseProfileAttachment_result)that);
      return false;
    }

    public boolean equals(parseProfileAttachment_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }


    public int compareTo(parseProfileAttachment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("parseProfileAttachment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class parseProfileAttachment_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parseProfileAttachment_resultStandardScheme getScheme() {
        return new parseProfileAttachment_resultStandardScheme();
      }
    }

    private static class parseProfileAttachment_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<parseProfileAttachment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, parseProfileAttachment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, parseProfileAttachment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class parseProfileAttachment_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parseProfileAttachment_resultTupleScheme getScheme() {
        return new parseProfileAttachment_resultTupleScheme();
      }
    }

    private static class parseProfileAttachment_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<parseProfileAttachment_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, parseProfileAttachment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, parseProfileAttachment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getProfileByApplication_args implements org.apache.thrift.TBase<getProfileByApplication_args, getProfileByApplication_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileByApplication_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileByApplication_args");

    private static final org.apache.thrift.protocol.TField PROFILE_FORM_FIELD_DESC = new org.apache.thrift.protocol.TField("profileForm", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getProfileByApplication_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getProfileByApplication_argsTupleSchemeFactory();

    public  com.moseeker.thrift.gen.profile.struct.ProfileApplicationForm profileForm; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE_FORM((short)1, "profileForm");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE_FORM
            return PROFILE_FORM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE_FORM, new org.apache.thrift.meta_data.FieldMetaData("profileForm", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProfileApplicationForm.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileByApplication_args.class, metaDataMap);
    }

    public getProfileByApplication_args() {
    }

    public getProfileByApplication_args(
      com.moseeker.thrift.gen.profile.struct.ProfileApplicationForm profileForm)
    {
      this();
      this.profileForm = profileForm;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileByApplication_args(getProfileByApplication_args other) {
      if (other.isSetProfileForm()) {
        this.profileForm = new com.moseeker.thrift.gen.profile.struct.ProfileApplicationForm(other.profileForm);
      }
    }

    public getProfileByApplication_args deepCopy() {
      return new getProfileByApplication_args(this);
    }


    public void clear() {
      this.profileForm = null;
    }


    public com.moseeker.thrift.gen.profile.struct.ProfileApplicationForm getProfileForm() {
      return this.profileForm;
    }

    public getProfileByApplication_args setProfileForm( com.moseeker.thrift.gen.profile.struct.ProfileApplicationForm profileForm) {
      this.profileForm = profileForm;
      return this;
    }

    public void unsetProfileForm() {
      this.profileForm = null;
    }

    /** Returns true if field profileForm is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileForm() {
      return this.profileForm != null;
    }

    public void setProfileFormIsSet(boolean value) {
      if (!value) {
        this.profileForm = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case PROFILE_FORM:
        if (value == null) {
          unsetProfileForm();
        } else {
          setProfileForm((com.moseeker.thrift.gen.profile.struct.ProfileApplicationForm)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE_FORM:
        return getProfileForm();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROFILE_FORM:
        return isSetProfileForm();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileByApplication_args)
        return this.equals((getProfileByApplication_args)that);
      return false;
    }

    public boolean equals(getProfileByApplication_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_profileForm = true && this.isSetProfileForm();
      boolean that_present_profileForm = true && that.isSetProfileForm();
      if (this_present_profileForm || that_present_profileForm) {
        if (!(this_present_profileForm && that_present_profileForm))
          return false;
        if (!this.profileForm.equals(that.profileForm))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProfileForm()) ? 131071 : 524287);
      if (isSetProfileForm())
        hashCode = hashCode * 8191 + profileForm.hashCode();

      return hashCode;
    }


    public int compareTo(getProfileByApplication_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProfileForm()).compareTo(other.isSetProfileForm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileForm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileForm, other.profileForm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getProfileByApplication_args(");
      boolean first = true;

      sb.append("profileForm:");
      if (this.profileForm == null) {
        sb.append("null");
      } else {
        sb.append(this.profileForm);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (profileForm != null) {
        profileForm.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfileByApplication_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getProfileByApplication_argsStandardScheme getScheme() {
        return new getProfileByApplication_argsStandardScheme();
      }
    }

    private static class getProfileByApplication_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getProfileByApplication_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileByApplication_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE_FORM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.profileForm = new com.moseeker.thrift.gen.profile.struct.ProfileApplicationForm();
                struct.profileForm.read(iprot);
                struct.setProfileFormIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileByApplication_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profileForm != null) {
          oprot.writeFieldBegin(PROFILE_FORM_FIELD_DESC);
          struct.profileForm.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfileByApplication_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getProfileByApplication_argsTupleScheme getScheme() {
        return new getProfileByApplication_argsTupleScheme();
      }
    }

    private static class getProfileByApplication_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getProfileByApplication_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, getProfileByApplication_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProfileForm()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProfileForm()) {
          struct.profileForm.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, getProfileByApplication_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.profileForm = new com.moseeker.thrift.gen.profile.struct.ProfileApplicationForm();
          struct.profileForm.read(iprot);
          struct.setProfileFormIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getProfileByApplication_result implements org.apache.thrift.TBase<getProfileByApplication_result, getProfileByApplication_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileByApplication_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileByApplication_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getProfileByApplication_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getProfileByApplication_resultTupleSchemeFactory();

    public  com.moseeker.thrift.gen.common.struct.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileByApplication_result.class, metaDataMap);
    }

    public getProfileByApplication_result() {
    }

    public getProfileByApplication_result(
      com.moseeker.thrift.gen.common.struct.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileByApplication_result(getProfileByApplication_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
    }

    public getProfileByApplication_result deepCopy() {
      return new getProfileByApplication_result(this);
    }


    public void clear() {
      this.success = null;
    }


    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public getProfileByApplication_result setSuccess( com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileByApplication_result)
        return this.equals((getProfileByApplication_result)that);
      return false;
    }

    public boolean equals(getProfileByApplication_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }


    public int compareTo(getProfileByApplication_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getProfileByApplication_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfileByApplication_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getProfileByApplication_resultStandardScheme getScheme() {
        return new getProfileByApplication_resultStandardScheme();
      }
    }

    private static class getProfileByApplication_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getProfileByApplication_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileByApplication_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileByApplication_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfileByApplication_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getProfileByApplication_resultTupleScheme getScheme() {
        return new getProfileByApplication_resultTupleScheme();
      }
    }

    private static class getProfileByApplication_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getProfileByApplication_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, getProfileByApplication_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, getProfileByApplication_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class resumeProfile_args implements org.apache.thrift.TBase<resumeProfile_args, resumeProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<resumeProfile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resumeProfile_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("file", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new resumeProfile_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new resumeProfile_argsTupleSchemeFactory();

    public int uid; // required
    public  java.lang.String fileName; // required
    public  java.lang.String file; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      FILE_NAME((short)2, "fileName"),
      FILE((short)3, "file");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // FILE_NAME
            return FILE_NAME;
          case 3: // FILE
            return FILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE, new org.apache.thrift.meta_data.FieldMetaData("file", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resumeProfile_args.class, metaDataMap);
    }

    public resumeProfile_args() {
    }

    public resumeProfile_args(
      int uid,
      java.lang.String fileName,
      java.lang.String file)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.fileName = fileName;
      this.file = file;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resumeProfile_args(resumeProfile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
      if (other.isSetFile()) {
        this.file = other.file;
      }
    }

    public resumeProfile_args deepCopy() {
      return new resumeProfile_args(this);
    }


    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      this.fileName = null;
      this.file = null;
    }

    public int getUid() {
      return this.uid;
    }

    public resumeProfile_args setUid(int uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }


    public java.lang.String getFileName() {
      return this.fileName;
    }

    public resumeProfile_args setFileName( java.lang.String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }


    public java.lang.String getFile() {
      return this.file;
    }

    public resumeProfile_args setFile( java.lang.String file) {
      this.file = file;
      return this;
    }

    public void unsetFile() {
      this.file = null;
    }

    /** Returns true if field file is set (has been assigned a value) and false otherwise */
    public boolean isSetFile() {
      return this.file != null;
    }

    public void setFileIsSet(boolean value) {
      if (!value) {
        this.file = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((java.lang.Integer)value);
        }
        break;

      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((java.lang.String)value);
        }
        break;

      case FILE:
        if (value == null) {
          unsetFile();
        } else {
          setFile((java.lang.String)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      case FILE_NAME:
        return getFileName();

      case FILE:
        return getFile();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case FILE_NAME:
        return isSetFileName();
      case FILE:
        return isSetFile();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof resumeProfile_args)
        return this.equals((resumeProfile_args)that);
      return false;
    }

    public boolean equals(resumeProfile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      boolean this_present_file = true && this.isSetFile();
      boolean that_present_file = true && that.isSetFile();
      if (this_present_file || that_present_file) {
        if (!(this_present_file && that_present_file))
          return false;
        if (!this.file.equals(that.file))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + uid;

      hashCode = hashCode * 8191 + ((isSetFileName()) ? 131071 : 524287);
      if (isSetFileName())
        hashCode = hashCode * 8191 + fileName.hashCode();

      hashCode = hashCode * 8191 + ((isSetFile()) ? 131071 : 524287);
      if (isSetFile())
        hashCode = hashCode * 8191 + file.hashCode();

      return hashCode;
    }


    public int compareTo(resumeProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFile()).compareTo(other.isSetFile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file, other.file);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("resumeProfile_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("file:");
      if (this.file == null) {
        sb.append("null");
      } else {
        sb.append(this.file);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resumeProfile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public resumeProfile_argsStandardScheme getScheme() {
        return new resumeProfile_argsStandardScheme();
      }
    }

    private static class resumeProfile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<resumeProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resumeProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.uid = iprot.readI32();
                struct.setUidIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.file = iprot.readString();
                struct.setFileIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resumeProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI32(struct.uid);
        oprot.writeFieldEnd();
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        if (struct.file != null) {
          oprot.writeFieldBegin(FILE_FIELD_DESC);
          oprot.writeString(struct.file);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resumeProfile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public resumeProfile_argsTupleScheme getScheme() {
        return new resumeProfile_argsTupleScheme();
      }
    }

    private static class resumeProfile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<resumeProfile_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, resumeProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetFileName()) {
          optionals.set(1);
        }
        if (struct.isSetFile()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUid()) {
          oprot.writeI32(struct.uid);
        }
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
        if (struct.isSetFile()) {
          oprot.writeString(struct.file);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, resumeProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.uid = iprot.readI32();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.file = iprot.readString();
          struct.setFileIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class resumeProfile_result implements org.apache.thrift.TBase<resumeProfile_result, resumeProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<resumeProfile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resumeProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new resumeProfile_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new resumeProfile_resultTupleSchemeFactory();

    public  com.moseeker.thrift.gen.common.struct.Response success; // required
    public  com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resumeProfile_result.class, metaDataMap);
    }

    public resumeProfile_result() {
    }

    public resumeProfile_result(
      com.moseeker.thrift.gen.common.struct.Response success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resumeProfile_result(resumeProfile_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public resumeProfile_result deepCopy() {
      return new resumeProfile_result(this);
    }


    public void clear() {
      this.success = null;
      this.e = null;
    }


    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public resumeProfile_result setSuccess( com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }


    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public resumeProfile_result setE( com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof resumeProfile_result)
        return this.equals((resumeProfile_result)that);
      return false;
    }

    public boolean equals(resumeProfile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }


    public int compareTo(resumeProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("resumeProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resumeProfile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public resumeProfile_resultStandardScheme getScheme() {
        return new resumeProfile_resultStandardScheme();
      }
    }

    private static class resumeProfile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<resumeProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resumeProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resumeProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resumeProfile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public resumeProfile_resultTupleScheme getScheme() {
        return new resumeProfile_resultTupleScheme();
      }
    }

    private static class resumeProfile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<resumeProfile_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, resumeProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, resumeProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class upsertProfile_args implements org.apache.thrift.TBase<upsertProfile_args, upsertProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<upsertProfile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("upsertProfile_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("profile", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new upsertProfile_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new upsertProfile_argsTupleSchemeFactory();

    public int userId; // required
    public  java.lang.String profile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      PROFILE((short)2, "profile");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // PROFILE
            return PROFILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PROFILE, new org.apache.thrift.meta_data.FieldMetaData("profile", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(upsertProfile_args.class, metaDataMap);
    }

    public upsertProfile_args() {
    }

    public upsertProfile_args(
      int userId,
      java.lang.String profile)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.profile = profile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public upsertProfile_args(upsertProfile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      if (other.isSetProfile()) {
        this.profile = other.profile;
      }
    }

    public upsertProfile_args deepCopy() {
      return new upsertProfile_args(this);
    }


    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      this.profile = null;
    }

    public int getUserId() {
      return this.userId;
    }

    public upsertProfile_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }


    public java.lang.String getProfile() {
      return this.profile;
    }

    public upsertProfile_args setProfile( java.lang.String profile) {
      this.profile = profile;
      return this;
    }

    public void unsetProfile() {
      this.profile = null;
    }

    /** Returns true if field profile is set (has been assigned a value) and false otherwise */
    public boolean isSetProfile() {
      return this.profile != null;
    }

    public void setProfileIsSet(boolean value) {
      if (!value) {
        this.profile = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.Integer)value);
        }
        break;

      case PROFILE:
        if (value == null) {
          unsetProfile();
        } else {
          setProfile((java.lang.String)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case PROFILE:
        return getProfile();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case PROFILE:
        return isSetProfile();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof upsertProfile_args)
        return this.equals((upsertProfile_args)that);
      return false;
    }

    public boolean equals(upsertProfile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_profile = true && this.isSetProfile();
      boolean that_present_profile = true && that.isSetProfile();
      if (this_present_profile || that_present_profile) {
        if (!(this_present_profile && that_present_profile))
          return false;
        if (!this.profile.equals(that.profile))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + userId;

      hashCode = hashCode * 8191 + ((isSetProfile()) ? 131071 : 524287);
      if (isSetProfile())
        hashCode = hashCode * 8191 + profile.hashCode();

      return hashCode;
    }


    public int compareTo(upsertProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProfile()).compareTo(other.isSetProfile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile, other.profile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("upsertProfile_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("profile:");
      if (this.profile == null) {
        sb.append("null");
      } else {
        sb.append(this.profile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class upsertProfile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public upsertProfile_argsStandardScheme getScheme() {
        return new upsertProfile_argsStandardScheme();
      }
    }

    private static class upsertProfile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<upsertProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, upsertProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROFILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.profile = iprot.readString();
                struct.setProfileIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, upsertProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        if (struct.profile != null) {
          oprot.writeFieldBegin(PROFILE_FIELD_DESC);
          oprot.writeString(struct.profile);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class upsertProfile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public upsertProfile_argsTupleScheme getScheme() {
        return new upsertProfile_argsTupleScheme();
      }
    }

    private static class upsertProfile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<upsertProfile_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, upsertProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetProfile()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetProfile()) {
          oprot.writeString(struct.profile);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, upsertProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.profile = iprot.readString();
          struct.setProfileIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class upsertProfile_result implements org.apache.thrift.TBase<upsertProfile_result, upsertProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<upsertProfile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("upsertProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new upsertProfile_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new upsertProfile_resultTupleSchemeFactory();

    public int success; // required
    public  com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(upsertProfile_result.class, metaDataMap);
    }

    public upsertProfile_result() {
    }

    public upsertProfile_result(
      int success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public upsertProfile_result(upsertProfile_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public upsertProfile_result deepCopy() {
      return new upsertProfile_result(this);
    }


    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public upsertProfile_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }


    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public upsertProfile_result setE( com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof upsertProfile_result)
        return this.equals((upsertProfile_result)that);
      return false;
    }

    public boolean equals(upsertProfile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }


    public int compareTo(upsertProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("upsertProfile_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class upsertProfile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public upsertProfile_resultStandardScheme getScheme() {
        return new upsertProfile_resultStandardScheme();
      }
    }

    private static class upsertProfile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<upsertProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, upsertProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, upsertProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class upsertProfile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public upsertProfile_resultTupleScheme getScheme() {
        return new upsertProfile_resultTupleScheme();
      }
    }

    private static class upsertProfile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<upsertProfile_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, upsertProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, upsertProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class resumeTalentProfile_args implements org.apache.thrift.TBase<resumeTalentProfile_args, resumeTalentProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<resumeTalentProfile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resumeTalentProfile_args");

    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("file", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new resumeTalentProfile_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new resumeTalentProfile_argsTupleSchemeFactory();

    public  java.lang.String fileName; // required
    public  java.lang.String file; // required
    public int companyId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_NAME((short)1, "fileName"),
      FILE((short)2, "file"),
      COMPANY_ID((short)3, "companyId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_NAME
            return FILE_NAME;
          case 2: // FILE
            return FILE;
          case 3: // COMPANY_ID
            return COMPANY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COMPANYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE, new org.apache.thrift.meta_data.FieldMetaData("file", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resumeTalentProfile_args.class, metaDataMap);
    }

    public resumeTalentProfile_args() {
    }

    public resumeTalentProfile_args(
      java.lang.String fileName,
      java.lang.String file,
      int companyId)
    {
      this();
      this.fileName = fileName;
      this.file = file;
      this.companyId = companyId;
      setCompanyIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resumeTalentProfile_args(resumeTalentProfile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
      if (other.isSetFile()) {
        this.file = other.file;
      }
      this.companyId = other.companyId;
    }

    public resumeTalentProfile_args deepCopy() {
      return new resumeTalentProfile_args(this);
    }


    public void clear() {
      this.fileName = null;
      this.file = null;
      setCompanyIdIsSet(false);
      this.companyId = 0;
    }


    public java.lang.String getFileName() {
      return this.fileName;
    }

    public resumeTalentProfile_args setFileName( java.lang.String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }


    public java.lang.String getFile() {
      return this.file;
    }

    public resumeTalentProfile_args setFile( java.lang.String file) {
      this.file = file;
      return this;
    }

    public void unsetFile() {
      this.file = null;
    }

    /** Returns true if field file is set (has been assigned a value) and false otherwise */
    public boolean isSetFile() {
      return this.file != null;
    }

    public void setFileIsSet(boolean value) {
      if (!value) {
        this.file = null;
      }
    }

    public int getCompanyId() {
      return this.companyId;
    }

    public resumeTalentProfile_args setCompanyId(int companyId) {
      this.companyId = companyId;
      setCompanyIdIsSet(true);
      return this;
    }

    public void unsetCompanyId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
    }

    /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
    public boolean isSetCompanyId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
    }

    public void setCompanyIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((java.lang.String)value);
        }
        break;

      case FILE:
        if (value == null) {
          unsetFile();
        } else {
          setFile((java.lang.String)value);
        }
        break;

      case COMPANY_ID:
        if (value == null) {
          unsetCompanyId();
        } else {
          setCompanyId((java.lang.Integer)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_NAME:
        return getFileName();

      case FILE:
        return getFile();

      case COMPANY_ID:
        return getCompanyId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FILE_NAME:
        return isSetFileName();
      case FILE:
        return isSetFile();
      case COMPANY_ID:
        return isSetCompanyId();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof resumeTalentProfile_args)
        return this.equals((resumeTalentProfile_args)that);
      return false;
    }

    public boolean equals(resumeTalentProfile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      boolean this_present_file = true && this.isSetFile();
      boolean that_present_file = true && that.isSetFile();
      if (this_present_file || that_present_file) {
        if (!(this_present_file && that_present_file))
          return false;
        if (!this.file.equals(that.file))
          return false;
      }

      boolean this_present_companyId = true;
      boolean that_present_companyId = true;
      if (this_present_companyId || that_present_companyId) {
        if (!(this_present_companyId && that_present_companyId))
          return false;
        if (this.companyId != that.companyId)
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFileName()) ? 131071 : 524287);
      if (isSetFileName())
        hashCode = hashCode * 8191 + fileName.hashCode();

      hashCode = hashCode * 8191 + ((isSetFile()) ? 131071 : 524287);
      if (isSetFile())
        hashCode = hashCode * 8191 + file.hashCode();

      hashCode = hashCode * 8191 + companyId;

      return hashCode;
    }


    public int compareTo(resumeTalentProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFile()).compareTo(other.isSetFile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file, other.file);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompanyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("resumeTalentProfile_args(");
      boolean first = true;

      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("file:");
      if (this.file == null) {
        sb.append("null");
      } else {
        sb.append(this.file);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("companyId:");
      sb.append(this.companyId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resumeTalentProfile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public resumeTalentProfile_argsStandardScheme getScheme() {
        return new resumeTalentProfile_argsStandardScheme();
      }
    }

    private static class resumeTalentProfile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<resumeTalentProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resumeTalentProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.file = iprot.readString();
                struct.setFileIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COMPANY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.companyId = iprot.readI32();
                struct.setCompanyIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resumeTalentProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        if (struct.file != null) {
          oprot.writeFieldBegin(FILE_FIELD_DESC);
          oprot.writeString(struct.file);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.companyId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resumeTalentProfile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public resumeTalentProfile_argsTupleScheme getScheme() {
        return new resumeTalentProfile_argsTupleScheme();
      }
    }

    private static class resumeTalentProfile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<resumeTalentProfile_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, resumeTalentProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFileName()) {
          optionals.set(0);
        }
        if (struct.isSetFile()) {
          optionals.set(1);
        }
        if (struct.isSetCompanyId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
        if (struct.isSetFile()) {
          oprot.writeString(struct.file);
        }
        if (struct.isSetCompanyId()) {
          oprot.writeI32(struct.companyId);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, resumeTalentProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.file = iprot.readString();
          struct.setFileIsSet(true);
        }
        if (incoming.get(2)) {
          struct.companyId = iprot.readI32();
          struct.setCompanyIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class resumeTalentProfile_result implements org.apache.thrift.TBase<resumeTalentProfile_result, resumeTalentProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<resumeTalentProfile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resumeTalentProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new resumeTalentProfile_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new resumeTalentProfile_resultTupleSchemeFactory();

    public  com.moseeker.thrift.gen.common.struct.Response success; // required
    public  com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resumeTalentProfile_result.class, metaDataMap);
    }

    public resumeTalentProfile_result() {
    }

    public resumeTalentProfile_result(
      com.moseeker.thrift.gen.common.struct.Response success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resumeTalentProfile_result(resumeTalentProfile_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public resumeTalentProfile_result deepCopy() {
      return new resumeTalentProfile_result(this);
    }


    public void clear() {
      this.success = null;
      this.e = null;
    }


    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public resumeTalentProfile_result setSuccess( com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }


    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public resumeTalentProfile_result setE( com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof resumeTalentProfile_result)
        return this.equals((resumeTalentProfile_result)that);
      return false;
    }

    public boolean equals(resumeTalentProfile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }


    public int compareTo(resumeTalentProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("resumeTalentProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resumeTalentProfile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public resumeTalentProfile_resultStandardScheme getScheme() {
        return new resumeTalentProfile_resultStandardScheme();
      }
    }

    private static class resumeTalentProfile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<resumeTalentProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resumeTalentProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resumeTalentProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resumeTalentProfile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public resumeTalentProfile_resultTupleScheme getScheme() {
        return new resumeTalentProfile_resultTupleScheme();
      }
    }

    private static class resumeTalentProfile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<resumeTalentProfile_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, resumeTalentProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, resumeTalentProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fetchUserProfile_args implements org.apache.thrift.TBase<fetchUserProfile_args, fetchUserProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<fetchUserProfile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchUserProfile_args");

    private static final org.apache.thrift.protocol.TField USER_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("userIdList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetchUserProfile_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetchUserProfile_argsTupleSchemeFactory();

    public  java.util.List<java.lang.Integer> userIdList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID_LIST((short)1, "userIdList");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID_LIST
            return USER_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("userIdList", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchUserProfile_args.class, metaDataMap);
    }

    public fetchUserProfile_args() {
    }

    public fetchUserProfile_args(
      java.util.List<java.lang.Integer> userIdList)
    {
      this();
      this.userIdList = userIdList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchUserProfile_args(fetchUserProfile_args other) {
      if (other.isSetUserIdList()) {
        java.util.List<java.lang.Integer> __this__userIdList = new java.util.ArrayList<java.lang.Integer>(other.userIdList);
        this.userIdList = __this__userIdList;
      }
    }

    public fetchUserProfile_args deepCopy() {
      return new fetchUserProfile_args(this);
    }


    public void clear() {
      this.userIdList = null;
    }

    public int getUserIdListSize() {
      return (this.userIdList == null) ? 0 : this.userIdList.size();
    }


    public java.util.Iterator<java.lang.Integer> getUserIdListIterator() {
      return (this.userIdList == null) ? null : this.userIdList.iterator();
    }

    public void addToUserIdList(int elem) {
      if (this.userIdList == null) {
        this.userIdList = new java.util.ArrayList<java.lang.Integer>();
      }
      this.userIdList.add(elem);
    }


    public java.util.List<java.lang.Integer> getUserIdList() {
      return this.userIdList;
    }

    public fetchUserProfile_args setUserIdList( java.util.List<java.lang.Integer> userIdList) {
      this.userIdList = userIdList;
      return this;
    }

    public void unsetUserIdList() {
      this.userIdList = null;
    }

    /** Returns true if field userIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetUserIdList() {
      return this.userIdList != null;
    }

    public void setUserIdListIsSet(boolean value) {
      if (!value) {
        this.userIdList = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case USER_ID_LIST:
        if (value == null) {
          unsetUserIdList();
        } else {
          setUserIdList((java.util.List<java.lang.Integer>)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID_LIST:
        return getUserIdList();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID_LIST:
        return isSetUserIdList();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchUserProfile_args)
        return this.equals((fetchUserProfile_args)that);
      return false;
    }

    public boolean equals(fetchUserProfile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userIdList = true && this.isSetUserIdList();
      boolean that_present_userIdList = true && that.isSetUserIdList();
      if (this_present_userIdList || that_present_userIdList) {
        if (!(this_present_userIdList && that_present_userIdList))
          return false;
        if (!this.userIdList.equals(that.userIdList))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUserIdList()) ? 131071 : 524287);
      if (isSetUserIdList())
        hashCode = hashCode * 8191 + userIdList.hashCode();

      return hashCode;
    }


    public int compareTo(fetchUserProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserIdList()).compareTo(other.isSetUserIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserIdList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIdList, other.userIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fetchUserProfile_args(");
      boolean first = true;

      sb.append("userIdList:");
      if (this.userIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.userIdList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchUserProfile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchUserProfile_argsStandardScheme getScheme() {
        return new fetchUserProfile_argsStandardScheme();
      }
    }

    private static class fetchUserProfile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetchUserProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchUserProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list90 = iprot.readListBegin();
                  struct.userIdList = new java.util.ArrayList<java.lang.Integer>(_list90.size);
                  int _elem91;
                  for (int _i92 = 0; _i92 < _list90.size; ++_i92)
                  {
                    _elem91 = iprot.readI32();
                    struct.userIdList.add(_elem91);
                  }
                  iprot.readListEnd();
                }
                struct.setUserIdListIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchUserProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userIdList != null) {
          oprot.writeFieldBegin(USER_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIdList.size()));
            for (int _iter93 : struct.userIdList)
            {
              oprot.writeI32(_iter93);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchUserProfile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchUserProfile_argsTupleScheme getScheme() {
        return new fetchUserProfile_argsTupleScheme();
      }
    }

    private static class fetchUserProfile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetchUserProfile_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, fetchUserProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserIdList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserIdList()) {
          {
            oprot.writeI32(struct.userIdList.size());
            for (int _iter94 : struct.userIdList)
            {
              oprot.writeI32(_iter94);
            }
          }
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, fetchUserProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.userIdList = new java.util.ArrayList<java.lang.Integer>(_list95.size);
            int _elem96;
            for (int _i97 = 0; _i97 < _list95.size; ++_i97)
            {
              _elem96 = iprot.readI32();
              struct.userIdList.add(_elem96);
            }
          }
          struct.setUserIdListIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fetchUserProfile_result implements org.apache.thrift.TBase<fetchUserProfile_result, fetchUserProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<fetchUserProfile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchUserProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetchUserProfile_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetchUserProfile_resultTupleSchemeFactory();

    public  java.util.List<com.moseeker.thrift.gen.profile.struct.UserProfile> success; // required
    public  com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.UserProfile.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchUserProfile_result.class, metaDataMap);
    }

    public fetchUserProfile_result() {
    }

    public fetchUserProfile_result(
      java.util.List<com.moseeker.thrift.gen.profile.struct.UserProfile> success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchUserProfile_result(fetchUserProfile_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.moseeker.thrift.gen.profile.struct.UserProfile> __this__success = new java.util.ArrayList<com.moseeker.thrift.gen.profile.struct.UserProfile>(other.success.size());
        for (com.moseeker.thrift.gen.profile.struct.UserProfile other_element : other.success) {
          __this__success.add(new com.moseeker.thrift.gen.profile.struct.UserProfile(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public fetchUserProfile_result deepCopy() {
      return new fetchUserProfile_result(this);
    }


    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }


    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.UserProfile> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.moseeker.thrift.gen.profile.struct.UserProfile elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.moseeker.thrift.gen.profile.struct.UserProfile>();
      }
      this.success.add(elem);
    }


    public java.util.List<com.moseeker.thrift.gen.profile.struct.UserProfile> getSuccess() {
      return this.success;
    }

    public fetchUserProfile_result setSuccess( java.util.List<com.moseeker.thrift.gen.profile.struct.UserProfile> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }


    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public fetchUserProfile_result setE( com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.moseeker.thrift.gen.profile.struct.UserProfile>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchUserProfile_result)
        return this.equals((fetchUserProfile_result)that);
      return false;
    }

    public boolean equals(fetchUserProfile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }


    public int compareTo(fetchUserProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fetchUserProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchUserProfile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchUserProfile_resultStandardScheme getScheme() {
        return new fetchUserProfile_resultStandardScheme();
      }
    }

    private static class fetchUserProfile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetchUserProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchUserProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list98 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.profile.struct.UserProfile>(_list98.size);
                   com.moseeker.thrift.gen.profile.struct.UserProfile _elem99;
                  for (int _i100 = 0; _i100 < _list98.size; ++_i100)
                  {
                    _elem99 = new com.moseeker.thrift.gen.profile.struct.UserProfile();
                    _elem99.read(iprot);
                    struct.success.add(_elem99);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchUserProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.moseeker.thrift.gen.profile.struct.UserProfile _iter101 : struct.success)
            {
              _iter101.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchUserProfile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchUserProfile_resultTupleScheme getScheme() {
        return new fetchUserProfile_resultTupleScheme();
      }
    }

    private static class fetchUserProfile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetchUserProfile_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, fetchUserProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.moseeker.thrift.gen.profile.struct.UserProfile _iter102 : struct.success)
            {
              _iter102.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, fetchUserProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list103 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.profile.struct.UserProfile>(_list103.size);
             com.moseeker.thrift.gen.profile.struct.UserProfile _elem104;
            for (int _i105 = 0; _i105 < _list103.size; ++_i105)
            {
              _elem104 = new com.moseeker.thrift.gen.profile.struct.UserProfile();
              _elem104.read(iprot);
              struct.success.add(_elem104);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getProfileTokenDecrypt_args implements org.apache.thrift.TBase<getProfileTokenDecrypt_args, getProfileTokenDecrypt_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileTokenDecrypt_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileTokenDecrypt_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getProfileTokenDecrypt_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getProfileTokenDecrypt_argsTupleSchemeFactory();

    public  java.lang.String token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileTokenDecrypt_args.class, metaDataMap);
    }

    public getProfileTokenDecrypt_args() {
    }

    public getProfileTokenDecrypt_args(
      java.lang.String token)
    {
      this();
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileTokenDecrypt_args(getProfileTokenDecrypt_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public getProfileTokenDecrypt_args deepCopy() {
      return new getProfileTokenDecrypt_args(this);
    }


    public void clear() {
      this.token = null;
    }


    public java.lang.String getToken() {
      return this.token;
    }

    public getProfileTokenDecrypt_args setToken( java.lang.String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((java.lang.String)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileTokenDecrypt_args)
        return this.equals((getProfileTokenDecrypt_args)that);
      return false;
    }

    public boolean equals(getProfileTokenDecrypt_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
      if (isSetToken())
        hashCode = hashCode * 8191 + token.hashCode();

      return hashCode;
    }


    public int compareTo(getProfileTokenDecrypt_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getProfileTokenDecrypt_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfileTokenDecrypt_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getProfileTokenDecrypt_argsStandardScheme getScheme() {
        return new getProfileTokenDecrypt_argsStandardScheme();
      }
    }

    private static class getProfileTokenDecrypt_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getProfileTokenDecrypt_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileTokenDecrypt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileTokenDecrypt_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfileTokenDecrypt_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getProfileTokenDecrypt_argsTupleScheme getScheme() {
        return new getProfileTokenDecrypt_argsTupleScheme();
      }
    }

    private static class getProfileTokenDecrypt_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getProfileTokenDecrypt_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, getProfileTokenDecrypt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, getProfileTokenDecrypt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getProfileTokenDecrypt_result implements org.apache.thrift.TBase<getProfileTokenDecrypt_result, getProfileTokenDecrypt_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileTokenDecrypt_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileTokenDecrypt_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getProfileTokenDecrypt_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getProfileTokenDecrypt_resultTupleSchemeFactory();

    public  com.moseeker.thrift.gen.common.struct.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileTokenDecrypt_result.class, metaDataMap);
    }

    public getProfileTokenDecrypt_result() {
    }

    public getProfileTokenDecrypt_result(
      com.moseeker.thrift.gen.common.struct.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileTokenDecrypt_result(getProfileTokenDecrypt_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
    }

    public getProfileTokenDecrypt_result deepCopy() {
      return new getProfileTokenDecrypt_result(this);
    }


    public void clear() {
      this.success = null;
    }


    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public getProfileTokenDecrypt_result setSuccess( com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileTokenDecrypt_result)
        return this.equals((getProfileTokenDecrypt_result)that);
      return false;
    }

    public boolean equals(getProfileTokenDecrypt_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }


    public int compareTo(getProfileTokenDecrypt_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getProfileTokenDecrypt_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfileTokenDecrypt_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getProfileTokenDecrypt_resultStandardScheme getScheme() {
        return new getProfileTokenDecrypt_resultStandardScheme();
      }
    }

    private static class getProfileTokenDecrypt_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getProfileTokenDecrypt_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileTokenDecrypt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileTokenDecrypt_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfileTokenDecrypt_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getProfileTokenDecrypt_resultTupleScheme getScheme() {
        return new getProfileTokenDecrypt_resultTupleScheme();
      }
    }

    private static class getProfileTokenDecrypt_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getProfileTokenDecrypt_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, getProfileTokenDecrypt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, getProfileTokenDecrypt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class parseText_args implements org.apache.thrift.TBase<parseText_args, parseText_args._Fields>, java.io.Serializable, Cloneable, Comparable<parseText_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parseText_args");

    private static final org.apache.thrift.protocol.TField PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("profile", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("reference", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField APPID_FIELD_DESC = new org.apache.thrift.protocol.TField("appid", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new parseText_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new parseText_argsTupleSchemeFactory();

    public  java.lang.String profile; // required
    public int reference; // required
    public int appid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE((short)1, "profile"),
      REFERENCE((short)2, "reference"),
      APPID((short)3, "appid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE
            return PROFILE;
          case 2: // REFERENCE
            return REFERENCE;
          case 3: // APPID
            return APPID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REFERENCE_ISSET_ID = 0;
    private static final int __APPID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE, new org.apache.thrift.meta_data.FieldMetaData("profile", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REFERENCE, new org.apache.thrift.meta_data.FieldMetaData("reference", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.APPID, new org.apache.thrift.meta_data.FieldMetaData("appid", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parseText_args.class, metaDataMap);
    }

    public parseText_args() {
    }

    public parseText_args(
      java.lang.String profile,
      int reference,
      int appid)
    {
      this();
      this.profile = profile;
      this.reference = reference;
      setReferenceIsSet(true);
      this.appid = appid;
      setAppidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public parseText_args(parseText_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetProfile()) {
        this.profile = other.profile;
      }
      this.reference = other.reference;
      this.appid = other.appid;
    }

    public parseText_args deepCopy() {
      return new parseText_args(this);
    }


    public void clear() {
      this.profile = null;
      setReferenceIsSet(false);
      this.reference = 0;
      setAppidIsSet(false);
      this.appid = 0;
    }


    public java.lang.String getProfile() {
      return this.profile;
    }

    public parseText_args setProfile( java.lang.String profile) {
      this.profile = profile;
      return this;
    }

    public void unsetProfile() {
      this.profile = null;
    }

    /** Returns true if field profile is set (has been assigned a value) and false otherwise */
    public boolean isSetProfile() {
      return this.profile != null;
    }

    public void setProfileIsSet(boolean value) {
      if (!value) {
        this.profile = null;
      }
    }

    public int getReference() {
      return this.reference;
    }

    public parseText_args setReference(int reference) {
      this.reference = reference;
      setReferenceIsSet(true);
      return this;
    }

    public void unsetReference() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REFERENCE_ISSET_ID);
    }

    /** Returns true if field reference is set (has been assigned a value) and false otherwise */
    public boolean isSetReference() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REFERENCE_ISSET_ID);
    }

    public void setReferenceIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REFERENCE_ISSET_ID, value);
    }

    public int getAppid() {
      return this.appid;
    }

    public parseText_args setAppid(int appid) {
      this.appid = appid;
      setAppidIsSet(true);
      return this;
    }

    public void unsetAppid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    /** Returns true if field appid is set (has been assigned a value) and false otherwise */
    public boolean isSetAppid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
    }

    public void setAppidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case PROFILE:
        if (value == null) {
          unsetProfile();
        } else {
          setProfile((java.lang.String)value);
        }
        break;

      case REFERENCE:
        if (value == null) {
          unsetReference();
        } else {
          setReference((java.lang.Integer)value);
        }
        break;

      case APPID:
        if (value == null) {
          unsetAppid();
        } else {
          setAppid((java.lang.Integer)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE:
        return getProfile();

      case REFERENCE:
        return getReference();

      case APPID:
        return getAppid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROFILE:
        return isSetProfile();
      case REFERENCE:
        return isSetReference();
      case APPID:
        return isSetAppid();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof parseText_args)
        return this.equals((parseText_args)that);
      return false;
    }

    public boolean equals(parseText_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_profile = true && this.isSetProfile();
      boolean that_present_profile = true && that.isSetProfile();
      if (this_present_profile || that_present_profile) {
        if (!(this_present_profile && that_present_profile))
          return false;
        if (!this.profile.equals(that.profile))
          return false;
      }

      boolean this_present_reference = true;
      boolean that_present_reference = true;
      if (this_present_reference || that_present_reference) {
        if (!(this_present_reference && that_present_reference))
          return false;
        if (this.reference != that.reference)
          return false;
      }

      boolean this_present_appid = true;
      boolean that_present_appid = true;
      if (this_present_appid || that_present_appid) {
        if (!(this_present_appid && that_present_appid))
          return false;
        if (this.appid != that.appid)
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProfile()) ? 131071 : 524287);
      if (isSetProfile())
        hashCode = hashCode * 8191 + profile.hashCode();

      hashCode = hashCode * 8191 + reference;

      hashCode = hashCode * 8191 + appid;

      return hashCode;
    }


    public int compareTo(parseText_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProfile()).compareTo(other.isSetProfile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile, other.profile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetReference()).compareTo(other.isSetReference());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference, other.reference);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAppid()).compareTo(other.isSetAppid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appid, other.appid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("parseText_args(");
      boolean first = true;

      sb.append("profile:");
      if (this.profile == null) {
        sb.append("null");
      } else {
        sb.append(this.profile);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference:");
      sb.append(this.reference);
      first = false;
      if (!first) sb.append(", ");
      sb.append("appid:");
      sb.append(this.appid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class parseText_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parseText_argsStandardScheme getScheme() {
        return new parseText_argsStandardScheme();
      }
    }

    private static class parseText_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<parseText_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, parseText_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.profile = iprot.readString();
                struct.setProfileIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REFERENCE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.reference = iprot.readI32();
                struct.setReferenceIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // APPID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.appid = iprot.readI32();
                struct.setAppidIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, parseText_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profile != null) {
          oprot.writeFieldBegin(PROFILE_FIELD_DESC);
          oprot.writeString(struct.profile);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(REFERENCE_FIELD_DESC);
        oprot.writeI32(struct.reference);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(APPID_FIELD_DESC);
        oprot.writeI32(struct.appid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class parseText_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parseText_argsTupleScheme getScheme() {
        return new parseText_argsTupleScheme();
      }
    }

    private static class parseText_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<parseText_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, parseText_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProfile()) {
          optionals.set(0);
        }
        if (struct.isSetReference()) {
          optionals.set(1);
        }
        if (struct.isSetAppid()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetProfile()) {
          oprot.writeString(struct.profile);
        }
        if (struct.isSetReference()) {
          oprot.writeI32(struct.reference);
        }
        if (struct.isSetAppid()) {
          oprot.writeI32(struct.appid);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, parseText_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.profile = iprot.readString();
          struct.setProfileIsSet(true);
        }
        if (incoming.get(1)) {
          struct.reference = iprot.readI32();
          struct.setReferenceIsSet(true);
        }
        if (incoming.get(2)) {
          struct.appid = iprot.readI32();
          struct.setAppidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class parseText_result implements org.apache.thrift.TBase<parseText_result, parseText_result._Fields>, java.io.Serializable, Cloneable, Comparable<parseText_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parseText_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new parseText_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new parseText_resultTupleSchemeFactory();

    public int success; // required
    public  com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parseText_result.class, metaDataMap);
    }

    public parseText_result() {
    }

    public parseText_result(
      int success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public parseText_result(parseText_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public parseText_result deepCopy() {
      return new parseText_result(this);
    }


    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public parseText_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }


    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public parseText_result setE( com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof parseText_result)
        return this.equals((parseText_result)that);
      return false;
    }

    public boolean equals(parseText_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }


    public int compareTo(parseText_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("parseText_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class parseText_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parseText_resultStandardScheme getScheme() {
        return new parseText_resultStandardScheme();
      }
    }

    private static class parseText_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<parseText_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, parseText_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, parseText_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class parseText_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parseText_resultTupleScheme getScheme() {
        return new parseText_resultTupleScheme();
      }
    }

    private static class parseText_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<parseText_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, parseText_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, parseText_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class parseFileProfile_args implements org.apache.thrift.TBase<parseFileProfile_args, parseFileProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<parseFileProfile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parseFileProfile_args");

    private static final org.apache.thrift.protocol.TField EMPLOYEE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FILE_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("fileData", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new parseFileProfile_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new parseFileProfile_argsTupleSchemeFactory();

    public int employeeId; // required
    public  java.lang.String fileName; // required
    public  java.nio.ByteBuffer fileData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMPLOYEE_ID((short)1, "employeeId"),
      FILE_NAME((short)2, "fileName"),
      FILE_DATA((short)3, "fileData");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMPLOYEE_ID
            return EMPLOYEE_ID;
          case 2: // FILE_NAME
            return FILE_NAME;
          case 3: // FILE_DATA
            return FILE_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EMPLOYEEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMPLOYEE_ID, new org.apache.thrift.meta_data.FieldMetaData("employeeId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_DATA, new org.apache.thrift.meta_data.FieldMetaData("fileData", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parseFileProfile_args.class, metaDataMap);
    }

    public parseFileProfile_args() {
    }

    public parseFileProfile_args(
      int employeeId,
      java.lang.String fileName,
      java.nio.ByteBuffer fileData)
    {
      this();
      this.employeeId = employeeId;
      setEmployeeIdIsSet(true);
      this.fileName = fileName;
      this.fileData = org.apache.thrift.TBaseHelper.copyBinary(fileData);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public parseFileProfile_args(parseFileProfile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.employeeId = other.employeeId;
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
      if (other.isSetFileData()) {
        this.fileData = org.apache.thrift.TBaseHelper.copyBinary(other.fileData);
      }
    }

    public parseFileProfile_args deepCopy() {
      return new parseFileProfile_args(this);
    }


    public void clear() {
      setEmployeeIdIsSet(false);
      this.employeeId = 0;
      this.fileName = null;
      this.fileData = null;
    }

    public int getEmployeeId() {
      return this.employeeId;
    }

    public parseFileProfile_args setEmployeeId(int employeeId) {
      this.employeeId = employeeId;
      setEmployeeIdIsSet(true);
      return this;
    }

    public void unsetEmployeeId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID);
    }

    /** Returns true if field employeeId is set (has been assigned a value) and false otherwise */
    public boolean isSetEmployeeId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID);
    }

    public void setEmployeeIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID, value);
    }


    public java.lang.String getFileName() {
      return this.fileName;
    }

    public parseFileProfile_args setFileName( java.lang.String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }

    public byte[] getFileData() {
      setFileData(org.apache.thrift.TBaseHelper.rightSize(fileData));
      return fileData == null ? null : fileData.array();
    }

    public java.nio.ByteBuffer bufferForFileData() {
      return org.apache.thrift.TBaseHelper.copyBinary(fileData);
    }

    public parseFileProfile_args setFileData(byte[] fileData) {
      this.fileData = fileData == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(fileData.clone());
      return this;
    }

    public parseFileProfile_args setFileData( java.nio.ByteBuffer fileData) {
      this.fileData = org.apache.thrift.TBaseHelper.copyBinary(fileData);
      return this;
    }

    public void unsetFileData() {
      this.fileData = null;
    }

    /** Returns true if field fileData is set (has been assigned a value) and false otherwise */
    public boolean isSetFileData() {
      return this.fileData != null;
    }

    public void setFileDataIsSet(boolean value) {
      if (!value) {
        this.fileData = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case EMPLOYEE_ID:
        if (value == null) {
          unsetEmployeeId();
        } else {
          setEmployeeId((java.lang.Integer)value);
        }
        break;

      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((java.lang.String)value);
        }
        break;

      case FILE_DATA:
        if (value == null) {
          unsetFileData();
        } else {
          if (value instanceof byte[]) {
            setFileData((byte[])value);
          } else {
            setFileData((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EMPLOYEE_ID:
        return getEmployeeId();

      case FILE_NAME:
        return getFileName();

      case FILE_DATA:
        return getFileData();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EMPLOYEE_ID:
        return isSetEmployeeId();
      case FILE_NAME:
        return isSetFileName();
      case FILE_DATA:
        return isSetFileData();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof parseFileProfile_args)
        return this.equals((parseFileProfile_args)that);
      return false;
    }

    public boolean equals(parseFileProfile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_employeeId = true;
      boolean that_present_employeeId = true;
      if (this_present_employeeId || that_present_employeeId) {
        if (!(this_present_employeeId && that_present_employeeId))
          return false;
        if (this.employeeId != that.employeeId)
          return false;
      }

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      boolean this_present_fileData = true && this.isSetFileData();
      boolean that_present_fileData = true && that.isSetFileData();
      if (this_present_fileData || that_present_fileData) {
        if (!(this_present_fileData && that_present_fileData))
          return false;
        if (!this.fileData.equals(that.fileData))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + employeeId;

      hashCode = hashCode * 8191 + ((isSetFileName()) ? 131071 : 524287);
      if (isSetFileName())
        hashCode = hashCode * 8191 + fileName.hashCode();

      hashCode = hashCode * 8191 + ((isSetFileData()) ? 131071 : 524287);
      if (isSetFileData())
        hashCode = hashCode * 8191 + fileData.hashCode();

      return hashCode;
    }


    public int compareTo(parseFileProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEmployeeId()).compareTo(other.isSetEmployeeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmployeeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeId, other.employeeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFileData()).compareTo(other.isSetFileData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileData, other.fileData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("parseFileProfile_args(");
      boolean first = true;

      sb.append("employeeId:");
      sb.append(this.employeeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileData:");
      if (this.fileData == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.fileData, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class parseFileProfile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parseFileProfile_argsStandardScheme getScheme() {
        return new parseFileProfile_argsStandardScheme();
      }
    }

    private static class parseFileProfile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<parseFileProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, parseFileProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // EMPLOYEE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.employeeId = iprot.readI32();
                struct.setEmployeeIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FILE_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileData = iprot.readBinary();
                struct.setFileDataIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, parseFileProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EMPLOYEE_ID_FIELD_DESC);
        oprot.writeI32(struct.employeeId);
        oprot.writeFieldEnd();
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        if (struct.fileData != null) {
          oprot.writeFieldBegin(FILE_DATA_FIELD_DESC);
          oprot.writeBinary(struct.fileData);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class parseFileProfile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parseFileProfile_argsTupleScheme getScheme() {
        return new parseFileProfile_argsTupleScheme();
      }
    }

    private static class parseFileProfile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<parseFileProfile_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, parseFileProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEmployeeId()) {
          optionals.set(0);
        }
        if (struct.isSetFileName()) {
          optionals.set(1);
        }
        if (struct.isSetFileData()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetEmployeeId()) {
          oprot.writeI32(struct.employeeId);
        }
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
        if (struct.isSetFileData()) {
          oprot.writeBinary(struct.fileData);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, parseFileProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.employeeId = iprot.readI32();
          struct.setEmployeeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fileData = iprot.readBinary();
          struct.setFileDataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class parseFileProfile_result implements org.apache.thrift.TBase<parseFileProfile_result, parseFileProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<parseFileProfile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parseFileProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new parseFileProfile_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new parseFileProfile_resultTupleSchemeFactory();

    public  com.moseeker.thrift.gen.profile.struct.ProfileParseResult success; // required
    public  com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProfileParseResult.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parseFileProfile_result.class, metaDataMap);
    }

    public parseFileProfile_result() {
    }

    public parseFileProfile_result(
      com.moseeker.thrift.gen.profile.struct.ProfileParseResult success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public parseFileProfile_result(parseFileProfile_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.profile.struct.ProfileParseResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public parseFileProfile_result deepCopy() {
      return new parseFileProfile_result(this);
    }


    public void clear() {
      this.success = null;
      this.e = null;
    }


    public com.moseeker.thrift.gen.profile.struct.ProfileParseResult getSuccess() {
      return this.success;
    }

    public parseFileProfile_result setSuccess( com.moseeker.thrift.gen.profile.struct.ProfileParseResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }


    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public parseFileProfile_result setE( com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.profile.struct.ProfileParseResult)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof parseFileProfile_result)
        return this.equals((parseFileProfile_result)that);
      return false;
    }

    public boolean equals(parseFileProfile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }


    public int compareTo(parseFileProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("parseFileProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class parseFileProfile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parseFileProfile_resultStandardScheme getScheme() {
        return new parseFileProfile_resultStandardScheme();
      }
    }

    private static class parseFileProfile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<parseFileProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, parseFileProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.profile.struct.ProfileParseResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, parseFileProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class parseFileProfile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parseFileProfile_resultTupleScheme getScheme() {
        return new parseFileProfile_resultTupleScheme();
      }
    }

    private static class parseFileProfile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<parseFileProfile_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, parseFileProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, parseFileProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.profile.struct.ProfileParseResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class parseFileProfileByFilePath_args implements org.apache.thrift.TBase<parseFileProfileByFilePath_args, parseFileProfileByFilePath_args._Fields>, java.io.Serializable, Cloneable, Comparable<parseFileProfileByFilePath_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parseFileProfileByFilePath_args");

    private static final org.apache.thrift.protocol.TField FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("filePath", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SYNC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("syncId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new parseFileProfileByFilePath_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new parseFileProfileByFilePath_argsTupleSchemeFactory();

    public  java.lang.String filePath; // required
    public int userId; // required
    public  java.lang.String syncId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_PATH((short)1, "filePath"),
      USER_ID((short)2, "userId"),
      SYNC_ID((short)3, "syncId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_PATH
            return FILE_PATH;
          case 2: // USER_ID
            return USER_ID;
          case 3: // SYNC_ID
            return SYNC_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("filePath", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SYNC_ID, new org.apache.thrift.meta_data.FieldMetaData("syncId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parseFileProfileByFilePath_args.class, metaDataMap);
    }

    public parseFileProfileByFilePath_args() {
    }

    public parseFileProfileByFilePath_args(
      java.lang.String filePath,
      int userId,
      java.lang.String syncId)
    {
      this();
      this.filePath = filePath;
      this.userId = userId;
      setUserIdIsSet(true);
      this.syncId = syncId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public parseFileProfileByFilePath_args(parseFileProfileByFilePath_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFilePath()) {
        this.filePath = other.filePath;
      }
      this.userId = other.userId;
      if (other.isSetSyncId()) {
        this.syncId = other.syncId;
      }
    }

    public parseFileProfileByFilePath_args deepCopy() {
      return new parseFileProfileByFilePath_args(this);
    }


    public void clear() {
      this.filePath = null;
      setUserIdIsSet(false);
      this.userId = 0;
      this.syncId = null;
    }


    public java.lang.String getFilePath() {
      return this.filePath;
    }

    public parseFileProfileByFilePath_args setFilePath( java.lang.String filePath) {
      this.filePath = filePath;
      return this;
    }

    public void unsetFilePath() {
      this.filePath = null;
    }

    /** Returns true if field filePath is set (has been assigned a value) and false otherwise */
    public boolean isSetFilePath() {
      return this.filePath != null;
    }

    public void setFilePathIsSet(boolean value) {
      if (!value) {
        this.filePath = null;
      }
    }

    public int getUserId() {
      return this.userId;
    }

    public parseFileProfileByFilePath_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }


    public java.lang.String getSyncId() {
      return this.syncId;
    }

    public parseFileProfileByFilePath_args setSyncId( java.lang.String syncId) {
      this.syncId = syncId;
      return this;
    }

    public void unsetSyncId() {
      this.syncId = null;
    }

    /** Returns true if field syncId is set (has been assigned a value) and false otherwise */
    public boolean isSetSyncId() {
      return this.syncId != null;
    }

    public void setSyncIdIsSet(boolean value) {
      if (!value) {
        this.syncId = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case FILE_PATH:
        if (value == null) {
          unsetFilePath();
        } else {
          setFilePath((java.lang.String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.Integer)value);
        }
        break;

      case SYNC_ID:
        if (value == null) {
          unsetSyncId();
        } else {
          setSyncId((java.lang.String)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_PATH:
        return getFilePath();

      case USER_ID:
        return getUserId();

      case SYNC_ID:
        return getSyncId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FILE_PATH:
        return isSetFilePath();
      case USER_ID:
        return isSetUserId();
      case SYNC_ID:
        return isSetSyncId();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof parseFileProfileByFilePath_args)
        return this.equals((parseFileProfileByFilePath_args)that);
      return false;
    }

    public boolean equals(parseFileProfileByFilePath_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_filePath = true && this.isSetFilePath();
      boolean that_present_filePath = true && that.isSetFilePath();
      if (this_present_filePath || that_present_filePath) {
        if (!(this_present_filePath && that_present_filePath))
          return false;
        if (!this.filePath.equals(that.filePath))
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_syncId = true && this.isSetSyncId();
      boolean that_present_syncId = true && that.isSetSyncId();
      if (this_present_syncId || that_present_syncId) {
        if (!(this_present_syncId && that_present_syncId))
          return false;
        if (!this.syncId.equals(that.syncId))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFilePath()) ? 131071 : 524287);
      if (isSetFilePath())
        hashCode = hashCode * 8191 + filePath.hashCode();

      hashCode = hashCode * 8191 + userId;

      hashCode = hashCode * 8191 + ((isSetSyncId()) ? 131071 : 524287);
      if (isSetSyncId())
        hashCode = hashCode * 8191 + syncId.hashCode();

      return hashCode;
    }


    public int compareTo(parseFileProfileByFilePath_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFilePath()).compareTo(other.isSetFilePath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilePath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filePath, other.filePath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSyncId()).compareTo(other.isSetSyncId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSyncId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.syncId, other.syncId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("parseFileProfileByFilePath_args(");
      boolean first = true;

      sb.append("filePath:");
      if (this.filePath == null) {
        sb.append("null");
      } else {
        sb.append(this.filePath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("syncId:");
      if (this.syncId == null) {
        sb.append("null");
      } else {
        sb.append(this.syncId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class parseFileProfileByFilePath_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parseFileProfileByFilePath_argsStandardScheme getScheme() {
        return new parseFileProfileByFilePath_argsStandardScheme();
      }
    }

    private static class parseFileProfileByFilePath_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<parseFileProfileByFilePath_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, parseFileProfileByFilePath_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filePath = iprot.readString();
                struct.setFilePathIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SYNC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.syncId = iprot.readString();
                struct.setSyncIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, parseFileProfileByFilePath_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.filePath != null) {
          oprot.writeFieldBegin(FILE_PATH_FIELD_DESC);
          oprot.writeString(struct.filePath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        if (struct.syncId != null) {
          oprot.writeFieldBegin(SYNC_ID_FIELD_DESC);
          oprot.writeString(struct.syncId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class parseFileProfileByFilePath_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parseFileProfileByFilePath_argsTupleScheme getScheme() {
        return new parseFileProfileByFilePath_argsTupleScheme();
      }
    }

    private static class parseFileProfileByFilePath_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<parseFileProfileByFilePath_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, parseFileProfileByFilePath_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFilePath()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        if (struct.isSetSyncId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetFilePath()) {
          oprot.writeString(struct.filePath);
        }
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetSyncId()) {
          oprot.writeString(struct.syncId);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, parseFileProfileByFilePath_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.filePath = iprot.readString();
          struct.setFilePathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.syncId = iprot.readString();
          struct.setSyncIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class parseFileProfileByFilePath_result implements org.apache.thrift.TBase<parseFileProfileByFilePath_result, parseFileProfileByFilePath_result._Fields>, java.io.Serializable, Cloneable, Comparable<parseFileProfileByFilePath_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parseFileProfileByFilePath_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new parseFileProfileByFilePath_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new parseFileProfileByFilePath_resultTupleSchemeFactory();

    public  com.moseeker.thrift.gen.profile.struct.ProfileParseResult success; // required
    public  com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProfileParseResult.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parseFileProfileByFilePath_result.class, metaDataMap);
    }

    public parseFileProfileByFilePath_result() {
    }

    public parseFileProfileByFilePath_result(
      com.moseeker.thrift.gen.profile.struct.ProfileParseResult success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public parseFileProfileByFilePath_result(parseFileProfileByFilePath_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.profile.struct.ProfileParseResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public parseFileProfileByFilePath_result deepCopy() {
      return new parseFileProfileByFilePath_result(this);
    }


    public void clear() {
      this.success = null;
      this.e = null;
    }


    public com.moseeker.thrift.gen.profile.struct.ProfileParseResult getSuccess() {
      return this.success;
    }

    public parseFileProfileByFilePath_result setSuccess( com.moseeker.thrift.gen.profile.struct.ProfileParseResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }


    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public parseFileProfileByFilePath_result setE( com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.profile.struct.ProfileParseResult)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof parseFileProfileByFilePath_result)
        return this.equals((parseFileProfileByFilePath_result)that);
      return false;
    }

    public boolean equals(parseFileProfileByFilePath_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }


    public int compareTo(parseFileProfileByFilePath_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("parseFileProfileByFilePath_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class parseFileProfileByFilePath_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parseFileProfileByFilePath_resultStandardScheme getScheme() {
        return new parseFileProfileByFilePath_resultStandardScheme();
      }
    }

    private static class parseFileProfileByFilePath_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<parseFileProfileByFilePath_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, parseFileProfileByFilePath_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.profile.struct.ProfileParseResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, parseFileProfileByFilePath_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class parseFileProfileByFilePath_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parseFileProfileByFilePath_resultTupleScheme getScheme() {
        return new parseFileProfileByFilePath_resultTupleScheme();
      }
    }

    private static class parseFileProfileByFilePath_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<parseFileProfileByFilePath_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, parseFileProfileByFilePath_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, parseFileProfileByFilePath_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.profile.struct.ProfileParseResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class parseUserFileProfile_args implements org.apache.thrift.TBase<parseUserFileProfile_args, parseUserFileProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<parseUserFileProfile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parseUserFileProfile_args");

    private static final org.apache.thrift.protocol.TField EMPLOYEE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FILE_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("fileData", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new parseUserFileProfile_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new parseUserFileProfile_argsTupleSchemeFactory();

    public int employeeId; // required
    public  java.lang.String fileName; // required
    public  java.nio.ByteBuffer fileData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMPLOYEE_ID((short)1, "employeeId"),
      FILE_NAME((short)2, "fileName"),
      FILE_DATA((short)3, "fileData");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMPLOYEE_ID
            return EMPLOYEE_ID;
          case 2: // FILE_NAME
            return FILE_NAME;
          case 3: // FILE_DATA
            return FILE_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EMPLOYEEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMPLOYEE_ID, new org.apache.thrift.meta_data.FieldMetaData("employeeId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_DATA, new org.apache.thrift.meta_data.FieldMetaData("fileData", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parseUserFileProfile_args.class, metaDataMap);
    }

    public parseUserFileProfile_args() {
    }

    public parseUserFileProfile_args(
      int employeeId,
      java.lang.String fileName,
      java.nio.ByteBuffer fileData)
    {
      this();
      this.employeeId = employeeId;
      setEmployeeIdIsSet(true);
      this.fileName = fileName;
      this.fileData = org.apache.thrift.TBaseHelper.copyBinary(fileData);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public parseUserFileProfile_args(parseUserFileProfile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.employeeId = other.employeeId;
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
      if (other.isSetFileData()) {
        this.fileData = org.apache.thrift.TBaseHelper.copyBinary(other.fileData);
      }
    }

    public parseUserFileProfile_args deepCopy() {
      return new parseUserFileProfile_args(this);
    }


    public void clear() {
      setEmployeeIdIsSet(false);
      this.employeeId = 0;
      this.fileName = null;
      this.fileData = null;
    }

    public int getEmployeeId() {
      return this.employeeId;
    }

    public parseUserFileProfile_args setEmployeeId(int employeeId) {
      this.employeeId = employeeId;
      setEmployeeIdIsSet(true);
      return this;
    }

    public void unsetEmployeeId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID);
    }

    /** Returns true if field employeeId is set (has been assigned a value) and false otherwise */
    public boolean isSetEmployeeId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID);
    }

    public void setEmployeeIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID, value);
    }


    public java.lang.String getFileName() {
      return this.fileName;
    }

    public parseUserFileProfile_args setFileName( java.lang.String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }

    public byte[] getFileData() {
      setFileData(org.apache.thrift.TBaseHelper.rightSize(fileData));
      return fileData == null ? null : fileData.array();
    }

    public java.nio.ByteBuffer bufferForFileData() {
      return org.apache.thrift.TBaseHelper.copyBinary(fileData);
    }

    public parseUserFileProfile_args setFileData(byte[] fileData) {
      this.fileData = fileData == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(fileData.clone());
      return this;
    }

    public parseUserFileProfile_args setFileData( java.nio.ByteBuffer fileData) {
      this.fileData = org.apache.thrift.TBaseHelper.copyBinary(fileData);
      return this;
    }

    public void unsetFileData() {
      this.fileData = null;
    }

    /** Returns true if field fileData is set (has been assigned a value) and false otherwise */
    public boolean isSetFileData() {
      return this.fileData != null;
    }

    public void setFileDataIsSet(boolean value) {
      if (!value) {
        this.fileData = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case EMPLOYEE_ID:
        if (value == null) {
          unsetEmployeeId();
        } else {
          setEmployeeId((java.lang.Integer)value);
        }
        break;

      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((java.lang.String)value);
        }
        break;

      case FILE_DATA:
        if (value == null) {
          unsetFileData();
        } else {
          if (value instanceof byte[]) {
            setFileData((byte[])value);
          } else {
            setFileData((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EMPLOYEE_ID:
        return getEmployeeId();

      case FILE_NAME:
        return getFileName();

      case FILE_DATA:
        return getFileData();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EMPLOYEE_ID:
        return isSetEmployeeId();
      case FILE_NAME:
        return isSetFileName();
      case FILE_DATA:
        return isSetFileData();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof parseUserFileProfile_args)
        return this.equals((parseUserFileProfile_args)that);
      return false;
    }

    public boolean equals(parseUserFileProfile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_employeeId = true;
      boolean that_present_employeeId = true;
      if (this_present_employeeId || that_present_employeeId) {
        if (!(this_present_employeeId && that_present_employeeId))
          return false;
        if (this.employeeId != that.employeeId)
          return false;
      }

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      boolean this_present_fileData = true && this.isSetFileData();
      boolean that_present_fileData = true && that.isSetFileData();
      if (this_present_fileData || that_present_fileData) {
        if (!(this_present_fileData && that_present_fileData))
          return false;
        if (!this.fileData.equals(that.fileData))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + employeeId;

      hashCode = hashCode * 8191 + ((isSetFileName()) ? 131071 : 524287);
      if (isSetFileName())
        hashCode = hashCode * 8191 + fileName.hashCode();

      hashCode = hashCode * 8191 + ((isSetFileData()) ? 131071 : 524287);
      if (isSetFileData())
        hashCode = hashCode * 8191 + fileData.hashCode();

      return hashCode;
    }


    public int compareTo(parseUserFileProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEmployeeId()).compareTo(other.isSetEmployeeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmployeeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeId, other.employeeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFileData()).compareTo(other.isSetFileData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileData, other.fileData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("parseUserFileProfile_args(");
      boolean first = true;

      sb.append("employeeId:");
      sb.append(this.employeeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileData:");
      if (this.fileData == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.fileData, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class parseUserFileProfile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parseUserFileProfile_argsStandardScheme getScheme() {
        return new parseUserFileProfile_argsStandardScheme();
      }
    }

    private static class parseUserFileProfile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<parseUserFileProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, parseUserFileProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // EMPLOYEE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.employeeId = iprot.readI32();
                struct.setEmployeeIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FILE_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileData = iprot.readBinary();
                struct.setFileDataIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, parseUserFileProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EMPLOYEE_ID_FIELD_DESC);
        oprot.writeI32(struct.employeeId);
        oprot.writeFieldEnd();
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        if (struct.fileData != null) {
          oprot.writeFieldBegin(FILE_DATA_FIELD_DESC);
          oprot.writeBinary(struct.fileData);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class parseUserFileProfile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parseUserFileProfile_argsTupleScheme getScheme() {
        return new parseUserFileProfile_argsTupleScheme();
      }
    }

    private static class parseUserFileProfile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<parseUserFileProfile_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, parseUserFileProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEmployeeId()) {
          optionals.set(0);
        }
        if (struct.isSetFileName()) {
          optionals.set(1);
        }
        if (struct.isSetFileData()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetEmployeeId()) {
          oprot.writeI32(struct.employeeId);
        }
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
        if (struct.isSetFileData()) {
          oprot.writeBinary(struct.fileData);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, parseUserFileProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.employeeId = iprot.readI32();
          struct.setEmployeeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fileData = iprot.readBinary();
          struct.setFileDataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class parseUserFileProfile_result implements org.apache.thrift.TBase<parseUserFileProfile_result, parseUserFileProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<parseUserFileProfile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parseUserFileProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new parseUserFileProfile_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new parseUserFileProfile_resultTupleSchemeFactory();

    public  com.moseeker.thrift.gen.profile.struct.ProfileParseResult success; // required
    public  com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProfileParseResult.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parseUserFileProfile_result.class, metaDataMap);
    }

    public parseUserFileProfile_result() {
    }

    public parseUserFileProfile_result(
      com.moseeker.thrift.gen.profile.struct.ProfileParseResult success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public parseUserFileProfile_result(parseUserFileProfile_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.profile.struct.ProfileParseResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public parseUserFileProfile_result deepCopy() {
      return new parseUserFileProfile_result(this);
    }


    public void clear() {
      this.success = null;
      this.e = null;
    }


    public com.moseeker.thrift.gen.profile.struct.ProfileParseResult getSuccess() {
      return this.success;
    }

    public parseUserFileProfile_result setSuccess( com.moseeker.thrift.gen.profile.struct.ProfileParseResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }


    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public parseUserFileProfile_result setE( com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.profile.struct.ProfileParseResult)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof parseUserFileProfile_result)
        return this.equals((parseUserFileProfile_result)that);
      return false;
    }

    public boolean equals(parseUserFileProfile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }


    public int compareTo(parseUserFileProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("parseUserFileProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class parseUserFileProfile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parseUserFileProfile_resultStandardScheme getScheme() {
        return new parseUserFileProfile_resultStandardScheme();
      }
    }

    private static class parseUserFileProfile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<parseUserFileProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, parseUserFileProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.profile.struct.ProfileParseResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, parseUserFileProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class parseUserFileProfile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parseUserFileProfile_resultTupleScheme getScheme() {
        return new parseUserFileProfile_resultTupleScheme();
      }
    }

    private static class parseUserFileProfile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<parseUserFileProfile_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, parseUserFileProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, parseUserFileProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.profile.struct.ProfileParseResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class parseFileStreamProfile_args implements org.apache.thrift.TBase<parseFileStreamProfile_args, parseFileStreamProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<parseFileStreamProfile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parseFileStreamProfile_args");

    private static final org.apache.thrift.protocol.TField EMPLOYEE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_ORIGIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileOriginName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ABSOLUTE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("absoluteName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField FILE_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("fileData", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new parseFileStreamProfile_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new parseFileStreamProfile_argsTupleSchemeFactory();

    public int employeeId; // required
    public  java.lang.String fileOriginName; // required
    public  java.lang.String fileName; // required
    public  java.lang.String absoluteName; // required
    public  java.lang.String fileData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMPLOYEE_ID((short)1, "employeeId"),
      FILE_ORIGIN_NAME((short)2, "fileOriginName"),
      FILE_NAME((short)3, "fileName"),
      ABSOLUTE_NAME((short)4, "absoluteName"),
      FILE_DATA((short)5, "fileData");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMPLOYEE_ID
            return EMPLOYEE_ID;
          case 2: // FILE_ORIGIN_NAME
            return FILE_ORIGIN_NAME;
          case 3: // FILE_NAME
            return FILE_NAME;
          case 4: // ABSOLUTE_NAME
            return ABSOLUTE_NAME;
          case 5: // FILE_DATA
            return FILE_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EMPLOYEEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMPLOYEE_ID, new org.apache.thrift.meta_data.FieldMetaData("employeeId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FILE_ORIGIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileOriginName", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ABSOLUTE_NAME, new org.apache.thrift.meta_data.FieldMetaData("absoluteName", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_DATA, new org.apache.thrift.meta_data.FieldMetaData("fileData", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parseFileStreamProfile_args.class, metaDataMap);
    }

    public parseFileStreamProfile_args() {
    }

    public parseFileStreamProfile_args(
      int employeeId,
      java.lang.String fileOriginName,
      java.lang.String fileName,
      java.lang.String absoluteName,
      java.lang.String fileData)
    {
      this();
      this.employeeId = employeeId;
      setEmployeeIdIsSet(true);
      this.fileOriginName = fileOriginName;
      this.fileName = fileName;
      this.absoluteName = absoluteName;
      this.fileData = fileData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public parseFileStreamProfile_args(parseFileStreamProfile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.employeeId = other.employeeId;
      if (other.isSetFileOriginName()) {
        this.fileOriginName = other.fileOriginName;
      }
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
      if (other.isSetAbsoluteName()) {
        this.absoluteName = other.absoluteName;
      }
      if (other.isSetFileData()) {
        this.fileData = other.fileData;
      }
    }

    public parseFileStreamProfile_args deepCopy() {
      return new parseFileStreamProfile_args(this);
    }


    public void clear() {
      setEmployeeIdIsSet(false);
      this.employeeId = 0;
      this.fileOriginName = null;
      this.fileName = null;
      this.absoluteName = null;
      this.fileData = null;
    }

    public int getEmployeeId() {
      return this.employeeId;
    }

    public parseFileStreamProfile_args setEmployeeId(int employeeId) {
      this.employeeId = employeeId;
      setEmployeeIdIsSet(true);
      return this;
    }

    public void unsetEmployeeId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID);
    }

    /** Returns true if field employeeId is set (has been assigned a value) and false otherwise */
    public boolean isSetEmployeeId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID);
    }

    public void setEmployeeIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID, value);
    }


    public java.lang.String getFileOriginName() {
      return this.fileOriginName;
    }

    public parseFileStreamProfile_args setFileOriginName( java.lang.String fileOriginName) {
      this.fileOriginName = fileOriginName;
      return this;
    }

    public void unsetFileOriginName() {
      this.fileOriginName = null;
    }

    /** Returns true if field fileOriginName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileOriginName() {
      return this.fileOriginName != null;
    }

    public void setFileOriginNameIsSet(boolean value) {
      if (!value) {
        this.fileOriginName = null;
      }
    }


    public java.lang.String getFileName() {
      return this.fileName;
    }

    public parseFileStreamProfile_args setFileName( java.lang.String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }


    public java.lang.String getAbsoluteName() {
      return this.absoluteName;
    }

    public parseFileStreamProfile_args setAbsoluteName( java.lang.String absoluteName) {
      this.absoluteName = absoluteName;
      return this;
    }

    public void unsetAbsoluteName() {
      this.absoluteName = null;
    }

    /** Returns true if field absoluteName is set (has been assigned a value) and false otherwise */
    public boolean isSetAbsoluteName() {
      return this.absoluteName != null;
    }

    public void setAbsoluteNameIsSet(boolean value) {
      if (!value) {
        this.absoluteName = null;
      }
    }


    public java.lang.String getFileData() {
      return this.fileData;
    }

    public parseFileStreamProfile_args setFileData( java.lang.String fileData) {
      this.fileData = fileData;
      return this;
    }

    public void unsetFileData() {
      this.fileData = null;
    }

    /** Returns true if field fileData is set (has been assigned a value) and false otherwise */
    public boolean isSetFileData() {
      return this.fileData != null;
    }

    public void setFileDataIsSet(boolean value) {
      if (!value) {
        this.fileData = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case EMPLOYEE_ID:
        if (value == null) {
          unsetEmployeeId();
        } else {
          setEmployeeId((java.lang.Integer)value);
        }
        break;

      case FILE_ORIGIN_NAME:
        if (value == null) {
          unsetFileOriginName();
        } else {
          setFileOriginName((java.lang.String)value);
        }
        break;

      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((java.lang.String)value);
        }
        break;

      case ABSOLUTE_NAME:
        if (value == null) {
          unsetAbsoluteName();
        } else {
          setAbsoluteName((java.lang.String)value);
        }
        break;

      case FILE_DATA:
        if (value == null) {
          unsetFileData();
        } else {
          setFileData((java.lang.String)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EMPLOYEE_ID:
        return getEmployeeId();

      case FILE_ORIGIN_NAME:
        return getFileOriginName();

      case FILE_NAME:
        return getFileName();

      case ABSOLUTE_NAME:
        return getAbsoluteName();

      case FILE_DATA:
        return getFileData();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EMPLOYEE_ID:
        return isSetEmployeeId();
      case FILE_ORIGIN_NAME:
        return isSetFileOriginName();
      case FILE_NAME:
        return isSetFileName();
      case ABSOLUTE_NAME:
        return isSetAbsoluteName();
      case FILE_DATA:
        return isSetFileData();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof parseFileStreamProfile_args)
        return this.equals((parseFileStreamProfile_args)that);
      return false;
    }

    public boolean equals(parseFileStreamProfile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_employeeId = true;
      boolean that_present_employeeId = true;
      if (this_present_employeeId || that_present_employeeId) {
        if (!(this_present_employeeId && that_present_employeeId))
          return false;
        if (this.employeeId != that.employeeId)
          return false;
      }

      boolean this_present_fileOriginName = true && this.isSetFileOriginName();
      boolean that_present_fileOriginName = true && that.isSetFileOriginName();
      if (this_present_fileOriginName || that_present_fileOriginName) {
        if (!(this_present_fileOriginName && that_present_fileOriginName))
          return false;
        if (!this.fileOriginName.equals(that.fileOriginName))
          return false;
      }

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      boolean this_present_absoluteName = true && this.isSetAbsoluteName();
      boolean that_present_absoluteName = true && that.isSetAbsoluteName();
      if (this_present_absoluteName || that_present_absoluteName) {
        if (!(this_present_absoluteName && that_present_absoluteName))
          return false;
        if (!this.absoluteName.equals(that.absoluteName))
          return false;
      }

      boolean this_present_fileData = true && this.isSetFileData();
      boolean that_present_fileData = true && that.isSetFileData();
      if (this_present_fileData || that_present_fileData) {
        if (!(this_present_fileData && that_present_fileData))
          return false;
        if (!this.fileData.equals(that.fileData))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + employeeId;

      hashCode = hashCode * 8191 + ((isSetFileOriginName()) ? 131071 : 524287);
      if (isSetFileOriginName())
        hashCode = hashCode * 8191 + fileOriginName.hashCode();

      hashCode = hashCode * 8191 + ((isSetFileName()) ? 131071 : 524287);
      if (isSetFileName())
        hashCode = hashCode * 8191 + fileName.hashCode();

      hashCode = hashCode * 8191 + ((isSetAbsoluteName()) ? 131071 : 524287);
      if (isSetAbsoluteName())
        hashCode = hashCode * 8191 + absoluteName.hashCode();

      hashCode = hashCode * 8191 + ((isSetFileData()) ? 131071 : 524287);
      if (isSetFileData())
        hashCode = hashCode * 8191 + fileData.hashCode();

      return hashCode;
    }


    public int compareTo(parseFileStreamProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEmployeeId()).compareTo(other.isSetEmployeeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmployeeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeId, other.employeeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFileOriginName()).compareTo(other.isSetFileOriginName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileOriginName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileOriginName, other.fileOriginName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAbsoluteName()).compareTo(other.isSetAbsoluteName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAbsoluteName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.absoluteName, other.absoluteName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFileData()).compareTo(other.isSetFileData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileData, other.fileData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("parseFileStreamProfile_args(");
      boolean first = true;

      sb.append("employeeId:");
      sb.append(this.employeeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileOriginName:");
      if (this.fileOriginName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileOriginName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("absoluteName:");
      if (this.absoluteName == null) {
        sb.append("null");
      } else {
        sb.append(this.absoluteName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileData:");
      if (this.fileData == null) {
        sb.append("null");
      } else {
        sb.append(this.fileData);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class parseFileStreamProfile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parseFileStreamProfile_argsStandardScheme getScheme() {
        return new parseFileStreamProfile_argsStandardScheme();
      }
    }

    private static class parseFileStreamProfile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<parseFileStreamProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, parseFileStreamProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // EMPLOYEE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.employeeId = iprot.readI32();
                struct.setEmployeeIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE_ORIGIN_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileOriginName = iprot.readString();
                struct.setFileOriginNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ABSOLUTE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.absoluteName = iprot.readString();
                struct.setAbsoluteNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // FILE_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileData = iprot.readString();
                struct.setFileDataIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, parseFileStreamProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EMPLOYEE_ID_FIELD_DESC);
        oprot.writeI32(struct.employeeId);
        oprot.writeFieldEnd();
        if (struct.fileOriginName != null) {
          oprot.writeFieldBegin(FILE_ORIGIN_NAME_FIELD_DESC);
          oprot.writeString(struct.fileOriginName);
          oprot.writeFieldEnd();
        }
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        if (struct.absoluteName != null) {
          oprot.writeFieldBegin(ABSOLUTE_NAME_FIELD_DESC);
          oprot.writeString(struct.absoluteName);
          oprot.writeFieldEnd();
        }
        if (struct.fileData != null) {
          oprot.writeFieldBegin(FILE_DATA_FIELD_DESC);
          oprot.writeString(struct.fileData);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class parseFileStreamProfile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parseFileStreamProfile_argsTupleScheme getScheme() {
        return new parseFileStreamProfile_argsTupleScheme();
      }
    }

    private static class parseFileStreamProfile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<parseFileStreamProfile_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, parseFileStreamProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEmployeeId()) {
          optionals.set(0);
        }
        if (struct.isSetFileOriginName()) {
          optionals.set(1);
        }
        if (struct.isSetFileName()) {
          optionals.set(2);
        }
        if (struct.isSetAbsoluteName()) {
          optionals.set(3);
        }
        if (struct.isSetFileData()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetEmployeeId()) {
          oprot.writeI32(struct.employeeId);
        }
        if (struct.isSetFileOriginName()) {
          oprot.writeString(struct.fileOriginName);
        }
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
        if (struct.isSetAbsoluteName()) {
          oprot.writeString(struct.absoluteName);
        }
        if (struct.isSetFileData()) {
          oprot.writeString(struct.fileData);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, parseFileStreamProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.employeeId = iprot.readI32();
          struct.setEmployeeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fileOriginName = iprot.readString();
          struct.setFileOriginNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.absoluteName = iprot.readString();
          struct.setAbsoluteNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.fileData = iprot.readString();
          struct.setFileDataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class parseFileStreamProfile_result implements org.apache.thrift.TBase<parseFileStreamProfile_result, parseFileStreamProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<parseFileStreamProfile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parseFileStreamProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new parseFileStreamProfile_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new parseFileStreamProfile_resultTupleSchemeFactory();

    public  com.moseeker.thrift.gen.profile.struct.ProfileParseResult success; // required
    public  com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProfileParseResult.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parseFileStreamProfile_result.class, metaDataMap);
    }

    public parseFileStreamProfile_result() {
    }

    public parseFileStreamProfile_result(
      com.moseeker.thrift.gen.profile.struct.ProfileParseResult success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public parseFileStreamProfile_result(parseFileStreamProfile_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.profile.struct.ProfileParseResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public parseFileStreamProfile_result deepCopy() {
      return new parseFileStreamProfile_result(this);
    }


    public void clear() {
      this.success = null;
      this.e = null;
    }


    public com.moseeker.thrift.gen.profile.struct.ProfileParseResult getSuccess() {
      return this.success;
    }

    public parseFileStreamProfile_result setSuccess( com.moseeker.thrift.gen.profile.struct.ProfileParseResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }


    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public parseFileStreamProfile_result setE( com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.profile.struct.ProfileParseResult)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof parseFileStreamProfile_result)
        return this.equals((parseFileStreamProfile_result)that);
      return false;
    }

    public boolean equals(parseFileStreamProfile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }


    public int compareTo(parseFileStreamProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("parseFileStreamProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class parseFileStreamProfile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parseFileStreamProfile_resultStandardScheme getScheme() {
        return new parseFileStreamProfile_resultStandardScheme();
      }
    }

    private static class parseFileStreamProfile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<parseFileStreamProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, parseFileStreamProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.profile.struct.ProfileParseResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, parseFileStreamProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class parseFileStreamProfile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parseFileStreamProfile_resultTupleScheme getScheme() {
        return new parseFileStreamProfile_resultTupleScheme();
      }
    }

    private static class parseFileStreamProfile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<parseFileStreamProfile_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, parseFileStreamProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, parseFileStreamProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.profile.struct.ProfileParseResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class employeeReferralProfile_args implements org.apache.thrift.TBase<employeeReferralProfile_args, employeeReferralProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<employeeReferralProfile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("employeeReferralProfile_args");

    private static final org.apache.thrift.protocol.TField EMPLOYEE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField REFERRAL_REASONS_FIELD_DESC = new org.apache.thrift.protocol.TField("referralReasons", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField RELATIONSHIP_FIELD_DESC = new org.apache.thrift.protocol.TField("relationship", org.apache.thrift.protocol.TType.BYTE, (short)6);
    private static final org.apache.thrift.protocol.TField RECOM_REASON_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("recomReasonText", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField REFERRAL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("referralType", org.apache.thrift.protocol.TType.BYTE, (short)8);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new employeeReferralProfile_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new employeeReferralProfile_argsTupleSchemeFactory();

    public int employeeId; // required
    public  java.lang.String name; // required
    public  java.lang.String mobile; // required
    public  java.util.List<java.lang.String> referralReasons; // required
    public int position; // required
    public byte relationship; // required
    public  java.lang.String recomReasonText; // required
    public byte referralType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMPLOYEE_ID((short)1, "employeeId"),
      NAME((short)2, "name"),
      MOBILE((short)3, "mobile"),
      REFERRAL_REASONS((short)4, "referralReasons"),
      POSITION((short)5, "position"),
      RELATIONSHIP((short)6, "relationship"),
      RECOM_REASON_TEXT((short)7, "recomReasonText"),
      REFERRAL_TYPE((short)8, "referralType");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMPLOYEE_ID
            return EMPLOYEE_ID;
          case 2: // NAME
            return NAME;
          case 3: // MOBILE
            return MOBILE;
          case 4: // REFERRAL_REASONS
            return REFERRAL_REASONS;
          case 5: // POSITION
            return POSITION;
          case 6: // RELATIONSHIP
            return RELATIONSHIP;
          case 7: // RECOM_REASON_TEXT
            return RECOM_REASON_TEXT;
          case 8: // REFERRAL_TYPE
            return REFERRAL_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EMPLOYEEID_ISSET_ID = 0;
    private static final int __POSITION_ISSET_ID = 1;
    private static final int __RELATIONSHIP_ISSET_ID = 2;
    private static final int __REFERRALTYPE_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMPLOYEE_ID, new org.apache.thrift.meta_data.FieldMetaData("employeeId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REFERRAL_REASONS, new org.apache.thrift.meta_data.FieldMetaData("referralReasons", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.RELATIONSHIP, new org.apache.thrift.meta_data.FieldMetaData("relationship", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields.RECOM_REASON_TEXT, new org.apache.thrift.meta_data.FieldMetaData("recomReasonText", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REFERRAL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("referralType", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(employeeReferralProfile_args.class, metaDataMap);
    }

    public employeeReferralProfile_args() {
    }

    public employeeReferralProfile_args(
      int employeeId,
      java.lang.String name,
      java.lang.String mobile,
      java.util.List<java.lang.String> referralReasons,
      int position,
      byte relationship,
      java.lang.String recomReasonText,
      byte referralType)
    {
      this();
      this.employeeId = employeeId;
      setEmployeeIdIsSet(true);
      this.name = name;
      this.mobile = mobile;
      this.referralReasons = referralReasons;
      this.position = position;
      setPositionIsSet(true);
      this.relationship = relationship;
      setRelationshipIsSet(true);
      this.recomReasonText = recomReasonText;
      this.referralType = referralType;
      setReferralTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public employeeReferralProfile_args(employeeReferralProfile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.employeeId = other.employeeId;
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetMobile()) {
        this.mobile = other.mobile;
      }
      if (other.isSetReferralReasons()) {
        java.util.List<java.lang.String> __this__referralReasons = new java.util.ArrayList<java.lang.String>(other.referralReasons);
        this.referralReasons = __this__referralReasons;
      }
      this.position = other.position;
      this.relationship = other.relationship;
      if (other.isSetRecomReasonText()) {
        this.recomReasonText = other.recomReasonText;
      }
      this.referralType = other.referralType;
    }

    public employeeReferralProfile_args deepCopy() {
      return new employeeReferralProfile_args(this);
    }


    public void clear() {
      setEmployeeIdIsSet(false);
      this.employeeId = 0;
      this.name = null;
      this.mobile = null;
      this.referralReasons = null;
      setPositionIsSet(false);
      this.position = 0;
      setRelationshipIsSet(false);
      this.relationship = 0;
      this.recomReasonText = null;
      setReferralTypeIsSet(false);
      this.referralType = 0;
    }

    public int getEmployeeId() {
      return this.employeeId;
    }

    public employeeReferralProfile_args setEmployeeId(int employeeId) {
      this.employeeId = employeeId;
      setEmployeeIdIsSet(true);
      return this;
    }

    public void unsetEmployeeId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID);
    }

    /** Returns true if field employeeId is set (has been assigned a value) and false otherwise */
    public boolean isSetEmployeeId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID);
    }

    public void setEmployeeIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID, value);
    }


    public java.lang.String getName() {
      return this.name;
    }

    public employeeReferralProfile_args setName( java.lang.String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }


    public java.lang.String getMobile() {
      return this.mobile;
    }

    public employeeReferralProfile_args setMobile( java.lang.String mobile) {
      this.mobile = mobile;
      return this;
    }

    public void unsetMobile() {
      this.mobile = null;
    }

    /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
    public boolean isSetMobile() {
      return this.mobile != null;
    }

    public void setMobileIsSet(boolean value) {
      if (!value) {
        this.mobile = null;
      }
    }

    public int getReferralReasonsSize() {
      return (this.referralReasons == null) ? 0 : this.referralReasons.size();
    }


    public java.util.Iterator<java.lang.String> getReferralReasonsIterator() {
      return (this.referralReasons == null) ? null : this.referralReasons.iterator();
    }

    public void addToReferralReasons(java.lang.String elem) {
      if (this.referralReasons == null) {
        this.referralReasons = new java.util.ArrayList<java.lang.String>();
      }
      this.referralReasons.add(elem);
    }


    public java.util.List<java.lang.String> getReferralReasons() {
      return this.referralReasons;
    }

    public employeeReferralProfile_args setReferralReasons( java.util.List<java.lang.String> referralReasons) {
      this.referralReasons = referralReasons;
      return this;
    }

    public void unsetReferralReasons() {
      this.referralReasons = null;
    }

    /** Returns true if field referralReasons is set (has been assigned a value) and false otherwise */
    public boolean isSetReferralReasons() {
      return this.referralReasons != null;
    }

    public void setReferralReasonsIsSet(boolean value) {
      if (!value) {
        this.referralReasons = null;
      }
    }

    public int getPosition() {
      return this.position;
    }

    public employeeReferralProfile_args setPosition(int position) {
      this.position = position;
      setPositionIsSet(true);
      return this;
    }

    public void unsetPosition() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITION_ISSET_ID);
    }

    /** Returns true if field position is set (has been assigned a value) and false otherwise */
    public boolean isSetPosition() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITION_ISSET_ID);
    }

    public void setPositionIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITION_ISSET_ID, value);
    }

    public byte getRelationship() {
      return this.relationship;
    }

    public employeeReferralProfile_args setRelationship(byte relationship) {
      this.relationship = relationship;
      setRelationshipIsSet(true);
      return this;
    }

    public void unsetRelationship() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RELATIONSHIP_ISSET_ID);
    }

    /** Returns true if field relationship is set (has been assigned a value) and false otherwise */
    public boolean isSetRelationship() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RELATIONSHIP_ISSET_ID);
    }

    public void setRelationshipIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RELATIONSHIP_ISSET_ID, value);
    }


    public java.lang.String getRecomReasonText() {
      return this.recomReasonText;
    }

    public employeeReferralProfile_args setRecomReasonText( java.lang.String recomReasonText) {
      this.recomReasonText = recomReasonText;
      return this;
    }

    public void unsetRecomReasonText() {
      this.recomReasonText = null;
    }

    /** Returns true if field recomReasonText is set (has been assigned a value) and false otherwise */
    public boolean isSetRecomReasonText() {
      return this.recomReasonText != null;
    }

    public void setRecomReasonTextIsSet(boolean value) {
      if (!value) {
        this.recomReasonText = null;
      }
    }

    public byte getReferralType() {
      return this.referralType;
    }

    public employeeReferralProfile_args setReferralType(byte referralType) {
      this.referralType = referralType;
      setReferralTypeIsSet(true);
      return this;
    }

    public void unsetReferralType() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REFERRALTYPE_ISSET_ID);
    }

    /** Returns true if field referralType is set (has been assigned a value) and false otherwise */
    public boolean isSetReferralType() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REFERRALTYPE_ISSET_ID);
    }

    public void setReferralTypeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REFERRALTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case EMPLOYEE_ID:
        if (value == null) {
          unsetEmployeeId();
        } else {
          setEmployeeId((java.lang.Integer)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((java.lang.String)value);
        }
        break;

      case MOBILE:
        if (value == null) {
          unsetMobile();
        } else {
          setMobile((java.lang.String)value);
        }
        break;

      case REFERRAL_REASONS:
        if (value == null) {
          unsetReferralReasons();
        } else {
          setReferralReasons((java.util.List<java.lang.String>)value);
        }
        break;

      case POSITION:
        if (value == null) {
          unsetPosition();
        } else {
          setPosition((java.lang.Integer)value);
        }
        break;

      case RELATIONSHIP:
        if (value == null) {
          unsetRelationship();
        } else {
          setRelationship((java.lang.Byte)value);
        }
        break;

      case RECOM_REASON_TEXT:
        if (value == null) {
          unsetRecomReasonText();
        } else {
          setRecomReasonText((java.lang.String)value);
        }
        break;

      case REFERRAL_TYPE:
        if (value == null) {
          unsetReferralType();
        } else {
          setReferralType((java.lang.Byte)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EMPLOYEE_ID:
        return getEmployeeId();

      case NAME:
        return getName();

      case MOBILE:
        return getMobile();

      case REFERRAL_REASONS:
        return getReferralReasons();

      case POSITION:
        return getPosition();

      case RELATIONSHIP:
        return getRelationship();

      case RECOM_REASON_TEXT:
        return getRecomReasonText();

      case REFERRAL_TYPE:
        return getReferralType();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EMPLOYEE_ID:
        return isSetEmployeeId();
      case NAME:
        return isSetName();
      case MOBILE:
        return isSetMobile();
      case REFERRAL_REASONS:
        return isSetReferralReasons();
      case POSITION:
        return isSetPosition();
      case RELATIONSHIP:
        return isSetRelationship();
      case RECOM_REASON_TEXT:
        return isSetRecomReasonText();
      case REFERRAL_TYPE:
        return isSetReferralType();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof employeeReferralProfile_args)
        return this.equals((employeeReferralProfile_args)that);
      return false;
    }

    public boolean equals(employeeReferralProfile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_employeeId = true;
      boolean that_present_employeeId = true;
      if (this_present_employeeId || that_present_employeeId) {
        if (!(this_present_employeeId && that_present_employeeId))
          return false;
        if (this.employeeId != that.employeeId)
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_mobile = true && this.isSetMobile();
      boolean that_present_mobile = true && that.isSetMobile();
      if (this_present_mobile || that_present_mobile) {
        if (!(this_present_mobile && that_present_mobile))
          return false;
        if (!this.mobile.equals(that.mobile))
          return false;
      }

      boolean this_present_referralReasons = true && this.isSetReferralReasons();
      boolean that_present_referralReasons = true && that.isSetReferralReasons();
      if (this_present_referralReasons || that_present_referralReasons) {
        if (!(this_present_referralReasons && that_present_referralReasons))
          return false;
        if (!this.referralReasons.equals(that.referralReasons))
          return false;
      }

      boolean this_present_position = true;
      boolean that_present_position = true;
      if (this_present_position || that_present_position) {
        if (!(this_present_position && that_present_position))
          return false;
        if (this.position != that.position)
          return false;
      }

      boolean this_present_relationship = true;
      boolean that_present_relationship = true;
      if (this_present_relationship || that_present_relationship) {
        if (!(this_present_relationship && that_present_relationship))
          return false;
        if (this.relationship != that.relationship)
          return false;
      }

      boolean this_present_recomReasonText = true && this.isSetRecomReasonText();
      boolean that_present_recomReasonText = true && that.isSetRecomReasonText();
      if (this_present_recomReasonText || that_present_recomReasonText) {
        if (!(this_present_recomReasonText && that_present_recomReasonText))
          return false;
        if (!this.recomReasonText.equals(that.recomReasonText))
          return false;
      }

      boolean this_present_referralType = true;
      boolean that_present_referralType = true;
      if (this_present_referralType || that_present_referralType) {
        if (!(this_present_referralType && that_present_referralType))
          return false;
        if (this.referralType != that.referralType)
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + employeeId;

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      hashCode = hashCode * 8191 + ((isSetMobile()) ? 131071 : 524287);
      if (isSetMobile())
        hashCode = hashCode * 8191 + mobile.hashCode();

      hashCode = hashCode * 8191 + ((isSetReferralReasons()) ? 131071 : 524287);
      if (isSetReferralReasons())
        hashCode = hashCode * 8191 + referralReasons.hashCode();

      hashCode = hashCode * 8191 + position;

      hashCode = hashCode * 8191 + (int) (relationship);

      hashCode = hashCode * 8191 + ((isSetRecomReasonText()) ? 131071 : 524287);
      if (isSetRecomReasonText())
        hashCode = hashCode * 8191 + recomReasonText.hashCode();

      hashCode = hashCode * 8191 + (int) (referralType);

      return hashCode;
    }


    public int compareTo(employeeReferralProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEmployeeId()).compareTo(other.isSetEmployeeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmployeeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeId, other.employeeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetReferralReasons()).compareTo(other.isSetReferralReasons());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReferralReasons()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.referralReasons, other.referralReasons);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPosition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRelationship()).compareTo(other.isSetRelationship());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRelationship()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relationship, other.relationship);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRecomReasonText()).compareTo(other.isSetRecomReasonText());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecomReasonText()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recomReasonText, other.recomReasonText);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetReferralType()).compareTo(other.isSetReferralType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReferralType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.referralType, other.referralType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("employeeReferralProfile_args(");
      boolean first = true;

      sb.append("employeeId:");
      sb.append(this.employeeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("referralReasons:");
      if (this.referralReasons == null) {
        sb.append("null");
      } else {
        sb.append(this.referralReasons);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("position:");
      sb.append(this.position);
      first = false;
      if (!first) sb.append(", ");
      sb.append("relationship:");
      sb.append(this.relationship);
      first = false;
      if (!first) sb.append(", ");
      sb.append("recomReasonText:");
      if (this.recomReasonText == null) {
        sb.append("null");
      } else {
        sb.append(this.recomReasonText);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("referralType:");
      sb.append(this.referralType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class employeeReferralProfile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public employeeReferralProfile_argsStandardScheme getScheme() {
        return new employeeReferralProfile_argsStandardScheme();
      }
    }

    private static class employeeReferralProfile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<employeeReferralProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, employeeReferralProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // EMPLOYEE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.employeeId = iprot.readI32();
                struct.setEmployeeIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MOBILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobile = iprot.readString();
                struct.setMobileIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERRAL_REASONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list106 = iprot.readListBegin();
                  struct.referralReasons = new java.util.ArrayList<java.lang.String>(_list106.size);
                   java.lang.String _elem107;
                  for (int _i108 = 0; _i108 < _list106.size; ++_i108)
                  {
                    _elem107 = iprot.readString();
                    struct.referralReasons.add(_elem107);
                  }
                  iprot.readListEnd();
                }
                struct.setReferralReasonsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // POSITION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.position = iprot.readI32();
                struct.setPositionIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // RELATIONSHIP
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.relationship = iprot.readByte();
                struct.setRelationshipIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // RECOM_REASON_TEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.recomReasonText = iprot.readString();
                struct.setRecomReasonTextIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // REFERRAL_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.referralType = iprot.readByte();
                struct.setReferralTypeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, employeeReferralProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EMPLOYEE_ID_FIELD_DESC);
        oprot.writeI32(struct.employeeId);
        oprot.writeFieldEnd();
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.mobile != null) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
        if (struct.referralReasons != null) {
          oprot.writeFieldBegin(REFERRAL_REASONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.referralReasons.size()));
            for (java.lang.String _iter109 : struct.referralReasons)
            {
              oprot.writeString(_iter109);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(POSITION_FIELD_DESC);
        oprot.writeI32(struct.position);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(RELATIONSHIP_FIELD_DESC);
        oprot.writeByte(struct.relationship);
        oprot.writeFieldEnd();
        if (struct.recomReasonText != null) {
          oprot.writeFieldBegin(RECOM_REASON_TEXT_FIELD_DESC);
          oprot.writeString(struct.recomReasonText);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(REFERRAL_TYPE_FIELD_DESC);
        oprot.writeByte(struct.referralType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class employeeReferralProfile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public employeeReferralProfile_argsTupleScheme getScheme() {
        return new employeeReferralProfile_argsTupleScheme();
      }
    }

    private static class employeeReferralProfile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<employeeReferralProfile_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, employeeReferralProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEmployeeId()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        if (struct.isSetMobile()) {
          optionals.set(2);
        }
        if (struct.isSetReferralReasons()) {
          optionals.set(3);
        }
        if (struct.isSetPosition()) {
          optionals.set(4);
        }
        if (struct.isSetRelationship()) {
          optionals.set(5);
        }
        if (struct.isSetRecomReasonText()) {
          optionals.set(6);
        }
        if (struct.isSetReferralType()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetEmployeeId()) {
          oprot.writeI32(struct.employeeId);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetMobile()) {
          oprot.writeString(struct.mobile);
        }
        if (struct.isSetReferralReasons()) {
          {
            oprot.writeI32(struct.referralReasons.size());
            for (java.lang.String _iter110 : struct.referralReasons)
            {
              oprot.writeString(_iter110);
            }
          }
        }
        if (struct.isSetPosition()) {
          oprot.writeI32(struct.position);
        }
        if (struct.isSetRelationship()) {
          oprot.writeByte(struct.relationship);
        }
        if (struct.isSetRecomReasonText()) {
          oprot.writeString(struct.recomReasonText);
        }
        if (struct.isSetReferralType()) {
          oprot.writeByte(struct.referralType);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, employeeReferralProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.employeeId = iprot.readI32();
          struct.setEmployeeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mobile = iprot.readString();
          struct.setMobileIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list111 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.referralReasons = new java.util.ArrayList<java.lang.String>(_list111.size);
             java.lang.String _elem112;
            for (int _i113 = 0; _i113 < _list111.size; ++_i113)
            {
              _elem112 = iprot.readString();
              struct.referralReasons.add(_elem112);
            }
          }
          struct.setReferralReasonsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.position = iprot.readI32();
          struct.setPositionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.relationship = iprot.readByte();
          struct.setRelationshipIsSet(true);
        }
        if (incoming.get(6)) {
          struct.recomReasonText = iprot.readString();
          struct.setRecomReasonTextIsSet(true);
        }
        if (incoming.get(7)) {
          struct.referralType = iprot.readByte();
          struct.setReferralTypeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class employeeReferralProfile_result implements org.apache.thrift.TBase<employeeReferralProfile_result, employeeReferralProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<employeeReferralProfile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("employeeReferralProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new employeeReferralProfile_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new employeeReferralProfile_resultTupleSchemeFactory();

    public int success; // required
    public  com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(employeeReferralProfile_result.class, metaDataMap);
    }

    public employeeReferralProfile_result() {
    }

    public employeeReferralProfile_result(
      int success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public employeeReferralProfile_result(employeeReferralProfile_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public employeeReferralProfile_result deepCopy() {
      return new employeeReferralProfile_result(this);
    }


    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public employeeReferralProfile_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }


    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public employeeReferralProfile_result setE( com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof employeeReferralProfile_result)
        return this.equals((employeeReferralProfile_result)that);
      return false;
    }

    public boolean equals(employeeReferralProfile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }


    public int compareTo(employeeReferralProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("employeeReferralProfile_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class employeeReferralProfile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public employeeReferralProfile_resultStandardScheme getScheme() {
        return new employeeReferralProfile_resultStandardScheme();
      }
    }

    private static class employeeReferralProfile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<employeeReferralProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, employeeReferralProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, employeeReferralProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class employeeReferralProfile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public employeeReferralProfile_resultTupleScheme getScheme() {
        return new employeeReferralProfile_resultTupleScheme();
      }
    }

    private static class employeeReferralProfile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<employeeReferralProfile_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, employeeReferralProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, employeeReferralProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateUserProfile_args implements org.apache.thrift.TBase<updateUserProfile_args, updateUserProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateUserProfile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserProfile_args");

    private static final org.apache.thrift.protocol.TField EMPLOYEE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateUserProfile_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateUserProfile_argsTupleSchemeFactory();

    public int employeeId; // required
    public  java.lang.String name; // required
    public  java.lang.String mobile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMPLOYEE_ID((short)1, "employeeId"),
      NAME((short)2, "name"),
      MOBILE((short)3, "mobile");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMPLOYEE_ID
            return EMPLOYEE_ID;
          case 2: // NAME
            return NAME;
          case 3: // MOBILE
            return MOBILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EMPLOYEEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMPLOYEE_ID, new org.apache.thrift.meta_data.FieldMetaData("employeeId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserProfile_args.class, metaDataMap);
    }

    public updateUserProfile_args() {
    }

    public updateUserProfile_args(
      int employeeId,
      java.lang.String name,
      java.lang.String mobile)
    {
      this();
      this.employeeId = employeeId;
      setEmployeeIdIsSet(true);
      this.name = name;
      this.mobile = mobile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserProfile_args(updateUserProfile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.employeeId = other.employeeId;
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetMobile()) {
        this.mobile = other.mobile;
      }
    }

    public updateUserProfile_args deepCopy() {
      return new updateUserProfile_args(this);
    }


    public void clear() {
      setEmployeeIdIsSet(false);
      this.employeeId = 0;
      this.name = null;
      this.mobile = null;
    }

    public int getEmployeeId() {
      return this.employeeId;
    }

    public updateUserProfile_args setEmployeeId(int employeeId) {
      this.employeeId = employeeId;
      setEmployeeIdIsSet(true);
      return this;
    }

    public void unsetEmployeeId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID);
    }

    /** Returns true if field employeeId is set (has been assigned a value) and false otherwise */
    public boolean isSetEmployeeId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID);
    }

    public void setEmployeeIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID, value);
    }


    public java.lang.String getName() {
      return this.name;
    }

    public updateUserProfile_args setName( java.lang.String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }


    public java.lang.String getMobile() {
      return this.mobile;
    }

    public updateUserProfile_args setMobile( java.lang.String mobile) {
      this.mobile = mobile;
      return this;
    }

    public void unsetMobile() {
      this.mobile = null;
    }

    /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
    public boolean isSetMobile() {
      return this.mobile != null;
    }

    public void setMobileIsSet(boolean value) {
      if (!value) {
        this.mobile = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case EMPLOYEE_ID:
        if (value == null) {
          unsetEmployeeId();
        } else {
          setEmployeeId((java.lang.Integer)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((java.lang.String)value);
        }
        break;

      case MOBILE:
        if (value == null) {
          unsetMobile();
        } else {
          setMobile((java.lang.String)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EMPLOYEE_ID:
        return getEmployeeId();

      case NAME:
        return getName();

      case MOBILE:
        return getMobile();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EMPLOYEE_ID:
        return isSetEmployeeId();
      case NAME:
        return isSetName();
      case MOBILE:
        return isSetMobile();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserProfile_args)
        return this.equals((updateUserProfile_args)that);
      return false;
    }

    public boolean equals(updateUserProfile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_employeeId = true;
      boolean that_present_employeeId = true;
      if (this_present_employeeId || that_present_employeeId) {
        if (!(this_present_employeeId && that_present_employeeId))
          return false;
        if (this.employeeId != that.employeeId)
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_mobile = true && this.isSetMobile();
      boolean that_present_mobile = true && that.isSetMobile();
      if (this_present_mobile || that_present_mobile) {
        if (!(this_present_mobile && that_present_mobile))
          return false;
        if (!this.mobile.equals(that.mobile))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + employeeId;

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      hashCode = hashCode * 8191 + ((isSetMobile()) ? 131071 : 524287);
      if (isSetMobile())
        hashCode = hashCode * 8191 + mobile.hashCode();

      return hashCode;
    }


    public int compareTo(updateUserProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEmployeeId()).compareTo(other.isSetEmployeeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmployeeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeId, other.employeeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateUserProfile_args(");
      boolean first = true;

      sb.append("employeeId:");
      sb.append(this.employeeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserProfile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateUserProfile_argsStandardScheme getScheme() {
        return new updateUserProfile_argsStandardScheme();
      }
    }

    private static class updateUserProfile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateUserProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // EMPLOYEE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.employeeId = iprot.readI32();
                struct.setEmployeeIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MOBILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobile = iprot.readString();
                struct.setMobileIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EMPLOYEE_ID_FIELD_DESC);
        oprot.writeI32(struct.employeeId);
        oprot.writeFieldEnd();
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.mobile != null) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserProfile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateUserProfile_argsTupleScheme getScheme() {
        return new updateUserProfile_argsTupleScheme();
      }
    }

    private static class updateUserProfile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateUserProfile_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEmployeeId()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        if (struct.isSetMobile()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetEmployeeId()) {
          oprot.writeI32(struct.employeeId);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetMobile()) {
          oprot.writeString(struct.mobile);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.employeeId = iprot.readI32();
          struct.setEmployeeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mobile = iprot.readString();
          struct.setMobileIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateUserProfile_result implements org.apache.thrift.TBase<updateUserProfile_result, updateUserProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateUserProfile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateUserProfile_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateUserProfile_resultTupleSchemeFactory();

    public int success; // required
    public  com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserProfile_result.class, metaDataMap);
    }

    public updateUserProfile_result() {
    }

    public updateUserProfile_result(
      int success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserProfile_result(updateUserProfile_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public updateUserProfile_result deepCopy() {
      return new updateUserProfile_result(this);
    }


    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateUserProfile_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }


    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public updateUserProfile_result setE( com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserProfile_result)
        return this.equals((updateUserProfile_result)that);
      return false;
    }

    public boolean equals(updateUserProfile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }


    public int compareTo(updateUserProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateUserProfile_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserProfile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateUserProfile_resultStandardScheme getScheme() {
        return new updateUserProfile_resultStandardScheme();
      }
    }

    private static class updateUserProfile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateUserProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserProfile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateUserProfile_resultTupleScheme getScheme() {
        return new updateUserProfile_resultTupleScheme();
      }
    }

    private static class updateUserProfile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateUserProfile_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class employeeDeleteReferralProfile_args implements org.apache.thrift.TBase<employeeDeleteReferralProfile_args, employeeDeleteReferralProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<employeeDeleteReferralProfile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("employeeDeleteReferralProfile_args");

    private static final org.apache.thrift.protocol.TField EMPLOYEE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new employeeDeleteReferralProfile_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new employeeDeleteReferralProfile_argsTupleSchemeFactory();

    public int employeeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMPLOYEE_ID((short)1, "employeeId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMPLOYEE_ID
            return EMPLOYEE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EMPLOYEEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMPLOYEE_ID, new org.apache.thrift.meta_data.FieldMetaData("employeeId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(employeeDeleteReferralProfile_args.class, metaDataMap);
    }

    public employeeDeleteReferralProfile_args() {
    }

    public employeeDeleteReferralProfile_args(
      int employeeId)
    {
      this();
      this.employeeId = employeeId;
      setEmployeeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public employeeDeleteReferralProfile_args(employeeDeleteReferralProfile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.employeeId = other.employeeId;
    }

    public employeeDeleteReferralProfile_args deepCopy() {
      return new employeeDeleteReferralProfile_args(this);
    }


    public void clear() {
      setEmployeeIdIsSet(false);
      this.employeeId = 0;
    }

    public int getEmployeeId() {
      return this.employeeId;
    }

    public employeeDeleteReferralProfile_args setEmployeeId(int employeeId) {
      this.employeeId = employeeId;
      setEmployeeIdIsSet(true);
      return this;
    }

    public void unsetEmployeeId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID);
    }

    /** Returns true if field employeeId is set (has been assigned a value) and false otherwise */
    public boolean isSetEmployeeId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID);
    }

    public void setEmployeeIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case EMPLOYEE_ID:
        if (value == null) {
          unsetEmployeeId();
        } else {
          setEmployeeId((java.lang.Integer)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EMPLOYEE_ID:
        return getEmployeeId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EMPLOYEE_ID:
        return isSetEmployeeId();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof employeeDeleteReferralProfile_args)
        return this.equals((employeeDeleteReferralProfile_args)that);
      return false;
    }

    public boolean equals(employeeDeleteReferralProfile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_employeeId = true;
      boolean that_present_employeeId = true;
      if (this_present_employeeId || that_present_employeeId) {
        if (!(this_present_employeeId && that_present_employeeId))
          return false;
        if (this.employeeId != that.employeeId)
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + employeeId;

      return hashCode;
    }


    public int compareTo(employeeDeleteReferralProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEmployeeId()).compareTo(other.isSetEmployeeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmployeeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeId, other.employeeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("employeeDeleteReferralProfile_args(");
      boolean first = true;

      sb.append("employeeId:");
      sb.append(this.employeeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class employeeDeleteReferralProfile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public employeeDeleteReferralProfile_argsStandardScheme getScheme() {
        return new employeeDeleteReferralProfile_argsStandardScheme();
      }
    }

    private static class employeeDeleteReferralProfile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<employeeDeleteReferralProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, employeeDeleteReferralProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // EMPLOYEE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.employeeId = iprot.readI32();
                struct.setEmployeeIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, employeeDeleteReferralProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EMPLOYEE_ID_FIELD_DESC);
        oprot.writeI32(struct.employeeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class employeeDeleteReferralProfile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public employeeDeleteReferralProfile_argsTupleScheme getScheme() {
        return new employeeDeleteReferralProfile_argsTupleScheme();
      }
    }

    private static class employeeDeleteReferralProfile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<employeeDeleteReferralProfile_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, employeeDeleteReferralProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEmployeeId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEmployeeId()) {
          oprot.writeI32(struct.employeeId);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, employeeDeleteReferralProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.employeeId = iprot.readI32();
          struct.setEmployeeIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class employeeDeleteReferralProfile_result implements org.apache.thrift.TBase<employeeDeleteReferralProfile_result, employeeDeleteReferralProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<employeeDeleteReferralProfile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("employeeDeleteReferralProfile_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new employeeDeleteReferralProfile_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new employeeDeleteReferralProfile_resultTupleSchemeFactory();

    public  com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(employeeDeleteReferralProfile_result.class, metaDataMap);
    }

    public employeeDeleteReferralProfile_result() {
    }

    public employeeDeleteReferralProfile_result(
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public employeeDeleteReferralProfile_result(employeeDeleteReferralProfile_result other) {
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public employeeDeleteReferralProfile_result deepCopy() {
      return new employeeDeleteReferralProfile_result(this);
    }


    public void clear() {
      this.e = null;
    }


    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public employeeDeleteReferralProfile_result setE( com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof employeeDeleteReferralProfile_result)
        return this.equals((employeeDeleteReferralProfile_result)that);
      return false;
    }

    public boolean equals(employeeDeleteReferralProfile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }


    public int compareTo(employeeDeleteReferralProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("employeeDeleteReferralProfile_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class employeeDeleteReferralProfile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public employeeDeleteReferralProfile_resultStandardScheme getScheme() {
        return new employeeDeleteReferralProfile_resultStandardScheme();
      }
    }

    private static class employeeDeleteReferralProfile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<employeeDeleteReferralProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, employeeDeleteReferralProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, employeeDeleteReferralProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class employeeDeleteReferralProfile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public employeeDeleteReferralProfile_resultTupleScheme getScheme() {
        return new employeeDeleteReferralProfile_resultTupleScheme();
      }
    }

    private static class employeeDeleteReferralProfile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<employeeDeleteReferralProfile_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, employeeDeleteReferralProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, employeeDeleteReferralProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class postCandidateInfo_args implements org.apache.thrift.TBase<postCandidateInfo_args, postCandidateInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<postCandidateInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postCandidateInfo_args");

    private static final org.apache.thrift.protocol.TField EMPLOYEE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CANDIDATE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("candidateInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new postCandidateInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new postCandidateInfo_argsTupleSchemeFactory();

    public int employeeId; // required
    public  com.moseeker.thrift.gen.profile.struct.CandidateInfo candidateInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMPLOYEE_ID((short)1, "employeeId"),
      CANDIDATE_INFO((short)2, "candidateInfo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMPLOYEE_ID
            return EMPLOYEE_ID;
          case 2: // CANDIDATE_INFO
            return CANDIDATE_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EMPLOYEEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMPLOYEE_ID, new org.apache.thrift.meta_data.FieldMetaData("employeeId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CANDIDATE_INFO, new org.apache.thrift.meta_data.FieldMetaData("candidateInfo", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.CandidateInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postCandidateInfo_args.class, metaDataMap);
    }

    public postCandidateInfo_args() {
    }

    public postCandidateInfo_args(
      int employeeId,
      com.moseeker.thrift.gen.profile.struct.CandidateInfo candidateInfo)
    {
      this();
      this.employeeId = employeeId;
      setEmployeeIdIsSet(true);
      this.candidateInfo = candidateInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postCandidateInfo_args(postCandidateInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.employeeId = other.employeeId;
      if (other.isSetCandidateInfo()) {
        this.candidateInfo = new com.moseeker.thrift.gen.profile.struct.CandidateInfo(other.candidateInfo);
      }
    }

    public postCandidateInfo_args deepCopy() {
      return new postCandidateInfo_args(this);
    }


    public void clear() {
      setEmployeeIdIsSet(false);
      this.employeeId = 0;
      this.candidateInfo = null;
    }

    public int getEmployeeId() {
      return this.employeeId;
    }

    public postCandidateInfo_args setEmployeeId(int employeeId) {
      this.employeeId = employeeId;
      setEmployeeIdIsSet(true);
      return this;
    }

    public void unsetEmployeeId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID);
    }

    /** Returns true if field employeeId is set (has been assigned a value) and false otherwise */
    public boolean isSetEmployeeId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID);
    }

    public void setEmployeeIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID, value);
    }


    public com.moseeker.thrift.gen.profile.struct.CandidateInfo getCandidateInfo() {
      return this.candidateInfo;
    }

    public postCandidateInfo_args setCandidateInfo( com.moseeker.thrift.gen.profile.struct.CandidateInfo candidateInfo) {
      this.candidateInfo = candidateInfo;
      return this;
    }

    public void unsetCandidateInfo() {
      this.candidateInfo = null;
    }

    /** Returns true if field candidateInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetCandidateInfo() {
      return this.candidateInfo != null;
    }

    public void setCandidateInfoIsSet(boolean value) {
      if (!value) {
        this.candidateInfo = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case EMPLOYEE_ID:
        if (value == null) {
          unsetEmployeeId();
        } else {
          setEmployeeId((java.lang.Integer)value);
        }
        break;

      case CANDIDATE_INFO:
        if (value == null) {
          unsetCandidateInfo();
        } else {
          setCandidateInfo((com.moseeker.thrift.gen.profile.struct.CandidateInfo)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EMPLOYEE_ID:
        return getEmployeeId();

      case CANDIDATE_INFO:
        return getCandidateInfo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EMPLOYEE_ID:
        return isSetEmployeeId();
      case CANDIDATE_INFO:
        return isSetCandidateInfo();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof postCandidateInfo_args)
        return this.equals((postCandidateInfo_args)that);
      return false;
    }

    public boolean equals(postCandidateInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_employeeId = true;
      boolean that_present_employeeId = true;
      if (this_present_employeeId || that_present_employeeId) {
        if (!(this_present_employeeId && that_present_employeeId))
          return false;
        if (this.employeeId != that.employeeId)
          return false;
      }

      boolean this_present_candidateInfo = true && this.isSetCandidateInfo();
      boolean that_present_candidateInfo = true && that.isSetCandidateInfo();
      if (this_present_candidateInfo || that_present_candidateInfo) {
        if (!(this_present_candidateInfo && that_present_candidateInfo))
          return false;
        if (!this.candidateInfo.equals(that.candidateInfo))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + employeeId;

      hashCode = hashCode * 8191 + ((isSetCandidateInfo()) ? 131071 : 524287);
      if (isSetCandidateInfo())
        hashCode = hashCode * 8191 + candidateInfo.hashCode();

      return hashCode;
    }


    public int compareTo(postCandidateInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEmployeeId()).compareTo(other.isSetEmployeeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmployeeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeId, other.employeeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCandidateInfo()).compareTo(other.isSetCandidateInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCandidateInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.candidateInfo, other.candidateInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("postCandidateInfo_args(");
      boolean first = true;

      sb.append("employeeId:");
      sb.append(this.employeeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("candidateInfo:");
      if (this.candidateInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.candidateInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (candidateInfo != null) {
        candidateInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postCandidateInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public postCandidateInfo_argsStandardScheme getScheme() {
        return new postCandidateInfo_argsStandardScheme();
      }
    }

    private static class postCandidateInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<postCandidateInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postCandidateInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // EMPLOYEE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.employeeId = iprot.readI32();
                struct.setEmployeeIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CANDIDATE_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.candidateInfo = new com.moseeker.thrift.gen.profile.struct.CandidateInfo();
                struct.candidateInfo.read(iprot);
                struct.setCandidateInfoIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postCandidateInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EMPLOYEE_ID_FIELD_DESC);
        oprot.writeI32(struct.employeeId);
        oprot.writeFieldEnd();
        if (struct.candidateInfo != null) {
          oprot.writeFieldBegin(CANDIDATE_INFO_FIELD_DESC);
          struct.candidateInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postCandidateInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public postCandidateInfo_argsTupleScheme getScheme() {
        return new postCandidateInfo_argsTupleScheme();
      }
    }

    private static class postCandidateInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<postCandidateInfo_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, postCandidateInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEmployeeId()) {
          optionals.set(0);
        }
        if (struct.isSetCandidateInfo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEmployeeId()) {
          oprot.writeI32(struct.employeeId);
        }
        if (struct.isSetCandidateInfo()) {
          struct.candidateInfo.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, postCandidateInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.employeeId = iprot.readI32();
          struct.setEmployeeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.candidateInfo = new com.moseeker.thrift.gen.profile.struct.CandidateInfo();
          struct.candidateInfo.read(iprot);
          struct.setCandidateInfoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class postCandidateInfo_result implements org.apache.thrift.TBase<postCandidateInfo_result, postCandidateInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<postCandidateInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postCandidateInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new postCandidateInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new postCandidateInfo_resultTupleSchemeFactory();

    public int success; // required
    public  com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postCandidateInfo_result.class, metaDataMap);
    }

    public postCandidateInfo_result() {
    }

    public postCandidateInfo_result(
      int success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postCandidateInfo_result(postCandidateInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public postCandidateInfo_result deepCopy() {
      return new postCandidateInfo_result(this);
    }


    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public postCandidateInfo_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }


    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public postCandidateInfo_result setE( com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof postCandidateInfo_result)
        return this.equals((postCandidateInfo_result)that);
      return false;
    }

    public boolean equals(postCandidateInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }


    public int compareTo(postCandidateInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("postCandidateInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postCandidateInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public postCandidateInfo_resultStandardScheme getScheme() {
        return new postCandidateInfo_resultStandardScheme();
      }
    }

    private static class postCandidateInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<postCandidateInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postCandidateInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postCandidateInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postCandidateInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public postCandidateInfo_resultTupleScheme getScheme() {
        return new postCandidateInfo_resultTupleScheme();
      }
    }

    private static class postCandidateInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<postCandidateInfo_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, postCandidateInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, postCandidateInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saveMobotReferralProfile_args implements org.apache.thrift.TBase<saveMobotReferralProfile_args, saveMobotReferralProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveMobotReferralProfile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveMobotReferralProfile_args");

    private static final org.apache.thrift.protocol.TField EMPLOYEE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveMobotReferralProfile_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveMobotReferralProfile_argsTupleSchemeFactory();

    public int employeeId; // required
    public  java.util.List<java.lang.Integer> ids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMPLOYEE_ID((short)1, "employeeId"),
      IDS((short)2, "ids");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMPLOYEE_ID
            return EMPLOYEE_ID;
          case 2: // IDS
            return IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EMPLOYEEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMPLOYEE_ID, new org.apache.thrift.meta_data.FieldMetaData("employeeId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveMobotReferralProfile_args.class, metaDataMap);
    }

    public saveMobotReferralProfile_args() {
    }

    public saveMobotReferralProfile_args(
      int employeeId,
      java.util.List<java.lang.Integer> ids)
    {
      this();
      this.employeeId = employeeId;
      setEmployeeIdIsSet(true);
      this.ids = ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveMobotReferralProfile_args(saveMobotReferralProfile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.employeeId = other.employeeId;
      if (other.isSetIds()) {
        java.util.List<java.lang.Integer> __this__ids = new java.util.ArrayList<java.lang.Integer>(other.ids);
        this.ids = __this__ids;
      }
    }

    public saveMobotReferralProfile_args deepCopy() {
      return new saveMobotReferralProfile_args(this);
    }


    public void clear() {
      setEmployeeIdIsSet(false);
      this.employeeId = 0;
      this.ids = null;
    }

    public int getEmployeeId() {
      return this.employeeId;
    }

    public saveMobotReferralProfile_args setEmployeeId(int employeeId) {
      this.employeeId = employeeId;
      setEmployeeIdIsSet(true);
      return this;
    }

    public void unsetEmployeeId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID);
    }

    /** Returns true if field employeeId is set (has been assigned a value) and false otherwise */
    public boolean isSetEmployeeId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID);
    }

    public void setEmployeeIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID, value);
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }


    public java.util.Iterator<java.lang.Integer> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(int elem) {
      if (this.ids == null) {
        this.ids = new java.util.ArrayList<java.lang.Integer>();
      }
      this.ids.add(elem);
    }


    public java.util.List<java.lang.Integer> getIds() {
      return this.ids;
    }

    public saveMobotReferralProfile_args setIds( java.util.List<java.lang.Integer> ids) {
      this.ids = ids;
      return this;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case EMPLOYEE_ID:
        if (value == null) {
          unsetEmployeeId();
        } else {
          setEmployeeId((java.lang.Integer)value);
        }
        break;

      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((java.util.List<java.lang.Integer>)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EMPLOYEE_ID:
        return getEmployeeId();

      case IDS:
        return getIds();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EMPLOYEE_ID:
        return isSetEmployeeId();
      case IDS:
        return isSetIds();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof saveMobotReferralProfile_args)
        return this.equals((saveMobotReferralProfile_args)that);
      return false;
    }

    public boolean equals(saveMobotReferralProfile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_employeeId = true;
      boolean that_present_employeeId = true;
      if (this_present_employeeId || that_present_employeeId) {
        if (!(this_present_employeeId && that_present_employeeId))
          return false;
        if (this.employeeId != that.employeeId)
          return false;
      }

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + employeeId;

      hashCode = hashCode * 8191 + ((isSetIds()) ? 131071 : 524287);
      if (isSetIds())
        hashCode = hashCode * 8191 + ids.hashCode();

      return hashCode;
    }


    public int compareTo(saveMobotReferralProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEmployeeId()).compareTo(other.isSetEmployeeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmployeeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeId, other.employeeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("saveMobotReferralProfile_args(");
      boolean first = true;

      sb.append("employeeId:");
      sb.append(this.employeeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveMobotReferralProfile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveMobotReferralProfile_argsStandardScheme getScheme() {
        return new saveMobotReferralProfile_argsStandardScheme();
      }
    }

    private static class saveMobotReferralProfile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveMobotReferralProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveMobotReferralProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // EMPLOYEE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.employeeId = iprot.readI32();
                struct.setEmployeeIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list114 = iprot.readListBegin();
                  struct.ids = new java.util.ArrayList<java.lang.Integer>(_list114.size);
                  int _elem115;
                  for (int _i116 = 0; _i116 < _list114.size; ++_i116)
                  {
                    _elem115 = iprot.readI32();
                    struct.ids.add(_elem115);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveMobotReferralProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EMPLOYEE_ID_FIELD_DESC);
        oprot.writeI32(struct.employeeId);
        oprot.writeFieldEnd();
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.ids.size()));
            for (int _iter117 : struct.ids)
            {
              oprot.writeI32(_iter117);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveMobotReferralProfile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveMobotReferralProfile_argsTupleScheme getScheme() {
        return new saveMobotReferralProfile_argsTupleScheme();
      }
    }

    private static class saveMobotReferralProfile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveMobotReferralProfile_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, saveMobotReferralProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEmployeeId()) {
          optionals.set(0);
        }
        if (struct.isSetIds()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEmployeeId()) {
          oprot.writeI32(struct.employeeId);
        }
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (int _iter118 : struct.ids)
            {
              oprot.writeI32(_iter118);
            }
          }
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, saveMobotReferralProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.employeeId = iprot.readI32();
          struct.setEmployeeIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list119 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.ids = new java.util.ArrayList<java.lang.Integer>(_list119.size);
            int _elem120;
            for (int _i121 = 0; _i121 < _list119.size; ++_i121)
            {
              _elem120 = iprot.readI32();
              struct.ids.add(_elem120);
            }
          }
          struct.setIdsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saveMobotReferralProfile_result implements org.apache.thrift.TBase<saveMobotReferralProfile_result, saveMobotReferralProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveMobotReferralProfile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveMobotReferralProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveMobotReferralProfile_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveMobotReferralProfile_resultTupleSchemeFactory();

    public  java.util.Map<java.lang.String,java.lang.String> success; // required
    public  com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveMobotReferralProfile_result.class, metaDataMap);
    }

    public saveMobotReferralProfile_result() {
    }

    public saveMobotReferralProfile_result(
      java.util.Map<java.lang.String,java.lang.String> success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveMobotReferralProfile_result(saveMobotReferralProfile_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,java.lang.String> __this__success = new java.util.HashMap<java.lang.String,java.lang.String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public saveMobotReferralProfile_result deepCopy() {
      return new saveMobotReferralProfile_result(this);
    }


    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, java.lang.String val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.success.put(key, val);
    }


    public java.util.Map<java.lang.String,java.lang.String> getSuccess() {
      return this.success;
    }

    public saveMobotReferralProfile_result setSuccess( java.util.Map<java.lang.String,java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }


    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public saveMobotReferralProfile_result setE( com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof saveMobotReferralProfile_result)
        return this.equals((saveMobotReferralProfile_result)that);
      return false;
    }

    public boolean equals(saveMobotReferralProfile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }


    public int compareTo(saveMobotReferralProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("saveMobotReferralProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveMobotReferralProfile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveMobotReferralProfile_resultStandardScheme getScheme() {
        return new saveMobotReferralProfile_resultStandardScheme();
      }
    }

    private static class saveMobotReferralProfile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveMobotReferralProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveMobotReferralProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map122 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map122.size);
                   java.lang.String _key123;
                   java.lang.String _val124;
                  for (int _i125 = 0; _i125 < _map122.size; ++_i125)
                  {
                    _key123 = iprot.readString();
                    _val124 = iprot.readString();
                    struct.success.put(_key123, _val124);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveMobotReferralProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter126 : struct.success.entrySet())
            {
              oprot.writeString(_iter126.getKey());
              oprot.writeString(_iter126.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveMobotReferralProfile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveMobotReferralProfile_resultTupleScheme getScheme() {
        return new saveMobotReferralProfile_resultTupleScheme();
      }
    }

    private static class saveMobotReferralProfile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveMobotReferralProfile_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, saveMobotReferralProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter127 : struct.success.entrySet())
            {
              oprot.writeString(_iter127.getKey());
              oprot.writeString(_iter127.getValue());
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, saveMobotReferralProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map128 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map128.size);
             java.lang.String _key129;
             java.lang.String _val130;
            for (int _i131 = 0; _i131 < _map128.size; ++_i131)
            {
              _key129 = iprot.readString();
              _val130 = iprot.readString();
              struct.success.put(_key129, _val130);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saveMobotReferralProfileCache_args implements org.apache.thrift.TBase<saveMobotReferralProfileCache_args, saveMobotReferralProfileCache_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveMobotReferralProfileCache_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveMobotReferralProfileCache_args");

    private static final org.apache.thrift.protocol.TField EMPLOYEE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField REFERRAL_REASONS_FIELD_DESC = new org.apache.thrift.protocol.TField("referralReasons", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField REFERRAL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("referralType", org.apache.thrift.protocol.TType.BYTE, (short)5);
    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField RELATIONSHIP_FIELD_DESC = new org.apache.thrift.protocol.TField("relationship", org.apache.thrift.protocol.TType.I32, (short)7);
    private static final org.apache.thrift.protocol.TField RECOM_REASON_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("recomReasonText", org.apache.thrift.protocol.TType.STRING, (short)8);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveMobotReferralProfileCache_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveMobotReferralProfileCache_argsTupleSchemeFactory();

    public int employeeId; // required
    public  java.lang.String mobile; // required
    public  java.lang.String name; // required
    public  java.util.List<java.lang.String> referralReasons; // required
    public byte referralType; // required
    public  java.lang.String fileName; // required
    public int relationship; // required
    public  java.lang.String recomReasonText; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMPLOYEE_ID((short)1, "employeeId"),
      MOBILE((short)2, "mobile"),
      NAME((short)3, "name"),
      REFERRAL_REASONS((short)4, "referralReasons"),
      REFERRAL_TYPE((short)5, "referralType"),
      FILE_NAME((short)6, "fileName"),
      RELATIONSHIP((short)7, "relationship"),
      RECOM_REASON_TEXT((short)8, "recomReasonText");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMPLOYEE_ID
            return EMPLOYEE_ID;
          case 2: // MOBILE
            return MOBILE;
          case 3: // NAME
            return NAME;
          case 4: // REFERRAL_REASONS
            return REFERRAL_REASONS;
          case 5: // REFERRAL_TYPE
            return REFERRAL_TYPE;
          case 6: // FILE_NAME
            return FILE_NAME;
          case 7: // RELATIONSHIP
            return RELATIONSHIP;
          case 8: // RECOM_REASON_TEXT
            return RECOM_REASON_TEXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EMPLOYEEID_ISSET_ID = 0;
    private static final int __REFERRALTYPE_ISSET_ID = 1;
    private static final int __RELATIONSHIP_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMPLOYEE_ID, new org.apache.thrift.meta_data.FieldMetaData("employeeId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REFERRAL_REASONS, new org.apache.thrift.meta_data.FieldMetaData("referralReasons", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.REFERRAL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("referralType", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RELATIONSHIP, new org.apache.thrift.meta_data.FieldMetaData("relationship", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.RECOM_REASON_TEXT, new org.apache.thrift.meta_data.FieldMetaData("recomReasonText", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveMobotReferralProfileCache_args.class, metaDataMap);
    }

    public saveMobotReferralProfileCache_args() {
    }

    public saveMobotReferralProfileCache_args(
      int employeeId,
      java.lang.String mobile,
      java.lang.String name,
      java.util.List<java.lang.String> referralReasons,
      byte referralType,
      java.lang.String fileName,
      int relationship,
      java.lang.String recomReasonText)
    {
      this();
      this.employeeId = employeeId;
      setEmployeeIdIsSet(true);
      this.mobile = mobile;
      this.name = name;
      this.referralReasons = referralReasons;
      this.referralType = referralType;
      setReferralTypeIsSet(true);
      this.fileName = fileName;
      this.relationship = relationship;
      setRelationshipIsSet(true);
      this.recomReasonText = recomReasonText;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveMobotReferralProfileCache_args(saveMobotReferralProfileCache_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.employeeId = other.employeeId;
      if (other.isSetMobile()) {
        this.mobile = other.mobile;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetReferralReasons()) {
        java.util.List<java.lang.String> __this__referralReasons = new java.util.ArrayList<java.lang.String>(other.referralReasons);
        this.referralReasons = __this__referralReasons;
      }
      this.referralType = other.referralType;
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
      this.relationship = other.relationship;
      if (other.isSetRecomReasonText()) {
        this.recomReasonText = other.recomReasonText;
      }
    }

    public saveMobotReferralProfileCache_args deepCopy() {
      return new saveMobotReferralProfileCache_args(this);
    }


    public void clear() {
      setEmployeeIdIsSet(false);
      this.employeeId = 0;
      this.mobile = null;
      this.name = null;
      this.referralReasons = null;
      setReferralTypeIsSet(false);
      this.referralType = 0;
      this.fileName = null;
      setRelationshipIsSet(false);
      this.relationship = 0;
      this.recomReasonText = null;
    }

    public int getEmployeeId() {
      return this.employeeId;
    }

    public saveMobotReferralProfileCache_args setEmployeeId(int employeeId) {
      this.employeeId = employeeId;
      setEmployeeIdIsSet(true);
      return this;
    }

    public void unsetEmployeeId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID);
    }

    /** Returns true if field employeeId is set (has been assigned a value) and false otherwise */
    public boolean isSetEmployeeId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID);
    }

    public void setEmployeeIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID, value);
    }


    public java.lang.String getMobile() {
      return this.mobile;
    }

    public saveMobotReferralProfileCache_args setMobile( java.lang.String mobile) {
      this.mobile = mobile;
      return this;
    }

    public void unsetMobile() {
      this.mobile = null;
    }

    /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
    public boolean isSetMobile() {
      return this.mobile != null;
    }

    public void setMobileIsSet(boolean value) {
      if (!value) {
        this.mobile = null;
      }
    }


    public java.lang.String getName() {
      return this.name;
    }

    public saveMobotReferralProfileCache_args setName( java.lang.String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public int getReferralReasonsSize() {
      return (this.referralReasons == null) ? 0 : this.referralReasons.size();
    }


    public java.util.Iterator<java.lang.String> getReferralReasonsIterator() {
      return (this.referralReasons == null) ? null : this.referralReasons.iterator();
    }

    public void addToReferralReasons(java.lang.String elem) {
      if (this.referralReasons == null) {
        this.referralReasons = new java.util.ArrayList<java.lang.String>();
      }
      this.referralReasons.add(elem);
    }


    public java.util.List<java.lang.String> getReferralReasons() {
      return this.referralReasons;
    }

    public saveMobotReferralProfileCache_args setReferralReasons( java.util.List<java.lang.String> referralReasons) {
      this.referralReasons = referralReasons;
      return this;
    }

    public void unsetReferralReasons() {
      this.referralReasons = null;
    }

    /** Returns true if field referralReasons is set (has been assigned a value) and false otherwise */
    public boolean isSetReferralReasons() {
      return this.referralReasons != null;
    }

    public void setReferralReasonsIsSet(boolean value) {
      if (!value) {
        this.referralReasons = null;
      }
    }

    public byte getReferralType() {
      return this.referralType;
    }

    public saveMobotReferralProfileCache_args setReferralType(byte referralType) {
      this.referralType = referralType;
      setReferralTypeIsSet(true);
      return this;
    }

    public void unsetReferralType() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REFERRALTYPE_ISSET_ID);
    }

    /** Returns true if field referralType is set (has been assigned a value) and false otherwise */
    public boolean isSetReferralType() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REFERRALTYPE_ISSET_ID);
    }

    public void setReferralTypeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REFERRALTYPE_ISSET_ID, value);
    }


    public java.lang.String getFileName() {
      return this.fileName;
    }

    public saveMobotReferralProfileCache_args setFileName( java.lang.String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }

    public int getRelationship() {
      return this.relationship;
    }

    public saveMobotReferralProfileCache_args setRelationship(int relationship) {
      this.relationship = relationship;
      setRelationshipIsSet(true);
      return this;
    }

    public void unsetRelationship() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RELATIONSHIP_ISSET_ID);
    }

    /** Returns true if field relationship is set (has been assigned a value) and false otherwise */
    public boolean isSetRelationship() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RELATIONSHIP_ISSET_ID);
    }

    public void setRelationshipIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RELATIONSHIP_ISSET_ID, value);
    }


    public java.lang.String getRecomReasonText() {
      return this.recomReasonText;
    }

    public saveMobotReferralProfileCache_args setRecomReasonText( java.lang.String recomReasonText) {
      this.recomReasonText = recomReasonText;
      return this;
    }

    public void unsetRecomReasonText() {
      this.recomReasonText = null;
    }

    /** Returns true if field recomReasonText is set (has been assigned a value) and false otherwise */
    public boolean isSetRecomReasonText() {
      return this.recomReasonText != null;
    }

    public void setRecomReasonTextIsSet(boolean value) {
      if (!value) {
        this.recomReasonText = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case EMPLOYEE_ID:
        if (value == null) {
          unsetEmployeeId();
        } else {
          setEmployeeId((java.lang.Integer)value);
        }
        break;

      case MOBILE:
        if (value == null) {
          unsetMobile();
        } else {
          setMobile((java.lang.String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((java.lang.String)value);
        }
        break;

      case REFERRAL_REASONS:
        if (value == null) {
          unsetReferralReasons();
        } else {
          setReferralReasons((java.util.List<java.lang.String>)value);
        }
        break;

      case REFERRAL_TYPE:
        if (value == null) {
          unsetReferralType();
        } else {
          setReferralType((java.lang.Byte)value);
        }
        break;

      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((java.lang.String)value);
        }
        break;

      case RELATIONSHIP:
        if (value == null) {
          unsetRelationship();
        } else {
          setRelationship((java.lang.Integer)value);
        }
        break;

      case RECOM_REASON_TEXT:
        if (value == null) {
          unsetRecomReasonText();
        } else {
          setRecomReasonText((java.lang.String)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EMPLOYEE_ID:
        return getEmployeeId();

      case MOBILE:
        return getMobile();

      case NAME:
        return getName();

      case REFERRAL_REASONS:
        return getReferralReasons();

      case REFERRAL_TYPE:
        return getReferralType();

      case FILE_NAME:
        return getFileName();

      case RELATIONSHIP:
        return getRelationship();

      case RECOM_REASON_TEXT:
        return getRecomReasonText();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EMPLOYEE_ID:
        return isSetEmployeeId();
      case MOBILE:
        return isSetMobile();
      case NAME:
        return isSetName();
      case REFERRAL_REASONS:
        return isSetReferralReasons();
      case REFERRAL_TYPE:
        return isSetReferralType();
      case FILE_NAME:
        return isSetFileName();
      case RELATIONSHIP:
        return isSetRelationship();
      case RECOM_REASON_TEXT:
        return isSetRecomReasonText();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof saveMobotReferralProfileCache_args)
        return this.equals((saveMobotReferralProfileCache_args)that);
      return false;
    }

    public boolean equals(saveMobotReferralProfileCache_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_employeeId = true;
      boolean that_present_employeeId = true;
      if (this_present_employeeId || that_present_employeeId) {
        if (!(this_present_employeeId && that_present_employeeId))
          return false;
        if (this.employeeId != that.employeeId)
          return false;
      }

      boolean this_present_mobile = true && this.isSetMobile();
      boolean that_present_mobile = true && that.isSetMobile();
      if (this_present_mobile || that_present_mobile) {
        if (!(this_present_mobile && that_present_mobile))
          return false;
        if (!this.mobile.equals(that.mobile))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_referralReasons = true && this.isSetReferralReasons();
      boolean that_present_referralReasons = true && that.isSetReferralReasons();
      if (this_present_referralReasons || that_present_referralReasons) {
        if (!(this_present_referralReasons && that_present_referralReasons))
          return false;
        if (!this.referralReasons.equals(that.referralReasons))
          return false;
      }

      boolean this_present_referralType = true;
      boolean that_present_referralType = true;
      if (this_present_referralType || that_present_referralType) {
        if (!(this_present_referralType && that_present_referralType))
          return false;
        if (this.referralType != that.referralType)
          return false;
      }

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      boolean this_present_relationship = true;
      boolean that_present_relationship = true;
      if (this_present_relationship || that_present_relationship) {
        if (!(this_present_relationship && that_present_relationship))
          return false;
        if (this.relationship != that.relationship)
          return false;
      }

      boolean this_present_recomReasonText = true && this.isSetRecomReasonText();
      boolean that_present_recomReasonText = true && that.isSetRecomReasonText();
      if (this_present_recomReasonText || that_present_recomReasonText) {
        if (!(this_present_recomReasonText && that_present_recomReasonText))
          return false;
        if (!this.recomReasonText.equals(that.recomReasonText))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + employeeId;

      hashCode = hashCode * 8191 + ((isSetMobile()) ? 131071 : 524287);
      if (isSetMobile())
        hashCode = hashCode * 8191 + mobile.hashCode();

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      hashCode = hashCode * 8191 + ((isSetReferralReasons()) ? 131071 : 524287);
      if (isSetReferralReasons())
        hashCode = hashCode * 8191 + referralReasons.hashCode();

      hashCode = hashCode * 8191 + (int) (referralType);

      hashCode = hashCode * 8191 + ((isSetFileName()) ? 131071 : 524287);
      if (isSetFileName())
        hashCode = hashCode * 8191 + fileName.hashCode();

      hashCode = hashCode * 8191 + relationship;

      hashCode = hashCode * 8191 + ((isSetRecomReasonText()) ? 131071 : 524287);
      if (isSetRecomReasonText())
        hashCode = hashCode * 8191 + recomReasonText.hashCode();

      return hashCode;
    }


    public int compareTo(saveMobotReferralProfileCache_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEmployeeId()).compareTo(other.isSetEmployeeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmployeeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeId, other.employeeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetReferralReasons()).compareTo(other.isSetReferralReasons());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReferralReasons()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.referralReasons, other.referralReasons);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetReferralType()).compareTo(other.isSetReferralType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReferralType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.referralType, other.referralType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRelationship()).compareTo(other.isSetRelationship());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRelationship()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relationship, other.relationship);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRecomReasonText()).compareTo(other.isSetRecomReasonText());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecomReasonText()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recomReasonText, other.recomReasonText);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("saveMobotReferralProfileCache_args(");
      boolean first = true;

      sb.append("employeeId:");
      sb.append(this.employeeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("referralReasons:");
      if (this.referralReasons == null) {
        sb.append("null");
      } else {
        sb.append(this.referralReasons);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("referralType:");
      sb.append(this.referralType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("relationship:");
      sb.append(this.relationship);
      first = false;
      if (!first) sb.append(", ");
      sb.append("recomReasonText:");
      if (this.recomReasonText == null) {
        sb.append("null");
      } else {
        sb.append(this.recomReasonText);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveMobotReferralProfileCache_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveMobotReferralProfileCache_argsStandardScheme getScheme() {
        return new saveMobotReferralProfileCache_argsStandardScheme();
      }
    }

    private static class saveMobotReferralProfileCache_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveMobotReferralProfileCache_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveMobotReferralProfileCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // EMPLOYEE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.employeeId = iprot.readI32();
                struct.setEmployeeIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MOBILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobile = iprot.readString();
                struct.setMobileIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REFERRAL_REASONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list132 = iprot.readListBegin();
                  struct.referralReasons = new java.util.ArrayList<java.lang.String>(_list132.size);
                   java.lang.String _elem133;
                  for (int _i134 = 0; _i134 < _list132.size; ++_i134)
                  {
                    _elem133 = iprot.readString();
                    struct.referralReasons.add(_elem133);
                  }
                  iprot.readListEnd();
                }
                struct.setReferralReasonsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // REFERRAL_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.referralType = iprot.readByte();
                struct.setReferralTypeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // RELATIONSHIP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.relationship = iprot.readI32();
                struct.setRelationshipIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // RECOM_REASON_TEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.recomReasonText = iprot.readString();
                struct.setRecomReasonTextIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveMobotReferralProfileCache_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EMPLOYEE_ID_FIELD_DESC);
        oprot.writeI32(struct.employeeId);
        oprot.writeFieldEnd();
        if (struct.mobile != null) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.referralReasons != null) {
          oprot.writeFieldBegin(REFERRAL_REASONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.referralReasons.size()));
            for (java.lang.String _iter135 : struct.referralReasons)
            {
              oprot.writeString(_iter135);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(REFERRAL_TYPE_FIELD_DESC);
        oprot.writeByte(struct.referralType);
        oprot.writeFieldEnd();
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RELATIONSHIP_FIELD_DESC);
        oprot.writeI32(struct.relationship);
        oprot.writeFieldEnd();
        if (struct.recomReasonText != null) {
          oprot.writeFieldBegin(RECOM_REASON_TEXT_FIELD_DESC);
          oprot.writeString(struct.recomReasonText);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveMobotReferralProfileCache_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveMobotReferralProfileCache_argsTupleScheme getScheme() {
        return new saveMobotReferralProfileCache_argsTupleScheme();
      }
    }

    private static class saveMobotReferralProfileCache_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveMobotReferralProfileCache_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, saveMobotReferralProfileCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEmployeeId()) {
          optionals.set(0);
        }
        if (struct.isSetMobile()) {
          optionals.set(1);
        }
        if (struct.isSetName()) {
          optionals.set(2);
        }
        if (struct.isSetReferralReasons()) {
          optionals.set(3);
        }
        if (struct.isSetReferralType()) {
          optionals.set(4);
        }
        if (struct.isSetFileName()) {
          optionals.set(5);
        }
        if (struct.isSetRelationship()) {
          optionals.set(6);
        }
        if (struct.isSetRecomReasonText()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetEmployeeId()) {
          oprot.writeI32(struct.employeeId);
        }
        if (struct.isSetMobile()) {
          oprot.writeString(struct.mobile);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetReferralReasons()) {
          {
            oprot.writeI32(struct.referralReasons.size());
            for (java.lang.String _iter136 : struct.referralReasons)
            {
              oprot.writeString(_iter136);
            }
          }
        }
        if (struct.isSetReferralType()) {
          oprot.writeByte(struct.referralType);
        }
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
        if (struct.isSetRelationship()) {
          oprot.writeI32(struct.relationship);
        }
        if (struct.isSetRecomReasonText()) {
          oprot.writeString(struct.recomReasonText);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, saveMobotReferralProfileCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.employeeId = iprot.readI32();
          struct.setEmployeeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mobile = iprot.readString();
          struct.setMobileIsSet(true);
        }
        if (incoming.get(2)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list137 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.referralReasons = new java.util.ArrayList<java.lang.String>(_list137.size);
             java.lang.String _elem138;
            for (int _i139 = 0; _i139 < _list137.size; ++_i139)
            {
              _elem138 = iprot.readString();
              struct.referralReasons.add(_elem138);
            }
          }
          struct.setReferralReasonsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.referralType = iprot.readByte();
          struct.setReferralTypeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
        if (incoming.get(6)) {
          struct.relationship = iprot.readI32();
          struct.setRelationshipIsSet(true);
        }
        if (incoming.get(7)) {
          struct.recomReasonText = iprot.readString();
          struct.setRecomReasonTextIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saveMobotReferralProfileCache_result implements org.apache.thrift.TBase<saveMobotReferralProfileCache_result, saveMobotReferralProfileCache_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveMobotReferralProfileCache_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveMobotReferralProfileCache_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveMobotReferralProfileCache_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveMobotReferralProfileCache_resultTupleSchemeFactory();

    public int success; // required
    public  com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveMobotReferralProfileCache_result.class, metaDataMap);
    }

    public saveMobotReferralProfileCache_result() {
    }

    public saveMobotReferralProfileCache_result(
      int success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveMobotReferralProfileCache_result(saveMobotReferralProfileCache_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public saveMobotReferralProfileCache_result deepCopy() {
      return new saveMobotReferralProfileCache_result(this);
    }


    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public saveMobotReferralProfileCache_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }


    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public saveMobotReferralProfileCache_result setE( com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof saveMobotReferralProfileCache_result)
        return this.equals((saveMobotReferralProfileCache_result)that);
      return false;
    }

    public boolean equals(saveMobotReferralProfileCache_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }


    public int compareTo(saveMobotReferralProfileCache_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("saveMobotReferralProfileCache_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveMobotReferralProfileCache_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveMobotReferralProfileCache_resultStandardScheme getScheme() {
        return new saveMobotReferralProfileCache_resultStandardScheme();
      }
    }

    private static class saveMobotReferralProfileCache_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveMobotReferralProfileCache_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveMobotReferralProfileCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveMobotReferralProfileCache_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveMobotReferralProfileCache_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveMobotReferralProfileCache_resultTupleScheme getScheme() {
        return new saveMobotReferralProfileCache_resultTupleScheme();
      }
    }

    private static class saveMobotReferralProfileCache_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveMobotReferralProfileCache_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, saveMobotReferralProfileCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, saveMobotReferralProfileCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMobotReferralCache_args implements org.apache.thrift.TBase<getMobotReferralCache_args, getMobotReferralCache_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMobotReferralCache_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMobotReferralCache_args");

    private static final org.apache.thrift.protocol.TField EMPLOYEE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMobotReferralCache_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMobotReferralCache_argsTupleSchemeFactory();

    public int employeeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMPLOYEE_ID((short)1, "employeeId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMPLOYEE_ID
            return EMPLOYEE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EMPLOYEEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMPLOYEE_ID, new org.apache.thrift.meta_data.FieldMetaData("employeeId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMobotReferralCache_args.class, metaDataMap);
    }

    public getMobotReferralCache_args() {
    }

    public getMobotReferralCache_args(
      int employeeId)
    {
      this();
      this.employeeId = employeeId;
      setEmployeeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMobotReferralCache_args(getMobotReferralCache_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.employeeId = other.employeeId;
    }

    public getMobotReferralCache_args deepCopy() {
      return new getMobotReferralCache_args(this);
    }


    public void clear() {
      setEmployeeIdIsSet(false);
      this.employeeId = 0;
    }

    public int getEmployeeId() {
      return this.employeeId;
    }

    public getMobotReferralCache_args setEmployeeId(int employeeId) {
      this.employeeId = employeeId;
      setEmployeeIdIsSet(true);
      return this;
    }

    public void unsetEmployeeId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID);
    }

    /** Returns true if field employeeId is set (has been assigned a value) and false otherwise */
    public boolean isSetEmployeeId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID);
    }

    public void setEmployeeIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case EMPLOYEE_ID:
        if (value == null) {
          unsetEmployeeId();
        } else {
          setEmployeeId((java.lang.Integer)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EMPLOYEE_ID:
        return getEmployeeId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EMPLOYEE_ID:
        return isSetEmployeeId();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMobotReferralCache_args)
        return this.equals((getMobotReferralCache_args)that);
      return false;
    }

    public boolean equals(getMobotReferralCache_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_employeeId = true;
      boolean that_present_employeeId = true;
      if (this_present_employeeId || that_present_employeeId) {
        if (!(this_present_employeeId && that_present_employeeId))
          return false;
        if (this.employeeId != that.employeeId)
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + employeeId;

      return hashCode;
    }


    public int compareTo(getMobotReferralCache_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEmployeeId()).compareTo(other.isSetEmployeeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmployeeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeId, other.employeeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMobotReferralCache_args(");
      boolean first = true;

      sb.append("employeeId:");
      sb.append(this.employeeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMobotReferralCache_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMobotReferralCache_argsStandardScheme getScheme() {
        return new getMobotReferralCache_argsStandardScheme();
      }
    }

    private static class getMobotReferralCache_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMobotReferralCache_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMobotReferralCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // EMPLOYEE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.employeeId = iprot.readI32();
                struct.setEmployeeIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMobotReferralCache_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EMPLOYEE_ID_FIELD_DESC);
        oprot.writeI32(struct.employeeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMobotReferralCache_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMobotReferralCache_argsTupleScheme getScheme() {
        return new getMobotReferralCache_argsTupleScheme();
      }
    }

    private static class getMobotReferralCache_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMobotReferralCache_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, getMobotReferralCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEmployeeId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEmployeeId()) {
          oprot.writeI32(struct.employeeId);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, getMobotReferralCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.employeeId = iprot.readI32();
          struct.setEmployeeIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMobotReferralCache_result implements org.apache.thrift.TBase<getMobotReferralCache_result, getMobotReferralCache_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMobotReferralCache_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMobotReferralCache_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMobotReferralCache_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMobotReferralCache_resultTupleSchemeFactory();

    public  java.lang.String success; // required
    public  com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMobotReferralCache_result.class, metaDataMap);
    }

    public getMobotReferralCache_result() {
    }

    public getMobotReferralCache_result(
      java.lang.String success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMobotReferralCache_result(getMobotReferralCache_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public getMobotReferralCache_result deepCopy() {
      return new getMobotReferralCache_result(this);
    }


    public void clear() {
      this.success = null;
      this.e = null;
    }


    public java.lang.String getSuccess() {
      return this.success;
    }

    public getMobotReferralCache_result setSuccess( java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }


    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public getMobotReferralCache_result setE( com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMobotReferralCache_result)
        return this.equals((getMobotReferralCache_result)that);
      return false;
    }

    public boolean equals(getMobotReferralCache_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }


    public int compareTo(getMobotReferralCache_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMobotReferralCache_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMobotReferralCache_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMobotReferralCache_resultStandardScheme getScheme() {
        return new getMobotReferralCache_resultStandardScheme();
      }
    }

    private static class getMobotReferralCache_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMobotReferralCache_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMobotReferralCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMobotReferralCache_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMobotReferralCache_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMobotReferralCache_resultTupleScheme getScheme() {
        return new getMobotReferralCache_resultTupleScheme();
      }
    }

    private static class getMobotReferralCache_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMobotReferralCache_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, getMobotReferralCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, getMobotReferralCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class parseHunterFileProfile_args implements org.apache.thrift.TBase<parseHunterFileProfile_args, parseHunterFileProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<parseHunterFileProfile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parseHunterFileProfile_args");

    private static final org.apache.thrift.protocol.TField HEADHUNTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("headhunterId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FILE_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("fileData", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new parseHunterFileProfile_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new parseHunterFileProfile_argsTupleSchemeFactory();

    public int headhunterId; // required
    public  java.lang.String fileName; // required
    public  java.nio.ByteBuffer fileData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HEADHUNTER_ID((short)1, "headhunterId"),
      FILE_NAME((short)2, "fileName"),
      FILE_DATA((short)3, "fileData");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HEADHUNTER_ID
            return HEADHUNTER_ID;
          case 2: // FILE_NAME
            return FILE_NAME;
          case 3: // FILE_DATA
            return FILE_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HEADHUNTERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HEADHUNTER_ID, new org.apache.thrift.meta_data.FieldMetaData("headhunterId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_DATA, new org.apache.thrift.meta_data.FieldMetaData("fileData", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parseHunterFileProfile_args.class, metaDataMap);
    }

    public parseHunterFileProfile_args() {
    }

    public parseHunterFileProfile_args(
      int headhunterId,
      java.lang.String fileName,
      java.nio.ByteBuffer fileData)
    {
      this();
      this.headhunterId = headhunterId;
      setHeadhunterIdIsSet(true);
      this.fileName = fileName;
      this.fileData = org.apache.thrift.TBaseHelper.copyBinary(fileData);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public parseHunterFileProfile_args(parseHunterFileProfile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.headhunterId = other.headhunterId;
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
      if (other.isSetFileData()) {
        this.fileData = org.apache.thrift.TBaseHelper.copyBinary(other.fileData);
      }
    }

    public parseHunterFileProfile_args deepCopy() {
      return new parseHunterFileProfile_args(this);
    }


    public void clear() {
      setHeadhunterIdIsSet(false);
      this.headhunterId = 0;
      this.fileName = null;
      this.fileData = null;
    }

    public int getHeadhunterId() {
      return this.headhunterId;
    }

    public parseHunterFileProfile_args setHeadhunterId(int headhunterId) {
      this.headhunterId = headhunterId;
      setHeadhunterIdIsSet(true);
      return this;
    }

    public void unsetHeadhunterId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HEADHUNTERID_ISSET_ID);
    }

    /** Returns true if field headhunterId is set (has been assigned a value) and false otherwise */
    public boolean isSetHeadhunterId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HEADHUNTERID_ISSET_ID);
    }

    public void setHeadhunterIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HEADHUNTERID_ISSET_ID, value);
    }


    public java.lang.String getFileName() {
      return this.fileName;
    }

    public parseHunterFileProfile_args setFileName( java.lang.String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }

    public byte[] getFileData() {
      setFileData(org.apache.thrift.TBaseHelper.rightSize(fileData));
      return fileData == null ? null : fileData.array();
    }

    public java.nio.ByteBuffer bufferForFileData() {
      return org.apache.thrift.TBaseHelper.copyBinary(fileData);
    }

    public parseHunterFileProfile_args setFileData(byte[] fileData) {
      this.fileData = fileData == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(fileData.clone());
      return this;
    }

    public parseHunterFileProfile_args setFileData( java.nio.ByteBuffer fileData) {
      this.fileData = org.apache.thrift.TBaseHelper.copyBinary(fileData);
      return this;
    }

    public void unsetFileData() {
      this.fileData = null;
    }

    /** Returns true if field fileData is set (has been assigned a value) and false otherwise */
    public boolean isSetFileData() {
      return this.fileData != null;
    }

    public void setFileDataIsSet(boolean value) {
      if (!value) {
        this.fileData = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case HEADHUNTER_ID:
        if (value == null) {
          unsetHeadhunterId();
        } else {
          setHeadhunterId((java.lang.Integer)value);
        }
        break;

      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((java.lang.String)value);
        }
        break;

      case FILE_DATA:
        if (value == null) {
          unsetFileData();
        } else {
          if (value instanceof byte[]) {
            setFileData((byte[])value);
          } else {
            setFileData((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HEADHUNTER_ID:
        return getHeadhunterId();

      case FILE_NAME:
        return getFileName();

      case FILE_DATA:
        return getFileData();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HEADHUNTER_ID:
        return isSetHeadhunterId();
      case FILE_NAME:
        return isSetFileName();
      case FILE_DATA:
        return isSetFileData();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof parseHunterFileProfile_args)
        return this.equals((parseHunterFileProfile_args)that);
      return false;
    }

    public boolean equals(parseHunterFileProfile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_headhunterId = true;
      boolean that_present_headhunterId = true;
      if (this_present_headhunterId || that_present_headhunterId) {
        if (!(this_present_headhunterId && that_present_headhunterId))
          return false;
        if (this.headhunterId != that.headhunterId)
          return false;
      }

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      boolean this_present_fileData = true && this.isSetFileData();
      boolean that_present_fileData = true && that.isSetFileData();
      if (this_present_fileData || that_present_fileData) {
        if (!(this_present_fileData && that_present_fileData))
          return false;
        if (!this.fileData.equals(that.fileData))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + headhunterId;

      hashCode = hashCode * 8191 + ((isSetFileName()) ? 131071 : 524287);
      if (isSetFileName())
        hashCode = hashCode * 8191 + fileName.hashCode();

      hashCode = hashCode * 8191 + ((isSetFileData()) ? 131071 : 524287);
      if (isSetFileData())
        hashCode = hashCode * 8191 + fileData.hashCode();

      return hashCode;
    }


    public int compareTo(parseHunterFileProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHeadhunterId()).compareTo(other.isSetHeadhunterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeadhunterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headhunterId, other.headhunterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFileData()).compareTo(other.isSetFileData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileData, other.fileData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("parseHunterFileProfile_args(");
      boolean first = true;

      sb.append("headhunterId:");
      sb.append(this.headhunterId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileData:");
      if (this.fileData == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.fileData, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class parseHunterFileProfile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parseHunterFileProfile_argsStandardScheme getScheme() {
        return new parseHunterFileProfile_argsStandardScheme();
      }
    }

    private static class parseHunterFileProfile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<parseHunterFileProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, parseHunterFileProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // HEADHUNTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.headhunterId = iprot.readI32();
                struct.setHeadhunterIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FILE_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileData = iprot.readBinary();
                struct.setFileDataIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, parseHunterFileProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HEADHUNTER_ID_FIELD_DESC);
        oprot.writeI32(struct.headhunterId);
        oprot.writeFieldEnd();
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        if (struct.fileData != null) {
          oprot.writeFieldBegin(FILE_DATA_FIELD_DESC);
          oprot.writeBinary(struct.fileData);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class parseHunterFileProfile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parseHunterFileProfile_argsTupleScheme getScheme() {
        return new parseHunterFileProfile_argsTupleScheme();
      }
    }

    private static class parseHunterFileProfile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<parseHunterFileProfile_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, parseHunterFileProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHeadhunterId()) {
          optionals.set(0);
        }
        if (struct.isSetFileName()) {
          optionals.set(1);
        }
        if (struct.isSetFileData()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetHeadhunterId()) {
          oprot.writeI32(struct.headhunterId);
        }
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
        if (struct.isSetFileData()) {
          oprot.writeBinary(struct.fileData);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, parseHunterFileProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.headhunterId = iprot.readI32();
          struct.setHeadhunterIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fileData = iprot.readBinary();
          struct.setFileDataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class parseHunterFileProfile_result implements org.apache.thrift.TBase<parseHunterFileProfile_result, parseHunterFileProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<parseHunterFileProfile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parseHunterFileProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new parseHunterFileProfile_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new parseHunterFileProfile_resultTupleSchemeFactory();

    public  com.moseeker.thrift.gen.profile.struct.ProfileParseResult success; // required
    public  com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProfileParseResult.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parseHunterFileProfile_result.class, metaDataMap);
    }

    public parseHunterFileProfile_result() {
    }

    public parseHunterFileProfile_result(
      com.moseeker.thrift.gen.profile.struct.ProfileParseResult success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public parseHunterFileProfile_result(parseHunterFileProfile_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.profile.struct.ProfileParseResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public parseHunterFileProfile_result deepCopy() {
      return new parseHunterFileProfile_result(this);
    }


    public void clear() {
      this.success = null;
      this.e = null;
    }


    public com.moseeker.thrift.gen.profile.struct.ProfileParseResult getSuccess() {
      return this.success;
    }

    public parseHunterFileProfile_result setSuccess( com.moseeker.thrift.gen.profile.struct.ProfileParseResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }


    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public parseHunterFileProfile_result setE( com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.profile.struct.ProfileParseResult)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof parseHunterFileProfile_result)
        return this.equals((parseHunterFileProfile_result)that);
      return false;
    }

    public boolean equals(parseHunterFileProfile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }


    public int compareTo(parseHunterFileProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("parseHunterFileProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class parseHunterFileProfile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parseHunterFileProfile_resultStandardScheme getScheme() {
        return new parseHunterFileProfile_resultStandardScheme();
      }
    }

    private static class parseHunterFileProfile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<parseHunterFileProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, parseHunterFileProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.profile.struct.ProfileParseResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, parseHunterFileProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class parseHunterFileProfile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parseHunterFileProfile_resultTupleScheme getScheme() {
        return new parseHunterFileProfile_resultTupleScheme();
      }
    }

    private static class parseHunterFileProfile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<parseHunterFileProfile_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, parseHunterFileProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, parseHunterFileProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.profile.struct.ProfileParseResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class uploadFiles_args implements org.apache.thrift.TBase<uploadFiles_args, uploadFiles_args._Fields>, java.io.Serializable, Cloneable, Comparable<uploadFiles_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadFiles_args");

    private static final org.apache.thrift.protocol.TField SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sceneId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField UNIONID_FIELD_DESC = new org.apache.thrift.protocol.TField("unionid", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField FILE_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("fileData", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new uploadFiles_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new uploadFiles_argsTupleSchemeFactory();

    public  java.lang.String sceneId; // required
    public  java.lang.String unionid; // required
    public  java.lang.String fileName; // required
    public  java.nio.ByteBuffer fileData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCENE_ID((short)1, "sceneId"),
      UNIONID((short)2, "unionid"),
      FILE_NAME((short)3, "fileName"),
      FILE_DATA((short)4, "fileData");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCENE_ID
            return SCENE_ID;
          case 2: // UNIONID
            return UNIONID;
          case 3: // FILE_NAME
            return FILE_NAME;
          case 4: // FILE_DATA
            return FILE_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UNIONID, new org.apache.thrift.meta_data.FieldMetaData("unionid", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_DATA, new org.apache.thrift.meta_data.FieldMetaData("fileData", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadFiles_args.class, metaDataMap);
    }

    public uploadFiles_args() {
    }

    public uploadFiles_args(
      java.lang.String sceneId,
      java.lang.String unionid,
      java.lang.String fileName,
      java.nio.ByteBuffer fileData)
    {
      this();
      this.sceneId = sceneId;
      this.unionid = unionid;
      this.fileName = fileName;
      this.fileData = org.apache.thrift.TBaseHelper.copyBinary(fileData);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadFiles_args(uploadFiles_args other) {
      if (other.isSetSceneId()) {
        this.sceneId = other.sceneId;
      }
      if (other.isSetUnionid()) {
        this.unionid = other.unionid;
      }
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
      if (other.isSetFileData()) {
        this.fileData = org.apache.thrift.TBaseHelper.copyBinary(other.fileData);
      }
    }

    public uploadFiles_args deepCopy() {
      return new uploadFiles_args(this);
    }


    public void clear() {
      this.sceneId = null;
      this.unionid = null;
      this.fileName = null;
      this.fileData = null;
    }


    public java.lang.String getSceneId() {
      return this.sceneId;
    }

    public uploadFiles_args setSceneId( java.lang.String sceneId) {
      this.sceneId = sceneId;
      return this;
    }

    public void unsetSceneId() {
      this.sceneId = null;
    }

    /** Returns true if field sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSetSceneId() {
      return this.sceneId != null;
    }

    public void setSceneIdIsSet(boolean value) {
      if (!value) {
        this.sceneId = null;
      }
    }


    public java.lang.String getUnionid() {
      return this.unionid;
    }

    public uploadFiles_args setUnionid( java.lang.String unionid) {
      this.unionid = unionid;
      return this;
    }

    public void unsetUnionid() {
      this.unionid = null;
    }

    /** Returns true if field unionid is set (has been assigned a value) and false otherwise */
    public boolean isSetUnionid() {
      return this.unionid != null;
    }

    public void setUnionidIsSet(boolean value) {
      if (!value) {
        this.unionid = null;
      }
    }


    public java.lang.String getFileName() {
      return this.fileName;
    }

    public uploadFiles_args setFileName( java.lang.String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }

    public byte[] getFileData() {
      setFileData(org.apache.thrift.TBaseHelper.rightSize(fileData));
      return fileData == null ? null : fileData.array();
    }

    public java.nio.ByteBuffer bufferForFileData() {
      return org.apache.thrift.TBaseHelper.copyBinary(fileData);
    }

    public uploadFiles_args setFileData(byte[] fileData) {
      this.fileData = fileData == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(fileData.clone());
      return this;
    }

    public uploadFiles_args setFileData( java.nio.ByteBuffer fileData) {
      this.fileData = org.apache.thrift.TBaseHelper.copyBinary(fileData);
      return this;
    }

    public void unsetFileData() {
      this.fileData = null;
    }

    /** Returns true if field fileData is set (has been assigned a value) and false otherwise */
    public boolean isSetFileData() {
      return this.fileData != null;
    }

    public void setFileDataIsSet(boolean value) {
      if (!value) {
        this.fileData = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SCENE_ID:
        if (value == null) {
          unsetSceneId();
        } else {
          setSceneId((java.lang.String)value);
        }
        break;

      case UNIONID:
        if (value == null) {
          unsetUnionid();
        } else {
          setUnionid((java.lang.String)value);
        }
        break;

      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((java.lang.String)value);
        }
        break;

      case FILE_DATA:
        if (value == null) {
          unsetFileData();
        } else {
          if (value instanceof byte[]) {
            setFileData((byte[])value);
          } else {
            setFileData((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCENE_ID:
        return getSceneId();

      case UNIONID:
        return getUnionid();

      case FILE_NAME:
        return getFileName();

      case FILE_DATA:
        return getFileData();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCENE_ID:
        return isSetSceneId();
      case UNIONID:
        return isSetUnionid();
      case FILE_NAME:
        return isSetFileName();
      case FILE_DATA:
        return isSetFileData();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadFiles_args)
        return this.equals((uploadFiles_args)that);
      return false;
    }

    public boolean equals(uploadFiles_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sceneId = true && this.isSetSceneId();
      boolean that_present_sceneId = true && that.isSetSceneId();
      if (this_present_sceneId || that_present_sceneId) {
        if (!(this_present_sceneId && that_present_sceneId))
          return false;
        if (!this.sceneId.equals(that.sceneId))
          return false;
      }

      boolean this_present_unionid = true && this.isSetUnionid();
      boolean that_present_unionid = true && that.isSetUnionid();
      if (this_present_unionid || that_present_unionid) {
        if (!(this_present_unionid && that_present_unionid))
          return false;
        if (!this.unionid.equals(that.unionid))
          return false;
      }

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      boolean this_present_fileData = true && this.isSetFileData();
      boolean that_present_fileData = true && that.isSetFileData();
      if (this_present_fileData || that_present_fileData) {
        if (!(this_present_fileData && that_present_fileData))
          return false;
        if (!this.fileData.equals(that.fileData))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSceneId()) ? 131071 : 524287);
      if (isSetSceneId())
        hashCode = hashCode * 8191 + sceneId.hashCode();

      hashCode = hashCode * 8191 + ((isSetUnionid()) ? 131071 : 524287);
      if (isSetUnionid())
        hashCode = hashCode * 8191 + unionid.hashCode();

      hashCode = hashCode * 8191 + ((isSetFileName()) ? 131071 : 524287);
      if (isSetFileName())
        hashCode = hashCode * 8191 + fileName.hashCode();

      hashCode = hashCode * 8191 + ((isSetFileData()) ? 131071 : 524287);
      if (isSetFileData())
        hashCode = hashCode * 8191 + fileData.hashCode();

      return hashCode;
    }


    public int compareTo(uploadFiles_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSceneId()).compareTo(other.isSetSceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sceneId, other.sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUnionid()).compareTo(other.isSetUnionid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnionid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unionid, other.unionid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFileData()).compareTo(other.isSetFileData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileData, other.fileData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("uploadFiles_args(");
      boolean first = true;

      sb.append("sceneId:");
      if (this.sceneId == null) {
        sb.append("null");
      } else {
        sb.append(this.sceneId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unionid:");
      if (this.unionid == null) {
        sb.append("null");
      } else {
        sb.append(this.unionid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileData:");
      if (this.fileData == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.fileData, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadFiles_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public uploadFiles_argsStandardScheme getScheme() {
        return new uploadFiles_argsStandardScheme();
      }
    }

    private static class uploadFiles_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<uploadFiles_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadFiles_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sceneId = iprot.readString();
                struct.setSceneIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UNIONID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.unionid = iprot.readString();
                struct.setUnionidIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FILE_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileData = iprot.readBinary();
                struct.setFileDataIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadFiles_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sceneId != null) {
          oprot.writeFieldBegin(SCENE_ID_FIELD_DESC);
          oprot.writeString(struct.sceneId);
          oprot.writeFieldEnd();
        }
        if (struct.unionid != null) {
          oprot.writeFieldBegin(UNIONID_FIELD_DESC);
          oprot.writeString(struct.unionid);
          oprot.writeFieldEnd();
        }
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        if (struct.fileData != null) {
          oprot.writeFieldBegin(FILE_DATA_FIELD_DESC);
          oprot.writeBinary(struct.fileData);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadFiles_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public uploadFiles_argsTupleScheme getScheme() {
        return new uploadFiles_argsTupleScheme();
      }
    }

    private static class uploadFiles_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<uploadFiles_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, uploadFiles_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSceneId()) {
          optionals.set(0);
        }
        if (struct.isSetUnionid()) {
          optionals.set(1);
        }
        if (struct.isSetFileName()) {
          optionals.set(2);
        }
        if (struct.isSetFileData()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSceneId()) {
          oprot.writeString(struct.sceneId);
        }
        if (struct.isSetUnionid()) {
          oprot.writeString(struct.unionid);
        }
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
        if (struct.isSetFileData()) {
          oprot.writeBinary(struct.fileData);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, uploadFiles_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.sceneId = iprot.readString();
          struct.setSceneIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unionid = iprot.readString();
          struct.setUnionidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.fileData = iprot.readBinary();
          struct.setFileDataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class uploadFiles_result implements org.apache.thrift.TBase<uploadFiles_result, uploadFiles_result._Fields>, java.io.Serializable, Cloneable, Comparable<uploadFiles_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadFiles_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new uploadFiles_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new uploadFiles_resultTupleSchemeFactory();

    public  com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles success; // required
    public  com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadFiles_result.class, metaDataMap);
    }

    public uploadFiles_result() {
    }

    public uploadFiles_result(
      com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadFiles_result(uploadFiles_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public uploadFiles_result deepCopy() {
      return new uploadFiles_result(this);
    }


    public void clear() {
      this.success = null;
      this.e = null;
    }


    public com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles getSuccess() {
      return this.success;
    }

    public uploadFiles_result setSuccess( com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }


    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public uploadFiles_result setE( com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadFiles_result)
        return this.equals((uploadFiles_result)that);
      return false;
    }

    public boolean equals(uploadFiles_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }


    public int compareTo(uploadFiles_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("uploadFiles_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadFiles_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public uploadFiles_resultStandardScheme getScheme() {
        return new uploadFiles_resultStandardScheme();
      }
    }

    private static class uploadFiles_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<uploadFiles_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadFiles_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadFiles_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadFiles_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public uploadFiles_resultTupleScheme getScheme() {
        return new uploadFiles_resultTupleScheme();
      }
    }

    private static class uploadFiles_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<uploadFiles_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, uploadFiles_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, uploadFiles_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getUploadFiles_args implements org.apache.thrift.TBase<getUploadFiles_args, getUploadFiles_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUploadFiles_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUploadFiles_args");

    private static final org.apache.thrift.protocol.TField UNION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("unionId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNo", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUploadFiles_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUploadFiles_argsTupleSchemeFactory();

    public  java.lang.String unionId; // required
    public int pageSize; // required
    public int pageNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UNION_ID((short)1, "unionId"),
      PAGE_SIZE((short)2, "pageSize"),
      PAGE_NO((short)3, "pageNo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UNION_ID
            return UNION_ID;
          case 2: // PAGE_SIZE
            return PAGE_SIZE;
          case 3: // PAGE_NO
            return PAGE_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGESIZE_ISSET_ID = 0;
    private static final int __PAGENO_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UNION_ID, new org.apache.thrift.meta_data.FieldMetaData("unionId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_NO, new org.apache.thrift.meta_data.FieldMetaData("pageNo", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUploadFiles_args.class, metaDataMap);
    }

    public getUploadFiles_args() {
    }

    public getUploadFiles_args(
      java.lang.String unionId,
      int pageSize,
      int pageNo)
    {
      this();
      this.unionId = unionId;
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      this.pageNo = pageNo;
      setPageNoIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUploadFiles_args(getUploadFiles_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUnionId()) {
        this.unionId = other.unionId;
      }
      this.pageSize = other.pageSize;
      this.pageNo = other.pageNo;
    }

    public getUploadFiles_args deepCopy() {
      return new getUploadFiles_args(this);
    }


    public void clear() {
      this.unionId = null;
      setPageSizeIsSet(false);
      this.pageSize = 0;
      setPageNoIsSet(false);
      this.pageNo = 0;
    }


    public java.lang.String getUnionId() {
      return this.unionId;
    }

    public getUploadFiles_args setUnionId( java.lang.String unionId) {
      this.unionId = unionId;
      return this;
    }

    public void unsetUnionId() {
      this.unionId = null;
    }

    /** Returns true if field unionId is set (has been assigned a value) and false otherwise */
    public boolean isSetUnionId() {
      return this.unionId != null;
    }

    public void setUnionIdIsSet(boolean value) {
      if (!value) {
        this.unionId = null;
      }
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getUploadFiles_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public int getPageNo() {
      return this.pageNo;
    }

    public getUploadFiles_args setPageNo(int pageNo) {
      this.pageNo = pageNo;
      setPageNoIsSet(true);
      return this;
    }

    public void unsetPageNo() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    /** Returns true if field pageNo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNo() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    public void setPageNoIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGENO_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case UNION_ID:
        if (value == null) {
          unsetUnionId();
        } else {
          setUnionId((java.lang.String)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((java.lang.Integer)value);
        }
        break;

      case PAGE_NO:
        if (value == null) {
          unsetPageNo();
        } else {
          setPageNo((java.lang.Integer)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case UNION_ID:
        return getUnionId();

      case PAGE_SIZE:
        return getPageSize();

      case PAGE_NO:
        return getPageNo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case UNION_ID:
        return isSetUnionId();
      case PAGE_SIZE:
        return isSetPageSize();
      case PAGE_NO:
        return isSetPageNo();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getUploadFiles_args)
        return this.equals((getUploadFiles_args)that);
      return false;
    }

    public boolean equals(getUploadFiles_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_unionId = true && this.isSetUnionId();
      boolean that_present_unionId = true && that.isSetUnionId();
      if (this_present_unionId || that_present_unionId) {
        if (!(this_present_unionId && that_present_unionId))
          return false;
        if (!this.unionId.equals(that.unionId))
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      boolean this_present_pageNo = true;
      boolean that_present_pageNo = true;
      if (this_present_pageNo || that_present_pageNo) {
        if (!(this_present_pageNo && that_present_pageNo))
          return false;
        if (this.pageNo != that.pageNo)
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUnionId()) ? 131071 : 524287);
      if (isSetUnionId())
        hashCode = hashCode * 8191 + unionId.hashCode();

      hashCode = hashCode * 8191 + pageSize;

      hashCode = hashCode * 8191 + pageNo;

      return hashCode;
    }


    public int compareTo(getUploadFiles_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUnionId()).compareTo(other.isSetUnionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unionId, other.unionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPageNo()).compareTo(other.isSetPageNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNo, other.pageNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getUploadFiles_args(");
      boolean first = true;

      sb.append("unionId:");
      if (this.unionId == null) {
        sb.append("null");
      } else {
        sb.append(this.unionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNo:");
      sb.append(this.pageNo);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUploadFiles_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUploadFiles_argsStandardScheme getScheme() {
        return new getUploadFiles_argsStandardScheme();
      }
    }

    private static class getUploadFiles_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUploadFiles_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUploadFiles_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // UNION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.unionId = iprot.readString();
                struct.setUnionIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNo = iprot.readI32();
                struct.setPageNoIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUploadFiles_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.unionId != null) {
          oprot.writeFieldBegin(UNION_ID_FIELD_DESC);
          oprot.writeString(struct.unionId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_NO_FIELD_DESC);
        oprot.writeI32(struct.pageNo);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUploadFiles_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUploadFiles_argsTupleScheme getScheme() {
        return new getUploadFiles_argsTupleScheme();
      }
    }

    private static class getUploadFiles_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUploadFiles_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, getUploadFiles_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUnionId()) {
          optionals.set(0);
        }
        if (struct.isSetPageSize()) {
          optionals.set(1);
        }
        if (struct.isSetPageNo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUnionId()) {
          oprot.writeString(struct.unionId);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
        if (struct.isSetPageNo()) {
          oprot.writeI32(struct.pageNo);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, getUploadFiles_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.unionId = iprot.readString();
          struct.setUnionIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageNo = iprot.readI32();
          struct.setPageNoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getUploadFiles_result implements org.apache.thrift.TBase<getUploadFiles_result, getUploadFiles_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUploadFiles_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUploadFiles_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUploadFiles_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUploadFiles_resultTupleSchemeFactory();

    public  java.util.List<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles> success; // required
    public  com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUploadFiles_result.class, metaDataMap);
    }

    public getUploadFiles_result() {
    }

    public getUploadFiles_result(
      java.util.List<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles> success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUploadFiles_result(getUploadFiles_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles> __this__success = new java.util.ArrayList<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles>(other.success.size());
        for (com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles other_element : other.success) {
          __this__success.add(new com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public getUploadFiles_result deepCopy() {
      return new getUploadFiles_result(this);
    }


    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }


    public java.util.Iterator<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles>();
      }
      this.success.add(elem);
    }


    public java.util.List<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles> getSuccess() {
      return this.success;
    }

    public getUploadFiles_result setSuccess( java.util.List<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }


    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public getUploadFiles_result setE( com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getUploadFiles_result)
        return this.equals((getUploadFiles_result)that);
      return false;
    }

    public boolean equals(getUploadFiles_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }


    public int compareTo(getUploadFiles_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getUploadFiles_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUploadFiles_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUploadFiles_resultStandardScheme getScheme() {
        return new getUploadFiles_resultStandardScheme();
      }
    }

    private static class getUploadFiles_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUploadFiles_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUploadFiles_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list140 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles>(_list140.size);
                   com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles _elem141;
                  for (int _i142 = 0; _i142 < _list140.size; ++_i142)
                  {
                    _elem141 = new com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles();
                    _elem141.read(iprot);
                    struct.success.add(_elem141);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUploadFiles_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles _iter143 : struct.success)
            {
              _iter143.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUploadFiles_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUploadFiles_resultTupleScheme getScheme() {
        return new getUploadFiles_resultTupleScheme();
      }
    }

    private static class getUploadFiles_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUploadFiles_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, getUploadFiles_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles _iter144 : struct.success)
            {
              _iter144.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, getUploadFiles_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list145 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles>(_list145.size);
             com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles _elem146;
            for (int _i147 = 0; _i147 < _list145.size; ++_i147)
            {
              _elem146 = new com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles();
              _elem146.read(iprot);
              struct.success.add(_elem146);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class downLoadFiles_args implements org.apache.thrift.TBase<downLoadFiles_args, downLoadFiles_args._Fields>, java.io.Serializable, Cloneable, Comparable<downLoadFiles_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("downLoadFiles_args");

    private static final org.apache.thrift.protocol.TField SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sceneId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new downLoadFiles_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new downLoadFiles_argsTupleSchemeFactory();

    public  java.lang.String sceneId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCENE_ID((short)1, "sceneId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCENE_ID
            return SCENE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(downLoadFiles_args.class, metaDataMap);
    }

    public downLoadFiles_args() {
    }

    public downLoadFiles_args(
      java.lang.String sceneId)
    {
      this();
      this.sceneId = sceneId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public downLoadFiles_args(downLoadFiles_args other) {
      if (other.isSetSceneId()) {
        this.sceneId = other.sceneId;
      }
    }

    public downLoadFiles_args deepCopy() {
      return new downLoadFiles_args(this);
    }


    public void clear() {
      this.sceneId = null;
    }


    public java.lang.String getSceneId() {
      return this.sceneId;
    }

    public downLoadFiles_args setSceneId( java.lang.String sceneId) {
      this.sceneId = sceneId;
      return this;
    }

    public void unsetSceneId() {
      this.sceneId = null;
    }

    /** Returns true if field sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSetSceneId() {
      return this.sceneId != null;
    }

    public void setSceneIdIsSet(boolean value) {
      if (!value) {
        this.sceneId = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SCENE_ID:
        if (value == null) {
          unsetSceneId();
        } else {
          setSceneId((java.lang.String)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCENE_ID:
        return getSceneId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCENE_ID:
        return isSetSceneId();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof downLoadFiles_args)
        return this.equals((downLoadFiles_args)that);
      return false;
    }

    public boolean equals(downLoadFiles_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sceneId = true && this.isSetSceneId();
      boolean that_present_sceneId = true && that.isSetSceneId();
      if (this_present_sceneId || that_present_sceneId) {
        if (!(this_present_sceneId && that_present_sceneId))
          return false;
        if (!this.sceneId.equals(that.sceneId))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSceneId()) ? 131071 : 524287);
      if (isSetSceneId())
        hashCode = hashCode * 8191 + sceneId.hashCode();

      return hashCode;
    }


    public int compareTo(downLoadFiles_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSceneId()).compareTo(other.isSetSceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sceneId, other.sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("downLoadFiles_args(");
      boolean first = true;

      sb.append("sceneId:");
      if (this.sceneId == null) {
        sb.append("null");
      } else {
        sb.append(this.sceneId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class downLoadFiles_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public downLoadFiles_argsStandardScheme getScheme() {
        return new downLoadFiles_argsStandardScheme();
      }
    }

    private static class downLoadFiles_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<downLoadFiles_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, downLoadFiles_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sceneId = iprot.readString();
                struct.setSceneIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, downLoadFiles_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sceneId != null) {
          oprot.writeFieldBegin(SCENE_ID_FIELD_DESC);
          oprot.writeString(struct.sceneId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class downLoadFiles_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public downLoadFiles_argsTupleScheme getScheme() {
        return new downLoadFiles_argsTupleScheme();
      }
    }

    private static class downLoadFiles_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<downLoadFiles_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, downLoadFiles_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSceneId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSceneId()) {
          oprot.writeString(struct.sceneId);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, downLoadFiles_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sceneId = iprot.readString();
          struct.setSceneIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class downLoadFiles_result implements org.apache.thrift.TBase<downLoadFiles_result, downLoadFiles_result._Fields>, java.io.Serializable, Cloneable, Comparable<downLoadFiles_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("downLoadFiles_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new downLoadFiles_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new downLoadFiles_resultTupleSchemeFactory();

    public  java.lang.String success; // required
    public  com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(downLoadFiles_result.class, metaDataMap);
    }

    public downLoadFiles_result() {
    }

    public downLoadFiles_result(
      java.lang.String success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public downLoadFiles_result(downLoadFiles_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public downLoadFiles_result deepCopy() {
      return new downLoadFiles_result(this);
    }


    public void clear() {
      this.success = null;
      this.e = null;
    }


    public java.lang.String getSuccess() {
      return this.success;
    }

    public downLoadFiles_result setSuccess( java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }


    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public downLoadFiles_result setE( com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof downLoadFiles_result)
        return this.equals((downLoadFiles_result)that);
      return false;
    }

    public boolean equals(downLoadFiles_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }


    public int compareTo(downLoadFiles_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("downLoadFiles_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class downLoadFiles_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public downLoadFiles_resultStandardScheme getScheme() {
        return new downLoadFiles_resultStandardScheme();
      }
    }

    private static class downLoadFiles_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<downLoadFiles_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, downLoadFiles_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, downLoadFiles_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class downLoadFiles_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public downLoadFiles_resultTupleScheme getScheme() {
        return new downLoadFiles_resultTupleScheme();
      }
    }

    private static class downLoadFiles_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<downLoadFiles_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, downLoadFiles_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, downLoadFiles_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class referralResumeInfo_args implements org.apache.thrift.TBase<referralResumeInfo_args, referralResumeInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<referralResumeInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("referralResumeInfo_args");

    private static final org.apache.thrift.protocol.TField SCENE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sceneId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new referralResumeInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new referralResumeInfo_argsTupleSchemeFactory();

    public  java.lang.String sceneId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCENE_ID((short)1, "sceneId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCENE_ID
            return SCENE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCENE_ID, new org.apache.thrift.meta_data.FieldMetaData("sceneId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(referralResumeInfo_args.class, metaDataMap);
    }

    public referralResumeInfo_args() {
    }

    public referralResumeInfo_args(
      java.lang.String sceneId)
    {
      this();
      this.sceneId = sceneId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public referralResumeInfo_args(referralResumeInfo_args other) {
      if (other.isSetSceneId()) {
        this.sceneId = other.sceneId;
      }
    }

    public referralResumeInfo_args deepCopy() {
      return new referralResumeInfo_args(this);
    }


    public void clear() {
      this.sceneId = null;
    }


    public java.lang.String getSceneId() {
      return this.sceneId;
    }

    public referralResumeInfo_args setSceneId( java.lang.String sceneId) {
      this.sceneId = sceneId;
      return this;
    }

    public void unsetSceneId() {
      this.sceneId = null;
    }

    /** Returns true if field sceneId is set (has been assigned a value) and false otherwise */
    public boolean isSetSceneId() {
      return this.sceneId != null;
    }

    public void setSceneIdIsSet(boolean value) {
      if (!value) {
        this.sceneId = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SCENE_ID:
        if (value == null) {
          unsetSceneId();
        } else {
          setSceneId((java.lang.String)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCENE_ID:
        return getSceneId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCENE_ID:
        return isSetSceneId();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof referralResumeInfo_args)
        return this.equals((referralResumeInfo_args)that);
      return false;
    }

    public boolean equals(referralResumeInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sceneId = true && this.isSetSceneId();
      boolean that_present_sceneId = true && that.isSetSceneId();
      if (this_present_sceneId || that_present_sceneId) {
        if (!(this_present_sceneId && that_present_sceneId))
          return false;
        if (!this.sceneId.equals(that.sceneId))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSceneId()) ? 131071 : 524287);
      if (isSetSceneId())
        hashCode = hashCode * 8191 + sceneId.hashCode();

      return hashCode;
    }


    public int compareTo(referralResumeInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSceneId()).compareTo(other.isSetSceneId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSceneId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sceneId, other.sceneId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("referralResumeInfo_args(");
      boolean first = true;

      sb.append("sceneId:");
      if (this.sceneId == null) {
        sb.append("null");
      } else {
        sb.append(this.sceneId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class referralResumeInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public referralResumeInfo_argsStandardScheme getScheme() {
        return new referralResumeInfo_argsStandardScheme();
      }
    }

    private static class referralResumeInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<referralResumeInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, referralResumeInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // SCENE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sceneId = iprot.readString();
                struct.setSceneIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, referralResumeInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sceneId != null) {
          oprot.writeFieldBegin(SCENE_ID_FIELD_DESC);
          oprot.writeString(struct.sceneId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class referralResumeInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public referralResumeInfo_argsTupleScheme getScheme() {
        return new referralResumeInfo_argsTupleScheme();
      }
    }

    private static class referralResumeInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<referralResumeInfo_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, referralResumeInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSceneId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSceneId()) {
          oprot.writeString(struct.sceneId);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, referralResumeInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sceneId = iprot.readString();
          struct.setSceneIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class referralResumeInfo_result implements org.apache.thrift.TBase<referralResumeInfo_result, referralResumeInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<referralResumeInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("referralResumeInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new referralResumeInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new referralResumeInfo_resultTupleSchemeFactory();

    public  com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles success; // required
    public  com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(referralResumeInfo_result.class, metaDataMap);
    }

    public referralResumeInfo_result() {
    }

    public referralResumeInfo_result(
      com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public referralResumeInfo_result(referralResumeInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public referralResumeInfo_result deepCopy() {
      return new referralResumeInfo_result(this);
    }


    public void clear() {
      this.success = null;
      this.e = null;
    }


    public com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles getSuccess() {
      return this.success;
    }

    public referralResumeInfo_result setSuccess( com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }


    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public referralResumeInfo_result setE( com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof referralResumeInfo_result)
        return this.equals((referralResumeInfo_result)that);
      return false;
    }

    public boolean equals(referralResumeInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }


    public int compareTo(referralResumeInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("referralResumeInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class referralResumeInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public referralResumeInfo_resultStandardScheme getScheme() {
        return new referralResumeInfo_resultStandardScheme();
      }
    }

    private static class referralResumeInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<referralResumeInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, referralResumeInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, referralResumeInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class referralResumeInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public referralResumeInfo_resultTupleScheme getScheme() {
        return new referralResumeInfo_resultTupleScheme();
      }
    }

    private static class referralResumeInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<referralResumeInfo_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, referralResumeInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, referralResumeInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.profile.struct.ReferralUploadFiles();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSpecifyProfileResult_args implements org.apache.thrift.TBase<getSpecifyProfileResult_args, getSpecifyProfileResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSpecifyProfileResult_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSpecifyProfileResult_args");

    private static final org.apache.thrift.protocol.TField EMPLOYEE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SYNC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("syncId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSpecifyProfileResult_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSpecifyProfileResult_argsTupleSchemeFactory();

    public int employeeId; // required
    public  java.lang.String syncId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMPLOYEE_ID((short)1, "employeeId"),
      SYNC_ID((short)2, "syncId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMPLOYEE_ID
            return EMPLOYEE_ID;
          case 2: // SYNC_ID
            return SYNC_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EMPLOYEEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMPLOYEE_ID, new org.apache.thrift.meta_data.FieldMetaData("employeeId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SYNC_ID, new org.apache.thrift.meta_data.FieldMetaData("syncId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSpecifyProfileResult_args.class, metaDataMap);
    }

    public getSpecifyProfileResult_args() {
    }

    public getSpecifyProfileResult_args(
      int employeeId,
      java.lang.String syncId)
    {
      this();
      this.employeeId = employeeId;
      setEmployeeIdIsSet(true);
      this.syncId = syncId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSpecifyProfileResult_args(getSpecifyProfileResult_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.employeeId = other.employeeId;
      if (other.isSetSyncId()) {
        this.syncId = other.syncId;
      }
    }

    public getSpecifyProfileResult_args deepCopy() {
      return new getSpecifyProfileResult_args(this);
    }


    public void clear() {
      setEmployeeIdIsSet(false);
      this.employeeId = 0;
      this.syncId = null;
    }

    public int getEmployeeId() {
      return this.employeeId;
    }

    public getSpecifyProfileResult_args setEmployeeId(int employeeId) {
      this.employeeId = employeeId;
      setEmployeeIdIsSet(true);
      return this;
    }

    public void unsetEmployeeId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID);
    }

    /** Returns true if field employeeId is set (has been assigned a value) and false otherwise */
    public boolean isSetEmployeeId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID);
    }

    public void setEmployeeIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID, value);
    }


    public java.lang.String getSyncId() {
      return this.syncId;
    }

    public getSpecifyProfileResult_args setSyncId( java.lang.String syncId) {
      this.syncId = syncId;
      return this;
    }

    public void unsetSyncId() {
      this.syncId = null;
    }

    /** Returns true if field syncId is set (has been assigned a value) and false otherwise */
    public boolean isSetSyncId() {
      return this.syncId != null;
    }

    public void setSyncIdIsSet(boolean value) {
      if (!value) {
        this.syncId = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case EMPLOYEE_ID:
        if (value == null) {
          unsetEmployeeId();
        } else {
          setEmployeeId((java.lang.Integer)value);
        }
        break;

      case SYNC_ID:
        if (value == null) {
          unsetSyncId();
        } else {
          setSyncId((java.lang.String)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EMPLOYEE_ID:
        return getEmployeeId();

      case SYNC_ID:
        return getSyncId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EMPLOYEE_ID:
        return isSetEmployeeId();
      case SYNC_ID:
        return isSetSyncId();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSpecifyProfileResult_args)
        return this.equals((getSpecifyProfileResult_args)that);
      return false;
    }

    public boolean equals(getSpecifyProfileResult_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_employeeId = true;
      boolean that_present_employeeId = true;
      if (this_present_employeeId || that_present_employeeId) {
        if (!(this_present_employeeId && that_present_employeeId))
          return false;
        if (this.employeeId != that.employeeId)
          return false;
      }

      boolean this_present_syncId = true && this.isSetSyncId();
      boolean that_present_syncId = true && that.isSetSyncId();
      if (this_present_syncId || that_present_syncId) {
        if (!(this_present_syncId && that_present_syncId))
          return false;
        if (!this.syncId.equals(that.syncId))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + employeeId;

      hashCode = hashCode * 8191 + ((isSetSyncId()) ? 131071 : 524287);
      if (isSetSyncId())
        hashCode = hashCode * 8191 + syncId.hashCode();

      return hashCode;
    }


    public int compareTo(getSpecifyProfileResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEmployeeId()).compareTo(other.isSetEmployeeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmployeeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeId, other.employeeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSyncId()).compareTo(other.isSetSyncId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSyncId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.syncId, other.syncId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSpecifyProfileResult_args(");
      boolean first = true;

      sb.append("employeeId:");
      sb.append(this.employeeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("syncId:");
      if (this.syncId == null) {
        sb.append("null");
      } else {
        sb.append(this.syncId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSpecifyProfileResult_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSpecifyProfileResult_argsStandardScheme getScheme() {
        return new getSpecifyProfileResult_argsStandardScheme();
      }
    }

    private static class getSpecifyProfileResult_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSpecifyProfileResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSpecifyProfileResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // EMPLOYEE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.employeeId = iprot.readI32();
                struct.setEmployeeIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SYNC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.syncId = iprot.readString();
                struct.setSyncIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSpecifyProfileResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EMPLOYEE_ID_FIELD_DESC);
        oprot.writeI32(struct.employeeId);
        oprot.writeFieldEnd();
        if (struct.syncId != null) {
          oprot.writeFieldBegin(SYNC_ID_FIELD_DESC);
          oprot.writeString(struct.syncId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSpecifyProfileResult_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSpecifyProfileResult_argsTupleScheme getScheme() {
        return new getSpecifyProfileResult_argsTupleScheme();
      }
    }

    private static class getSpecifyProfileResult_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSpecifyProfileResult_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, getSpecifyProfileResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEmployeeId()) {
          optionals.set(0);
        }
        if (struct.isSetSyncId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEmployeeId()) {
          oprot.writeI32(struct.employeeId);
        }
        if (struct.isSetSyncId()) {
          oprot.writeString(struct.syncId);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, getSpecifyProfileResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.employeeId = iprot.readI32();
          struct.setEmployeeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.syncId = iprot.readString();
          struct.setSyncIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSpecifyProfileResult_result implements org.apache.thrift.TBase<getSpecifyProfileResult_result, getSpecifyProfileResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSpecifyProfileResult_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSpecifyProfileResult_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSpecifyProfileResult_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSpecifyProfileResult_resultTupleSchemeFactory();

    public boolean success; // required
    public  com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSpecifyProfileResult_result.class, metaDataMap);
    }

    public getSpecifyProfileResult_result() {
    }

    public getSpecifyProfileResult_result(
      boolean success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSpecifyProfileResult_result(getSpecifyProfileResult_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public getSpecifyProfileResult_result deepCopy() {
      return new getSpecifyProfileResult_result(this);
    }


    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public getSpecifyProfileResult_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }


    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public getSpecifyProfileResult_result setE( com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSpecifyProfileResult_result)
        return this.equals((getSpecifyProfileResult_result)that);
      return false;
    }

    public boolean equals(getSpecifyProfileResult_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }


    public int compareTo(getSpecifyProfileResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSpecifyProfileResult_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSpecifyProfileResult_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSpecifyProfileResult_resultStandardScheme getScheme() {
        return new getSpecifyProfileResult_resultStandardScheme();
      }
    }

    private static class getSpecifyProfileResult_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSpecifyProfileResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSpecifyProfileResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSpecifyProfileResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSpecifyProfileResult_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSpecifyProfileResult_resultTupleScheme getScheme() {
        return new getSpecifyProfileResult_resultTupleScheme();
      }
    }

    private static class getSpecifyProfileResult_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSpecifyProfileResult_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, getSpecifyProfileResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, getSpecifyProfileResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkResult_args implements org.apache.thrift.TBase<checkResult_args, checkResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkResult_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkResult_args");

    private static final org.apache.thrift.protocol.TField EMPLOYEE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkResult_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkResult_argsTupleSchemeFactory();

    public int employeeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMPLOYEE_ID((short)1, "employeeId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMPLOYEE_ID
            return EMPLOYEE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EMPLOYEEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMPLOYEE_ID, new org.apache.thrift.meta_data.FieldMetaData("employeeId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkResult_args.class, metaDataMap);
    }

    public checkResult_args() {
    }

    public checkResult_args(
      int employeeId)
    {
      this();
      this.employeeId = employeeId;
      setEmployeeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkResult_args(checkResult_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.employeeId = other.employeeId;
    }

    public checkResult_args deepCopy() {
      return new checkResult_args(this);
    }


    public void clear() {
      setEmployeeIdIsSet(false);
      this.employeeId = 0;
    }

    public int getEmployeeId() {
      return this.employeeId;
    }

    public checkResult_args setEmployeeId(int employeeId) {
      this.employeeId = employeeId;
      setEmployeeIdIsSet(true);
      return this;
    }

    public void unsetEmployeeId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID);
    }

    /** Returns true if field employeeId is set (has been assigned a value) and false otherwise */
    public boolean isSetEmployeeId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID);
    }

    public void setEmployeeIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case EMPLOYEE_ID:
        if (value == null) {
          unsetEmployeeId();
        } else {
          setEmployeeId((java.lang.Integer)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EMPLOYEE_ID:
        return getEmployeeId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EMPLOYEE_ID:
        return isSetEmployeeId();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof checkResult_args)
        return this.equals((checkResult_args)that);
      return false;
    }

    public boolean equals(checkResult_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_employeeId = true;
      boolean that_present_employeeId = true;
      if (this_present_employeeId || that_present_employeeId) {
        if (!(this_present_employeeId && that_present_employeeId))
          return false;
        if (this.employeeId != that.employeeId)
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + employeeId;

      return hashCode;
    }


    public int compareTo(checkResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEmployeeId()).compareTo(other.isSetEmployeeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmployeeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeId, other.employeeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkResult_args(");
      boolean first = true;

      sb.append("employeeId:");
      sb.append(this.employeeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkResult_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkResult_argsStandardScheme getScheme() {
        return new checkResult_argsStandardScheme();
      }
    }

    private static class checkResult_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // EMPLOYEE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.employeeId = iprot.readI32();
                struct.setEmployeeIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EMPLOYEE_ID_FIELD_DESC);
        oprot.writeI32(struct.employeeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkResult_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkResult_argsTupleScheme getScheme() {
        return new checkResult_argsTupleScheme();
      }
    }

    private static class checkResult_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkResult_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, checkResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEmployeeId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEmployeeId()) {
          oprot.writeI32(struct.employeeId);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, checkResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.employeeId = iprot.readI32();
          struct.setEmployeeIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkResult_result implements org.apache.thrift.TBase<checkResult_result, checkResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkResult_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkResult_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkResult_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkResult_resultTupleSchemeFactory();

    public  com.moseeker.thrift.gen.profile.struct.ProfileParseResult success; // required
    public  com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */

      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */

      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.profile.struct.ProfileParseResult.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkResult_result.class, metaDataMap);
    }

    public checkResult_result() {
    }

    public checkResult_result(
      com.moseeker.thrift.gen.profile.struct.ProfileParseResult success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkResult_result(checkResult_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.profile.struct.ProfileParseResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public checkResult_result deepCopy() {
      return new checkResult_result(this);
    }


    public void clear() {
      this.success = null;
      this.e = null;
    }


    public com.moseeker.thrift.gen.profile.struct.ProfileParseResult getSuccess() {
      return this.success;
    }

    public checkResult_result setSuccess( com.moseeker.thrift.gen.profile.struct.ProfileParseResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }


    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public checkResult_result setE( com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field,  java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.profile.struct.ProfileParseResult)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }


    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof checkResult_result)
        return this.equals((checkResult_result)that);
      return false;
    }

    public boolean equals(checkResult_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }


    public int compareTo(checkResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }


    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkResult_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkResult_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkResult_resultStandardScheme getScheme() {
        return new checkResult_resultStandardScheme();
      }
    }

    private static class checkResult_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.profile.struct.ProfileParseResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkResult_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkResult_resultTupleScheme getScheme() {
        return new checkResult_resultTupleScheme();
      }
    }

    private static class checkResult_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkResult_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, checkResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, checkResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.profile.struct.ProfileParseResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
