/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.dictdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-03-20")
public class DictIndustryTypeDO implements org.apache.thrift.TBase<DictIndustryTypeDO, DictIndustryTypeDO._Fields>, java.io.Serializable, Cloneable, Comparable<DictIndustryTypeDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DictIndustryTypeDO");

  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COMPANY_IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("companyImg", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField JOB_IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("jobImg", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TEAM_IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("teamImg", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PC_IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("pcImg", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DictIndustryTypeDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DictIndustryTypeDOTupleSchemeFactory();

  public int code; // optional
  public java.lang.String name; // optional
  public java.lang.String companyImg; // optional
  public java.lang.String jobImg; // optional
  public java.lang.String teamImg; // optional
  public java.lang.String pcImg; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CODE((short)1, "code"),
    NAME((short)2, "name"),
    COMPANY_IMG((short)3, "companyImg"),
    JOB_IMG((short)4, "jobImg"),
    TEAM_IMG((short)5, "teamImg"),
    PC_IMG((short)6, "pcImg");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CODE
          return CODE;
        case 2: // NAME
          return NAME;
        case 3: // COMPANY_IMG
          return COMPANY_IMG;
        case 4: // JOB_IMG
          return JOB_IMG;
        case 5: // TEAM_IMG
          return TEAM_IMG;
        case 6: // PC_IMG
          return PC_IMG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CODE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CODE,_Fields.NAME,_Fields.COMPANY_IMG,_Fields.JOB_IMG,_Fields.TEAM_IMG,_Fields.PC_IMG};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY_IMG, new org.apache.thrift.meta_data.FieldMetaData("companyImg", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_IMG, new org.apache.thrift.meta_data.FieldMetaData("jobImg", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEAM_IMG, new org.apache.thrift.meta_data.FieldMetaData("teamImg", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PC_IMG, new org.apache.thrift.meta_data.FieldMetaData("pcImg", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DictIndustryTypeDO.class, metaDataMap);
  }

  public DictIndustryTypeDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DictIndustryTypeDO(DictIndustryTypeDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.code = other.code;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetCompanyImg()) {
      this.companyImg = other.companyImg;
    }
    if (other.isSetJobImg()) {
      this.jobImg = other.jobImg;
    }
    if (other.isSetTeamImg()) {
      this.teamImg = other.teamImg;
    }
    if (other.isSetPcImg()) {
      this.pcImg = other.pcImg;
    }
  }

  public DictIndustryTypeDO deepCopy() {
    return new DictIndustryTypeDO(this);
  }

  @Override
  public void clear() {
    setCodeIsSet(false);
    this.code = 0;
    this.name = null;
    this.companyImg = null;
    this.jobImg = null;
    this.teamImg = null;
    this.pcImg = null;
  }

  public int getCode() {
    return this.code;
  }

  public DictIndustryTypeDO setCode(int code) {
    this.code = code;
    setCodeIsSet(true);
    return this;
  }

  public void unsetCode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CODE_ISSET_ID);
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CODE_ISSET_ID);
  }

  public void setCodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CODE_ISSET_ID, value);
  }

  public java.lang.String getName() {
    return this.name;
  }

  public DictIndustryTypeDO setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public java.lang.String getCompanyImg() {
    return this.companyImg;
  }

  public DictIndustryTypeDO setCompanyImg(java.lang.String companyImg) {
    this.companyImg = companyImg;
    return this;
  }

  public void unsetCompanyImg() {
    this.companyImg = null;
  }

  /** Returns true if field companyImg is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyImg() {
    return this.companyImg != null;
  }

  public void setCompanyImgIsSet(boolean value) {
    if (!value) {
      this.companyImg = null;
    }
  }

  public java.lang.String getJobImg() {
    return this.jobImg;
  }

  public DictIndustryTypeDO setJobImg(java.lang.String jobImg) {
    this.jobImg = jobImg;
    return this;
  }

  public void unsetJobImg() {
    this.jobImg = null;
  }

  /** Returns true if field jobImg is set (has been assigned a value) and false otherwise */
  public boolean isSetJobImg() {
    return this.jobImg != null;
  }

  public void setJobImgIsSet(boolean value) {
    if (!value) {
      this.jobImg = null;
    }
  }

  public java.lang.String getTeamImg() {
    return this.teamImg;
  }

  public DictIndustryTypeDO setTeamImg(java.lang.String teamImg) {
    this.teamImg = teamImg;
    return this;
  }

  public void unsetTeamImg() {
    this.teamImg = null;
  }

  /** Returns true if field teamImg is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamImg() {
    return this.teamImg != null;
  }

  public void setTeamImgIsSet(boolean value) {
    if (!value) {
      this.teamImg = null;
    }
  }

  public java.lang.String getPcImg() {
    return this.pcImg;
  }

  public DictIndustryTypeDO setPcImg(java.lang.String pcImg) {
    this.pcImg = pcImg;
    return this;
  }

  public void unsetPcImg() {
    this.pcImg = null;
  }

  /** Returns true if field pcImg is set (has been assigned a value) and false otherwise */
  public boolean isSetPcImg() {
    return this.pcImg != null;
  }

  public void setPcImgIsSet(boolean value) {
    if (!value) {
      this.pcImg = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((java.lang.Integer)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((java.lang.String)value);
        }
        break;

      case COMPANY_IMG:
        if (value == null) {
          unsetCompanyImg();
        } else {
          setCompanyImg((java.lang.String)value);
        }
        break;

      case JOB_IMG:
        if (value == null) {
          unsetJobImg();
        } else {
          setJobImg((java.lang.String)value);
        }
        break;

      case TEAM_IMG:
        if (value == null) {
          unsetTeamImg();
        } else {
          setTeamImg((java.lang.String)value);
        }
        break;

      case PC_IMG:
        if (value == null) {
          unsetPcImg();
        } else {
          setPcImg((java.lang.String)value);
        }
        break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
      case CODE:
        return getCode();

      case NAME:
        return getName();

      case COMPANY_IMG:
        return getCompanyImg();

      case JOB_IMG:
        return getJobImg();

      case TEAM_IMG:
        return getTeamImg();

      case PC_IMG:
        return getPcImg();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
      case CODE:
        return isSetCode();
      case NAME:
        return isSetName();
      case COMPANY_IMG:
        return isSetCompanyImg();
      case JOB_IMG:
        return isSetJobImg();
      case TEAM_IMG:
        return isSetTeamImg();
      case PC_IMG:
        return isSetPcImg();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof DictIndustryTypeDO)
      return this.equals((DictIndustryTypeDO)that);
    return false;
  }

  public boolean equals(DictIndustryTypeDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_code = true && this.isSetCode();
    boolean that_present_code = true && that.isSetCode();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (this.code != that.code)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_companyImg = true && this.isSetCompanyImg();
    boolean that_present_companyImg = true && that.isSetCompanyImg();
    if (this_present_companyImg || that_present_companyImg) {
      if (!(this_present_companyImg && that_present_companyImg))
        return false;
      if (!this.companyImg.equals(that.companyImg))
        return false;
    }

    boolean this_present_jobImg = true && this.isSetJobImg();
    boolean that_present_jobImg = true && that.isSetJobImg();
    if (this_present_jobImg || that_present_jobImg) {
      if (!(this_present_jobImg && that_present_jobImg))
        return false;
      if (!this.jobImg.equals(that.jobImg))
        return false;
    }

    boolean this_present_teamImg = true && this.isSetTeamImg();
    boolean that_present_teamImg = true && that.isSetTeamImg();
    if (this_present_teamImg || that_present_teamImg) {
      if (!(this_present_teamImg && that_present_teamImg))
        return false;
      if (!this.teamImg.equals(that.teamImg))
        return false;
    }

    boolean this_present_pcImg = true && this.isSetPcImg();
    boolean that_present_pcImg = true && that.isSetPcImg();
    if (this_present_pcImg || that_present_pcImg) {
      if (!(this_present_pcImg && that_present_pcImg))
        return false;
      if (!this.pcImg.equals(that.pcImg))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCode()) ? 131071 : 524287);
    if (isSetCode())
      hashCode = hashCode * 8191 + code;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompanyImg()) ? 131071 : 524287);
    if (isSetCompanyImg())
      hashCode = hashCode * 8191 + companyImg.hashCode();

    hashCode = hashCode * 8191 + ((isSetJobImg()) ? 131071 : 524287);
    if (isSetJobImg())
      hashCode = hashCode * 8191 + jobImg.hashCode();

    hashCode = hashCode * 8191 + ((isSetTeamImg()) ? 131071 : 524287);
    if (isSetTeamImg())
      hashCode = hashCode * 8191 + teamImg.hashCode();

    hashCode = hashCode * 8191 + ((isSetPcImg()) ? 131071 : 524287);
    if (isSetPcImg())
      hashCode = hashCode * 8191 + pcImg.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(DictIndustryTypeDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompanyImg()).compareTo(other.isSetCompanyImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyImg, other.companyImg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJobImg()).compareTo(other.isSetJobImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobImg, other.jobImg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTeamImg()).compareTo(other.isSetTeamImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamImg, other.teamImg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPcImg()).compareTo(other.isSetPcImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPcImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pcImg, other.pcImg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("DictIndustryTypeDO(");
    boolean first = true;

    if (isSetCode()) {
      sb.append("code:");
      sb.append(this.code);
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetCompanyImg()) {
      if (!first) sb.append(", ");
      sb.append("companyImg:");
      if (this.companyImg == null) {
        sb.append("null");
      } else {
        sb.append(this.companyImg);
      }
      first = false;
    }
    if (isSetJobImg()) {
      if (!first) sb.append(", ");
      sb.append("jobImg:");
      if (this.jobImg == null) {
        sb.append("null");
      } else {
        sb.append(this.jobImg);
      }
      first = false;
    }
    if (isSetTeamImg()) {
      if (!first) sb.append(", ");
      sb.append("teamImg:");
      if (this.teamImg == null) {
        sb.append("null");
      } else {
        sb.append(this.teamImg);
      }
      first = false;
    }
    if (isSetPcImg()) {
      if (!first) sb.append(", ");
      sb.append("pcImg:");
      if (this.pcImg == null) {
        sb.append("null");
      } else {
        sb.append(this.pcImg);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DictIndustryTypeDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DictIndustryTypeDOStandardScheme getScheme() {
      return new DictIndustryTypeDOStandardScheme();
    }
  }

  private static class DictIndustryTypeDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<DictIndustryTypeDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DictIndustryTypeDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.code = iprot.readI32();
              struct.setCodeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPANY_IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.companyImg = iprot.readString();
              struct.setCompanyImgIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // JOB_IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobImg = iprot.readString();
              struct.setJobImgIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TEAM_IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teamImg = iprot.readString();
              struct.setTeamImgIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PC_IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pcImg = iprot.readString();
              struct.setPcImgIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DictIndustryTypeDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetCode()) {
        oprot.writeFieldBegin(CODE_FIELD_DESC);
        oprot.writeI32(struct.code);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.companyImg != null) {
        if (struct.isSetCompanyImg()) {
          oprot.writeFieldBegin(COMPANY_IMG_FIELD_DESC);
          oprot.writeString(struct.companyImg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.jobImg != null) {
        if (struct.isSetJobImg()) {
          oprot.writeFieldBegin(JOB_IMG_FIELD_DESC);
          oprot.writeString(struct.jobImg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.teamImg != null) {
        if (struct.isSetTeamImg()) {
          oprot.writeFieldBegin(TEAM_IMG_FIELD_DESC);
          oprot.writeString(struct.teamImg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pcImg != null) {
        if (struct.isSetPcImg()) {
          oprot.writeFieldBegin(PC_IMG_FIELD_DESC);
          oprot.writeString(struct.pcImg);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DictIndustryTypeDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DictIndustryTypeDOTupleScheme getScheme() {
      return new DictIndustryTypeDOTupleScheme();
    }
  }

  private static class DictIndustryTypeDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<DictIndustryTypeDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DictIndustryTypeDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCode()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetCompanyImg()) {
        optionals.set(2);
      }
      if (struct.isSetJobImg()) {
        optionals.set(3);
      }
      if (struct.isSetTeamImg()) {
        optionals.set(4);
      }
      if (struct.isSetPcImg()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetCode()) {
        oprot.writeI32(struct.code);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetCompanyImg()) {
        oprot.writeString(struct.companyImg);
      }
      if (struct.isSetJobImg()) {
        oprot.writeString(struct.jobImg);
      }
      if (struct.isSetTeamImg()) {
        oprot.writeString(struct.teamImg);
      }
      if (struct.isSetPcImg()) {
        oprot.writeString(struct.pcImg);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DictIndustryTypeDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.code = iprot.readI32();
        struct.setCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.companyImg = iprot.readString();
        struct.setCompanyImgIsSet(true);
      }
      if (incoming.get(3)) {
        struct.jobImg = iprot.readString();
        struct.setJobImgIsSet(true);
      }
      if (incoming.get(4)) {
        struct.teamImg = iprot.readString();
        struct.setTeamImgIsSet(true);
      }
      if (incoming.get(5)) {
        struct.pcImg = iprot.readString();
        struct.setPcImgIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

