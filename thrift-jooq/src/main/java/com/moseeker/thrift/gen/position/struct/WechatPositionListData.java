/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.position.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-09-11")
public class WechatPositionListData implements org.apache.thrift.TBase<WechatPositionListData, WechatPositionListData._Fields>, java.io.Serializable, Cloneable, Comparable<WechatPositionListData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WechatPositionListData");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SALARY_TOP_FIELD_DESC = new org.apache.thrift.protocol.TField("salary_top", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SALARY_BOTTOM_FIELD_DESC = new org.apache.thrift.protocol.TField("salary_bottom", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PUBLISH_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("publish_date", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("department", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField VISITNUM_FIELD_DESC = new org.apache.thrift.protocol.TField("visitnum", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField IN_HB_FIELD_DESC = new org.apache.thrift.protocol.TField("in_hb", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField COMPANY_ABBR_FIELD_DESC = new org.apache.thrift.protocol.TField("company_abbr", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField COMPANY_LOGO_FIELD_DESC = new org.apache.thrift.protocol.TField("company_logo", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField COMPANY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("company_name", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField IS_NEW_FIELD_DESC = new org.apache.thrift.protocol.TField("is_new", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField PUBLISHER_FIELD_DESC = new org.apache.thrift.protocol.TField("publisher", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField ACCOUNTABILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("accountabilities", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField TOTAL_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("total_num", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField CANDIDATE_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("candidate_source", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField REQUIREMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("requirement", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField CITY_ENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("city_ename", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField IS_REFERRAL_FIELD_DESC = new org.apache.thrift.protocol.TField("is_referral", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField EMPLOYMENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("employment_type", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField EMPLOYMENT_TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("employment_type_name", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField PUBLISHER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("publisher_name", org.apache.thrift.protocol.TType.STRING, (short)26);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WechatPositionListDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WechatPositionListDataTupleSchemeFactory();

  public int id; // optional
  public String title; // optional
  public int salary_top; // optional
  public int salary_bottom; // optional
  public String publish_date; // optional
  public String department; // optional
  public int visitnum; // optional
  public boolean in_hb; // optional
  public int count; // optional
  public String company_abbr; // optional
  public String company_logo; // optional
  public String company_name; // optional
  public boolean is_new; // optional
  public String city; // optional
  public int priority; // optional
  public int publisher; // optional
  public String accountabilities; // optional
  public int total_num; // optional
  public int candidate_source; // optional
  public String requirement; // optional
  public String city_ename; // optional
  public int is_referral; // optional
  public int employment_type; // optional
  public String employment_type_name; // optional
  public String publisher_name; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TITLE((short)2, "title"),
    SALARY_TOP((short)4, "salary_top"),
    SALARY_BOTTOM((short)5, "salary_bottom"),
    PUBLISH_DATE((short)6, "publish_date"),
    DEPARTMENT((short)7, "department"),
    VISITNUM((short)8, "visitnum"),
    IN_HB((short)9, "in_hb"),
    COUNT((short)10, "count"),
    COMPANY_ABBR((short)11, "company_abbr"),
    COMPANY_LOGO((short)12, "company_logo"),
    COMPANY_NAME((short)13, "company_name"),
    IS_NEW((short)14, "is_new"),
    CITY((short)15, "city"),
    PRIORITY((short)16, "priority"),
    PUBLISHER((short)17, "publisher"),
    ACCOUNTABILITIES((short)18, "accountabilities"),
    TOTAL_NUM((short)19, "total_num"),
    CANDIDATE_SOURCE((short)20, "candidate_source"),
    REQUIREMENT((short)21, "requirement"),
    CITY_ENAME((short)22, "city_ename"),
    IS_REFERRAL((short)23, "is_referral"),
    EMPLOYMENT_TYPE((short)24, "employment_type"),
    EMPLOYMENT_TYPE_NAME((short)25, "employment_type_name"),
    PUBLISHER_NAME((short)26, "publisher_name");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TITLE
          return TITLE;
        case 4: // SALARY_TOP
          return SALARY_TOP;
        case 5: // SALARY_BOTTOM
          return SALARY_BOTTOM;
        case 6: // PUBLISH_DATE
          return PUBLISH_DATE;
        case 7: // DEPARTMENT
          return DEPARTMENT;
        case 8: // VISITNUM
          return VISITNUM;
        case 9: // IN_HB
          return IN_HB;
        case 10: // COUNT
          return COUNT;
        case 11: // COMPANY_ABBR
          return COMPANY_ABBR;
        case 12: // COMPANY_LOGO
          return COMPANY_LOGO;
        case 13: // COMPANY_NAME
          return COMPANY_NAME;
        case 14: // IS_NEW
          return IS_NEW;
        case 15: // CITY
          return CITY;
        case 16: // PRIORITY
          return PRIORITY;
        case 17: // PUBLISHER
          return PUBLISHER;
        case 18: // ACCOUNTABILITIES
          return ACCOUNTABILITIES;
        case 19: // TOTAL_NUM
          return TOTAL_NUM;
        case 20: // CANDIDATE_SOURCE
          return CANDIDATE_SOURCE;
        case 21: // REQUIREMENT
          return REQUIREMENT;
        case 22: // CITY_ENAME
          return CITY_ENAME;
        case 23: // IS_REFERRAL
          return IS_REFERRAL;
        case 24: // EMPLOYMENT_TYPE
          return EMPLOYMENT_TYPE;
        case 25: // EMPLOYMENT_TYPE_NAME
          return EMPLOYMENT_TYPE_NAME;
        case 26: // PUBLISHER_NAME
          return PUBLISHER_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __SALARY_TOP_ISSET_ID = 1;
  private static final int __SALARY_BOTTOM_ISSET_ID = 2;
  private static final int __VISITNUM_ISSET_ID = 3;
  private static final int __IN_HB_ISSET_ID = 4;
  private static final int __COUNT_ISSET_ID = 5;
  private static final int __IS_NEW_ISSET_ID = 6;
  private static final int __PRIORITY_ISSET_ID = 7;
  private static final int __PUBLISHER_ISSET_ID = 8;
  private static final int __TOTAL_NUM_ISSET_ID = 9;
  private static final int __CANDIDATE_SOURCE_ISSET_ID = 10;
  private static final int __IS_REFERRAL_ISSET_ID = 11;
  private static final int __EMPLOYMENT_TYPE_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.TITLE,_Fields.SALARY_TOP,_Fields.SALARY_BOTTOM,_Fields.PUBLISH_DATE,_Fields.DEPARTMENT,_Fields.VISITNUM,_Fields.IN_HB,_Fields.COUNT,_Fields.COMPANY_ABBR,_Fields.COMPANY_LOGO,_Fields.COMPANY_NAME,_Fields.IS_NEW,_Fields.CITY,_Fields.PRIORITY,_Fields.PUBLISHER,_Fields.ACCOUNTABILITIES,_Fields.TOTAL_NUM,_Fields.CANDIDATE_SOURCE,_Fields.REQUIREMENT,_Fields.CITY_ENAME,_Fields.IS_REFERRAL,_Fields.EMPLOYMENT_TYPE,_Fields.EMPLOYMENT_TYPE_NAME,_Fields.PUBLISHER_NAME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SALARY_TOP, new org.apache.thrift.meta_data.FieldMetaData("salary_top", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SALARY_BOTTOM, new org.apache.thrift.meta_data.FieldMetaData("salary_bottom", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PUBLISH_DATE, new org.apache.thrift.meta_data.FieldMetaData("publish_date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("department", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VISITNUM, new org.apache.thrift.meta_data.FieldMetaData("visitnum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IN_HB, new org.apache.thrift.meta_data.FieldMetaData("in_hb", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPANY_ABBR, new org.apache.thrift.meta_data.FieldMetaData("company_abbr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY_LOGO, new org.apache.thrift.meta_data.FieldMetaData("company_logo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY_NAME, new org.apache.thrift.meta_data.FieldMetaData("company_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_NEW, new org.apache.thrift.meta_data.FieldMetaData("is_new", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PUBLISHER, new org.apache.thrift.meta_data.FieldMetaData("publisher", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCOUNTABILITIES, new org.apache.thrift.meta_data.FieldMetaData("accountabilities", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_NUM, new org.apache.thrift.meta_data.FieldMetaData("total_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CANDIDATE_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("candidate_source", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUIREMENT, new org.apache.thrift.meta_data.FieldMetaData("requirement", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY_ENAME, new org.apache.thrift.meta_data.FieldMetaData("city_ename", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_REFERRAL, new org.apache.thrift.meta_data.FieldMetaData("is_referral", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EMPLOYMENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("employment_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EMPLOYMENT_TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("employment_type_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUBLISHER_NAME, new org.apache.thrift.meta_data.FieldMetaData("publisher_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WechatPositionListData.class, metaDataMap);
  }

  public WechatPositionListData() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WechatPositionListData(WechatPositionListData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    this.salary_top = other.salary_top;
    this.salary_bottom = other.salary_bottom;
    if (other.isSetPublish_date()) {
      this.publish_date = other.publish_date;
    }
    if (other.isSetDepartment()) {
      this.department = other.department;
    }
    this.visitnum = other.visitnum;
    this.in_hb = other.in_hb;
    this.count = other.count;
    if (other.isSetCompany_abbr()) {
      this.company_abbr = other.company_abbr;
    }
    if (other.isSetCompany_logo()) {
      this.company_logo = other.company_logo;
    }
    if (other.isSetCompany_name()) {
      this.company_name = other.company_name;
    }
    this.is_new = other.is_new;
    if (other.isSetCity()) {
      this.city = other.city;
    }
    this.priority = other.priority;
    this.publisher = other.publisher;
    if (other.isSetAccountabilities()) {
      this.accountabilities = other.accountabilities;
    }
    this.total_num = other.total_num;
    this.candidate_source = other.candidate_source;
    if (other.isSetRequirement()) {
      this.requirement = other.requirement;
    }
    if (other.isSetCity_ename()) {
      this.city_ename = other.city_ename;
    }
    this.is_referral = other.is_referral;
    this.employment_type = other.employment_type;
    if (other.isSetEmployment_type_name()) {
      this.employment_type_name = other.employment_type_name;
    }
    if (other.isSetPublisher_name()) {
      this.publisher_name = other.publisher_name;
    }
  }

  public WechatPositionListData deepCopy() {
    return new WechatPositionListData(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.title = null;
    setSalary_topIsSet(false);
    this.salary_top = 0;
    setSalary_bottomIsSet(false);
    this.salary_bottom = 0;
    this.publish_date = null;
    this.department = null;
    setVisitnumIsSet(false);
    this.visitnum = 0;
    setIn_hbIsSet(false);
    this.in_hb = false;
    setCountIsSet(false);
    this.count = 0;
    this.company_abbr = null;
    this.company_logo = null;
    this.company_name = null;
    setIs_newIsSet(false);
    this.is_new = false;
    this.city = null;
    setPriorityIsSet(false);
    this.priority = 0;
    setPublisherIsSet(false);
    this.publisher = 0;
    this.accountabilities = null;
    setTotal_numIsSet(false);
    this.total_num = 0;
    setCandidate_sourceIsSet(false);
    this.candidate_source = 0;
    this.requirement = null;
    this.city_ename = null;
    setIs_referralIsSet(false);
    this.is_referral = 0;
    setEmployment_typeIsSet(false);
    this.employment_type = 0;
    this.employment_type_name = null;
    this.publisher_name = null;
  }

  public int getId() {
    return this.id;
  }

  public WechatPositionListData setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public WechatPositionListData setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public int getSalary_top() {
    return this.salary_top;
  }

  public WechatPositionListData setSalary_top(int salary_top) {
    this.salary_top = salary_top;
    setSalary_topIsSet(true);
    return this;
  }

  public void unsetSalary_top() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SALARY_TOP_ISSET_ID);
  }

  /** Returns true if field salary_top is set (has been assigned a value) and false otherwise */
  public boolean isSetSalary_top() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SALARY_TOP_ISSET_ID);
  }

  public void setSalary_topIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SALARY_TOP_ISSET_ID, value);
  }

  public int getSalary_bottom() {
    return this.salary_bottom;
  }

  public WechatPositionListData setSalary_bottom(int salary_bottom) {
    this.salary_bottom = salary_bottom;
    setSalary_bottomIsSet(true);
    return this;
  }

  public void unsetSalary_bottom() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SALARY_BOTTOM_ISSET_ID);
  }

  /** Returns true if field salary_bottom is set (has been assigned a value) and false otherwise */
  public boolean isSetSalary_bottom() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SALARY_BOTTOM_ISSET_ID);
  }

  public void setSalary_bottomIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SALARY_BOTTOM_ISSET_ID, value);
  }

  public String getPublish_date() {
    return this.publish_date;
  }

  public WechatPositionListData setPublish_date(String publish_date) {
    this.publish_date = publish_date;
    return this;
  }

  public void unsetPublish_date() {
    this.publish_date = null;
  }

  /** Returns true if field publish_date is set (has been assigned a value) and false otherwise */
  public boolean isSetPublish_date() {
    return this.publish_date != null;
  }

  public void setPublish_dateIsSet(boolean value) {
    if (!value) {
      this.publish_date = null;
    }
  }

  public String getDepartment() {
    return this.department;
  }

  public WechatPositionListData setDepartment(String department) {
    this.department = department;
    return this;
  }

  public void unsetDepartment() {
    this.department = null;
  }

  /** Returns true if field department is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartment() {
    return this.department != null;
  }

  public void setDepartmentIsSet(boolean value) {
    if (!value) {
      this.department = null;
    }
  }

  public int getVisitnum() {
    return this.visitnum;
  }

  public WechatPositionListData setVisitnum(int visitnum) {
    this.visitnum = visitnum;
    setVisitnumIsSet(true);
    return this;
  }

  public void unsetVisitnum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VISITNUM_ISSET_ID);
  }

  /** Returns true if field visitnum is set (has been assigned a value) and false otherwise */
  public boolean isSetVisitnum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VISITNUM_ISSET_ID);
  }

  public void setVisitnumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VISITNUM_ISSET_ID, value);
  }

  public boolean isIn_hb() {
    return this.in_hb;
  }

  public WechatPositionListData setIn_hb(boolean in_hb) {
    this.in_hb = in_hb;
    setIn_hbIsSet(true);
    return this;
  }

  public void unsetIn_hb() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IN_HB_ISSET_ID);
  }

  /** Returns true if field in_hb is set (has been assigned a value) and false otherwise */
  public boolean isSetIn_hb() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IN_HB_ISSET_ID);
  }

  public void setIn_hbIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IN_HB_ISSET_ID, value);
  }

  public int getCount() {
    return this.count;
  }

  public WechatPositionListData setCount(int count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public String getCompany_abbr() {
    return this.company_abbr;
  }

  public WechatPositionListData setCompany_abbr(String company_abbr) {
    this.company_abbr = company_abbr;
    return this;
  }

  public void unsetCompany_abbr() {
    this.company_abbr = null;
  }

  /** Returns true if field company_abbr is set (has been assigned a value) and false otherwise */
  public boolean isSetCompany_abbr() {
    return this.company_abbr != null;
  }

  public void setCompany_abbrIsSet(boolean value) {
    if (!value) {
      this.company_abbr = null;
    }
  }

  public String getCompany_logo() {
    return this.company_logo;
  }

  public WechatPositionListData setCompany_logo(String company_logo) {
    this.company_logo = company_logo;
    return this;
  }

  public void unsetCompany_logo() {
    this.company_logo = null;
  }

  /** Returns true if field company_logo is set (has been assigned a value) and false otherwise */
  public boolean isSetCompany_logo() {
    return this.company_logo != null;
  }

  public void setCompany_logoIsSet(boolean value) {
    if (!value) {
      this.company_logo = null;
    }
  }

  public String getCompany_name() {
    return this.company_name;
  }

  public WechatPositionListData setCompany_name(String company_name) {
    this.company_name = company_name;
    return this;
  }

  public void unsetCompany_name() {
    this.company_name = null;
  }

  /** Returns true if field company_name is set (has been assigned a value) and false otherwise */
  public boolean isSetCompany_name() {
    return this.company_name != null;
  }

  public void setCompany_nameIsSet(boolean value) {
    if (!value) {
      this.company_name = null;
    }
  }

  public boolean isIs_new() {
    return this.is_new;
  }

  public WechatPositionListData setIs_new(boolean is_new) {
    this.is_new = is_new;
    setIs_newIsSet(true);
    return this;
  }

  public void unsetIs_new() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_NEW_ISSET_ID);
  }

  /** Returns true if field is_new is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_new() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_NEW_ISSET_ID);
  }

  public void setIs_newIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_NEW_ISSET_ID, value);
  }

  public String getCity() {
    return this.city;
  }

  public WechatPositionListData setCity(String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public int getPriority() {
    return this.priority;
  }

  public WechatPositionListData setPriority(int priority) {
    this.priority = priority;
    setPriorityIsSet(true);
    return this;
  }

  public void unsetPriority() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  public void setPriorityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
  }

  public int getPublisher() {
    return this.publisher;
  }

  public WechatPositionListData setPublisher(int publisher) {
    this.publisher = publisher;
    setPublisherIsSet(true);
    return this;
  }

  public void unsetPublisher() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PUBLISHER_ISSET_ID);
  }

  /** Returns true if field publisher is set (has been assigned a value) and false otherwise */
  public boolean isSetPublisher() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PUBLISHER_ISSET_ID);
  }

  public void setPublisherIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PUBLISHER_ISSET_ID, value);
  }

  public String getAccountabilities() {
    return this.accountabilities;
  }

  public WechatPositionListData setAccountabilities(String accountabilities) {
    this.accountabilities = accountabilities;
    return this;
  }

  public void unsetAccountabilities() {
    this.accountabilities = null;
  }

  /** Returns true if field accountabilities is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountabilities() {
    return this.accountabilities != null;
  }

  public void setAccountabilitiesIsSet(boolean value) {
    if (!value) {
      this.accountabilities = null;
    }
  }

  public int getTotal_num() {
    return this.total_num;
  }

  public WechatPositionListData setTotal_num(int total_num) {
    this.total_num = total_num;
    setTotal_numIsSet(true);
    return this;
  }

  public void unsetTotal_num() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTAL_NUM_ISSET_ID);
  }

  /** Returns true if field total_num is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal_num() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTAL_NUM_ISSET_ID);
  }

  public void setTotal_numIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTAL_NUM_ISSET_ID, value);
  }

  public int getCandidate_source() {
    return this.candidate_source;
  }

  public WechatPositionListData setCandidate_source(int candidate_source) {
    this.candidate_source = candidate_source;
    setCandidate_sourceIsSet(true);
    return this;
  }

  public void unsetCandidate_source() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CANDIDATE_SOURCE_ISSET_ID);
  }

  /** Returns true if field candidate_source is set (has been assigned a value) and false otherwise */
  public boolean isSetCandidate_source() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CANDIDATE_SOURCE_ISSET_ID);
  }

  public void setCandidate_sourceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CANDIDATE_SOURCE_ISSET_ID, value);
  }

  public String getRequirement() {
    return this.requirement;
  }

  public WechatPositionListData setRequirement(String requirement) {
    this.requirement = requirement;
    return this;
  }

  public void unsetRequirement() {
    this.requirement = null;
  }

  /** Returns true if field requirement is set (has been assigned a value) and false otherwise */
  public boolean isSetRequirement() {
    return this.requirement != null;
  }

  public void setRequirementIsSet(boolean value) {
    if (!value) {
      this.requirement = null;
    }
  }

  public String getCity_ename() {
    return this.city_ename;
  }

  public WechatPositionListData setCity_ename(String city_ename) {
    this.city_ename = city_ename;
    return this;
  }

  public void unsetCity_ename() {
    this.city_ename = null;
  }

  /** Returns true if field city_ename is set (has been assigned a value) and false otherwise */
  public boolean isSetCity_ename() {
    return this.city_ename != null;
  }

  public void setCity_enameIsSet(boolean value) {
    if (!value) {
      this.city_ename = null;
    }
  }

  public int getIs_referral() {
    return this.is_referral;
  }

  public WechatPositionListData setIs_referral(int is_referral) {
    this.is_referral = is_referral;
    setIs_referralIsSet(true);
    return this;
  }

  public void unsetIs_referral() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_REFERRAL_ISSET_ID);
  }

  /** Returns true if field is_referral is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_referral() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_REFERRAL_ISSET_ID);
  }

  public void setIs_referralIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_REFERRAL_ISSET_ID, value);
  }

  public int getEmployment_type() {
    return this.employment_type;
  }

  public WechatPositionListData setEmployment_type(int employment_type) {
    this.employment_type = employment_type;
    setEmployment_typeIsSet(true);
    return this;
  }

  public void unsetEmployment_type() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMPLOYMENT_TYPE_ISSET_ID);
  }

  /** Returns true if field employment_type is set (has been assigned a value) and false otherwise */
  public boolean isSetEmployment_type() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMPLOYMENT_TYPE_ISSET_ID);
  }

  public void setEmployment_typeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMPLOYMENT_TYPE_ISSET_ID, value);
  }

  public String getEmployment_type_name() {
    return this.employment_type_name;
  }

  public WechatPositionListData setEmployment_type_name(String employment_type_name) {
    this.employment_type_name = employment_type_name;
    return this;
  }

  public void unsetEmployment_type_name() {
    this.employment_type_name = null;
  }

  /** Returns true if field employment_type_name is set (has been assigned a value) and false otherwise */
  public boolean isSetEmployment_type_name() {
    return this.employment_type_name != null;
  }

  public void setEmployment_type_nameIsSet(boolean value) {
    if (!value) {
      this.employment_type_name = null;
    }
  }

  public String getPublisher_name() {
    return this.publisher_name;
  }

  public WechatPositionListData setPublisher_name(String publisher_name) {
    this.publisher_name = publisher_name;
    return this;
  }

  public void unsetPublisher_name() {
    this.publisher_name = null;
  }

  /** Returns true if field publisher_name is set (has been assigned a value) and false otherwise */
  public boolean isSetPublisher_name() {
    return this.publisher_name != null;
  }

  public void setPublisher_nameIsSet(boolean value) {
    if (!value) {
      this.publisher_name = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case SALARY_TOP:
      if (value == null) {
        unsetSalary_top();
      } else {
        setSalary_top((Integer)value);
      }
      break;

    case SALARY_BOTTOM:
      if (value == null) {
        unsetSalary_bottom();
      } else {
        setSalary_bottom((Integer)value);
      }
      break;

    case PUBLISH_DATE:
      if (value == null) {
        unsetPublish_date();
      } else {
        setPublish_date((String)value);
      }
      break;

    case DEPARTMENT:
      if (value == null) {
        unsetDepartment();
      } else {
        setDepartment((String)value);
      }
      break;

    case VISITNUM:
      if (value == null) {
        unsetVisitnum();
      } else {
        setVisitnum((Integer)value);
      }
      break;

    case IN_HB:
      if (value == null) {
        unsetIn_hb();
      } else {
        setIn_hb((Boolean)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Integer)value);
      }
      break;

    case COMPANY_ABBR:
      if (value == null) {
        unsetCompany_abbr();
      } else {
        setCompany_abbr((String)value);
      }
      break;

    case COMPANY_LOGO:
      if (value == null) {
        unsetCompany_logo();
      } else {
        setCompany_logo((String)value);
      }
      break;

    case COMPANY_NAME:
      if (value == null) {
        unsetCompany_name();
      } else {
        setCompany_name((String)value);
      }
      break;

    case IS_NEW:
      if (value == null) {
        unsetIs_new();
      } else {
        setIs_new((Boolean)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((Integer)value);
      }
      break;

    case PUBLISHER:
      if (value == null) {
        unsetPublisher();
      } else {
        setPublisher((Integer)value);
      }
      break;

    case ACCOUNTABILITIES:
      if (value == null) {
        unsetAccountabilities();
      } else {
        setAccountabilities((String)value);
      }
      break;

    case TOTAL_NUM:
      if (value == null) {
        unsetTotal_num();
      } else {
        setTotal_num((Integer)value);
      }
      break;

    case CANDIDATE_SOURCE:
      if (value == null) {
        unsetCandidate_source();
      } else {
        setCandidate_source((Integer)value);
      }
      break;

    case REQUIREMENT:
      if (value == null) {
        unsetRequirement();
      } else {
        setRequirement((String)value);
      }
      break;

    case CITY_ENAME:
      if (value == null) {
        unsetCity_ename();
      } else {
        setCity_ename((String)value);
      }
      break;

    case IS_REFERRAL:
      if (value == null) {
        unsetIs_referral();
      } else {
        setIs_referral((Integer)value);
      }
      break;

    case EMPLOYMENT_TYPE:
      if (value == null) {
        unsetEmployment_type();
      } else {
        setEmployment_type((Integer)value);
      }
      break;

    case EMPLOYMENT_TYPE_NAME:
      if (value == null) {
        unsetEmployment_type_name();
      } else {
        setEmployment_type_name((String)value);
      }
      break;

    case PUBLISHER_NAME:
      if (value == null) {
        unsetPublisher_name();
      } else {
        setPublisher_name((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TITLE:
      return getTitle();

    case SALARY_TOP:
      return getSalary_top();

    case SALARY_BOTTOM:
      return getSalary_bottom();

    case PUBLISH_DATE:
      return getPublish_date();

    case DEPARTMENT:
      return getDepartment();

    case VISITNUM:
      return getVisitnum();

    case IN_HB:
      return isIn_hb();

    case COUNT:
      return getCount();

    case COMPANY_ABBR:
      return getCompany_abbr();

    case COMPANY_LOGO:
      return getCompany_logo();

    case COMPANY_NAME:
      return getCompany_name();

    case IS_NEW:
      return isIs_new();

    case CITY:
      return getCity();

    case PRIORITY:
      return getPriority();

    case PUBLISHER:
      return getPublisher();

    case ACCOUNTABILITIES:
      return getAccountabilities();

    case TOTAL_NUM:
      return getTotal_num();

    case CANDIDATE_SOURCE:
      return getCandidate_source();

    case REQUIREMENT:
      return getRequirement();

    case CITY_ENAME:
      return getCity_ename();

    case IS_REFERRAL:
      return getIs_referral();

    case EMPLOYMENT_TYPE:
      return getEmployment_type();

    case EMPLOYMENT_TYPE_NAME:
      return getEmployment_type_name();

    case PUBLISHER_NAME:
      return getPublisher_name();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TITLE:
      return isSetTitle();
    case SALARY_TOP:
      return isSetSalary_top();
    case SALARY_BOTTOM:
      return isSetSalary_bottom();
    case PUBLISH_DATE:
      return isSetPublish_date();
    case DEPARTMENT:
      return isSetDepartment();
    case VISITNUM:
      return isSetVisitnum();
    case IN_HB:
      return isSetIn_hb();
    case COUNT:
      return isSetCount();
    case COMPANY_ABBR:
      return isSetCompany_abbr();
    case COMPANY_LOGO:
      return isSetCompany_logo();
    case COMPANY_NAME:
      return isSetCompany_name();
    case IS_NEW:
      return isSetIs_new();
    case CITY:
      return isSetCity();
    case PRIORITY:
      return isSetPriority();
    case PUBLISHER:
      return isSetPublisher();
    case ACCOUNTABILITIES:
      return isSetAccountabilities();
    case TOTAL_NUM:
      return isSetTotal_num();
    case CANDIDATE_SOURCE:
      return isSetCandidate_source();
    case REQUIREMENT:
      return isSetRequirement();
    case CITY_ENAME:
      return isSetCity_ename();
    case IS_REFERRAL:
      return isSetIs_referral();
    case EMPLOYMENT_TYPE:
      return isSetEmployment_type();
    case EMPLOYMENT_TYPE_NAME:
      return isSetEmployment_type_name();
    case PUBLISHER_NAME:
      return isSetPublisher_name();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WechatPositionListData)
      return this.equals((WechatPositionListData)that);
    return false;
  }

  public boolean equals(WechatPositionListData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_salary_top = true && this.isSetSalary_top();
    boolean that_present_salary_top = true && that.isSetSalary_top();
    if (this_present_salary_top || that_present_salary_top) {
      if (!(this_present_salary_top && that_present_salary_top))
        return false;
      if (this.salary_top != that.salary_top)
        return false;
    }

    boolean this_present_salary_bottom = true && this.isSetSalary_bottom();
    boolean that_present_salary_bottom = true && that.isSetSalary_bottom();
    if (this_present_salary_bottom || that_present_salary_bottom) {
      if (!(this_present_salary_bottom && that_present_salary_bottom))
        return false;
      if (this.salary_bottom != that.salary_bottom)
        return false;
    }

    boolean this_present_publish_date = true && this.isSetPublish_date();
    boolean that_present_publish_date = true && that.isSetPublish_date();
    if (this_present_publish_date || that_present_publish_date) {
      if (!(this_present_publish_date && that_present_publish_date))
        return false;
      if (!this.publish_date.equals(that.publish_date))
        return false;
    }

    boolean this_present_department = true && this.isSetDepartment();
    boolean that_present_department = true && that.isSetDepartment();
    if (this_present_department || that_present_department) {
      if (!(this_present_department && that_present_department))
        return false;
      if (!this.department.equals(that.department))
        return false;
    }

    boolean this_present_visitnum = true && this.isSetVisitnum();
    boolean that_present_visitnum = true && that.isSetVisitnum();
    if (this_present_visitnum || that_present_visitnum) {
      if (!(this_present_visitnum && that_present_visitnum))
        return false;
      if (this.visitnum != that.visitnum)
        return false;
    }

    boolean this_present_in_hb = true && this.isSetIn_hb();
    boolean that_present_in_hb = true && that.isSetIn_hb();
    if (this_present_in_hb || that_present_in_hb) {
      if (!(this_present_in_hb && that_present_in_hb))
        return false;
      if (this.in_hb != that.in_hb)
        return false;
    }

    boolean this_present_count = true && this.isSetCount();
    boolean that_present_count = true && that.isSetCount();
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_company_abbr = true && this.isSetCompany_abbr();
    boolean that_present_company_abbr = true && that.isSetCompany_abbr();
    if (this_present_company_abbr || that_present_company_abbr) {
      if (!(this_present_company_abbr && that_present_company_abbr))
        return false;
      if (!this.company_abbr.equals(that.company_abbr))
        return false;
    }

    boolean this_present_company_logo = true && this.isSetCompany_logo();
    boolean that_present_company_logo = true && that.isSetCompany_logo();
    if (this_present_company_logo || that_present_company_logo) {
      if (!(this_present_company_logo && that_present_company_logo))
        return false;
      if (!this.company_logo.equals(that.company_logo))
        return false;
    }

    boolean this_present_company_name = true && this.isSetCompany_name();
    boolean that_present_company_name = true && that.isSetCompany_name();
    if (this_present_company_name || that_present_company_name) {
      if (!(this_present_company_name && that_present_company_name))
        return false;
      if (!this.company_name.equals(that.company_name))
        return false;
    }

    boolean this_present_is_new = true && this.isSetIs_new();
    boolean that_present_is_new = true && that.isSetIs_new();
    if (this_present_is_new || that_present_is_new) {
      if (!(this_present_is_new && that_present_is_new))
        return false;
      if (this.is_new != that.is_new)
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_priority = true && this.isSetPriority();
    boolean that_present_priority = true && that.isSetPriority();
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (this.priority != that.priority)
        return false;
    }

    boolean this_present_publisher = true && this.isSetPublisher();
    boolean that_present_publisher = true && that.isSetPublisher();
    if (this_present_publisher || that_present_publisher) {
      if (!(this_present_publisher && that_present_publisher))
        return false;
      if (this.publisher != that.publisher)
        return false;
    }

    boolean this_present_accountabilities = true && this.isSetAccountabilities();
    boolean that_present_accountabilities = true && that.isSetAccountabilities();
    if (this_present_accountabilities || that_present_accountabilities) {
      if (!(this_present_accountabilities && that_present_accountabilities))
        return false;
      if (!this.accountabilities.equals(that.accountabilities))
        return false;
    }

    boolean this_present_total_num = true && this.isSetTotal_num();
    boolean that_present_total_num = true && that.isSetTotal_num();
    if (this_present_total_num || that_present_total_num) {
      if (!(this_present_total_num && that_present_total_num))
        return false;
      if (this.total_num != that.total_num)
        return false;
    }

    boolean this_present_candidate_source = true && this.isSetCandidate_source();
    boolean that_present_candidate_source = true && that.isSetCandidate_source();
    if (this_present_candidate_source || that_present_candidate_source) {
      if (!(this_present_candidate_source && that_present_candidate_source))
        return false;
      if (this.candidate_source != that.candidate_source)
        return false;
    }

    boolean this_present_requirement = true && this.isSetRequirement();
    boolean that_present_requirement = true && that.isSetRequirement();
    if (this_present_requirement || that_present_requirement) {
      if (!(this_present_requirement && that_present_requirement))
        return false;
      if (!this.requirement.equals(that.requirement))
        return false;
    }

    boolean this_present_city_ename = true && this.isSetCity_ename();
    boolean that_present_city_ename = true && that.isSetCity_ename();
    if (this_present_city_ename || that_present_city_ename) {
      if (!(this_present_city_ename && that_present_city_ename))
        return false;
      if (!this.city_ename.equals(that.city_ename))
        return false;
    }

    boolean this_present_is_referral = true && this.isSetIs_referral();
    boolean that_present_is_referral = true && that.isSetIs_referral();
    if (this_present_is_referral || that_present_is_referral) {
      if (!(this_present_is_referral && that_present_is_referral))
        return false;
      if (this.is_referral != that.is_referral)
        return false;
    }

    boolean this_present_employment_type = true && this.isSetEmployment_type();
    boolean that_present_employment_type = true && that.isSetEmployment_type();
    if (this_present_employment_type || that_present_employment_type) {
      if (!(this_present_employment_type && that_present_employment_type))
        return false;
      if (this.employment_type != that.employment_type)
        return false;
    }

    boolean this_present_employment_type_name = true && this.isSetEmployment_type_name();
    boolean that_present_employment_type_name = true && that.isSetEmployment_type_name();
    if (this_present_employment_type_name || that_present_employment_type_name) {
      if (!(this_present_employment_type_name && that_present_employment_type_name))
        return false;
      if (!this.employment_type_name.equals(that.employment_type_name))
        return false;
    }

    boolean this_present_publisher_name = true && this.isSetPublisher_name();
    boolean that_present_publisher_name = true && that.isSetPublisher_name();
    if (this_present_publisher_name || that_present_publisher_name) {
      if (!(this_present_publisher_name && that_present_publisher_name))
        return false;
      if (!this.publisher_name.equals(that.publisher_name))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + ((isSetSalary_top()) ? 131071 : 524287);
    if (isSetSalary_top())
      hashCode = hashCode * 8191 + salary_top;

    hashCode = hashCode * 8191 + ((isSetSalary_bottom()) ? 131071 : 524287);
    if (isSetSalary_bottom())
      hashCode = hashCode * 8191 + salary_bottom;

    hashCode = hashCode * 8191 + ((isSetPublish_date()) ? 131071 : 524287);
    if (isSetPublish_date())
      hashCode = hashCode * 8191 + publish_date.hashCode();

    hashCode = hashCode * 8191 + ((isSetDepartment()) ? 131071 : 524287);
    if (isSetDepartment())
      hashCode = hashCode * 8191 + department.hashCode();

    hashCode = hashCode * 8191 + ((isSetVisitnum()) ? 131071 : 524287);
    if (isSetVisitnum())
      hashCode = hashCode * 8191 + visitnum;

    hashCode = hashCode * 8191 + ((isSetIn_hb()) ? 131071 : 524287);
    if (isSetIn_hb())
      hashCode = hashCode * 8191 + ((in_hb) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCount()) ? 131071 : 524287);
    if (isSetCount())
      hashCode = hashCode * 8191 + count;

    hashCode = hashCode * 8191 + ((isSetCompany_abbr()) ? 131071 : 524287);
    if (isSetCompany_abbr())
      hashCode = hashCode * 8191 + company_abbr.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompany_logo()) ? 131071 : 524287);
    if (isSetCompany_logo())
      hashCode = hashCode * 8191 + company_logo.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompany_name()) ? 131071 : 524287);
    if (isSetCompany_name())
      hashCode = hashCode * 8191 + company_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetIs_new()) ? 131071 : 524287);
    if (isSetIs_new())
      hashCode = hashCode * 8191 + ((is_new) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCity()) ? 131071 : 524287);
    if (isSetCity())
      hashCode = hashCode * 8191 + city.hashCode();

    hashCode = hashCode * 8191 + ((isSetPriority()) ? 131071 : 524287);
    if (isSetPriority())
      hashCode = hashCode * 8191 + priority;

    hashCode = hashCode * 8191 + ((isSetPublisher()) ? 131071 : 524287);
    if (isSetPublisher())
      hashCode = hashCode * 8191 + publisher;

    hashCode = hashCode * 8191 + ((isSetAccountabilities()) ? 131071 : 524287);
    if (isSetAccountabilities())
      hashCode = hashCode * 8191 + accountabilities.hashCode();

    hashCode = hashCode * 8191 + ((isSetTotal_num()) ? 131071 : 524287);
    if (isSetTotal_num())
      hashCode = hashCode * 8191 + total_num;

    hashCode = hashCode * 8191 + ((isSetCandidate_source()) ? 131071 : 524287);
    if (isSetCandidate_source())
      hashCode = hashCode * 8191 + candidate_source;

    hashCode = hashCode * 8191 + ((isSetRequirement()) ? 131071 : 524287);
    if (isSetRequirement())
      hashCode = hashCode * 8191 + requirement.hashCode();

    hashCode = hashCode * 8191 + ((isSetCity_ename()) ? 131071 : 524287);
    if (isSetCity_ename())
      hashCode = hashCode * 8191 + city_ename.hashCode();

    hashCode = hashCode * 8191 + ((isSetIs_referral()) ? 131071 : 524287);
    if (isSetIs_referral())
      hashCode = hashCode * 8191 + is_referral;

    hashCode = hashCode * 8191 + ((isSetEmployment_type()) ? 131071 : 524287);
    if (isSetEmployment_type())
      hashCode = hashCode * 8191 + employment_type;

    hashCode = hashCode * 8191 + ((isSetEmployment_type_name()) ? 131071 : 524287);
    if (isSetEmployment_type_name())
      hashCode = hashCode * 8191 + employment_type_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetPublisher_name()) ? 131071 : 524287);
    if (isSetPublisher_name())
      hashCode = hashCode * 8191 + publisher_name.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(WechatPositionListData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalary_top()).compareTo(other.isSetSalary_top());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalary_top()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salary_top, other.salary_top);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalary_bottom()).compareTo(other.isSetSalary_bottom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalary_bottom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salary_bottom, other.salary_bottom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublish_date()).compareTo(other.isSetPublish_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublish_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publish_date, other.publish_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartment()).compareTo(other.isSetDepartment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.department, other.department);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVisitnum()).compareTo(other.isSetVisitnum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisitnum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visitnum, other.visitnum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIn_hb()).compareTo(other.isSetIn_hb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIn_hb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.in_hb, other.in_hb);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompany_abbr()).compareTo(other.isSetCompany_abbr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompany_abbr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_abbr, other.company_abbr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompany_logo()).compareTo(other.isSetCompany_logo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompany_logo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_logo, other.company_logo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompany_name()).compareTo(other.isSetCompany_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompany_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_name, other.company_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_new()).compareTo(other.isSetIs_new());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_new()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_new, other.is_new);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublisher()).compareTo(other.isSetPublisher());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublisher()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publisher, other.publisher);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountabilities()).compareTo(other.isSetAccountabilities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountabilities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountabilities, other.accountabilities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal_num()).compareTo(other.isSetTotal_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total_num, other.total_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCandidate_source()).compareTo(other.isSetCandidate_source());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCandidate_source()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.candidate_source, other.candidate_source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequirement()).compareTo(other.isSetRequirement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequirement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requirement, other.requirement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity_ename()).compareTo(other.isSetCity_ename());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity_ename()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city_ename, other.city_ename);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_referral()).compareTo(other.isSetIs_referral());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_referral()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_referral, other.is_referral);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmployment_type()).compareTo(other.isSetEmployment_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmployment_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employment_type, other.employment_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmployment_type_name()).compareTo(other.isSetEmployment_type_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmployment_type_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employment_type_name, other.employment_type_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublisher_name()).compareTo(other.isSetPublisher_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublisher_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publisher_name, other.publisher_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WechatPositionListData(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetSalary_top()) {
      if (!first) sb.append(", ");
      sb.append("salary_top:");
      sb.append(this.salary_top);
      first = false;
    }
    if (isSetSalary_bottom()) {
      if (!first) sb.append(", ");
      sb.append("salary_bottom:");
      sb.append(this.salary_bottom);
      first = false;
    }
    if (isSetPublish_date()) {
      if (!first) sb.append(", ");
      sb.append("publish_date:");
      if (this.publish_date == null) {
        sb.append("null");
      } else {
        sb.append(this.publish_date);
      }
      first = false;
    }
    if (isSetDepartment()) {
      if (!first) sb.append(", ");
      sb.append("department:");
      if (this.department == null) {
        sb.append("null");
      } else {
        sb.append(this.department);
      }
      first = false;
    }
    if (isSetVisitnum()) {
      if (!first) sb.append(", ");
      sb.append("visitnum:");
      sb.append(this.visitnum);
      first = false;
    }
    if (isSetIn_hb()) {
      if (!first) sb.append(", ");
      sb.append("in_hb:");
      sb.append(this.in_hb);
      first = false;
    }
    if (isSetCount()) {
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
    }
    if (isSetCompany_abbr()) {
      if (!first) sb.append(", ");
      sb.append("company_abbr:");
      if (this.company_abbr == null) {
        sb.append("null");
      } else {
        sb.append(this.company_abbr);
      }
      first = false;
    }
    if (isSetCompany_logo()) {
      if (!first) sb.append(", ");
      sb.append("company_logo:");
      if (this.company_logo == null) {
        sb.append("null");
      } else {
        sb.append(this.company_logo);
      }
      first = false;
    }
    if (isSetCompany_name()) {
      if (!first) sb.append(", ");
      sb.append("company_name:");
      if (this.company_name == null) {
        sb.append("null");
      } else {
        sb.append(this.company_name);
      }
      first = false;
    }
    if (isSetIs_new()) {
      if (!first) sb.append(", ");
      sb.append("is_new:");
      sb.append(this.is_new);
      first = false;
    }
    if (isSetCity()) {
      if (!first) sb.append(", ");
      sb.append("city:");
      if (this.city == null) {
        sb.append("null");
      } else {
        sb.append(this.city);
      }
      first = false;
    }
    if (isSetPriority()) {
      if (!first) sb.append(", ");
      sb.append("priority:");
      sb.append(this.priority);
      first = false;
    }
    if (isSetPublisher()) {
      if (!first) sb.append(", ");
      sb.append("publisher:");
      sb.append(this.publisher);
      first = false;
    }
    if (isSetAccountabilities()) {
      if (!first) sb.append(", ");
      sb.append("accountabilities:");
      if (this.accountabilities == null) {
        sb.append("null");
      } else {
        sb.append(this.accountabilities);
      }
      first = false;
    }
    if (isSetTotal_num()) {
      if (!first) sb.append(", ");
      sb.append("total_num:");
      sb.append(this.total_num);
      first = false;
    }
    if (isSetCandidate_source()) {
      if (!first) sb.append(", ");
      sb.append("candidate_source:");
      sb.append(this.candidate_source);
      first = false;
    }
    if (isSetRequirement()) {
      if (!first) sb.append(", ");
      sb.append("requirement:");
      if (this.requirement == null) {
        sb.append("null");
      } else {
        sb.append(this.requirement);
      }
      first = false;
    }
    if (isSetCity_ename()) {
      if (!first) sb.append(", ");
      sb.append("city_ename:");
      if (this.city_ename == null) {
        sb.append("null");
      } else {
        sb.append(this.city_ename);
      }
      first = false;
    }
    if (isSetIs_referral()) {
      if (!first) sb.append(", ");
      sb.append("is_referral:");
      sb.append(this.is_referral);
      first = false;
    }
    if (isSetEmployment_type()) {
      if (!first) sb.append(", ");
      sb.append("employment_type:");
      sb.append(this.employment_type);
      first = false;
    }
    if (isSetEmployment_type_name()) {
      if (!first) sb.append(", ");
      sb.append("employment_type_name:");
      if (this.employment_type_name == null) {
        sb.append("null");
      } else {
        sb.append(this.employment_type_name);
      }
      first = false;
    }
    if (isSetPublisher_name()) {
      if (!first) sb.append(", ");
      sb.append("publisher_name:");
      if (this.publisher_name == null) {
        sb.append("null");
      } else {
        sb.append(this.publisher_name);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WechatPositionListDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WechatPositionListDataStandardScheme getScheme() {
      return new WechatPositionListDataStandardScheme();
    }
  }

  private static class WechatPositionListDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<WechatPositionListData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WechatPositionListData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SALARY_TOP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.salary_top = iprot.readI32();
              struct.setSalary_topIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SALARY_BOTTOM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.salary_bottom = iprot.readI32();
              struct.setSalary_bottomIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PUBLISH_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.publish_date = iprot.readString();
              struct.setPublish_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEPARTMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.department = iprot.readString();
              struct.setDepartmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VISITNUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.visitnum = iprot.readI32();
              struct.setVisitnumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IN_HB
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.in_hb = iprot.readBool();
              struct.setIn_hbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.count = iprot.readI32();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // COMPANY_ABBR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.company_abbr = iprot.readString();
              struct.setCompany_abbrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // COMPANY_LOGO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.company_logo = iprot.readString();
              struct.setCompany_logoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // COMPANY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.company_name = iprot.readString();
              struct.setCompany_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IS_NEW
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_new = iprot.readBool();
              struct.setIs_newIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priority = iprot.readI32();
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PUBLISHER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.publisher = iprot.readI32();
              struct.setPublisherIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ACCOUNTABILITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountabilities = iprot.readString();
              struct.setAccountabilitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // TOTAL_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.total_num = iprot.readI32();
              struct.setTotal_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CANDIDATE_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.candidate_source = iprot.readI32();
              struct.setCandidate_sourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // REQUIREMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requirement = iprot.readString();
              struct.setRequirementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // CITY_ENAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city_ename = iprot.readString();
              struct.setCity_enameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // IS_REFERRAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.is_referral = iprot.readI32();
              struct.setIs_referralIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // EMPLOYMENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.employment_type = iprot.readI32();
              struct.setEmployment_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // EMPLOYMENT_TYPE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.employment_type_name = iprot.readString();
              struct.setEmployment_type_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // PUBLISHER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.publisher_name = iprot.readString();
              struct.setPublisher_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WechatPositionListData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSalary_top()) {
        oprot.writeFieldBegin(SALARY_TOP_FIELD_DESC);
        oprot.writeI32(struct.salary_top);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSalary_bottom()) {
        oprot.writeFieldBegin(SALARY_BOTTOM_FIELD_DESC);
        oprot.writeI32(struct.salary_bottom);
        oprot.writeFieldEnd();
      }
      if (struct.publish_date != null) {
        if (struct.isSetPublish_date()) {
          oprot.writeFieldBegin(PUBLISH_DATE_FIELD_DESC);
          oprot.writeString(struct.publish_date);
          oprot.writeFieldEnd();
        }
      }
      if (struct.department != null) {
        if (struct.isSetDepartment()) {
          oprot.writeFieldBegin(DEPARTMENT_FIELD_DESC);
          oprot.writeString(struct.department);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVisitnum()) {
        oprot.writeFieldBegin(VISITNUM_FIELD_DESC);
        oprot.writeI32(struct.visitnum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIn_hb()) {
        oprot.writeFieldBegin(IN_HB_FIELD_DESC);
        oprot.writeBool(struct.in_hb);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCount()) {
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
      }
      if (struct.company_abbr != null) {
        if (struct.isSetCompany_abbr()) {
          oprot.writeFieldBegin(COMPANY_ABBR_FIELD_DESC);
          oprot.writeString(struct.company_abbr);
          oprot.writeFieldEnd();
        }
      }
      if (struct.company_logo != null) {
        if (struct.isSetCompany_logo()) {
          oprot.writeFieldBegin(COMPANY_LOGO_FIELD_DESC);
          oprot.writeString(struct.company_logo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.company_name != null) {
        if (struct.isSetCompany_name()) {
          oprot.writeFieldBegin(COMPANY_NAME_FIELD_DESC);
          oprot.writeString(struct.company_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_new()) {
        oprot.writeFieldBegin(IS_NEW_FIELD_DESC);
        oprot.writeBool(struct.is_new);
        oprot.writeFieldEnd();
      }
      if (struct.city != null) {
        if (struct.isSetCity()) {
          oprot.writeFieldBegin(CITY_FIELD_DESC);
          oprot.writeString(struct.city);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPriority()) {
        oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
        oprot.writeI32(struct.priority);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPublisher()) {
        oprot.writeFieldBegin(PUBLISHER_FIELD_DESC);
        oprot.writeI32(struct.publisher);
        oprot.writeFieldEnd();
      }
      if (struct.accountabilities != null) {
        if (struct.isSetAccountabilities()) {
          oprot.writeFieldBegin(ACCOUNTABILITIES_FIELD_DESC);
          oprot.writeString(struct.accountabilities);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTotal_num()) {
        oprot.writeFieldBegin(TOTAL_NUM_FIELD_DESC);
        oprot.writeI32(struct.total_num);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCandidate_source()) {
        oprot.writeFieldBegin(CANDIDATE_SOURCE_FIELD_DESC);
        oprot.writeI32(struct.candidate_source);
        oprot.writeFieldEnd();
      }
      if (struct.requirement != null) {
        if (struct.isSetRequirement()) {
          oprot.writeFieldBegin(REQUIREMENT_FIELD_DESC);
          oprot.writeString(struct.requirement);
          oprot.writeFieldEnd();
        }
      }
      if (struct.city_ename != null) {
        if (struct.isSetCity_ename()) {
          oprot.writeFieldBegin(CITY_ENAME_FIELD_DESC);
          oprot.writeString(struct.city_ename);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_referral()) {
        oprot.writeFieldBegin(IS_REFERRAL_FIELD_DESC);
        oprot.writeI32(struct.is_referral);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEmployment_type()) {
        oprot.writeFieldBegin(EMPLOYMENT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.employment_type);
        oprot.writeFieldEnd();
      }
      if (struct.employment_type_name != null) {
        if (struct.isSetEmployment_type_name()) {
          oprot.writeFieldBegin(EMPLOYMENT_TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.employment_type_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.publisher_name != null) {
        if (struct.isSetPublisher_name()) {
          oprot.writeFieldBegin(PUBLISHER_NAME_FIELD_DESC);
          oprot.writeString(struct.publisher_name);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WechatPositionListDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WechatPositionListDataTupleScheme getScheme() {
      return new WechatPositionListDataTupleScheme();
    }
  }

  private static class WechatPositionListDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<WechatPositionListData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WechatPositionListData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetTitle()) {
        optionals.set(1);
      }
      if (struct.isSetSalary_top()) {
        optionals.set(2);
      }
      if (struct.isSetSalary_bottom()) {
        optionals.set(3);
      }
      if (struct.isSetPublish_date()) {
        optionals.set(4);
      }
      if (struct.isSetDepartment()) {
        optionals.set(5);
      }
      if (struct.isSetVisitnum()) {
        optionals.set(6);
      }
      if (struct.isSetIn_hb()) {
        optionals.set(7);
      }
      if (struct.isSetCount()) {
        optionals.set(8);
      }
      if (struct.isSetCompany_abbr()) {
        optionals.set(9);
      }
      if (struct.isSetCompany_logo()) {
        optionals.set(10);
      }
      if (struct.isSetCompany_name()) {
        optionals.set(11);
      }
      if (struct.isSetIs_new()) {
        optionals.set(12);
      }
      if (struct.isSetCity()) {
        optionals.set(13);
      }
      if (struct.isSetPriority()) {
        optionals.set(14);
      }
      if (struct.isSetPublisher()) {
        optionals.set(15);
      }
      if (struct.isSetAccountabilities()) {
        optionals.set(16);
      }
      if (struct.isSetTotal_num()) {
        optionals.set(17);
      }
      if (struct.isSetCandidate_source()) {
        optionals.set(18);
      }
      if (struct.isSetRequirement()) {
        optionals.set(19);
      }
      if (struct.isSetCity_ename()) {
        optionals.set(20);
      }
      if (struct.isSetIs_referral()) {
        optionals.set(21);
      }
      if (struct.isSetEmployment_type()) {
        optionals.set(22);
      }
      if (struct.isSetEmployment_type_name()) {
        optionals.set(23);
      }
      if (struct.isSetPublisher_name()) {
        optionals.set(24);
      }
      oprot.writeBitSet(optionals, 25);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetSalary_top()) {
        oprot.writeI32(struct.salary_top);
      }
      if (struct.isSetSalary_bottom()) {
        oprot.writeI32(struct.salary_bottom);
      }
      if (struct.isSetPublish_date()) {
        oprot.writeString(struct.publish_date);
      }
      if (struct.isSetDepartment()) {
        oprot.writeString(struct.department);
      }
      if (struct.isSetVisitnum()) {
        oprot.writeI32(struct.visitnum);
      }
      if (struct.isSetIn_hb()) {
        oprot.writeBool(struct.in_hb);
      }
      if (struct.isSetCount()) {
        oprot.writeI32(struct.count);
      }
      if (struct.isSetCompany_abbr()) {
        oprot.writeString(struct.company_abbr);
      }
      if (struct.isSetCompany_logo()) {
        oprot.writeString(struct.company_logo);
      }
      if (struct.isSetCompany_name()) {
        oprot.writeString(struct.company_name);
      }
      if (struct.isSetIs_new()) {
        oprot.writeBool(struct.is_new);
      }
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
      if (struct.isSetPriority()) {
        oprot.writeI32(struct.priority);
      }
      if (struct.isSetPublisher()) {
        oprot.writeI32(struct.publisher);
      }
      if (struct.isSetAccountabilities()) {
        oprot.writeString(struct.accountabilities);
      }
      if (struct.isSetTotal_num()) {
        oprot.writeI32(struct.total_num);
      }
      if (struct.isSetCandidate_source()) {
        oprot.writeI32(struct.candidate_source);
      }
      if (struct.isSetRequirement()) {
        oprot.writeString(struct.requirement);
      }
      if (struct.isSetCity_ename()) {
        oprot.writeString(struct.city_ename);
      }
      if (struct.isSetIs_referral()) {
        oprot.writeI32(struct.is_referral);
      }
      if (struct.isSetEmployment_type()) {
        oprot.writeI32(struct.employment_type);
      }
      if (struct.isSetEmployment_type_name()) {
        oprot.writeString(struct.employment_type_name);
      }
      if (struct.isSetPublisher_name()) {
        oprot.writeString(struct.publisher_name);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WechatPositionListData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(25);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.salary_top = iprot.readI32();
        struct.setSalary_topIsSet(true);
      }
      if (incoming.get(3)) {
        struct.salary_bottom = iprot.readI32();
        struct.setSalary_bottomIsSet(true);
      }
      if (incoming.get(4)) {
        struct.publish_date = iprot.readString();
        struct.setPublish_dateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.department = iprot.readString();
        struct.setDepartmentIsSet(true);
      }
      if (incoming.get(6)) {
        struct.visitnum = iprot.readI32();
        struct.setVisitnumIsSet(true);
      }
      if (incoming.get(7)) {
        struct.in_hb = iprot.readBool();
        struct.setIn_hbIsSet(true);
      }
      if (incoming.get(8)) {
        struct.count = iprot.readI32();
        struct.setCountIsSet(true);
      }
      if (incoming.get(9)) {
        struct.company_abbr = iprot.readString();
        struct.setCompany_abbrIsSet(true);
      }
      if (incoming.get(10)) {
        struct.company_logo = iprot.readString();
        struct.setCompany_logoIsSet(true);
      }
      if (incoming.get(11)) {
        struct.company_name = iprot.readString();
        struct.setCompany_nameIsSet(true);
      }
      if (incoming.get(12)) {
        struct.is_new = iprot.readBool();
        struct.setIs_newIsSet(true);
      }
      if (incoming.get(13)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
      if (incoming.get(14)) {
        struct.priority = iprot.readI32();
        struct.setPriorityIsSet(true);
      }
      if (incoming.get(15)) {
        struct.publisher = iprot.readI32();
        struct.setPublisherIsSet(true);
      }
      if (incoming.get(16)) {
        struct.accountabilities = iprot.readString();
        struct.setAccountabilitiesIsSet(true);
      }
      if (incoming.get(17)) {
        struct.total_num = iprot.readI32();
        struct.setTotal_numIsSet(true);
      }
      if (incoming.get(18)) {
        struct.candidate_source = iprot.readI32();
        struct.setCandidate_sourceIsSet(true);
      }
      if (incoming.get(19)) {
        struct.requirement = iprot.readString();
        struct.setRequirementIsSet(true);
      }
      if (incoming.get(20)) {
        struct.city_ename = iprot.readString();
        struct.setCity_enameIsSet(true);
      }
      if (incoming.get(21)) {
        struct.is_referral = iprot.readI32();
        struct.setIs_referralIsSet(true);
      }
      if (incoming.get(22)) {
        struct.employment_type = iprot.readI32();
        struct.setEmployment_typeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.employment_type_name = iprot.readString();
        struct.setEmployment_type_nameIsSet(true);
      }
      if (incoming.get(24)) {
        struct.publisher_name = iprot.readString();
        struct.setPublisher_nameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

