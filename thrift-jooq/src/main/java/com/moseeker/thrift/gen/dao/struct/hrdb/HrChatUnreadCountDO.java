/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.hrdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-25")
public class HrChatUnreadCountDO implements org.apache.thrift.TBase<HrChatUnreadCountDO, HrChatUnreadCountDO._Fields>, java.io.Serializable, Cloneable, Comparable<HrChatUnreadCountDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HrChatUnreadCountDO");

  private static final org.apache.thrift.protocol.TField ROOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roomId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hrId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField WX_CHAT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("wxChatTime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField HR_CHAT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("hrChatTime", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField HR_HAVE_UNREAD_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("hrHaveUnreadMsg", org.apache.thrift.protocol.TType.BYTE, (short)6);
  private static final org.apache.thrift.protocol.TField USER_HAVE_UNREAD_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("userHaveUnreadMsg", org.apache.thrift.protocol.TType.BYTE, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HrChatUnreadCountDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HrChatUnreadCountDOTupleSchemeFactory();

  public int roomId; // optional
  public int hrId; // optional
  public int userId; // optional
  public java.lang.String wxChatTime; // optional
  public java.lang.String hrChatTime; // optional
  public byte hrHaveUnreadMsg; // optional
  public byte userHaveUnreadMsg; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ROOM_ID((short)1, "roomId"),
    HR_ID((short)2, "hrId"),
    USER_ID((short)3, "userId"),
    WX_CHAT_TIME((short)4, "wxChatTime"),
    HR_CHAT_TIME((short)5, "hrChatTime"),
    HR_HAVE_UNREAD_MSG((short)6, "hrHaveUnreadMsg"),
    USER_HAVE_UNREAD_MSG((short)7, "userHaveUnreadMsg");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ROOM_ID
          return ROOM_ID;
        case 2: // HR_ID
          return HR_ID;
        case 3: // USER_ID
          return USER_ID;
        case 4: // WX_CHAT_TIME
          return WX_CHAT_TIME;
        case 5: // HR_CHAT_TIME
          return HR_CHAT_TIME;
        case 6: // HR_HAVE_UNREAD_MSG
          return HR_HAVE_UNREAD_MSG;
        case 7: // USER_HAVE_UNREAD_MSG
          return USER_HAVE_UNREAD_MSG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ROOMID_ISSET_ID = 0;
  private static final int __HRID_ISSET_ID = 1;
  private static final int __USERID_ISSET_ID = 2;
  private static final int __HRHAVEUNREADMSG_ISSET_ID = 3;
  private static final int __USERHAVEUNREADMSG_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ROOM_ID,_Fields.HR_ID,_Fields.USER_ID,_Fields.WX_CHAT_TIME,_Fields.HR_CHAT_TIME,_Fields.HR_HAVE_UNREAD_MSG,_Fields.USER_HAVE_UNREAD_MSG};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROOM_ID, new org.apache.thrift.meta_data.FieldMetaData("roomId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hrId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WX_CHAT_TIME, new org.apache.thrift.meta_data.FieldMetaData("wxChatTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HR_CHAT_TIME, new org.apache.thrift.meta_data.FieldMetaData("hrChatTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HR_HAVE_UNREAD_MSG, new org.apache.thrift.meta_data.FieldMetaData("hrHaveUnreadMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.USER_HAVE_UNREAD_MSG, new org.apache.thrift.meta_data.FieldMetaData("userHaveUnreadMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HrChatUnreadCountDO.class, metaDataMap);
  }

  public HrChatUnreadCountDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HrChatUnreadCountDO(HrChatUnreadCountDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.roomId = other.roomId;
    this.hrId = other.hrId;
    this.userId = other.userId;
    if (other.isSetWxChatTime()) {
      this.wxChatTime = other.wxChatTime;
    }
    if (other.isSetHrChatTime()) {
      this.hrChatTime = other.hrChatTime;
    }
    this.hrHaveUnreadMsg = other.hrHaveUnreadMsg;
    this.userHaveUnreadMsg = other.userHaveUnreadMsg;
  }

  public HrChatUnreadCountDO deepCopy() {
    return new HrChatUnreadCountDO(this);
  }

  @Override
  public void clear() {
    setRoomIdIsSet(false);
    this.roomId = 0;
    setHrIdIsSet(false);
    this.hrId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    this.wxChatTime = null;
    this.hrChatTime = null;
    setHrHaveUnreadMsgIsSet(false);
    this.hrHaveUnreadMsg = 0;
    setUserHaveUnreadMsgIsSet(false);
    this.userHaveUnreadMsg = 0;
  }

  public int getRoomId() {
    return this.roomId;
  }

  public HrChatUnreadCountDO setRoomId(int roomId) {
    this.roomId = roomId;
    setRoomIdIsSet(true);
    return this;
  }

  public void unsetRoomId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROOMID_ISSET_ID);
  }

  /** Returns true if field roomId is set (has been assigned a value) and false otherwise */
  public boolean isSetRoomId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROOMID_ISSET_ID);
  }

  public void setRoomIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROOMID_ISSET_ID, value);
  }

  public int getHrId() {
    return this.hrId;
  }

  public HrChatUnreadCountDO setHrId(int hrId) {
    this.hrId = hrId;
    setHrIdIsSet(true);
    return this;
  }

  public void unsetHrId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HRID_ISSET_ID);
  }

  /** Returns true if field hrId is set (has been assigned a value) and false otherwise */
  public boolean isSetHrId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HRID_ISSET_ID);
  }

  public void setHrIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HRID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public HrChatUnreadCountDO setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public java.lang.String getWxChatTime() {
    return this.wxChatTime;
  }

  public HrChatUnreadCountDO setWxChatTime(java.lang.String wxChatTime) {
    this.wxChatTime = wxChatTime;
    return this;
  }

  public void unsetWxChatTime() {
    this.wxChatTime = null;
  }

  /** Returns true if field wxChatTime is set (has been assigned a value) and false otherwise */
  public boolean isSetWxChatTime() {
    return this.wxChatTime != null;
  }

  public void setWxChatTimeIsSet(boolean value) {
    if (!value) {
      this.wxChatTime = null;
    }
  }

  public java.lang.String getHrChatTime() {
    return this.hrChatTime;
  }

  public HrChatUnreadCountDO setHrChatTime(java.lang.String hrChatTime) {
    this.hrChatTime = hrChatTime;
    return this;
  }

  public void unsetHrChatTime() {
    this.hrChatTime = null;
  }

  /** Returns true if field hrChatTime is set (has been assigned a value) and false otherwise */
  public boolean isSetHrChatTime() {
    return this.hrChatTime != null;
  }

  public void setHrChatTimeIsSet(boolean value) {
    if (!value) {
      this.hrChatTime = null;
    }
  }

  public byte getHrHaveUnreadMsg() {
    return this.hrHaveUnreadMsg;
  }

  public HrChatUnreadCountDO setHrHaveUnreadMsg(byte hrHaveUnreadMsg) {
    this.hrHaveUnreadMsg = hrHaveUnreadMsg;
    setHrHaveUnreadMsgIsSet(true);
    return this;
  }

  public void unsetHrHaveUnreadMsg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HRHAVEUNREADMSG_ISSET_ID);
  }

  /** Returns true if field hrHaveUnreadMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetHrHaveUnreadMsg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HRHAVEUNREADMSG_ISSET_ID);
  }

  public void setHrHaveUnreadMsgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HRHAVEUNREADMSG_ISSET_ID, value);
  }

  public byte getUserHaveUnreadMsg() {
    return this.userHaveUnreadMsg;
  }

  public HrChatUnreadCountDO setUserHaveUnreadMsg(byte userHaveUnreadMsg) {
    this.userHaveUnreadMsg = userHaveUnreadMsg;
    setUserHaveUnreadMsgIsSet(true);
    return this;
  }

  public void unsetUserHaveUnreadMsg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERHAVEUNREADMSG_ISSET_ID);
  }

  /** Returns true if field userHaveUnreadMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetUserHaveUnreadMsg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERHAVEUNREADMSG_ISSET_ID);
  }

  public void setUserHaveUnreadMsgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERHAVEUNREADMSG_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ROOM_ID:
      if (value == null) {
        unsetRoomId();
      } else {
        setRoomId((java.lang.Integer)value);
      }
      break;

    case HR_ID:
      if (value == null) {
        unsetHrId();
      } else {
        setHrId((java.lang.Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((java.lang.Integer)value);
      }
      break;

    case WX_CHAT_TIME:
      if (value == null) {
        unsetWxChatTime();
      } else {
        setWxChatTime((java.lang.String)value);
      }
      break;

    case HR_CHAT_TIME:
      if (value == null) {
        unsetHrChatTime();
      } else {
        setHrChatTime((java.lang.String)value);
      }
      break;

    case HR_HAVE_UNREAD_MSG:
      if (value == null) {
        unsetHrHaveUnreadMsg();
      } else {
        setHrHaveUnreadMsg((java.lang.Byte)value);
      }
      break;

    case USER_HAVE_UNREAD_MSG:
      if (value == null) {
        unsetUserHaveUnreadMsg();
      } else {
        setUserHaveUnreadMsg((java.lang.Byte)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ROOM_ID:
      return getRoomId();

    case HR_ID:
      return getHrId();

    case USER_ID:
      return getUserId();

    case WX_CHAT_TIME:
      return getWxChatTime();

    case HR_CHAT_TIME:
      return getHrChatTime();

    case HR_HAVE_UNREAD_MSG:
      return getHrHaveUnreadMsg();

    case USER_HAVE_UNREAD_MSG:
      return getUserHaveUnreadMsg();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ROOM_ID:
      return isSetRoomId();
    case HR_ID:
      return isSetHrId();
    case USER_ID:
      return isSetUserId();
    case WX_CHAT_TIME:
      return isSetWxChatTime();
    case HR_CHAT_TIME:
      return isSetHrChatTime();
    case HR_HAVE_UNREAD_MSG:
      return isSetHrHaveUnreadMsg();
    case USER_HAVE_UNREAD_MSG:
      return isSetUserHaveUnreadMsg();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof HrChatUnreadCountDO)
      return this.equals((HrChatUnreadCountDO)that);
    return false;
  }

  public boolean equals(HrChatUnreadCountDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_roomId = true && this.isSetRoomId();
    boolean that_present_roomId = true && that.isSetRoomId();
    if (this_present_roomId || that_present_roomId) {
      if (!(this_present_roomId && that_present_roomId))
        return false;
      if (this.roomId != that.roomId)
        return false;
    }

    boolean this_present_hrId = true && this.isSetHrId();
    boolean that_present_hrId = true && that.isSetHrId();
    if (this_present_hrId || that_present_hrId) {
      if (!(this_present_hrId && that_present_hrId))
        return false;
      if (this.hrId != that.hrId)
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_wxChatTime = true && this.isSetWxChatTime();
    boolean that_present_wxChatTime = true && that.isSetWxChatTime();
    if (this_present_wxChatTime || that_present_wxChatTime) {
      if (!(this_present_wxChatTime && that_present_wxChatTime))
        return false;
      if (!this.wxChatTime.equals(that.wxChatTime))
        return false;
    }

    boolean this_present_hrChatTime = true && this.isSetHrChatTime();
    boolean that_present_hrChatTime = true && that.isSetHrChatTime();
    if (this_present_hrChatTime || that_present_hrChatTime) {
      if (!(this_present_hrChatTime && that_present_hrChatTime))
        return false;
      if (!this.hrChatTime.equals(that.hrChatTime))
        return false;
    }

    boolean this_present_hrHaveUnreadMsg = true && this.isSetHrHaveUnreadMsg();
    boolean that_present_hrHaveUnreadMsg = true && that.isSetHrHaveUnreadMsg();
    if (this_present_hrHaveUnreadMsg || that_present_hrHaveUnreadMsg) {
      if (!(this_present_hrHaveUnreadMsg && that_present_hrHaveUnreadMsg))
        return false;
      if (this.hrHaveUnreadMsg != that.hrHaveUnreadMsg)
        return false;
    }

    boolean this_present_userHaveUnreadMsg = true && this.isSetUserHaveUnreadMsg();
    boolean that_present_userHaveUnreadMsg = true && that.isSetUserHaveUnreadMsg();
    if (this_present_userHaveUnreadMsg || that_present_userHaveUnreadMsg) {
      if (!(this_present_userHaveUnreadMsg && that_present_userHaveUnreadMsg))
        return false;
      if (this.userHaveUnreadMsg != that.userHaveUnreadMsg)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetRoomId()) ? 131071 : 524287);
    if (isSetRoomId())
      hashCode = hashCode * 8191 + roomId;

    hashCode = hashCode * 8191 + ((isSetHrId()) ? 131071 : 524287);
    if (isSetHrId())
      hashCode = hashCode * 8191 + hrId;

    hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
    if (isSetUserId())
      hashCode = hashCode * 8191 + userId;

    hashCode = hashCode * 8191 + ((isSetWxChatTime()) ? 131071 : 524287);
    if (isSetWxChatTime())
      hashCode = hashCode * 8191 + wxChatTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetHrChatTime()) ? 131071 : 524287);
    if (isSetHrChatTime())
      hashCode = hashCode * 8191 + hrChatTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetHrHaveUnreadMsg()) ? 131071 : 524287);
    if (isSetHrHaveUnreadMsg())
      hashCode = hashCode * 8191 + (int) (hrHaveUnreadMsg);

    hashCode = hashCode * 8191 + ((isSetUserHaveUnreadMsg()) ? 131071 : 524287);
    if (isSetUserHaveUnreadMsg())
      hashCode = hashCode * 8191 + (int) (userHaveUnreadMsg);

    return hashCode;
  }

  @Override
  public int compareTo(HrChatUnreadCountDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetRoomId()).compareTo(other.isSetRoomId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoomId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomId, other.roomId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHrId()).compareTo(other.isSetHrId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHrId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrId, other.hrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWxChatTime()).compareTo(other.isSetWxChatTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWxChatTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wxChatTime, other.wxChatTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHrChatTime()).compareTo(other.isSetHrChatTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHrChatTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrChatTime, other.hrChatTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHrHaveUnreadMsg()).compareTo(other.isSetHrHaveUnreadMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHrHaveUnreadMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrHaveUnreadMsg, other.hrHaveUnreadMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUserHaveUnreadMsg()).compareTo(other.isSetUserHaveUnreadMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserHaveUnreadMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userHaveUnreadMsg, other.userHaveUnreadMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("HrChatUnreadCountDO(");
    boolean first = true;

    if (isSetRoomId()) {
      sb.append("roomId:");
      sb.append(this.roomId);
      first = false;
    }
    if (isSetHrId()) {
      if (!first) sb.append(", ");
      sb.append("hrId:");
      sb.append(this.hrId);
      first = false;
    }
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
    }
    if (isSetWxChatTime()) {
      if (!first) sb.append(", ");
      sb.append("wxChatTime:");
      if (this.wxChatTime == null) {
        sb.append("null");
      } else {
        sb.append(this.wxChatTime);
      }
      first = false;
    }
    if (isSetHrChatTime()) {
      if (!first) sb.append(", ");
      sb.append("hrChatTime:");
      if (this.hrChatTime == null) {
        sb.append("null");
      } else {
        sb.append(this.hrChatTime);
      }
      first = false;
    }
    if (isSetHrHaveUnreadMsg()) {
      if (!first) sb.append(", ");
      sb.append("hrHaveUnreadMsg:");
      sb.append(this.hrHaveUnreadMsg);
      first = false;
    }
    if (isSetUserHaveUnreadMsg()) {
      if (!first) sb.append(", ");
      sb.append("userHaveUnreadMsg:");
      sb.append(this.userHaveUnreadMsg);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HrChatUnreadCountDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrChatUnreadCountDOStandardScheme getScheme() {
      return new HrChatUnreadCountDOStandardScheme();
    }
  }

  private static class HrChatUnreadCountDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<HrChatUnreadCountDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HrChatUnreadCountDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ROOM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.roomId = iprot.readI32();
              struct.setRoomIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hrId = iprot.readI32();
              struct.setHrIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WX_CHAT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wxChatTime = iprot.readString();
              struct.setWxChatTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HR_CHAT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hrChatTime = iprot.readString();
              struct.setHrChatTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HR_HAVE_UNREAD_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.hrHaveUnreadMsg = iprot.readByte();
              struct.setHrHaveUnreadMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USER_HAVE_UNREAD_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.userHaveUnreadMsg = iprot.readByte();
              struct.setUserHaveUnreadMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HrChatUnreadCountDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetRoomId()) {
        oprot.writeFieldBegin(ROOM_ID_FIELD_DESC);
        oprot.writeI32(struct.roomId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHrId()) {
        oprot.writeFieldBegin(HR_ID_FIELD_DESC);
        oprot.writeI32(struct.hrId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUserId()) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.wxChatTime != null) {
        if (struct.isSetWxChatTime()) {
          oprot.writeFieldBegin(WX_CHAT_TIME_FIELD_DESC);
          oprot.writeString(struct.wxChatTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hrChatTime != null) {
        if (struct.isSetHrChatTime()) {
          oprot.writeFieldBegin(HR_CHAT_TIME_FIELD_DESC);
          oprot.writeString(struct.hrChatTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetHrHaveUnreadMsg()) {
        oprot.writeFieldBegin(HR_HAVE_UNREAD_MSG_FIELD_DESC);
        oprot.writeByte(struct.hrHaveUnreadMsg);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUserHaveUnreadMsg()) {
        oprot.writeFieldBegin(USER_HAVE_UNREAD_MSG_FIELD_DESC);
        oprot.writeByte(struct.userHaveUnreadMsg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HrChatUnreadCountDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrChatUnreadCountDOTupleScheme getScheme() {
      return new HrChatUnreadCountDOTupleScheme();
    }
  }

  private static class HrChatUnreadCountDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<HrChatUnreadCountDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HrChatUnreadCountDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRoomId()) {
        optionals.set(0);
      }
      if (struct.isSetHrId()) {
        optionals.set(1);
      }
      if (struct.isSetUserId()) {
        optionals.set(2);
      }
      if (struct.isSetWxChatTime()) {
        optionals.set(3);
      }
      if (struct.isSetHrChatTime()) {
        optionals.set(4);
      }
      if (struct.isSetHrHaveUnreadMsg()) {
        optionals.set(5);
      }
      if (struct.isSetUserHaveUnreadMsg()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetRoomId()) {
        oprot.writeI32(struct.roomId);
      }
      if (struct.isSetHrId()) {
        oprot.writeI32(struct.hrId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetWxChatTime()) {
        oprot.writeString(struct.wxChatTime);
      }
      if (struct.isSetHrChatTime()) {
        oprot.writeString(struct.hrChatTime);
      }
      if (struct.isSetHrHaveUnreadMsg()) {
        oprot.writeByte(struct.hrHaveUnreadMsg);
      }
      if (struct.isSetUserHaveUnreadMsg()) {
        oprot.writeByte(struct.userHaveUnreadMsg);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HrChatUnreadCountDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.roomId = iprot.readI32();
        struct.setRoomIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hrId = iprot.readI32();
        struct.setHrIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.wxChatTime = iprot.readString();
        struct.setWxChatTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.hrChatTime = iprot.readString();
        struct.setHrChatTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.hrHaveUnreadMsg = iprot.readByte();
        struct.setHrHaveUnreadMsgIsSet(true);
      }
      if (incoming.get(6)) {
        struct.userHaveUnreadMsg = iprot.readByte();
        struct.setUserHaveUnreadMsgIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

