package com.moseeker.thrift.gen.warn.struct;


/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-24")
public class WarnBean implements org.apache.thrift.TBase<WarnBean, WarnBean._Fields>, java.io.Serializable, Cloneable, Comparable<WarnBean> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WarnBean");

  private static final org.apache.thrift.protocol.TField PROJECT_APPID_FIELD_DESC = new org.apache.thrift.protocol.TField("project_appid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField EVENT_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("event_key", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EVENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("event_name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EVENT_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("event_desc", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField EVENT_LOCAL_FIELD_DESC = new org.apache.thrift.protocol.TField("event_local", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WarnBeanStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WarnBeanTupleSchemeFactory());
  }

  public String project_appid; // required
  public String event_key; // required
  public String event_name; // required
  public String event_desc; // required
  public String event_local; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROJECT_APPID((short)1, "project_appid"),
    EVENT_KEY((short)2, "event_key"),
    EVENT_NAME((short)3, "event_name"),
    EVENT_DESC((short)4, "event_desc"),
    EVENT_LOCAL((short)5, "event_local");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROJECT_APPID
          return PROJECT_APPID;
        case 2: // EVENT_KEY
          return EVENT_KEY;
        case 3: // EVENT_NAME
          return EVENT_NAME;
        case 4: // EVENT_DESC
          return EVENT_DESC;
        case 5: // EVENT_LOCAL
          return EVENT_LOCAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROJECT_APPID, new org.apache.thrift.meta_data.FieldMetaData("project_appid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVENT_KEY, new org.apache.thrift.meta_data.FieldMetaData("event_key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("event_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVENT_DESC, new org.apache.thrift.meta_data.FieldMetaData("event_desc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVENT_LOCAL, new org.apache.thrift.meta_data.FieldMetaData("event_local", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WarnBean.class, metaDataMap);
  }

  public WarnBean() {
  }

  public WarnBean(
    String project_appid,
    String event_key,
    String event_name,
    String event_desc,
    String event_local)
  {
    this();
    this.project_appid = project_appid;
    this.event_key = event_key;
    this.event_name = event_name;
    this.event_desc = event_desc;
    this.event_local = event_local;
  }
  
  public WarnBean( String project_appid, String event_key, String event_desc, String event_local){
	    this.project_appid = project_appid;
	    this.event_key = event_key;
	    this.event_desc = event_desc;
	    this.event_local = event_local;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WarnBean(WarnBean other) {
    if (other.isSetProject_appid()) {
      this.project_appid = other.project_appid;
    }
    if (other.isSetEvent_key()) {
      this.event_key = other.event_key;
    }
    if (other.isSetEvent_name()) {
      this.event_name = other.event_name;
    }
    if (other.isSetEvent_desc()) {
      this.event_desc = other.event_desc;
    }
    if (other.isSetEvent_local()) {
      this.event_local = other.event_local;
    }
  }

  public WarnBean deepCopy() {
    return new WarnBean(this);
  }

  @Override
  public void clear() {
    this.project_appid = null;
    this.event_key = null;
    this.event_name = null;
    this.event_desc = null;
    this.event_local = null;
  }

  public String getProject_appid() {
    return this.project_appid;
  }

  public WarnBean setProject_appid(String project_appid) {
    this.project_appid = project_appid;
    return this;
  }

  public void unsetProject_appid() {
    this.project_appid = null;
  }

  /** Returns true if field project_appid is set (has been assigned a value) and false otherwise */
  public boolean isSetProject_appid() {
    return this.project_appid != null;
  }

  public void setProject_appidIsSet(boolean value) {
    if (!value) {
      this.project_appid = null;
    }
  }

  public String getEvent_key() {
    return this.event_key;
  }

  public WarnBean setEvent_key(String event_key) {
    this.event_key = event_key;
    return this;
  }

  public void unsetEvent_key() {
    this.event_key = null;
  }

  /** Returns true if field event_key is set (has been assigned a value) and false otherwise */
  public boolean isSetEvent_key() {
    return this.event_key != null;
  }

  public void setEvent_keyIsSet(boolean value) {
    if (!value) {
      this.event_key = null;
    }
  }

  public String getEvent_name() {
    return this.event_name;
  }

  public WarnBean setEvent_name(String event_name) {
    this.event_name = event_name;
    return this;
  }

  public void unsetEvent_name() {
    this.event_name = null;
  }

  /** Returns true if field event_name is set (has been assigned a value) and false otherwise */
  public boolean isSetEvent_name() {
    return this.event_name != null;
  }

  public void setEvent_nameIsSet(boolean value) {
    if (!value) {
      this.event_name = null;
    }
  }

  public String getEvent_desc() {
    return this.event_desc;
  }

  public WarnBean setEvent_desc(String event_desc) {
    this.event_desc = event_desc;
    return this;
  }

  public void unsetEvent_desc() {
    this.event_desc = null;
  }

  /** Returns true if field event_desc is set (has been assigned a value) and false otherwise */
  public boolean isSetEvent_desc() {
    return this.event_desc != null;
  }

  public void setEvent_descIsSet(boolean value) {
    if (!value) {
      this.event_desc = null;
    }
  }

  public String getEvent_local() {
    return this.event_local;
  }

  public WarnBean setEvent_local(String event_local) {
    this.event_local = event_local;
    return this;
  }

  public void unsetEvent_local() {
    this.event_local = null;
  }

  /** Returns true if field event_local is set (has been assigned a value) and false otherwise */
  public boolean isSetEvent_local() {
    return this.event_local != null;
  }

  public void setEvent_localIsSet(boolean value) {
    if (!value) {
      this.event_local = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROJECT_APPID:
      if (value == null) {
        unsetProject_appid();
      } else {
        setProject_appid((String)value);
      }
      break;

    case EVENT_KEY:
      if (value == null) {
        unsetEvent_key();
      } else {
        setEvent_key((String)value);
      }
      break;

    case EVENT_NAME:
      if (value == null) {
        unsetEvent_name();
      } else {
        setEvent_name((String)value);
      }
      break;

    case EVENT_DESC:
      if (value == null) {
        unsetEvent_desc();
      } else {
        setEvent_desc((String)value);
      }
      break;

    case EVENT_LOCAL:
      if (value == null) {
        unsetEvent_local();
      } else {
        setEvent_local((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROJECT_APPID:
      return getProject_appid();

    case EVENT_KEY:
      return getEvent_key();

    case EVENT_NAME:
      return getEvent_name();

    case EVENT_DESC:
      return getEvent_desc();

    case EVENT_LOCAL:
      return getEvent_local();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROJECT_APPID:
      return isSetProject_appid();
    case EVENT_KEY:
      return isSetEvent_key();
    case EVENT_NAME:
      return isSetEvent_name();
    case EVENT_DESC:
      return isSetEvent_desc();
    case EVENT_LOCAL:
      return isSetEvent_local();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WarnBean)
      return this.equals((WarnBean)that);
    return false;
  }

  public boolean equals(WarnBean that) {
    if (that == null)
      return false;

    boolean this_present_project_appid = true && this.isSetProject_appid();
    boolean that_present_project_appid = true && that.isSetProject_appid();
    if (this_present_project_appid || that_present_project_appid) {
      if (!(this_present_project_appid && that_present_project_appid))
        return false;
      if (!this.project_appid.equals(that.project_appid))
        return false;
    }

    boolean this_present_event_key = true && this.isSetEvent_key();
    boolean that_present_event_key = true && that.isSetEvent_key();
    if (this_present_event_key || that_present_event_key) {
      if (!(this_present_event_key && that_present_event_key))
        return false;
      if (!this.event_key.equals(that.event_key))
        return false;
    }

    boolean this_present_event_name = true && this.isSetEvent_name();
    boolean that_present_event_name = true && that.isSetEvent_name();
    if (this_present_event_name || that_present_event_name) {
      if (!(this_present_event_name && that_present_event_name))
        return false;
      if (!this.event_name.equals(that.event_name))
        return false;
    }

    boolean this_present_event_desc = true && this.isSetEvent_desc();
    boolean that_present_event_desc = true && that.isSetEvent_desc();
    if (this_present_event_desc || that_present_event_desc) {
      if (!(this_present_event_desc && that_present_event_desc))
        return false;
      if (!this.event_desc.equals(that.event_desc))
        return false;
    }

    boolean this_present_event_local = true && this.isSetEvent_local();
    boolean that_present_event_local = true && that.isSetEvent_local();
    if (this_present_event_local || that_present_event_local) {
      if (!(this_present_event_local && that_present_event_local))
        return false;
      if (!this.event_local.equals(that.event_local))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_project_appid = true && (isSetProject_appid());
    list.add(present_project_appid);
    if (present_project_appid)
      list.add(project_appid);

    boolean present_event_key = true && (isSetEvent_key());
    list.add(present_event_key);
    if (present_event_key)
      list.add(event_key);

    boolean present_event_name = true && (isSetEvent_name());
    list.add(present_event_name);
    if (present_event_name)
      list.add(event_name);

    boolean present_event_desc = true && (isSetEvent_desc());
    list.add(present_event_desc);
    if (present_event_desc)
      list.add(event_desc);

    boolean present_event_local = true && (isSetEvent_local());
    list.add(present_event_local);
    if (present_event_local)
      list.add(event_local);

    return list.hashCode();
  }

  @Override
  public int compareTo(WarnBean other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProject_appid()).compareTo(other.isSetProject_appid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProject_appid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.project_appid, other.project_appid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEvent_key()).compareTo(other.isSetEvent_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvent_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event_key, other.event_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEvent_name()).compareTo(other.isSetEvent_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvent_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event_name, other.event_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEvent_desc()).compareTo(other.isSetEvent_desc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvent_desc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event_desc, other.event_desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEvent_local()).compareTo(other.isSetEvent_local());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvent_local()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event_local, other.event_local);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WarnBean(");
    boolean first = true;

    sb.append("project_appid:");
    if (this.project_appid == null) {
      sb.append("null");
    } else {
      sb.append(this.project_appid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("event_key:");
    if (this.event_key == null) {
      sb.append("null");
    } else {
      sb.append(this.event_key);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("event_name:");
    if (this.event_name == null) {
      sb.append("null");
    } else {
      sb.append(this.event_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("event_desc:");
    if (this.event_desc == null) {
      sb.append("null");
    } else {
      sb.append(this.event_desc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("event_local:");
    if (this.event_local == null) {
      sb.append("null");
    } else {
      sb.append(this.event_local);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WarnBeanStandardSchemeFactory implements SchemeFactory {
    public WarnBeanStandardScheme getScheme() {
      return new WarnBeanStandardScheme();
    }
  }

  private static class WarnBeanStandardScheme extends StandardScheme<WarnBean> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WarnBean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROJECT_APPID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.project_appid = iprot.readString();
              struct.setProject_appidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EVENT_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.event_key = iprot.readString();
              struct.setEvent_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EVENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.event_name = iprot.readString();
              struct.setEvent_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EVENT_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.event_desc = iprot.readString();
              struct.setEvent_descIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EVENT_LOCAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.event_local = iprot.readString();
              struct.setEvent_localIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WarnBean struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.project_appid != null) {
        oprot.writeFieldBegin(PROJECT_APPID_FIELD_DESC);
        oprot.writeString(struct.project_appid);
        oprot.writeFieldEnd();
      }
      if (struct.event_key != null) {
        oprot.writeFieldBegin(EVENT_KEY_FIELD_DESC);
        oprot.writeString(struct.event_key);
        oprot.writeFieldEnd();
      }
      if (struct.event_name != null) {
        oprot.writeFieldBegin(EVENT_NAME_FIELD_DESC);
        oprot.writeString(struct.event_name);
        oprot.writeFieldEnd();
      }
      if (struct.event_desc != null) {
        oprot.writeFieldBegin(EVENT_DESC_FIELD_DESC);
        oprot.writeString(struct.event_desc);
        oprot.writeFieldEnd();
      }
      if (struct.event_local != null) {
        oprot.writeFieldBegin(EVENT_LOCAL_FIELD_DESC);
        oprot.writeString(struct.event_local);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WarnBeanTupleSchemeFactory implements SchemeFactory {
    public WarnBeanTupleScheme getScheme() {
      return new WarnBeanTupleScheme();
    }
  }

  private static class WarnBeanTupleScheme extends TupleScheme<WarnBean> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WarnBean struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProject_appid()) {
        optionals.set(0);
      }
      if (struct.isSetEvent_key()) {
        optionals.set(1);
      }
      if (struct.isSetEvent_name()) {
        optionals.set(2);
      }
      if (struct.isSetEvent_desc()) {
        optionals.set(3);
      }
      if (struct.isSetEvent_local()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetProject_appid()) {
        oprot.writeString(struct.project_appid);
      }
      if (struct.isSetEvent_key()) {
        oprot.writeString(struct.event_key);
      }
      if (struct.isSetEvent_name()) {
        oprot.writeString(struct.event_name);
      }
      if (struct.isSetEvent_desc()) {
        oprot.writeString(struct.event_desc);
      }
      if (struct.isSetEvent_local()) {
        oprot.writeString(struct.event_local);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WarnBean struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.project_appid = iprot.readString();
        struct.setProject_appidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.event_key = iprot.readString();
        struct.setEvent_keyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.event_name = iprot.readString();
        struct.setEvent_nameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.event_desc = iprot.readString();
        struct.setEvent_descIsSet(true);
      }
      if (incoming.get(4)) {
        struct.event_local = iprot.readString();
        struct.setEvent_localIsSet(true);
      }
    }
  }

}

