/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.chat.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-03-15")
public class ChatHistory implements org.apache.thrift.TBase<ChatHistory, ChatHistory._Fields>, java.io.Serializable, Cloneable, Comparable<ChatHistory> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChatHistory");

  private static final org.apache.thrift.protocol.TField CONVERSATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("conversationId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField HAS_MORE_FIELD_DESC = new org.apache.thrift.protocol.TField("hasMore", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField CHAT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("chatList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField HR_LEAVE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("hrLeaveTime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ChatHistoryStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ChatHistoryTupleSchemeFactory();

  public int conversationId; // optional
  public boolean hasMore; // optional
  public java.util.List<ChatVO> chatList; // optional
  public java.lang.String hrLeaveTime; // optional
  public int userId; // optional
  public java.lang.String name; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONVERSATION_ID((short)1, "conversationId"),
    HAS_MORE((short)2, "hasMore"),
    CHAT_LIST((short)3, "chatList"),
    HR_LEAVE_TIME((short)4, "hrLeaveTime"),
    USER_ID((short)5, "userId"),
    NAME((short)6, "name");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONVERSATION_ID
          return CONVERSATION_ID;
        case 2: // HAS_MORE
          return HAS_MORE;
        case 3: // CHAT_LIST
          return CHAT_LIST;
        case 4: // HR_LEAVE_TIME
          return HR_LEAVE_TIME;
        case 5: // USER_ID
          return USER_ID;
        case 6: // NAME
          return NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONVERSATIONID_ISSET_ID = 0;
  private static final int __HASMORE_ISSET_ID = 1;
  private static final int __USERID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CONVERSATION_ID,_Fields.HAS_MORE,_Fields.CHAT_LIST,_Fields.HR_LEAVE_TIME,_Fields.USER_ID,_Fields.NAME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONVERSATION_ID, new org.apache.thrift.meta_data.FieldMetaData("conversationId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HAS_MORE, new org.apache.thrift.meta_data.FieldMetaData("hasMore", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHAT_LIST, new org.apache.thrift.meta_data.FieldMetaData("chatList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChatVO.class))));
    tmpMap.put(_Fields.HR_LEAVE_TIME, new org.apache.thrift.meta_data.FieldMetaData("hrLeaveTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChatHistory.class, metaDataMap);
  }

  public ChatHistory() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChatHistory(ChatHistory other) {
    __isset_bitfield = other.__isset_bitfield;
    this.conversationId = other.conversationId;
    this.hasMore = other.hasMore;
    if (other.isSetChatList()) {
      java.util.List<ChatVO> __this__chatList = new java.util.ArrayList<ChatVO>(other.chatList.size());
      for (ChatVO other_element : other.chatList) {
        __this__chatList.add(new ChatVO(other_element));
      }
      this.chatList = __this__chatList;
    }
    if (other.isSetHrLeaveTime()) {
      this.hrLeaveTime = other.hrLeaveTime;
    }
    this.userId = other.userId;
    if (other.isSetName()) {
      this.name = other.name;
    }
  }

  public ChatHistory deepCopy() {
    return new ChatHistory(this);
  }

  @Override
  public void clear() {
    setConversationIdIsSet(false);
    this.conversationId = 0;
    setHasMoreIsSet(false);
    this.hasMore = false;
    this.chatList = null;
    this.hrLeaveTime = null;
    setUserIdIsSet(false);
    this.userId = 0;
    this.name = null;
  }

  public int getConversationId() {
    return this.conversationId;
  }

  public ChatHistory setConversationId(int conversationId) {
    this.conversationId = conversationId;
    setConversationIdIsSet(true);
    return this;
  }

  public void unsetConversationId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONVERSATIONID_ISSET_ID);
  }

  /** Returns true if field conversationId is set (has been assigned a value) and false otherwise */
  public boolean isSetConversationId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONVERSATIONID_ISSET_ID);
  }

  public void setConversationIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONVERSATIONID_ISSET_ID, value);
  }

  public boolean isHasMore() {
    return this.hasMore;
  }

  public ChatHistory setHasMore(boolean hasMore) {
    this.hasMore = hasMore;
    setHasMoreIsSet(true);
    return this;
  }

  public void unsetHasMore() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HASMORE_ISSET_ID);
  }

  /** Returns true if field hasMore is set (has been assigned a value) and false otherwise */
  public boolean isSetHasMore() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HASMORE_ISSET_ID);
  }

  public void setHasMoreIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HASMORE_ISSET_ID, value);
  }

  public int getChatListSize() {
    return (this.chatList == null) ? 0 : this.chatList.size();
  }

  public java.util.Iterator<ChatVO> getChatListIterator() {
    return (this.chatList == null) ? null : this.chatList.iterator();
  }

  public void addToChatList(ChatVO elem) {
    if (this.chatList == null) {
      this.chatList = new java.util.ArrayList<ChatVO>();
    }
    this.chatList.add(elem);
  }

  public java.util.List<ChatVO> getChatList() {
    return this.chatList;
  }

  public ChatHistory setChatList(java.util.List<ChatVO> chatList) {
    this.chatList = chatList;
    return this;
  }

  public void unsetChatList() {
    this.chatList = null;
  }

  /** Returns true if field chatList is set (has been assigned a value) and false otherwise */
  public boolean isSetChatList() {
    return this.chatList != null;
  }

  public void setChatListIsSet(boolean value) {
    if (!value) {
      this.chatList = null;
    }
  }

  public java.lang.String getHrLeaveTime() {
    return this.hrLeaveTime;
  }

  public ChatHistory setHrLeaveTime(java.lang.String hrLeaveTime) {
    this.hrLeaveTime = hrLeaveTime;
    return this;
  }

  public void unsetHrLeaveTime() {
    this.hrLeaveTime = null;
  }

  /** Returns true if field hrLeaveTime is set (has been assigned a value) and false otherwise */
  public boolean isSetHrLeaveTime() {
    return this.hrLeaveTime != null;
  }

  public void setHrLeaveTimeIsSet(boolean value) {
    if (!value) {
      this.hrLeaveTime = null;
    }
  }

  public int getUserId() {
    return this.userId;
  }

  public ChatHistory setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public java.lang.String getName() {
    return this.name;
  }

  public ChatHistory setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case CONVERSATION_ID:
      if (value == null) {
        unsetConversationId();
      } else {
        setConversationId((java.lang.Integer)value);
      }
      break;

    case HAS_MORE:
      if (value == null) {
        unsetHasMore();
      } else {
        setHasMore((java.lang.Boolean)value);
      }
      break;

    case CHAT_LIST:
      if (value == null) {
        unsetChatList();
      } else {
        setChatList((java.util.List<ChatVO>)value);
      }
      break;

    case HR_LEAVE_TIME:
      if (value == null) {
        unsetHrLeaveTime();
      } else {
        setHrLeaveTime((java.lang.String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((java.lang.Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CONVERSATION_ID:
      return getConversationId();

    case HAS_MORE:
      return isHasMore();

    case CHAT_LIST:
      return getChatList();

    case HR_LEAVE_TIME:
      return getHrLeaveTime();

    case USER_ID:
      return getUserId();

    case NAME:
      return getName();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CONVERSATION_ID:
      return isSetConversationId();
    case HAS_MORE:
      return isSetHasMore();
    case CHAT_LIST:
      return isSetChatList();
    case HR_LEAVE_TIME:
      return isSetHrLeaveTime();
    case USER_ID:
      return isSetUserId();
    case NAME:
      return isSetName();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ChatHistory)
      return this.equals((ChatHistory)that);
    return false;
  }

  public boolean equals(ChatHistory that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_conversationId = true && this.isSetConversationId();
    boolean that_present_conversationId = true && that.isSetConversationId();
    if (this_present_conversationId || that_present_conversationId) {
      if (!(this_present_conversationId && that_present_conversationId))
        return false;
      if (this.conversationId != that.conversationId)
        return false;
    }

    boolean this_present_hasMore = true && this.isSetHasMore();
    boolean that_present_hasMore = true && that.isSetHasMore();
    if (this_present_hasMore || that_present_hasMore) {
      if (!(this_present_hasMore && that_present_hasMore))
        return false;
      if (this.hasMore != that.hasMore)
        return false;
    }

    boolean this_present_chatList = true && this.isSetChatList();
    boolean that_present_chatList = true && that.isSetChatList();
    if (this_present_chatList || that_present_chatList) {
      if (!(this_present_chatList && that_present_chatList))
        return false;
      if (!this.chatList.equals(that.chatList))
        return false;
    }

    boolean this_present_hrLeaveTime = true && this.isSetHrLeaveTime();
    boolean that_present_hrLeaveTime = true && that.isSetHrLeaveTime();
    if (this_present_hrLeaveTime || that_present_hrLeaveTime) {
      if (!(this_present_hrLeaveTime && that_present_hrLeaveTime))
        return false;
      if (!this.hrLeaveTime.equals(that.hrLeaveTime))
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetConversationId()) ? 131071 : 524287);
    if (isSetConversationId())
      hashCode = hashCode * 8191 + conversationId;

    hashCode = hashCode * 8191 + ((isSetHasMore()) ? 131071 : 524287);
    if (isSetHasMore())
      hashCode = hashCode * 8191 + ((hasMore) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetChatList()) ? 131071 : 524287);
    if (isSetChatList())
      hashCode = hashCode * 8191 + chatList.hashCode();

    hashCode = hashCode * 8191 + ((isSetHrLeaveTime()) ? 131071 : 524287);
    if (isSetHrLeaveTime())
      hashCode = hashCode * 8191 + hrLeaveTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
    if (isSetUserId())
      hashCode = hashCode * 8191 + userId;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ChatHistory other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetConversationId()).compareTo(other.isSetConversationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConversationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conversationId, other.conversationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHasMore()).compareTo(other.isSetHasMore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasMore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasMore, other.hasMore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChatList()).compareTo(other.isSetChatList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChatList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chatList, other.chatList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHrLeaveTime()).compareTo(other.isSetHrLeaveTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHrLeaveTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrLeaveTime, other.hrLeaveTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ChatHistory(");
    boolean first = true;

    if (isSetConversationId()) {
      sb.append("conversationId:");
      sb.append(this.conversationId);
      first = false;
    }
    if (isSetHasMore()) {
      if (!first) sb.append(", ");
      sb.append("hasMore:");
      sb.append(this.hasMore);
      first = false;
    }
    if (isSetChatList()) {
      if (!first) sb.append(", ");
      sb.append("chatList:");
      if (this.chatList == null) {
        sb.append("null");
      } else {
        sb.append(this.chatList);
      }
      first = false;
    }
    if (isSetHrLeaveTime()) {
      if (!first) sb.append(", ");
      sb.append("hrLeaveTime:");
      if (this.hrLeaveTime == null) {
        sb.append("null");
      } else {
        sb.append(this.hrLeaveTime);
      }
      first = false;
    }
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChatHistoryStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ChatHistoryStandardScheme getScheme() {
      return new ChatHistoryStandardScheme();
    }
  }

  private static class ChatHistoryStandardScheme extends org.apache.thrift.scheme.StandardScheme<ChatHistory> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ChatHistory struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONVERSATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.conversationId = iprot.readI32();
              struct.setConversationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HAS_MORE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasMore = iprot.readBool();
              struct.setHasMoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHAT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.chatList = new java.util.ArrayList<ChatVO>(_list24.size);
                ChatVO _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = new ChatVO();
                  _elem25.read(iprot);
                  struct.chatList.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setChatListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HR_LEAVE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hrLeaveTime = iprot.readString();
              struct.setHrLeaveTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ChatHistory struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetConversationId()) {
        oprot.writeFieldBegin(CONVERSATION_ID_FIELD_DESC);
        oprot.writeI32(struct.conversationId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHasMore()) {
        oprot.writeFieldBegin(HAS_MORE_FIELD_DESC);
        oprot.writeBool(struct.hasMore);
        oprot.writeFieldEnd();
      }
      if (struct.chatList != null) {
        if (struct.isSetChatList()) {
          oprot.writeFieldBegin(CHAT_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.chatList.size()));
            for (ChatVO _iter27 : struct.chatList)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.hrLeaveTime != null) {
        if (struct.isSetHrLeaveTime()) {
          oprot.writeFieldBegin(HR_LEAVE_TIME_FIELD_DESC);
          oprot.writeString(struct.hrLeaveTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUserId()) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChatHistoryTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ChatHistoryTupleScheme getScheme() {
      return new ChatHistoryTupleScheme();
    }
  }

  private static class ChatHistoryTupleScheme extends org.apache.thrift.scheme.TupleScheme<ChatHistory> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ChatHistory struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetConversationId()) {
        optionals.set(0);
      }
      if (struct.isSetHasMore()) {
        optionals.set(1);
      }
      if (struct.isSetChatList()) {
        optionals.set(2);
      }
      if (struct.isSetHrLeaveTime()) {
        optionals.set(3);
      }
      if (struct.isSetUserId()) {
        optionals.set(4);
      }
      if (struct.isSetName()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetConversationId()) {
        oprot.writeI32(struct.conversationId);
      }
      if (struct.isSetHasMore()) {
        oprot.writeBool(struct.hasMore);
      }
      if (struct.isSetChatList()) {
        {
          oprot.writeI32(struct.chatList.size());
          for (ChatVO _iter28 : struct.chatList)
          {
            _iter28.write(oprot);
          }
        }
      }
      if (struct.isSetHrLeaveTime()) {
        oprot.writeString(struct.hrLeaveTime);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ChatHistory struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.conversationId = iprot.readI32();
        struct.setConversationIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hasMore = iprot.readBool();
        struct.setHasMoreIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.chatList = new java.util.ArrayList<ChatVO>(_list29.size);
          ChatVO _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new ChatVO();
            _elem30.read(iprot);
            struct.chatList.add(_elem30);
          }
        }
        struct.setChatListIsSet(true);
      }
      if (incoming.get(3)) {
        struct.hrLeaveTime = iprot.readString();
        struct.setHrLeaveTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

