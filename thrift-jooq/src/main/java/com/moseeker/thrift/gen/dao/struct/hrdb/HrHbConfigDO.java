/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.hrdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-04-12")
public class HrHbConfigDO implements org.apache.thrift.TBase<HrHbConfigDO, HrHbConfigDO._Fields>, java.io.Serializable, Cloneable, Comparable<HrHbConfigDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HrHbConfigDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("target", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TOTAL_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalAmount", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField RANGE_MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("rangeMin", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField RANGE_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("rangeMax", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField PROBABILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("probability", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField D_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("dType", org.apache.thrift.protocol.TType.BYTE, (short)11);
  private static final org.apache.thrift.protocol.TField HEADLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("headline", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField HEADLINE_FAILURE_FIELD_DESC = new org.apache.thrift.protocol.TField("headlineFailure", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField SHARE_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("shareTitle", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField SHARE_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("shareDesc", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField SHARE_IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("shareImg", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.BYTE, (short)17);
  private static final org.apache.thrift.protocol.TField CHECKED_FIELD_DESC = new org.apache.thrift.protocol.TField("checked", org.apache.thrift.protocol.TType.BYTE, (short)18);
  private static final org.apache.thrift.protocol.TField ESTIMATED_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("estimatedTotal", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField ACTUAL_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("actualTotal", org.apache.thrift.protocol.TType.I32, (short)22);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HrHbConfigDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HrHbConfigDOTupleSchemeFactory();

  public int id; // optional
  public byte type; // optional
  public byte target; // optional
  public int companyId; // optional
  public java.lang.String startTime; // optional
  public java.lang.String endTime; // optional
  public int totalAmount; // optional
  public double rangeMin; // optional
  public double rangeMax; // optional
  public double probability; // optional
  public byte dType; // optional
  public java.lang.String headline; // optional
  public java.lang.String headlineFailure; // optional
  public java.lang.String shareTitle; // optional
  public java.lang.String shareDesc; // optional
  public java.lang.String shareImg; // optional
  public byte status; // optional
  public byte checked; // optional
  public int estimatedTotal; // optional
  public java.lang.String createTime; // optional
  public java.lang.String updateTime; // optional
  public int actualTotal; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TYPE((short)2, "type"),
    TARGET((short)3, "target"),
    COMPANY_ID((short)4, "companyId"),
    START_TIME((short)5, "startTime"),
    END_TIME((short)6, "endTime"),
    TOTAL_AMOUNT((short)7, "totalAmount"),
    RANGE_MIN((short)8, "rangeMin"),
    RANGE_MAX((short)9, "rangeMax"),
    PROBABILITY((short)10, "probability"),
    D_TYPE((short)11, "dType"),
    HEADLINE((short)12, "headline"),
    HEADLINE_FAILURE((short)13, "headlineFailure"),
    SHARE_TITLE((short)14, "shareTitle"),
    SHARE_DESC((short)15, "shareDesc"),
    SHARE_IMG((short)16, "shareImg"),
    STATUS((short)17, "status"),
    CHECKED((short)18, "checked"),
    ESTIMATED_TOTAL((short)19, "estimatedTotal"),
    CREATE_TIME((short)20, "createTime"),
    UPDATE_TIME((short)21, "updateTime"),
    ACTUAL_TOTAL((short)22, "actualTotal");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TYPE
          return TYPE;
        case 3: // TARGET
          return TARGET;
        case 4: // COMPANY_ID
          return COMPANY_ID;
        case 5: // START_TIME
          return START_TIME;
        case 6: // END_TIME
          return END_TIME;
        case 7: // TOTAL_AMOUNT
          return TOTAL_AMOUNT;
        case 8: // RANGE_MIN
          return RANGE_MIN;
        case 9: // RANGE_MAX
          return RANGE_MAX;
        case 10: // PROBABILITY
          return PROBABILITY;
        case 11: // D_TYPE
          return D_TYPE;
        case 12: // HEADLINE
          return HEADLINE;
        case 13: // HEADLINE_FAILURE
          return HEADLINE_FAILURE;
        case 14: // SHARE_TITLE
          return SHARE_TITLE;
        case 15: // SHARE_DESC
          return SHARE_DESC;
        case 16: // SHARE_IMG
          return SHARE_IMG;
        case 17: // STATUS
          return STATUS;
        case 18: // CHECKED
          return CHECKED;
        case 19: // ESTIMATED_TOTAL
          return ESTIMATED_TOTAL;
        case 20: // CREATE_TIME
          return CREATE_TIME;
        case 21: // UPDATE_TIME
          return UPDATE_TIME;
        case 22: // ACTUAL_TOTAL
          return ACTUAL_TOTAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TYPE_ISSET_ID = 1;
  private static final int __TARGET_ISSET_ID = 2;
  private static final int __COMPANYID_ISSET_ID = 3;
  private static final int __TOTALAMOUNT_ISSET_ID = 4;
  private static final int __RANGEMIN_ISSET_ID = 5;
  private static final int __RANGEMAX_ISSET_ID = 6;
  private static final int __PROBABILITY_ISSET_ID = 7;
  private static final int __DTYPE_ISSET_ID = 8;
  private static final int __STATUS_ISSET_ID = 9;
  private static final int __CHECKED_ISSET_ID = 10;
  private static final int __ESTIMATEDTOTAL_ISSET_ID = 11;
  private static final int __ACTUALTOTAL_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.TYPE,_Fields.TARGET,_Fields.COMPANY_ID,_Fields.START_TIME,_Fields.END_TIME,_Fields.TOTAL_AMOUNT,_Fields.RANGE_MIN,_Fields.RANGE_MAX,_Fields.PROBABILITY,_Fields.D_TYPE,_Fields.HEADLINE,_Fields.HEADLINE_FAILURE,_Fields.SHARE_TITLE,_Fields.SHARE_DESC,_Fields.SHARE_IMG,_Fields.STATUS,_Fields.CHECKED,_Fields.ESTIMATED_TOTAL,_Fields.CREATE_TIME,_Fields.UPDATE_TIME,_Fields.ACTUAL_TOTAL};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.TARGET, new org.apache.thrift.meta_data.FieldMetaData("target", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("totalAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RANGE_MIN, new org.apache.thrift.meta_data.FieldMetaData("rangeMin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RANGE_MAX, new org.apache.thrift.meta_data.FieldMetaData("rangeMax", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PROBABILITY, new org.apache.thrift.meta_data.FieldMetaData("probability", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.D_TYPE, new org.apache.thrift.meta_data.FieldMetaData("dType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.HEADLINE, new org.apache.thrift.meta_data.FieldMetaData("headline", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HEADLINE_FAILURE, new org.apache.thrift.meta_data.FieldMetaData("headlineFailure", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHARE_TITLE, new org.apache.thrift.meta_data.FieldMetaData("shareTitle", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHARE_DESC, new org.apache.thrift.meta_data.FieldMetaData("shareDesc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHARE_IMG, new org.apache.thrift.meta_data.FieldMetaData("shareImg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CHECKED, new org.apache.thrift.meta_data.FieldMetaData("checked", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ESTIMATED_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("estimatedTotal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTUAL_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("actualTotal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HrHbConfigDO.class, metaDataMap);
  }

  public HrHbConfigDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HrHbConfigDO(HrHbConfigDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.type = other.type;
    this.target = other.target;
    this.companyId = other.companyId;
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetEndTime()) {
      this.endTime = other.endTime;
    }
    this.totalAmount = other.totalAmount;
    this.rangeMin = other.rangeMin;
    this.rangeMax = other.rangeMax;
    this.probability = other.probability;
    this.dType = other.dType;
    if (other.isSetHeadline()) {
      this.headline = other.headline;
    }
    if (other.isSetHeadlineFailure()) {
      this.headlineFailure = other.headlineFailure;
    }
    if (other.isSetShareTitle()) {
      this.shareTitle = other.shareTitle;
    }
    if (other.isSetShareDesc()) {
      this.shareDesc = other.shareDesc;
    }
    if (other.isSetShareImg()) {
      this.shareImg = other.shareImg;
    }
    this.status = other.status;
    this.checked = other.checked;
    this.estimatedTotal = other.estimatedTotal;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
    this.actualTotal = other.actualTotal;
  }

  public HrHbConfigDO deepCopy() {
    return new HrHbConfigDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setTypeIsSet(false);
    this.type = 0;
    setTargetIsSet(false);
    this.target = 0;
    setCompanyIdIsSet(false);
    this.companyId = 0;
    this.startTime = null;
    this.endTime = null;
    setTotalAmountIsSet(false);
    this.totalAmount = 0;
    setRangeMinIsSet(false);
    this.rangeMin = 0.0;
    setRangeMaxIsSet(false);
    this.rangeMax = 0.0;
    setProbabilityIsSet(false);
    this.probability = 0.0;
    setDTypeIsSet(false);
    this.dType = 0;
    this.headline = null;
    this.headlineFailure = null;
    this.shareTitle = null;
    this.shareDesc = null;
    this.shareImg = null;
    setStatusIsSet(false);
    this.status = 0;
    setCheckedIsSet(false);
    this.checked = 0;
    setEstimatedTotalIsSet(false);
    this.estimatedTotal = 0;
    this.createTime = null;
    this.updateTime = null;
    setActualTotalIsSet(false);
    this.actualTotal = 0;
  }

  public int getId() {
    return this.id;
  }

  public HrHbConfigDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public byte getType() {
    return this.type;
  }

  public HrHbConfigDO setType(byte type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public byte getTarget() {
    return this.target;
  }

  public HrHbConfigDO setTarget(byte target) {
    this.target = target;
    setTargetIsSet(true);
    return this;
  }

  public void unsetTarget() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TARGET_ISSET_ID);
  }

  /** Returns true if field target is set (has been assigned a value) and false otherwise */
  public boolean isSetTarget() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TARGET_ISSET_ID);
  }

  public void setTargetIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TARGET_ISSET_ID, value);
  }

  public int getCompanyId() {
    return this.companyId;
  }

  public HrHbConfigDO setCompanyId(int companyId) {
    this.companyId = companyId;
    setCompanyIdIsSet(true);
    return this;
  }

  public void unsetCompanyId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  public void setCompanyIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
  }

  public java.lang.String getStartTime() {
    return this.startTime;
  }

  public HrHbConfigDO setStartTime(java.lang.String startTime) {
    this.startTime = startTime;
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public java.lang.String getEndTime() {
    return this.endTime;
  }

  public HrHbConfigDO setEndTime(java.lang.String endTime) {
    this.endTime = endTime;
    return this;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public int getTotalAmount() {
    return this.totalAmount;
  }

  public HrHbConfigDO setTotalAmount(int totalAmount) {
    this.totalAmount = totalAmount;
    setTotalAmountIsSet(true);
    return this;
  }

  public void unsetTotalAmount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID);
  }

  /** Returns true if field totalAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalAmount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID);
  }

  public void setTotalAmountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID, value);
  }

  public double getRangeMin() {
    return this.rangeMin;
  }

  public HrHbConfigDO setRangeMin(double rangeMin) {
    this.rangeMin = rangeMin;
    setRangeMinIsSet(true);
    return this;
  }

  public void unsetRangeMin() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RANGEMIN_ISSET_ID);
  }

  /** Returns true if field rangeMin is set (has been assigned a value) and false otherwise */
  public boolean isSetRangeMin() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RANGEMIN_ISSET_ID);
  }

  public void setRangeMinIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RANGEMIN_ISSET_ID, value);
  }

  public double getRangeMax() {
    return this.rangeMax;
  }

  public HrHbConfigDO setRangeMax(double rangeMax) {
    this.rangeMax = rangeMax;
    setRangeMaxIsSet(true);
    return this;
  }

  public void unsetRangeMax() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RANGEMAX_ISSET_ID);
  }

  /** Returns true if field rangeMax is set (has been assigned a value) and false otherwise */
  public boolean isSetRangeMax() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RANGEMAX_ISSET_ID);
  }

  public void setRangeMaxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RANGEMAX_ISSET_ID, value);
  }

  public double getProbability() {
    return this.probability;
  }

  public HrHbConfigDO setProbability(double probability) {
    this.probability = probability;
    setProbabilityIsSet(true);
    return this;
  }

  public void unsetProbability() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROBABILITY_ISSET_ID);
  }

  /** Returns true if field probability is set (has been assigned a value) and false otherwise */
  public boolean isSetProbability() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROBABILITY_ISSET_ID);
  }

  public void setProbabilityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROBABILITY_ISSET_ID, value);
  }

  public byte getDType() {
    return this.dType;
  }

  public HrHbConfigDO setDType(byte dType) {
    this.dType = dType;
    setDTypeIsSet(true);
    return this;
  }

  public void unsetDType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DTYPE_ISSET_ID);
  }

  /** Returns true if field dType is set (has been assigned a value) and false otherwise */
  public boolean isSetDType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DTYPE_ISSET_ID);
  }

  public void setDTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DTYPE_ISSET_ID, value);
  }

  public java.lang.String getHeadline() {
    return this.headline;
  }

  public HrHbConfigDO setHeadline(java.lang.String headline) {
    this.headline = headline;
    return this;
  }

  public void unsetHeadline() {
    this.headline = null;
  }

  /** Returns true if field headline is set (has been assigned a value) and false otherwise */
  public boolean isSetHeadline() {
    return this.headline != null;
  }

  public void setHeadlineIsSet(boolean value) {
    if (!value) {
      this.headline = null;
    }
  }

  public java.lang.String getHeadlineFailure() {
    return this.headlineFailure;
  }

  public HrHbConfigDO setHeadlineFailure(java.lang.String headlineFailure) {
    this.headlineFailure = headlineFailure;
    return this;
  }

  public void unsetHeadlineFailure() {
    this.headlineFailure = null;
  }

  /** Returns true if field headlineFailure is set (has been assigned a value) and false otherwise */
  public boolean isSetHeadlineFailure() {
    return this.headlineFailure != null;
  }

  public void setHeadlineFailureIsSet(boolean value) {
    if (!value) {
      this.headlineFailure = null;
    }
  }

  public java.lang.String getShareTitle() {
    return this.shareTitle;
  }

  public HrHbConfigDO setShareTitle(java.lang.String shareTitle) {
    this.shareTitle = shareTitle;
    return this;
  }

  public void unsetShareTitle() {
    this.shareTitle = null;
  }

  /** Returns true if field shareTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetShareTitle() {
    return this.shareTitle != null;
  }

  public void setShareTitleIsSet(boolean value) {
    if (!value) {
      this.shareTitle = null;
    }
  }

  public java.lang.String getShareDesc() {
    return this.shareDesc;
  }

  public HrHbConfigDO setShareDesc(java.lang.String shareDesc) {
    this.shareDesc = shareDesc;
    return this;
  }

  public void unsetShareDesc() {
    this.shareDesc = null;
  }

  /** Returns true if field shareDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetShareDesc() {
    return this.shareDesc != null;
  }

  public void setShareDescIsSet(boolean value) {
    if (!value) {
      this.shareDesc = null;
    }
  }

  public java.lang.String getShareImg() {
    return this.shareImg;
  }

  public HrHbConfigDO setShareImg(java.lang.String shareImg) {
    this.shareImg = shareImg;
    return this;
  }

  public void unsetShareImg() {
    this.shareImg = null;
  }

  /** Returns true if field shareImg is set (has been assigned a value) and false otherwise */
  public boolean isSetShareImg() {
    return this.shareImg != null;
  }

  public void setShareImgIsSet(boolean value) {
    if (!value) {
      this.shareImg = null;
    }
  }

  public byte getStatus() {
    return this.status;
  }

  public HrHbConfigDO setStatus(byte status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public byte getChecked() {
    return this.checked;
  }

  public HrHbConfigDO setChecked(byte checked) {
    this.checked = checked;
    setCheckedIsSet(true);
    return this;
  }

  public void unsetChecked() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHECKED_ISSET_ID);
  }

  /** Returns true if field checked is set (has been assigned a value) and false otherwise */
  public boolean isSetChecked() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHECKED_ISSET_ID);
  }

  public void setCheckedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHECKED_ISSET_ID, value);
  }

  public int getEstimatedTotal() {
    return this.estimatedTotal;
  }

  public HrHbConfigDO setEstimatedTotal(int estimatedTotal) {
    this.estimatedTotal = estimatedTotal;
    setEstimatedTotalIsSet(true);
    return this;
  }

  public void unsetEstimatedTotal() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ESTIMATEDTOTAL_ISSET_ID);
  }

  /** Returns true if field estimatedTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetEstimatedTotal() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ESTIMATEDTOTAL_ISSET_ID);
  }

  public void setEstimatedTotalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ESTIMATEDTOTAL_ISSET_ID, value);
  }

  public java.lang.String getCreateTime() {
    return this.createTime;
  }

  public HrHbConfigDO setCreateTime(java.lang.String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public java.lang.String getUpdateTime() {
    return this.updateTime;
  }

  public HrHbConfigDO setUpdateTime(java.lang.String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public int getActualTotal() {
    return this.actualTotal;
  }

  public HrHbConfigDO setActualTotal(int actualTotal) {
    this.actualTotal = actualTotal;
    setActualTotalIsSet(true);
    return this;
  }

  public void unsetActualTotal() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACTUALTOTAL_ISSET_ID);
  }

  /** Returns true if field actualTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetActualTotal() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACTUALTOTAL_ISSET_ID);
  }

  public void setActualTotalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACTUALTOTAL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((java.lang.Byte)value);
      }
      break;

    case TARGET:
      if (value == null) {
        unsetTarget();
      } else {
        setTarget((java.lang.Byte)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompanyId();
      } else {
        setCompanyId((java.lang.Integer)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((java.lang.String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((java.lang.String)value);
      }
      break;

    case TOTAL_AMOUNT:
      if (value == null) {
        unsetTotalAmount();
      } else {
        setTotalAmount((java.lang.Integer)value);
      }
      break;

    case RANGE_MIN:
      if (value == null) {
        unsetRangeMin();
      } else {
        setRangeMin((java.lang.Double)value);
      }
      break;

    case RANGE_MAX:
      if (value == null) {
        unsetRangeMax();
      } else {
        setRangeMax((java.lang.Double)value);
      }
      break;

    case PROBABILITY:
      if (value == null) {
        unsetProbability();
      } else {
        setProbability((java.lang.Double)value);
      }
      break;

    case D_TYPE:
      if (value == null) {
        unsetDType();
      } else {
        setDType((java.lang.Byte)value);
      }
      break;

    case HEADLINE:
      if (value == null) {
        unsetHeadline();
      } else {
        setHeadline((java.lang.String)value);
      }
      break;

    case HEADLINE_FAILURE:
      if (value == null) {
        unsetHeadlineFailure();
      } else {
        setHeadlineFailure((java.lang.String)value);
      }
      break;

    case SHARE_TITLE:
      if (value == null) {
        unsetShareTitle();
      } else {
        setShareTitle((java.lang.String)value);
      }
      break;

    case SHARE_DESC:
      if (value == null) {
        unsetShareDesc();
      } else {
        setShareDesc((java.lang.String)value);
      }
      break;

    case SHARE_IMG:
      if (value == null) {
        unsetShareImg();
      } else {
        setShareImg((java.lang.String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((java.lang.Byte)value);
      }
      break;

    case CHECKED:
      if (value == null) {
        unsetChecked();
      } else {
        setChecked((java.lang.Byte)value);
      }
      break;

    case ESTIMATED_TOTAL:
      if (value == null) {
        unsetEstimatedTotal();
      } else {
        setEstimatedTotal((java.lang.Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((java.lang.String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((java.lang.String)value);
      }
      break;

    case ACTUAL_TOTAL:
      if (value == null) {
        unsetActualTotal();
      } else {
        setActualTotal((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TYPE:
      return getType();

    case TARGET:
      return getTarget();

    case COMPANY_ID:
      return getCompanyId();

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case TOTAL_AMOUNT:
      return getTotalAmount();

    case RANGE_MIN:
      return getRangeMin();

    case RANGE_MAX:
      return getRangeMax();

    case PROBABILITY:
      return getProbability();

    case D_TYPE:
      return getDType();

    case HEADLINE:
      return getHeadline();

    case HEADLINE_FAILURE:
      return getHeadlineFailure();

    case SHARE_TITLE:
      return getShareTitle();

    case SHARE_DESC:
      return getShareDesc();

    case SHARE_IMG:
      return getShareImg();

    case STATUS:
      return getStatus();

    case CHECKED:
      return getChecked();

    case ESTIMATED_TOTAL:
      return getEstimatedTotal();

    case CREATE_TIME:
      return getCreateTime();

    case UPDATE_TIME:
      return getUpdateTime();

    case ACTUAL_TOTAL:
      return getActualTotal();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TYPE:
      return isSetType();
    case TARGET:
      return isSetTarget();
    case COMPANY_ID:
      return isSetCompanyId();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case TOTAL_AMOUNT:
      return isSetTotalAmount();
    case RANGE_MIN:
      return isSetRangeMin();
    case RANGE_MAX:
      return isSetRangeMax();
    case PROBABILITY:
      return isSetProbability();
    case D_TYPE:
      return isSetDType();
    case HEADLINE:
      return isSetHeadline();
    case HEADLINE_FAILURE:
      return isSetHeadlineFailure();
    case SHARE_TITLE:
      return isSetShareTitle();
    case SHARE_DESC:
      return isSetShareDesc();
    case SHARE_IMG:
      return isSetShareImg();
    case STATUS:
      return isSetStatus();
    case CHECKED:
      return isSetChecked();
    case ESTIMATED_TOTAL:
      return isSetEstimatedTotal();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case ACTUAL_TOTAL:
      return isSetActualTotal();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof HrHbConfigDO)
      return this.equals((HrHbConfigDO)that);
    return false;
  }

  public boolean equals(HrHbConfigDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_target = true && this.isSetTarget();
    boolean that_present_target = true && that.isSetTarget();
    if (this_present_target || that_present_target) {
      if (!(this_present_target && that_present_target))
        return false;
      if (this.target != that.target)
        return false;
    }

    boolean this_present_companyId = true && this.isSetCompanyId();
    boolean that_present_companyId = true && that.isSetCompanyId();
    if (this_present_companyId || that_present_companyId) {
      if (!(this_present_companyId && that_present_companyId))
        return false;
      if (this.companyId != that.companyId)
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_totalAmount = true && this.isSetTotalAmount();
    boolean that_present_totalAmount = true && that.isSetTotalAmount();
    if (this_present_totalAmount || that_present_totalAmount) {
      if (!(this_present_totalAmount && that_present_totalAmount))
        return false;
      if (this.totalAmount != that.totalAmount)
        return false;
    }

    boolean this_present_rangeMin = true && this.isSetRangeMin();
    boolean that_present_rangeMin = true && that.isSetRangeMin();
    if (this_present_rangeMin || that_present_rangeMin) {
      if (!(this_present_rangeMin && that_present_rangeMin))
        return false;
      if (this.rangeMin != that.rangeMin)
        return false;
    }

    boolean this_present_rangeMax = true && this.isSetRangeMax();
    boolean that_present_rangeMax = true && that.isSetRangeMax();
    if (this_present_rangeMax || that_present_rangeMax) {
      if (!(this_present_rangeMax && that_present_rangeMax))
        return false;
      if (this.rangeMax != that.rangeMax)
        return false;
    }

    boolean this_present_probability = true && this.isSetProbability();
    boolean that_present_probability = true && that.isSetProbability();
    if (this_present_probability || that_present_probability) {
      if (!(this_present_probability && that_present_probability))
        return false;
      if (this.probability != that.probability)
        return false;
    }

    boolean this_present_dType = true && this.isSetDType();
    boolean that_present_dType = true && that.isSetDType();
    if (this_present_dType || that_present_dType) {
      if (!(this_present_dType && that_present_dType))
        return false;
      if (this.dType != that.dType)
        return false;
    }

    boolean this_present_headline = true && this.isSetHeadline();
    boolean that_present_headline = true && that.isSetHeadline();
    if (this_present_headline || that_present_headline) {
      if (!(this_present_headline && that_present_headline))
        return false;
      if (!this.headline.equals(that.headline))
        return false;
    }

    boolean this_present_headlineFailure = true && this.isSetHeadlineFailure();
    boolean that_present_headlineFailure = true && that.isSetHeadlineFailure();
    if (this_present_headlineFailure || that_present_headlineFailure) {
      if (!(this_present_headlineFailure && that_present_headlineFailure))
        return false;
      if (!this.headlineFailure.equals(that.headlineFailure))
        return false;
    }

    boolean this_present_shareTitle = true && this.isSetShareTitle();
    boolean that_present_shareTitle = true && that.isSetShareTitle();
    if (this_present_shareTitle || that_present_shareTitle) {
      if (!(this_present_shareTitle && that_present_shareTitle))
        return false;
      if (!this.shareTitle.equals(that.shareTitle))
        return false;
    }

    boolean this_present_shareDesc = true && this.isSetShareDesc();
    boolean that_present_shareDesc = true && that.isSetShareDesc();
    if (this_present_shareDesc || that_present_shareDesc) {
      if (!(this_present_shareDesc && that_present_shareDesc))
        return false;
      if (!this.shareDesc.equals(that.shareDesc))
        return false;
    }

    boolean this_present_shareImg = true && this.isSetShareImg();
    boolean that_present_shareImg = true && that.isSetShareImg();
    if (this_present_shareImg || that_present_shareImg) {
      if (!(this_present_shareImg && that_present_shareImg))
        return false;
      if (!this.shareImg.equals(that.shareImg))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_checked = true && this.isSetChecked();
    boolean that_present_checked = true && that.isSetChecked();
    if (this_present_checked || that_present_checked) {
      if (!(this_present_checked && that_present_checked))
        return false;
      if (this.checked != that.checked)
        return false;
    }

    boolean this_present_estimatedTotal = true && this.isSetEstimatedTotal();
    boolean that_present_estimatedTotal = true && that.isSetEstimatedTotal();
    if (this_present_estimatedTotal || that_present_estimatedTotal) {
      if (!(this_present_estimatedTotal && that_present_estimatedTotal))
        return false;
      if (this.estimatedTotal != that.estimatedTotal)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    boolean this_present_actualTotal = true && this.isSetActualTotal();
    boolean that_present_actualTotal = true && that.isSetActualTotal();
    if (this_present_actualTotal || that_present_actualTotal) {
      if (!(this_present_actualTotal && that_present_actualTotal))
        return false;
      if (this.actualTotal != that.actualTotal)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + (int) (type);

    hashCode = hashCode * 8191 + ((isSetTarget()) ? 131071 : 524287);
    if (isSetTarget())
      hashCode = hashCode * 8191 + (int) (target);

    hashCode = hashCode * 8191 + ((isSetCompanyId()) ? 131071 : 524287);
    if (isSetCompanyId())
      hashCode = hashCode * 8191 + companyId;

    hashCode = hashCode * 8191 + ((isSetStartTime()) ? 131071 : 524287);
    if (isSetStartTime())
      hashCode = hashCode * 8191 + startTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetEndTime()) ? 131071 : 524287);
    if (isSetEndTime())
      hashCode = hashCode * 8191 + endTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetTotalAmount()) ? 131071 : 524287);
    if (isSetTotalAmount())
      hashCode = hashCode * 8191 + totalAmount;

    hashCode = hashCode * 8191 + ((isSetRangeMin()) ? 131071 : 524287);
    if (isSetRangeMin())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rangeMin);

    hashCode = hashCode * 8191 + ((isSetRangeMax()) ? 131071 : 524287);
    if (isSetRangeMax())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rangeMax);

    hashCode = hashCode * 8191 + ((isSetProbability()) ? 131071 : 524287);
    if (isSetProbability())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(probability);

    hashCode = hashCode * 8191 + ((isSetDType()) ? 131071 : 524287);
    if (isSetDType())
      hashCode = hashCode * 8191 + (int) (dType);

    hashCode = hashCode * 8191 + ((isSetHeadline()) ? 131071 : 524287);
    if (isSetHeadline())
      hashCode = hashCode * 8191 + headline.hashCode();

    hashCode = hashCode * 8191 + ((isSetHeadlineFailure()) ? 131071 : 524287);
    if (isSetHeadlineFailure())
      hashCode = hashCode * 8191 + headlineFailure.hashCode();

    hashCode = hashCode * 8191 + ((isSetShareTitle()) ? 131071 : 524287);
    if (isSetShareTitle())
      hashCode = hashCode * 8191 + shareTitle.hashCode();

    hashCode = hashCode * 8191 + ((isSetShareDesc()) ? 131071 : 524287);
    if (isSetShareDesc())
      hashCode = hashCode * 8191 + shareDesc.hashCode();

    hashCode = hashCode * 8191 + ((isSetShareImg()) ? 131071 : 524287);
    if (isSetShareImg())
      hashCode = hashCode * 8191 + shareImg.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + (int) (status);

    hashCode = hashCode * 8191 + ((isSetChecked()) ? 131071 : 524287);
    if (isSetChecked())
      hashCode = hashCode * 8191 + (int) (checked);

    hashCode = hashCode * 8191 + ((isSetEstimatedTotal()) ? 131071 : 524287);
    if (isSetEstimatedTotal())
      hashCode = hashCode * 8191 + estimatedTotal;

    hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
    if (isSetCreateTime())
      hashCode = hashCode * 8191 + createTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
    if (isSetUpdateTime())
      hashCode = hashCode * 8191 + updateTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetActualTotal()) ? 131071 : 524287);
    if (isSetActualTotal())
      hashCode = hashCode * 8191 + actualTotal;

    return hashCode;
  }

  @Override
  public int compareTo(HrHbConfigDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTarget()).compareTo(other.isSetTarget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTarget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.target, other.target);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTotalAmount()).compareTo(other.isSetTotalAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalAmount, other.totalAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRangeMin()).compareTo(other.isSetRangeMin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRangeMin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rangeMin, other.rangeMin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRangeMax()).compareTo(other.isSetRangeMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRangeMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rangeMax, other.rangeMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProbability()).compareTo(other.isSetProbability());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProbability()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.probability, other.probability);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDType()).compareTo(other.isSetDType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dType, other.dType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHeadline()).compareTo(other.isSetHeadline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeadline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headline, other.headline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHeadlineFailure()).compareTo(other.isSetHeadlineFailure());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeadlineFailure()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headlineFailure, other.headlineFailure);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShareTitle()).compareTo(other.isSetShareTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareTitle, other.shareTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShareDesc()).compareTo(other.isSetShareDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareDesc, other.shareDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShareImg()).compareTo(other.isSetShareImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareImg, other.shareImg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChecked()).compareTo(other.isSetChecked());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChecked()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checked, other.checked);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEstimatedTotal()).compareTo(other.isSetEstimatedTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEstimatedTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.estimatedTotal, other.estimatedTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetActualTotal()).compareTo(other.isSetActualTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualTotal, other.actualTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("HrHbConfigDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
    }
    if (isSetTarget()) {
      if (!first) sb.append(", ");
      sb.append("target:");
      sb.append(this.target);
      first = false;
    }
    if (isSetCompanyId()) {
      if (!first) sb.append(", ");
      sb.append("companyId:");
      sb.append(this.companyId);
      first = false;
    }
    if (isSetStartTime()) {
      if (!first) sb.append(", ");
      sb.append("startTime:");
      if (this.startTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startTime);
      }
      first = false;
    }
    if (isSetEndTime()) {
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
    }
    if (isSetTotalAmount()) {
      if (!first) sb.append(", ");
      sb.append("totalAmount:");
      sb.append(this.totalAmount);
      first = false;
    }
    if (isSetRangeMin()) {
      if (!first) sb.append(", ");
      sb.append("rangeMin:");
      sb.append(this.rangeMin);
      first = false;
    }
    if (isSetRangeMax()) {
      if (!first) sb.append(", ");
      sb.append("rangeMax:");
      sb.append(this.rangeMax);
      first = false;
    }
    if (isSetProbability()) {
      if (!first) sb.append(", ");
      sb.append("probability:");
      sb.append(this.probability);
      first = false;
    }
    if (isSetDType()) {
      if (!first) sb.append(", ");
      sb.append("dType:");
      sb.append(this.dType);
      first = false;
    }
    if (isSetHeadline()) {
      if (!first) sb.append(", ");
      sb.append("headline:");
      if (this.headline == null) {
        sb.append("null");
      } else {
        sb.append(this.headline);
      }
      first = false;
    }
    if (isSetHeadlineFailure()) {
      if (!first) sb.append(", ");
      sb.append("headlineFailure:");
      if (this.headlineFailure == null) {
        sb.append("null");
      } else {
        sb.append(this.headlineFailure);
      }
      first = false;
    }
    if (isSetShareTitle()) {
      if (!first) sb.append(", ");
      sb.append("shareTitle:");
      if (this.shareTitle == null) {
        sb.append("null");
      } else {
        sb.append(this.shareTitle);
      }
      first = false;
    }
    if (isSetShareDesc()) {
      if (!first) sb.append(", ");
      sb.append("shareDesc:");
      if (this.shareDesc == null) {
        sb.append("null");
      } else {
        sb.append(this.shareDesc);
      }
      first = false;
    }
    if (isSetShareImg()) {
      if (!first) sb.append(", ");
      sb.append("shareImg:");
      if (this.shareImg == null) {
        sb.append("null");
      } else {
        sb.append(this.shareImg);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
    }
    if (isSetChecked()) {
      if (!first) sb.append(", ");
      sb.append("checked:");
      sb.append(this.checked);
      first = false;
    }
    if (isSetEstimatedTotal()) {
      if (!first) sb.append(", ");
      sb.append("estimatedTotal:");
      sb.append(this.estimatedTotal);
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
    }
    if (isSetActualTotal()) {
      if (!first) sb.append(", ");
      sb.append("actualTotal:");
      sb.append(this.actualTotal);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HrHbConfigDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrHbConfigDOStandardScheme getScheme() {
      return new HrHbConfigDOStandardScheme();
    }
  }

  private static class HrHbConfigDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<HrHbConfigDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HrHbConfigDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.type = iprot.readByte();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TARGET
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.target = iprot.readByte();
              struct.setTargetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.companyId = iprot.readI32();
              struct.setCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endTime = iprot.readString();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOTAL_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalAmount = iprot.readI32();
              struct.setTotalAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RANGE_MIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rangeMin = iprot.readDouble();
              struct.setRangeMinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RANGE_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rangeMax = iprot.readDouble();
              struct.setRangeMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PROBABILITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.probability = iprot.readDouble();
              struct.setProbabilityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // D_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.dType = iprot.readByte();
              struct.setDTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // HEADLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.headline = iprot.readString();
              struct.setHeadlineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // HEADLINE_FAILURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.headlineFailure = iprot.readString();
              struct.setHeadlineFailureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SHARE_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shareTitle = iprot.readString();
              struct.setShareTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SHARE_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shareDesc = iprot.readString();
              struct.setShareDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SHARE_IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shareImg = iprot.readString();
              struct.setShareImgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.status = iprot.readByte();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CHECKED
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.checked = iprot.readByte();
              struct.setCheckedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ESTIMATED_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.estimatedTotal = iprot.readI32();
              struct.setEstimatedTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ACTUAL_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.actualTotal = iprot.readI32();
              struct.setActualTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HrHbConfigDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetType()) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeByte(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTarget()) {
        oprot.writeFieldBegin(TARGET_FIELD_DESC);
        oprot.writeByte(struct.target);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompanyId()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.companyId);
        oprot.writeFieldEnd();
      }
      if (struct.startTime != null) {
        if (struct.isSetStartTime()) {
          oprot.writeFieldBegin(START_TIME_FIELD_DESC);
          oprot.writeString(struct.startTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.endTime != null) {
        if (struct.isSetEndTime()) {
          oprot.writeFieldBegin(END_TIME_FIELD_DESC);
          oprot.writeString(struct.endTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTotalAmount()) {
        oprot.writeFieldBegin(TOTAL_AMOUNT_FIELD_DESC);
        oprot.writeI32(struct.totalAmount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRangeMin()) {
        oprot.writeFieldBegin(RANGE_MIN_FIELD_DESC);
        oprot.writeDouble(struct.rangeMin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRangeMax()) {
        oprot.writeFieldBegin(RANGE_MAX_FIELD_DESC);
        oprot.writeDouble(struct.rangeMax);
        oprot.writeFieldEnd();
      }
      if (struct.isSetProbability()) {
        oprot.writeFieldBegin(PROBABILITY_FIELD_DESC);
        oprot.writeDouble(struct.probability);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDType()) {
        oprot.writeFieldBegin(D_TYPE_FIELD_DESC);
        oprot.writeByte(struct.dType);
        oprot.writeFieldEnd();
      }
      if (struct.headline != null) {
        if (struct.isSetHeadline()) {
          oprot.writeFieldBegin(HEADLINE_FIELD_DESC);
          oprot.writeString(struct.headline);
          oprot.writeFieldEnd();
        }
      }
      if (struct.headlineFailure != null) {
        if (struct.isSetHeadlineFailure()) {
          oprot.writeFieldBegin(HEADLINE_FAILURE_FIELD_DESC);
          oprot.writeString(struct.headlineFailure);
          oprot.writeFieldEnd();
        }
      }
      if (struct.shareTitle != null) {
        if (struct.isSetShareTitle()) {
          oprot.writeFieldBegin(SHARE_TITLE_FIELD_DESC);
          oprot.writeString(struct.shareTitle);
          oprot.writeFieldEnd();
        }
      }
      if (struct.shareDesc != null) {
        if (struct.isSetShareDesc()) {
          oprot.writeFieldBegin(SHARE_DESC_FIELD_DESC);
          oprot.writeString(struct.shareDesc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.shareImg != null) {
        if (struct.isSetShareImg()) {
          oprot.writeFieldBegin(SHARE_IMG_FIELD_DESC);
          oprot.writeString(struct.shareImg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStatus()) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeByte(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.isSetChecked()) {
        oprot.writeFieldBegin(CHECKED_FIELD_DESC);
        oprot.writeByte(struct.checked);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEstimatedTotal()) {
        oprot.writeFieldBegin(ESTIMATED_TOTAL_FIELD_DESC);
        oprot.writeI32(struct.estimatedTotal);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateTime != null) {
        if (struct.isSetUpdateTime()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetActualTotal()) {
        oprot.writeFieldBegin(ACTUAL_TOTAL_FIELD_DESC);
        oprot.writeI32(struct.actualTotal);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HrHbConfigDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrHbConfigDOTupleScheme getScheme() {
      return new HrHbConfigDOTupleScheme();
    }
  }

  private static class HrHbConfigDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<HrHbConfigDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HrHbConfigDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetType()) {
        optionals.set(1);
      }
      if (struct.isSetTarget()) {
        optionals.set(2);
      }
      if (struct.isSetCompanyId()) {
        optionals.set(3);
      }
      if (struct.isSetStartTime()) {
        optionals.set(4);
      }
      if (struct.isSetEndTime()) {
        optionals.set(5);
      }
      if (struct.isSetTotalAmount()) {
        optionals.set(6);
      }
      if (struct.isSetRangeMin()) {
        optionals.set(7);
      }
      if (struct.isSetRangeMax()) {
        optionals.set(8);
      }
      if (struct.isSetProbability()) {
        optionals.set(9);
      }
      if (struct.isSetDType()) {
        optionals.set(10);
      }
      if (struct.isSetHeadline()) {
        optionals.set(11);
      }
      if (struct.isSetHeadlineFailure()) {
        optionals.set(12);
      }
      if (struct.isSetShareTitle()) {
        optionals.set(13);
      }
      if (struct.isSetShareDesc()) {
        optionals.set(14);
      }
      if (struct.isSetShareImg()) {
        optionals.set(15);
      }
      if (struct.isSetStatus()) {
        optionals.set(16);
      }
      if (struct.isSetChecked()) {
        optionals.set(17);
      }
      if (struct.isSetEstimatedTotal()) {
        optionals.set(18);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(19);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(20);
      }
      if (struct.isSetActualTotal()) {
        optionals.set(21);
      }
      oprot.writeBitSet(optionals, 22);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetType()) {
        oprot.writeByte(struct.type);
      }
      if (struct.isSetTarget()) {
        oprot.writeByte(struct.target);
      }
      if (struct.isSetCompanyId()) {
        oprot.writeI32(struct.companyId);
      }
      if (struct.isSetStartTime()) {
        oprot.writeString(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeString(struct.endTime);
      }
      if (struct.isSetTotalAmount()) {
        oprot.writeI32(struct.totalAmount);
      }
      if (struct.isSetRangeMin()) {
        oprot.writeDouble(struct.rangeMin);
      }
      if (struct.isSetRangeMax()) {
        oprot.writeDouble(struct.rangeMax);
      }
      if (struct.isSetProbability()) {
        oprot.writeDouble(struct.probability);
      }
      if (struct.isSetDType()) {
        oprot.writeByte(struct.dType);
      }
      if (struct.isSetHeadline()) {
        oprot.writeString(struct.headline);
      }
      if (struct.isSetHeadlineFailure()) {
        oprot.writeString(struct.headlineFailure);
      }
      if (struct.isSetShareTitle()) {
        oprot.writeString(struct.shareTitle);
      }
      if (struct.isSetShareDesc()) {
        oprot.writeString(struct.shareDesc);
      }
      if (struct.isSetShareImg()) {
        oprot.writeString(struct.shareImg);
      }
      if (struct.isSetStatus()) {
        oprot.writeByte(struct.status);
      }
      if (struct.isSetChecked()) {
        oprot.writeByte(struct.checked);
      }
      if (struct.isSetEstimatedTotal()) {
        oprot.writeI32(struct.estimatedTotal);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
      if (struct.isSetActualTotal()) {
        oprot.writeI32(struct.actualTotal);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HrHbConfigDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(22);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.type = iprot.readByte();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.target = iprot.readByte();
        struct.setTargetIsSet(true);
      }
      if (incoming.get(3)) {
        struct.companyId = iprot.readI32();
        struct.setCompanyIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.startTime = iprot.readString();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.endTime = iprot.readString();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.totalAmount = iprot.readI32();
        struct.setTotalAmountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.rangeMin = iprot.readDouble();
        struct.setRangeMinIsSet(true);
      }
      if (incoming.get(8)) {
        struct.rangeMax = iprot.readDouble();
        struct.setRangeMaxIsSet(true);
      }
      if (incoming.get(9)) {
        struct.probability = iprot.readDouble();
        struct.setProbabilityIsSet(true);
      }
      if (incoming.get(10)) {
        struct.dType = iprot.readByte();
        struct.setDTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.headline = iprot.readString();
        struct.setHeadlineIsSet(true);
      }
      if (incoming.get(12)) {
        struct.headlineFailure = iprot.readString();
        struct.setHeadlineFailureIsSet(true);
      }
      if (incoming.get(13)) {
        struct.shareTitle = iprot.readString();
        struct.setShareTitleIsSet(true);
      }
      if (incoming.get(14)) {
        struct.shareDesc = iprot.readString();
        struct.setShareDescIsSet(true);
      }
      if (incoming.get(15)) {
        struct.shareImg = iprot.readString();
        struct.setShareImgIsSet(true);
      }
      if (incoming.get(16)) {
        struct.status = iprot.readByte();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(17)) {
        struct.checked = iprot.readByte();
        struct.setCheckedIsSet(true);
      }
      if (incoming.get(18)) {
        struct.estimatedTotal = iprot.readI32();
        struct.setEstimatedTotalIsSet(true);
      }
      if (incoming.get(19)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.actualTotal = iprot.readI32();
        struct.setActualTotalIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

