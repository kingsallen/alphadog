/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.useraccounts.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-02-23")
public class RecommendationVO implements org.apache.thrift.TBase<RecommendationVO, RecommendationVO._Fields>, java.io.Serializable, Cloneable, Comparable<RecommendationVO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecommendationVO");

  private static final org.apache.thrift.protocol.TField HAS_RECOMMENDS_FIELD_DESC = new org.apache.thrift.protocol.TField("hasRecommends", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("score", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField RECOMMENDS_FIELD_DESC = new org.apache.thrift.protocol.TField("recommends", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RecommendationVOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RecommendationVOTupleSchemeFactory();

  public boolean hasRecommends; // optional
  public RecommendationScoreVO score; // optional
  public java.util.List<RecommendationRecordVO> recommends; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HAS_RECOMMENDS((short)1, "hasRecommends"),
    SCORE((short)2, "score"),
    RECOMMENDS((short)3, "recommends");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HAS_RECOMMENDS
          return HAS_RECOMMENDS;
        case 2: // SCORE
          return SCORE;
        case 3: // RECOMMENDS
          return RECOMMENDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HASRECOMMENDS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.HAS_RECOMMENDS,_Fields.SCORE,_Fields.RECOMMENDS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HAS_RECOMMENDS, new org.apache.thrift.meta_data.FieldMetaData("hasRecommends", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SCORE, new org.apache.thrift.meta_data.FieldMetaData("score", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RecommendationScoreVO.class)));
    tmpMap.put(_Fields.RECOMMENDS, new org.apache.thrift.meta_data.FieldMetaData("recommends", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RecommendationRecordVO.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecommendationVO.class, metaDataMap);
  }

  public RecommendationVO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RecommendationVO(RecommendationVO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.hasRecommends = other.hasRecommends;
    if (other.isSetScore()) {
      this.score = new RecommendationScoreVO(other.score);
    }
    if (other.isSetRecommends()) {
      java.util.List<RecommendationRecordVO> __this__recommends = new java.util.ArrayList<RecommendationRecordVO>(other.recommends.size());
      for (RecommendationRecordVO other_element : other.recommends) {
        __this__recommends.add(new RecommendationRecordVO(other_element));
      }
      this.recommends = __this__recommends;
    }
  }

  public RecommendationVO deepCopy() {
    return new RecommendationVO(this);
  }

  @Override
  public void clear() {
    setHasRecommendsIsSet(false);
    this.hasRecommends = false;
    this.score = null;
    this.recommends = null;
  }

  public boolean isHasRecommends() {
    return this.hasRecommends;
  }

  public RecommendationVO setHasRecommends(boolean hasRecommends) {
    this.hasRecommends = hasRecommends;
    setHasRecommendsIsSet(true);
    return this;
  }

  public void unsetHasRecommends() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HASRECOMMENDS_ISSET_ID);
  }

  /** Returns true if field hasRecommends is set (has been assigned a value) and false otherwise */
  public boolean isSetHasRecommends() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HASRECOMMENDS_ISSET_ID);
  }

  public void setHasRecommendsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HASRECOMMENDS_ISSET_ID, value);
  }

  public RecommendationScoreVO getScore() {
    return this.score;
  }

  public RecommendationVO setScore(RecommendationScoreVO score) {
    this.score = score;
    return this;
  }

  public void unsetScore() {
    this.score = null;
  }

  /** Returns true if field score is set (has been assigned a value) and false otherwise */
  public boolean isSetScore() {
    return this.score != null;
  }

  public void setScoreIsSet(boolean value) {
    if (!value) {
      this.score = null;
    }
  }

  public int getRecommendsSize() {
    return (this.recommends == null) ? 0 : this.recommends.size();
  }

  public java.util.Iterator<RecommendationRecordVO> getRecommendsIterator() {
    return (this.recommends == null) ? null : this.recommends.iterator();
  }

  public void addToRecommends(RecommendationRecordVO elem) {
    if (this.recommends == null) {
      this.recommends = new java.util.ArrayList<RecommendationRecordVO>();
    }
    this.recommends.add(elem);
  }

  public java.util.List<RecommendationRecordVO> getRecommends() {
    return this.recommends;
  }

  public RecommendationVO setRecommends(java.util.List<RecommendationRecordVO> recommends) {
    this.recommends = recommends;
    return this;
  }

  public void unsetRecommends() {
    this.recommends = null;
  }

  /** Returns true if field recommends is set (has been assigned a value) and false otherwise */
  public boolean isSetRecommends() {
    return this.recommends != null;
  }

  public void setRecommendsIsSet(boolean value) {
    if (!value) {
      this.recommends = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case HAS_RECOMMENDS:
      if (value == null) {
        unsetHasRecommends();
      } else {
        setHasRecommends((java.lang.Boolean)value);
      }
      break;

    case SCORE:
      if (value == null) {
        unsetScore();
      } else {
        setScore((RecommendationScoreVO)value);
      }
      break;

    case RECOMMENDS:
      if (value == null) {
        unsetRecommends();
      } else {
        setRecommends((java.util.List<RecommendationRecordVO>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case HAS_RECOMMENDS:
      return isHasRecommends();

    case SCORE:
      return getScore();

    case RECOMMENDS:
      return getRecommends();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case HAS_RECOMMENDS:
      return isSetHasRecommends();
    case SCORE:
      return isSetScore();
    case RECOMMENDS:
      return isSetRecommends();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof RecommendationVO)
      return this.equals((RecommendationVO)that);
    return false;
  }

  public boolean equals(RecommendationVO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_hasRecommends = true && this.isSetHasRecommends();
    boolean that_present_hasRecommends = true && that.isSetHasRecommends();
    if (this_present_hasRecommends || that_present_hasRecommends) {
      if (!(this_present_hasRecommends && that_present_hasRecommends))
        return false;
      if (this.hasRecommends != that.hasRecommends)
        return false;
    }

    boolean this_present_score = true && this.isSetScore();
    boolean that_present_score = true && that.isSetScore();
    if (this_present_score || that_present_score) {
      if (!(this_present_score && that_present_score))
        return false;
      if (!this.score.equals(that.score))
        return false;
    }

    boolean this_present_recommends = true && this.isSetRecommends();
    boolean that_present_recommends = true && that.isSetRecommends();
    if (this_present_recommends || that_present_recommends) {
      if (!(this_present_recommends && that_present_recommends))
        return false;
      if (!this.recommends.equals(that.recommends))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetHasRecommends()) ? 131071 : 524287);
    if (isSetHasRecommends())
      hashCode = hashCode * 8191 + ((hasRecommends) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetScore()) ? 131071 : 524287);
    if (isSetScore())
      hashCode = hashCode * 8191 + score.hashCode();

    hashCode = hashCode * 8191 + ((isSetRecommends()) ? 131071 : 524287);
    if (isSetRecommends())
      hashCode = hashCode * 8191 + recommends.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(RecommendationVO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetHasRecommends()).compareTo(other.isSetHasRecommends());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasRecommends()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasRecommends, other.hasRecommends);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetScore()).compareTo(other.isSetScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.score, other.score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRecommends()).compareTo(other.isSetRecommends());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecommends()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recommends, other.recommends);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("RecommendationVO(");
    boolean first = true;

    if (isSetHasRecommends()) {
      sb.append("hasRecommends:");
      sb.append(this.hasRecommends);
      first = false;
    }
    if (isSetScore()) {
      if (!first) sb.append(", ");
      sb.append("score:");
      if (this.score == null) {
        sb.append("null");
      } else {
        sb.append(this.score);
      }
      first = false;
    }
    if (isSetRecommends()) {
      if (!first) sb.append(", ");
      sb.append("recommends:");
      if (this.recommends == null) {
        sb.append("null");
      } else {
        sb.append(this.recommends);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (score != null) {
      score.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RecommendationVOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RecommendationVOStandardScheme getScheme() {
      return new RecommendationVOStandardScheme();
    }
  }

  private static class RecommendationVOStandardScheme extends org.apache.thrift.scheme.StandardScheme<RecommendationVO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RecommendationVO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HAS_RECOMMENDS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasRecommends = iprot.readBool();
              struct.setHasRecommendsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.score = new RecommendationScoreVO();
              struct.score.read(iprot);
              struct.setScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RECOMMENDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.recommends = new java.util.ArrayList<RecommendationRecordVO>(_list0.size);
                RecommendationRecordVO _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new RecommendationRecordVO();
                  _elem1.read(iprot);
                  struct.recommends.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setRecommendsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RecommendationVO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetHasRecommends()) {
        oprot.writeFieldBegin(HAS_RECOMMENDS_FIELD_DESC);
        oprot.writeBool(struct.hasRecommends);
        oprot.writeFieldEnd();
      }
      if (struct.score != null) {
        if (struct.isSetScore()) {
          oprot.writeFieldBegin(SCORE_FIELD_DESC);
          struct.score.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.recommends != null) {
        if (struct.isSetRecommends()) {
          oprot.writeFieldBegin(RECOMMENDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.recommends.size()));
            for (RecommendationRecordVO _iter3 : struct.recommends)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RecommendationVOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RecommendationVOTupleScheme getScheme() {
      return new RecommendationVOTupleScheme();
    }
  }

  private static class RecommendationVOTupleScheme extends org.apache.thrift.scheme.TupleScheme<RecommendationVO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RecommendationVO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetHasRecommends()) {
        optionals.set(0);
      }
      if (struct.isSetScore()) {
        optionals.set(1);
      }
      if (struct.isSetRecommends()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetHasRecommends()) {
        oprot.writeBool(struct.hasRecommends);
      }
      if (struct.isSetScore()) {
        struct.score.write(oprot);
      }
      if (struct.isSetRecommends()) {
        {
          oprot.writeI32(struct.recommends.size());
          for (RecommendationRecordVO _iter4 : struct.recommends)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RecommendationVO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.hasRecommends = iprot.readBool();
        struct.setHasRecommendsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.score = new RecommendationScoreVO();
        struct.score.read(iprot);
        struct.setScoreIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.recommends = new java.util.ArrayList<RecommendationRecordVO>(_list5.size);
          RecommendationRecordVO _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new RecommendationRecordVO();
            _elem6.read(iprot);
            struct.recommends.add(_elem6);
          }
        }
        struct.setRecommendsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

