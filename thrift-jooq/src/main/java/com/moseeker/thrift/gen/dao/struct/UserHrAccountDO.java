/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-03-09")
public class UserHrAccountDO implements org.apache.thrift.TBase<UserHrAccountDO, UserHrAccountDO._Fields>, java.io.Serializable, Cloneable, Comparable<UserHrAccountDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserHrAccountDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField WXUSER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("wxuserId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ACCOUNT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("accountType", org.apache.thrift.protocol.TType.BYTE, (short)8);
  private static final org.apache.thrift.protocol.TField ACTIVATION_FIELD_DESC = new org.apache.thrift.protocol.TField("activation", org.apache.thrift.protocol.TType.BYTE, (short)9);
  private static final org.apache.thrift.protocol.TField DISABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("disable", org.apache.thrift.protocol.TType.BYTE, (short)10);
  private static final org.apache.thrift.protocol.TField REGISTER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("registerTime", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField REGISTER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("registerIp", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField LAST_LOGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLoginTime", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField LAST_LOGIN_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLoginIp", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField LOGIN_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("loginCount", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField DOWNLOAD_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("downloadToken", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField HEADIMGURL_FIELD_DESC = new org.apache.thrift.protocol.TField("headimgurl", org.apache.thrift.protocol.TType.STRING, (short)20);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UserHrAccountDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UserHrAccountDOTupleSchemeFactory();

  public int id; // optional
  public int companyId; // optional
  public java.lang.String mobile; // optional
  public java.lang.String email; // optional
  public int wxuserId; // optional
  public java.lang.String password; // optional
  public java.lang.String username; // optional
  public byte accountType; // optional
  public byte activation; // optional
  public byte disable; // optional
  public java.lang.String registerTime; // optional
  public java.lang.String registerIp; // optional
  public java.lang.String lastLoginTime; // optional
  public java.lang.String lastLoginIp; // optional
  public int loginCount; // optional
  public int source; // optional
  public java.lang.String downloadToken; // optional
  public java.lang.String createTime; // optional
  public java.lang.String updateTime; // optional
  public java.lang.String headimgurl; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    COMPANY_ID((short)2, "companyId"),
    MOBILE((short)3, "mobile"),
    EMAIL((short)4, "email"),
    WXUSER_ID((short)5, "wxuserId"),
    PASSWORD((short)6, "password"),
    USERNAME((short)7, "username"),
    ACCOUNT_TYPE((short)8, "accountType"),
    ACTIVATION((short)9, "activation"),
    DISABLE((short)10, "disable"),
    REGISTER_TIME((short)11, "registerTime"),
    REGISTER_IP((short)12, "registerIp"),
    LAST_LOGIN_TIME((short)13, "lastLoginTime"),
    LAST_LOGIN_IP((short)14, "lastLoginIp"),
    LOGIN_COUNT((short)15, "loginCount"),
    SOURCE((short)16, "source"),
    DOWNLOAD_TOKEN((short)17, "downloadToken"),
    CREATE_TIME((short)18, "createTime"),
    UPDATE_TIME((short)19, "updateTime"),
    HEADIMGURL((short)20, "headimgurl");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // COMPANY_ID
          return COMPANY_ID;
        case 3: // MOBILE
          return MOBILE;
        case 4: // EMAIL
          return EMAIL;
        case 5: // WXUSER_ID
          return WXUSER_ID;
        case 6: // PASSWORD
          return PASSWORD;
        case 7: // USERNAME
          return USERNAME;
        case 8: // ACCOUNT_TYPE
          return ACCOUNT_TYPE;
        case 9: // ACTIVATION
          return ACTIVATION;
        case 10: // DISABLE
          return DISABLE;
        case 11: // REGISTER_TIME
          return REGISTER_TIME;
        case 12: // REGISTER_IP
          return REGISTER_IP;
        case 13: // LAST_LOGIN_TIME
          return LAST_LOGIN_TIME;
        case 14: // LAST_LOGIN_IP
          return LAST_LOGIN_IP;
        case 15: // LOGIN_COUNT
          return LOGIN_COUNT;
        case 16: // SOURCE
          return SOURCE;
        case 17: // DOWNLOAD_TOKEN
          return DOWNLOAD_TOKEN;
        case 18: // CREATE_TIME
          return CREATE_TIME;
        case 19: // UPDATE_TIME
          return UPDATE_TIME;
        case 20: // HEADIMGURL
          return HEADIMGURL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __COMPANYID_ISSET_ID = 1;
  private static final int __WXUSERID_ISSET_ID = 2;
  private static final int __ACCOUNTTYPE_ISSET_ID = 3;
  private static final int __ACTIVATION_ISSET_ID = 4;
  private static final int __DISABLE_ISSET_ID = 5;
  private static final int __LOGINCOUNT_ISSET_ID = 6;
  private static final int __SOURCE_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.COMPANY_ID,_Fields.MOBILE,_Fields.EMAIL,_Fields.WXUSER_ID,_Fields.PASSWORD,_Fields.USERNAME,_Fields.ACCOUNT_TYPE,_Fields.ACTIVATION,_Fields.DISABLE,_Fields.REGISTER_TIME,_Fields.REGISTER_IP,_Fields.LAST_LOGIN_TIME,_Fields.LAST_LOGIN_IP,_Fields.LOGIN_COUNT,_Fields.SOURCE,_Fields.DOWNLOAD_TOKEN,_Fields.CREATE_TIME,_Fields.UPDATE_TIME,_Fields.HEADIMGURL};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WXUSER_ID, new org.apache.thrift.meta_data.FieldMetaData("wxuserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("accountType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ACTIVATION, new org.apache.thrift.meta_data.FieldMetaData("activation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.DISABLE, new org.apache.thrift.meta_data.FieldMetaData("disable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.REGISTER_TIME, new org.apache.thrift.meta_data.FieldMetaData("registerTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.REGISTER_IP, new org.apache.thrift.meta_data.FieldMetaData("registerIp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_LOGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastLoginTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.LAST_LOGIN_IP, new org.apache.thrift.meta_data.FieldMetaData("lastLoginIp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_COUNT, new org.apache.thrift.meta_data.FieldMetaData("loginCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DOWNLOAD_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("downloadToken", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.HEADIMGURL, new org.apache.thrift.meta_data.FieldMetaData("headimgurl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserHrAccountDO.class, metaDataMap);
  }

  public UserHrAccountDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserHrAccountDO(UserHrAccountDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.companyId = other.companyId;
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    this.wxuserId = other.wxuserId;
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    this.accountType = other.accountType;
    this.activation = other.activation;
    this.disable = other.disable;
    if (other.isSetRegisterTime()) {
      this.registerTime = other.registerTime;
    }
    if (other.isSetRegisterIp()) {
      this.registerIp = other.registerIp;
    }
    if (other.isSetLastLoginTime()) {
      this.lastLoginTime = other.lastLoginTime;
    }
    if (other.isSetLastLoginIp()) {
      this.lastLoginIp = other.lastLoginIp;
    }
    this.loginCount = other.loginCount;
    this.source = other.source;
    if (other.isSetDownloadToken()) {
      this.downloadToken = other.downloadToken;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
    if (other.isSetHeadimgurl()) {
      this.headimgurl = other.headimgurl;
    }
  }

  public UserHrAccountDO deepCopy() {
    return new UserHrAccountDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setCompanyIdIsSet(false);
    this.companyId = 0;
    this.mobile = null;
    this.email = null;
    setWxuserIdIsSet(false);
    this.wxuserId = 0;
    this.password = null;
    this.username = null;
    setAccountTypeIsSet(false);
    this.accountType = 0;
    setActivationIsSet(false);
    this.activation = 0;
    setDisableIsSet(false);
    this.disable = 0;
    this.registerTime = null;
    this.registerIp = null;
    this.lastLoginTime = null;
    this.lastLoginIp = null;
    setLoginCountIsSet(false);
    this.loginCount = 0;
    setSourceIsSet(false);
    this.source = 0;
    this.downloadToken = null;
    this.createTime = null;
    this.updateTime = null;
    this.headimgurl = null;
  }

  public int getId() {
    return this.id;
  }

  public UserHrAccountDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getCompanyId() {
    return this.companyId;
  }

  public UserHrAccountDO setCompanyId(int companyId) {
    this.companyId = companyId;
    setCompanyIdIsSet(true);
    return this;
  }

  public void unsetCompanyId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  public void setCompanyIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
  }

  public java.lang.String getMobile() {
    return this.mobile;
  }

  public UserHrAccountDO setMobile(java.lang.String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  public java.lang.String getEmail() {
    return this.email;
  }

  public UserHrAccountDO setEmail(java.lang.String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public int getWxuserId() {
    return this.wxuserId;
  }

  public UserHrAccountDO setWxuserId(int wxuserId) {
    this.wxuserId = wxuserId;
    setWxuserIdIsSet(true);
    return this;
  }

  public void unsetWxuserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WXUSERID_ISSET_ID);
  }

  /** Returns true if field wxuserId is set (has been assigned a value) and false otherwise */
  public boolean isSetWxuserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WXUSERID_ISSET_ID);
  }

  public void setWxuserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WXUSERID_ISSET_ID, value);
  }

  public java.lang.String getPassword() {
    return this.password;
  }

  public UserHrAccountDO setPassword(java.lang.String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public java.lang.String getUsername() {
    return this.username;
  }

  public UserHrAccountDO setUsername(java.lang.String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public byte getAccountType() {
    return this.accountType;
  }

  public UserHrAccountDO setAccountType(byte accountType) {
    this.accountType = accountType;
    setAccountTypeIsSet(true);
    return this;
  }

  public void unsetAccountType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTTYPE_ISSET_ID);
  }

  /** Returns true if field accountType is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCOUNTTYPE_ISSET_ID);
  }

  public void setAccountTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCOUNTTYPE_ISSET_ID, value);
  }

  public byte getActivation() {
    return this.activation;
  }

  public UserHrAccountDO setActivation(byte activation) {
    this.activation = activation;
    setActivationIsSet(true);
    return this;
  }

  public void unsetActivation() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACTIVATION_ISSET_ID);
  }

  /** Returns true if field activation is set (has been assigned a value) and false otherwise */
  public boolean isSetActivation() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACTIVATION_ISSET_ID);
  }

  public void setActivationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACTIVATION_ISSET_ID, value);
  }

  public byte getDisable() {
    return this.disable;
  }

  public UserHrAccountDO setDisable(byte disable) {
    this.disable = disable;
    setDisableIsSet(true);
    return this;
  }

  public void unsetDisable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISABLE_ISSET_ID);
  }

  /** Returns true if field disable is set (has been assigned a value) and false otherwise */
  public boolean isSetDisable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISABLE_ISSET_ID);
  }

  public void setDisableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISABLE_ISSET_ID, value);
  }

  public java.lang.String getRegisterTime() {
    return this.registerTime;
  }

  public UserHrAccountDO setRegisterTime(java.lang.String registerTime) {
    this.registerTime = registerTime;
    return this;
  }

  public void unsetRegisterTime() {
    this.registerTime = null;
  }

  /** Returns true if field registerTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRegisterTime() {
    return this.registerTime != null;
  }

  public void setRegisterTimeIsSet(boolean value) {
    if (!value) {
      this.registerTime = null;
    }
  }

  public java.lang.String getRegisterIp() {
    return this.registerIp;
  }

  public UserHrAccountDO setRegisterIp(java.lang.String registerIp) {
    this.registerIp = registerIp;
    return this;
  }

  public void unsetRegisterIp() {
    this.registerIp = null;
  }

  /** Returns true if field registerIp is set (has been assigned a value) and false otherwise */
  public boolean isSetRegisterIp() {
    return this.registerIp != null;
  }

  public void setRegisterIpIsSet(boolean value) {
    if (!value) {
      this.registerIp = null;
    }
  }

  public java.lang.String getLastLoginTime() {
    return this.lastLoginTime;
  }

  public UserHrAccountDO setLastLoginTime(java.lang.String lastLoginTime) {
    this.lastLoginTime = lastLoginTime;
    return this;
  }

  public void unsetLastLoginTime() {
    this.lastLoginTime = null;
  }

  /** Returns true if field lastLoginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastLoginTime() {
    return this.lastLoginTime != null;
  }

  public void setLastLoginTimeIsSet(boolean value) {
    if (!value) {
      this.lastLoginTime = null;
    }
  }

  public java.lang.String getLastLoginIp() {
    return this.lastLoginIp;
  }

  public UserHrAccountDO setLastLoginIp(java.lang.String lastLoginIp) {
    this.lastLoginIp = lastLoginIp;
    return this;
  }

  public void unsetLastLoginIp() {
    this.lastLoginIp = null;
  }

  /** Returns true if field lastLoginIp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastLoginIp() {
    return this.lastLoginIp != null;
  }

  public void setLastLoginIpIsSet(boolean value) {
    if (!value) {
      this.lastLoginIp = null;
    }
  }

  public int getLoginCount() {
    return this.loginCount;
  }

  public UserHrAccountDO setLoginCount(int loginCount) {
    this.loginCount = loginCount;
    setLoginCountIsSet(true);
    return this;
  }

  public void unsetLoginCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOGINCOUNT_ISSET_ID);
  }

  /** Returns true if field loginCount is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOGINCOUNT_ISSET_ID);
  }

  public void setLoginCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOGINCOUNT_ISSET_ID, value);
  }

  public int getSource() {
    return this.source;
  }

  public UserHrAccountDO setSource(int source) {
    this.source = source;
    setSourceIsSet(true);
    return this;
  }

  public void unsetSource() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SOURCE_ISSET_ID);
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SOURCE_ISSET_ID);
  }

  public void setSourceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SOURCE_ISSET_ID, value);
  }

  public java.lang.String getDownloadToken() {
    return this.downloadToken;
  }

  public UserHrAccountDO setDownloadToken(java.lang.String downloadToken) {
    this.downloadToken = downloadToken;
    return this;
  }

  public void unsetDownloadToken() {
    this.downloadToken = null;
  }

  /** Returns true if field downloadToken is set (has been assigned a value) and false otherwise */
  public boolean isSetDownloadToken() {
    return this.downloadToken != null;
  }

  public void setDownloadTokenIsSet(boolean value) {
    if (!value) {
      this.downloadToken = null;
    }
  }

  public java.lang.String getCreateTime() {
    return this.createTime;
  }

  public UserHrAccountDO setCreateTime(java.lang.String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public java.lang.String getUpdateTime() {
    return this.updateTime;
  }

  public UserHrAccountDO setUpdateTime(java.lang.String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public java.lang.String getHeadimgurl() {
    return this.headimgurl;
  }

  public UserHrAccountDO setHeadimgurl(java.lang.String headimgurl) {
    this.headimgurl = headimgurl;
    return this;
  }

  public void unsetHeadimgurl() {
    this.headimgurl = null;
  }

  /** Returns true if field headimgurl is set (has been assigned a value) and false otherwise */
  public boolean isSetHeadimgurl() {
    return this.headimgurl != null;
  }

  public void setHeadimgurlIsSet(boolean value) {
    if (!value) {
      this.headimgurl = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompanyId();
      } else {
        setCompanyId((java.lang.Integer)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((java.lang.String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((java.lang.String)value);
      }
      break;

    case WXUSER_ID:
      if (value == null) {
        unsetWxuserId();
      } else {
        setWxuserId((java.lang.Integer)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((java.lang.String)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((java.lang.String)value);
      }
      break;

    case ACCOUNT_TYPE:
      if (value == null) {
        unsetAccountType();
      } else {
        setAccountType((java.lang.Byte)value);
      }
      break;

    case ACTIVATION:
      if (value == null) {
        unsetActivation();
      } else {
        setActivation((java.lang.Byte)value);
      }
      break;

    case DISABLE:
      if (value == null) {
        unsetDisable();
      } else {
        setDisable((java.lang.Byte)value);
      }
      break;

    case REGISTER_TIME:
      if (value == null) {
        unsetRegisterTime();
      } else {
        setRegisterTime((java.lang.String)value);
      }
      break;

    case REGISTER_IP:
      if (value == null) {
        unsetRegisterIp();
      } else {
        setRegisterIp((java.lang.String)value);
      }
      break;

    case LAST_LOGIN_TIME:
      if (value == null) {
        unsetLastLoginTime();
      } else {
        setLastLoginTime((java.lang.String)value);
      }
      break;

    case LAST_LOGIN_IP:
      if (value == null) {
        unsetLastLoginIp();
      } else {
        setLastLoginIp((java.lang.String)value);
      }
      break;

    case LOGIN_COUNT:
      if (value == null) {
        unsetLoginCount();
      } else {
        setLoginCount((java.lang.Integer)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((java.lang.Integer)value);
      }
      break;

    case DOWNLOAD_TOKEN:
      if (value == null) {
        unsetDownloadToken();
      } else {
        setDownloadToken((java.lang.String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((java.lang.String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((java.lang.String)value);
      }
      break;

    case HEADIMGURL:
      if (value == null) {
        unsetHeadimgurl();
      } else {
        setHeadimgurl((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case COMPANY_ID:
      return getCompanyId();

    case MOBILE:
      return getMobile();

    case EMAIL:
      return getEmail();

    case WXUSER_ID:
      return getWxuserId();

    case PASSWORD:
      return getPassword();

    case USERNAME:
      return getUsername();

    case ACCOUNT_TYPE:
      return getAccountType();

    case ACTIVATION:
      return getActivation();

    case DISABLE:
      return getDisable();

    case REGISTER_TIME:
      return getRegisterTime();

    case REGISTER_IP:
      return getRegisterIp();

    case LAST_LOGIN_TIME:
      return getLastLoginTime();

    case LAST_LOGIN_IP:
      return getLastLoginIp();

    case LOGIN_COUNT:
      return getLoginCount();

    case SOURCE:
      return getSource();

    case DOWNLOAD_TOKEN:
      return getDownloadToken();

    case CREATE_TIME:
      return getCreateTime();

    case UPDATE_TIME:
      return getUpdateTime();

    case HEADIMGURL:
      return getHeadimgurl();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case COMPANY_ID:
      return isSetCompanyId();
    case MOBILE:
      return isSetMobile();
    case EMAIL:
      return isSetEmail();
    case WXUSER_ID:
      return isSetWxuserId();
    case PASSWORD:
      return isSetPassword();
    case USERNAME:
      return isSetUsername();
    case ACCOUNT_TYPE:
      return isSetAccountType();
    case ACTIVATION:
      return isSetActivation();
    case DISABLE:
      return isSetDisable();
    case REGISTER_TIME:
      return isSetRegisterTime();
    case REGISTER_IP:
      return isSetRegisterIp();
    case LAST_LOGIN_TIME:
      return isSetLastLoginTime();
    case LAST_LOGIN_IP:
      return isSetLastLoginIp();
    case LOGIN_COUNT:
      return isSetLoginCount();
    case SOURCE:
      return isSetSource();
    case DOWNLOAD_TOKEN:
      return isSetDownloadToken();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case HEADIMGURL:
      return isSetHeadimgurl();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof UserHrAccountDO)
      return this.equals((UserHrAccountDO)that);
    return false;
  }

  public boolean equals(UserHrAccountDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_companyId = true && this.isSetCompanyId();
    boolean that_present_companyId = true && that.isSetCompanyId();
    if (this_present_companyId || that_present_companyId) {
      if (!(this_present_companyId && that_present_companyId))
        return false;
      if (this.companyId != that.companyId)
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_wxuserId = true && this.isSetWxuserId();
    boolean that_present_wxuserId = true && that.isSetWxuserId();
    if (this_present_wxuserId || that_present_wxuserId) {
      if (!(this_present_wxuserId && that_present_wxuserId))
        return false;
      if (this.wxuserId != that.wxuserId)
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_accountType = true && this.isSetAccountType();
    boolean that_present_accountType = true && that.isSetAccountType();
    if (this_present_accountType || that_present_accountType) {
      if (!(this_present_accountType && that_present_accountType))
        return false;
      if (this.accountType != that.accountType)
        return false;
    }

    boolean this_present_activation = true && this.isSetActivation();
    boolean that_present_activation = true && that.isSetActivation();
    if (this_present_activation || that_present_activation) {
      if (!(this_present_activation && that_present_activation))
        return false;
      if (this.activation != that.activation)
        return false;
    }

    boolean this_present_disable = true && this.isSetDisable();
    boolean that_present_disable = true && that.isSetDisable();
    if (this_present_disable || that_present_disable) {
      if (!(this_present_disable && that_present_disable))
        return false;
      if (this.disable != that.disable)
        return false;
    }

    boolean this_present_registerTime = true && this.isSetRegisterTime();
    boolean that_present_registerTime = true && that.isSetRegisterTime();
    if (this_present_registerTime || that_present_registerTime) {
      if (!(this_present_registerTime && that_present_registerTime))
        return false;
      if (!this.registerTime.equals(that.registerTime))
        return false;
    }

    boolean this_present_registerIp = true && this.isSetRegisterIp();
    boolean that_present_registerIp = true && that.isSetRegisterIp();
    if (this_present_registerIp || that_present_registerIp) {
      if (!(this_present_registerIp && that_present_registerIp))
        return false;
      if (!this.registerIp.equals(that.registerIp))
        return false;
    }

    boolean this_present_lastLoginTime = true && this.isSetLastLoginTime();
    boolean that_present_lastLoginTime = true && that.isSetLastLoginTime();
    if (this_present_lastLoginTime || that_present_lastLoginTime) {
      if (!(this_present_lastLoginTime && that_present_lastLoginTime))
        return false;
      if (!this.lastLoginTime.equals(that.lastLoginTime))
        return false;
    }

    boolean this_present_lastLoginIp = true && this.isSetLastLoginIp();
    boolean that_present_lastLoginIp = true && that.isSetLastLoginIp();
    if (this_present_lastLoginIp || that_present_lastLoginIp) {
      if (!(this_present_lastLoginIp && that_present_lastLoginIp))
        return false;
      if (!this.lastLoginIp.equals(that.lastLoginIp))
        return false;
    }

    boolean this_present_loginCount = true && this.isSetLoginCount();
    boolean that_present_loginCount = true && that.isSetLoginCount();
    if (this_present_loginCount || that_present_loginCount) {
      if (!(this_present_loginCount && that_present_loginCount))
        return false;
      if (this.loginCount != that.loginCount)
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (this.source != that.source)
        return false;
    }

    boolean this_present_downloadToken = true && this.isSetDownloadToken();
    boolean that_present_downloadToken = true && that.isSetDownloadToken();
    if (this_present_downloadToken || that_present_downloadToken) {
      if (!(this_present_downloadToken && that_present_downloadToken))
        return false;
      if (!this.downloadToken.equals(that.downloadToken))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    boolean this_present_headimgurl = true && this.isSetHeadimgurl();
    boolean that_present_headimgurl = true && that.isSetHeadimgurl();
    if (this_present_headimgurl || that_present_headimgurl) {
      if (!(this_present_headimgurl && that_present_headimgurl))
        return false;
      if (!this.headimgurl.equals(that.headimgurl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetCompanyId()) ? 131071 : 524287);
    if (isSetCompanyId())
      hashCode = hashCode * 8191 + companyId;

    hashCode = hashCode * 8191 + ((isSetMobile()) ? 131071 : 524287);
    if (isSetMobile())
      hashCode = hashCode * 8191 + mobile.hashCode();

    hashCode = hashCode * 8191 + ((isSetEmail()) ? 131071 : 524287);
    if (isSetEmail())
      hashCode = hashCode * 8191 + email.hashCode();

    hashCode = hashCode * 8191 + ((isSetWxuserId()) ? 131071 : 524287);
    if (isSetWxuserId())
      hashCode = hashCode * 8191 + wxuserId;

    hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
    if (isSetPassword())
      hashCode = hashCode * 8191 + password.hashCode();

    hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
    if (isSetUsername())
      hashCode = hashCode * 8191 + username.hashCode();

    hashCode = hashCode * 8191 + ((isSetAccountType()) ? 131071 : 524287);
    if (isSetAccountType())
      hashCode = hashCode * 8191 + (int) (accountType);

    hashCode = hashCode * 8191 + ((isSetActivation()) ? 131071 : 524287);
    if (isSetActivation())
      hashCode = hashCode * 8191 + (int) (activation);

    hashCode = hashCode * 8191 + ((isSetDisable()) ? 131071 : 524287);
    if (isSetDisable())
      hashCode = hashCode * 8191 + (int) (disable);

    hashCode = hashCode * 8191 + ((isSetRegisterTime()) ? 131071 : 524287);
    if (isSetRegisterTime())
      hashCode = hashCode * 8191 + registerTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetRegisterIp()) ? 131071 : 524287);
    if (isSetRegisterIp())
      hashCode = hashCode * 8191 + registerIp.hashCode();

    hashCode = hashCode * 8191 + ((isSetLastLoginTime()) ? 131071 : 524287);
    if (isSetLastLoginTime())
      hashCode = hashCode * 8191 + lastLoginTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetLastLoginIp()) ? 131071 : 524287);
    if (isSetLastLoginIp())
      hashCode = hashCode * 8191 + lastLoginIp.hashCode();

    hashCode = hashCode * 8191 + ((isSetLoginCount()) ? 131071 : 524287);
    if (isSetLoginCount())
      hashCode = hashCode * 8191 + loginCount;

    hashCode = hashCode * 8191 + ((isSetSource()) ? 131071 : 524287);
    if (isSetSource())
      hashCode = hashCode * 8191 + source;

    hashCode = hashCode * 8191 + ((isSetDownloadToken()) ? 131071 : 524287);
    if (isSetDownloadToken())
      hashCode = hashCode * 8191 + downloadToken.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
    if (isSetCreateTime())
      hashCode = hashCode * 8191 + createTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
    if (isSetUpdateTime())
      hashCode = hashCode * 8191 + updateTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetHeadimgurl()) ? 131071 : 524287);
    if (isSetHeadimgurl())
      hashCode = hashCode * 8191 + headimgurl.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(UserHrAccountDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWxuserId()).compareTo(other.isSetWxuserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWxuserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wxuserId, other.wxuserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAccountType()).compareTo(other.isSetAccountType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountType, other.accountType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetActivation()).compareTo(other.isSetActivation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activation, other.activation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDisable()).compareTo(other.isSetDisable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable, other.disable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRegisterTime()).compareTo(other.isSetRegisterTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegisterTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registerTime, other.registerTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRegisterIp()).compareTo(other.isSetRegisterIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegisterIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registerIp, other.registerIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLastLoginTime()).compareTo(other.isSetLastLoginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastLoginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLoginTime, other.lastLoginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLastLoginIp()).compareTo(other.isSetLastLoginIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastLoginIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLoginIp, other.lastLoginIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLoginCount()).compareTo(other.isSetLoginCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginCount, other.loginCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDownloadToken()).compareTo(other.isSetDownloadToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownloadToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downloadToken, other.downloadToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHeadimgurl()).compareTo(other.isSetHeadimgurl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeadimgurl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headimgurl, other.headimgurl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("UserHrAccountDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetCompanyId()) {
      if (!first) sb.append(", ");
      sb.append("companyId:");
      sb.append(this.companyId);
      first = false;
    }
    if (isSetMobile()) {
      if (!first) sb.append(", ");
      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
    }
    if (isSetEmail()) {
      if (!first) sb.append(", ");
      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
    }
    if (isSetWxuserId()) {
      if (!first) sb.append(", ");
      sb.append("wxuserId:");
      sb.append(this.wxuserId);
      first = false;
    }
    if (isSetPassword()) {
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
    }
    if (isSetUsername()) {
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
    }
    if (isSetAccountType()) {
      if (!first) sb.append(", ");
      sb.append("accountType:");
      sb.append(this.accountType);
      first = false;
    }
    if (isSetActivation()) {
      if (!first) sb.append(", ");
      sb.append("activation:");
      sb.append(this.activation);
      first = false;
    }
    if (isSetDisable()) {
      if (!first) sb.append(", ");
      sb.append("disable:");
      sb.append(this.disable);
      first = false;
    }
    if (isSetRegisterTime()) {
      if (!first) sb.append(", ");
      sb.append("registerTime:");
      if (this.registerTime == null) {
        sb.append("null");
      } else {
        sb.append(this.registerTime);
      }
      first = false;
    }
    if (isSetRegisterIp()) {
      if (!first) sb.append(", ");
      sb.append("registerIp:");
      if (this.registerIp == null) {
        sb.append("null");
      } else {
        sb.append(this.registerIp);
      }
      first = false;
    }
    if (isSetLastLoginTime()) {
      if (!first) sb.append(", ");
      sb.append("lastLoginTime:");
      if (this.lastLoginTime == null) {
        sb.append("null");
      } else {
        sb.append(this.lastLoginTime);
      }
      first = false;
    }
    if (isSetLastLoginIp()) {
      if (!first) sb.append(", ");
      sb.append("lastLoginIp:");
      if (this.lastLoginIp == null) {
        sb.append("null");
      } else {
        sb.append(this.lastLoginIp);
      }
      first = false;
    }
    if (isSetLoginCount()) {
      if (!first) sb.append(", ");
      sb.append("loginCount:");
      sb.append(this.loginCount);
      first = false;
    }
    if (isSetSource()) {
      if (!first) sb.append(", ");
      sb.append("source:");
      sb.append(this.source);
      first = false;
    }
    if (isSetDownloadToken()) {
      if (!first) sb.append(", ");
      sb.append("downloadToken:");
      if (this.downloadToken == null) {
        sb.append("null");
      } else {
        sb.append(this.downloadToken);
      }
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
    }
    if (isSetHeadimgurl()) {
      if (!first) sb.append(", ");
      sb.append("headimgurl:");
      if (this.headimgurl == null) {
        sb.append("null");
      } else {
        sb.append(this.headimgurl);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserHrAccountDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserHrAccountDOStandardScheme getScheme() {
      return new UserHrAccountDOStandardScheme();
    }
  }

  private static class UserHrAccountDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<UserHrAccountDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserHrAccountDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.companyId = iprot.readI32();
              struct.setCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WXUSER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wxuserId = iprot.readI32();
              struct.setWxuserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ACCOUNT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.accountType = iprot.readByte();
              struct.setAccountTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ACTIVATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.activation = iprot.readByte();
              struct.setActivationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DISABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.disable = iprot.readByte();
              struct.setDisableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REGISTER_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.registerTime = iprot.readString();
              struct.setRegisterTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REGISTER_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.registerIp = iprot.readString();
              struct.setRegisterIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LAST_LOGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastLoginTime = iprot.readString();
              struct.setLastLoginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LAST_LOGIN_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastLoginIp = iprot.readString();
              struct.setLastLoginIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LOGIN_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loginCount = iprot.readI32();
              struct.setLoginCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.source = iprot.readI32();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // DOWNLOAD_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.downloadToken = iprot.readString();
              struct.setDownloadTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // HEADIMGURL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.headimgurl = iprot.readString();
              struct.setHeadimgurlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserHrAccountDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompanyId()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.companyId);
        oprot.writeFieldEnd();
      }
      if (struct.mobile != null) {
        if (struct.isSetMobile()) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
      }
      if (struct.email != null) {
        if (struct.isSetEmail()) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetWxuserId()) {
        oprot.writeFieldBegin(WXUSER_ID_FIELD_DESC);
        oprot.writeI32(struct.wxuserId);
        oprot.writeFieldEnd();
      }
      if (struct.password != null) {
        if (struct.isSetPassword()) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
      }
      if (struct.username != null) {
        if (struct.isSetUsername()) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAccountType()) {
        oprot.writeFieldBegin(ACCOUNT_TYPE_FIELD_DESC);
        oprot.writeByte(struct.accountType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetActivation()) {
        oprot.writeFieldBegin(ACTIVATION_FIELD_DESC);
        oprot.writeByte(struct.activation);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDisable()) {
        oprot.writeFieldBegin(DISABLE_FIELD_DESC);
        oprot.writeByte(struct.disable);
        oprot.writeFieldEnd();
      }
      if (struct.registerTime != null) {
        if (struct.isSetRegisterTime()) {
          oprot.writeFieldBegin(REGISTER_TIME_FIELD_DESC);
          oprot.writeString(struct.registerTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.registerIp != null) {
        if (struct.isSetRegisterIp()) {
          oprot.writeFieldBegin(REGISTER_IP_FIELD_DESC);
          oprot.writeString(struct.registerIp);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lastLoginTime != null) {
        if (struct.isSetLastLoginTime()) {
          oprot.writeFieldBegin(LAST_LOGIN_TIME_FIELD_DESC);
          oprot.writeString(struct.lastLoginTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lastLoginIp != null) {
        if (struct.isSetLastLoginIp()) {
          oprot.writeFieldBegin(LAST_LOGIN_IP_FIELD_DESC);
          oprot.writeString(struct.lastLoginIp);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLoginCount()) {
        oprot.writeFieldBegin(LOGIN_COUNT_FIELD_DESC);
        oprot.writeI32(struct.loginCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSource()) {
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        oprot.writeI32(struct.source);
        oprot.writeFieldEnd();
      }
      if (struct.downloadToken != null) {
        if (struct.isSetDownloadToken()) {
          oprot.writeFieldBegin(DOWNLOAD_TOKEN_FIELD_DESC);
          oprot.writeString(struct.downloadToken);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateTime != null) {
        if (struct.isSetUpdateTime()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.headimgurl != null) {
        if (struct.isSetHeadimgurl()) {
          oprot.writeFieldBegin(HEADIMGURL_FIELD_DESC);
          oprot.writeString(struct.headimgurl);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserHrAccountDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserHrAccountDOTupleScheme getScheme() {
      return new UserHrAccountDOTupleScheme();
    }
  }

  private static class UserHrAccountDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<UserHrAccountDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserHrAccountDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCompanyId()) {
        optionals.set(1);
      }
      if (struct.isSetMobile()) {
        optionals.set(2);
      }
      if (struct.isSetEmail()) {
        optionals.set(3);
      }
      if (struct.isSetWxuserId()) {
        optionals.set(4);
      }
      if (struct.isSetPassword()) {
        optionals.set(5);
      }
      if (struct.isSetUsername()) {
        optionals.set(6);
      }
      if (struct.isSetAccountType()) {
        optionals.set(7);
      }
      if (struct.isSetActivation()) {
        optionals.set(8);
      }
      if (struct.isSetDisable()) {
        optionals.set(9);
      }
      if (struct.isSetRegisterTime()) {
        optionals.set(10);
      }
      if (struct.isSetRegisterIp()) {
        optionals.set(11);
      }
      if (struct.isSetLastLoginTime()) {
        optionals.set(12);
      }
      if (struct.isSetLastLoginIp()) {
        optionals.set(13);
      }
      if (struct.isSetLoginCount()) {
        optionals.set(14);
      }
      if (struct.isSetSource()) {
        optionals.set(15);
      }
      if (struct.isSetDownloadToken()) {
        optionals.set(16);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(17);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(18);
      }
      if (struct.isSetHeadimgurl()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetCompanyId()) {
        oprot.writeI32(struct.companyId);
      }
      if (struct.isSetMobile()) {
        oprot.writeString(struct.mobile);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetWxuserId()) {
        oprot.writeI32(struct.wxuserId);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
      if (struct.isSetAccountType()) {
        oprot.writeByte(struct.accountType);
      }
      if (struct.isSetActivation()) {
        oprot.writeByte(struct.activation);
      }
      if (struct.isSetDisable()) {
        oprot.writeByte(struct.disable);
      }
      if (struct.isSetRegisterTime()) {
        oprot.writeString(struct.registerTime);
      }
      if (struct.isSetRegisterIp()) {
        oprot.writeString(struct.registerIp);
      }
      if (struct.isSetLastLoginTime()) {
        oprot.writeString(struct.lastLoginTime);
      }
      if (struct.isSetLastLoginIp()) {
        oprot.writeString(struct.lastLoginIp);
      }
      if (struct.isSetLoginCount()) {
        oprot.writeI32(struct.loginCount);
      }
      if (struct.isSetSource()) {
        oprot.writeI32(struct.source);
      }
      if (struct.isSetDownloadToken()) {
        oprot.writeString(struct.downloadToken);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
      if (struct.isSetHeadimgurl()) {
        oprot.writeString(struct.headimgurl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserHrAccountDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.companyId = iprot.readI32();
        struct.setCompanyIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mobile = iprot.readString();
        struct.setMobileIsSet(true);
      }
      if (incoming.get(3)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(4)) {
        struct.wxuserId = iprot.readI32();
        struct.setWxuserIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(6)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.accountType = iprot.readByte();
        struct.setAccountTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.activation = iprot.readByte();
        struct.setActivationIsSet(true);
      }
      if (incoming.get(9)) {
        struct.disable = iprot.readByte();
        struct.setDisableIsSet(true);
      }
      if (incoming.get(10)) {
        struct.registerTime = iprot.readString();
        struct.setRegisterTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.registerIp = iprot.readString();
        struct.setRegisterIpIsSet(true);
      }
      if (incoming.get(12)) {
        struct.lastLoginTime = iprot.readString();
        struct.setLastLoginTimeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.lastLoginIp = iprot.readString();
        struct.setLastLoginIpIsSet(true);
      }
      if (incoming.get(14)) {
        struct.loginCount = iprot.readI32();
        struct.setLoginCountIsSet(true);
      }
      if (incoming.get(15)) {
        struct.source = iprot.readI32();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(16)) {
        struct.downloadToken = iprot.readString();
        struct.setDownloadTokenIsSet(true);
      }
      if (incoming.get(17)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.headimgurl = iprot.readString();
        struct.setHeadimgurlIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

