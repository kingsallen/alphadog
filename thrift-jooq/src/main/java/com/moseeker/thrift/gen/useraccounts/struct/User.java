/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.useraccounts.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-09-06")
public class User implements org.apache.thrift.TBase<User, User._Fields>, java.io.Serializable, Cloneable, Comparable<User> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("User");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IS_DISABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("is_disable", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField RANK_FIELD_DESC = new org.apache.thrift.protocol.TField("rank", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField REGISTER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("register_time", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REGISTER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("register_ip", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LAST_LOGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("last_login_time", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField LAST_LOGIN_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("last_login_ip", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField LOGIN_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("login_count", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField ACTIVATION_FIELD_DESC = new org.apache.thrift.protocol.TField("activation", org.apache.thrift.protocol.TType.BYTE, (short)13);
  private static final org.apache.thrift.protocol.TField ACTIVATION_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("activation_code", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField HEADIMG_FIELD_DESC = new org.apache.thrift.protocol.TField("headimg", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField COUNTRY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("country_id", org.apache.thrift.protocol.TType.I64, (short)18);
  private static final org.apache.thrift.protocol.TField WECHAT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("wechat_id", org.apache.thrift.protocol.TType.I64, (short)19);
  private static final org.apache.thrift.protocol.TField UNIONID_FIELD_DESC = new org.apache.thrift.protocol.TField("unionid", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.BYTE, (short)21);
  private static final org.apache.thrift.protocol.TField COMPANY_FIELD_DESC = new org.apache.thrift.protocol.TField("company", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField PARENTID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentid", org.apache.thrift.protocol.TType.I64, (short)24);
  private static final org.apache.thrift.protocol.TField EMAIL_VERIFIED_FIELD_DESC = new org.apache.thrift.protocol.TField("email_verified", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField NICKNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickname", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField COUNTRY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("countryCode", org.apache.thrift.protocol.TType.STRING, (short)27);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UserStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UserTupleSchemeFactory();

  public long id; // optional
  public java.lang.String username; // optional
  public java.lang.String password; // optional
  public byte is_disable; // optional
  public long rank; // optional
  public java.lang.String register_time; // optional
  public java.lang.String register_ip; // optional
  public java.lang.String last_login_time; // optional
  public java.lang.String last_login_ip; // optional
  public long login_count; // optional
  public long mobile; // optional
  public java.lang.String email; // optional
  public byte activation; // optional
  public java.lang.String activation_code; // optional
  public java.lang.String token; // optional
  public java.lang.String name; // optional
  public java.lang.String headimg; // optional
  public long country_id; // optional
  public long wechat_id; // optional
  public java.lang.String unionid; // optional
  public byte source; // optional
  public java.lang.String company; // optional
  public java.lang.String position; // optional
  public long parentid; // optional
  public int email_verified; // optional
  public java.lang.String nickname; // optional
  public java.lang.String countryCode; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    USERNAME((short)2, "username"),
    PASSWORD((short)3, "password"),
    IS_DISABLE((short)4, "is_disable"),
    RANK((short)5, "rank"),
    REGISTER_TIME((short)6, "register_time"),
    REGISTER_IP((short)7, "register_ip"),
    LAST_LOGIN_TIME((short)8, "last_login_time"),
    LAST_LOGIN_IP((short)9, "last_login_ip"),
    LOGIN_COUNT((short)10, "login_count"),
    MOBILE((short)11, "mobile"),
    EMAIL((short)12, "email"),
    ACTIVATION((short)13, "activation"),
    ACTIVATION_CODE((short)14, "activation_code"),
    TOKEN((short)15, "token"),
    NAME((short)16, "name"),
    HEADIMG((short)17, "headimg"),
    COUNTRY_ID((short)18, "country_id"),
    WECHAT_ID((short)19, "wechat_id"),
    UNIONID((short)20, "unionid"),
    SOURCE((short)21, "source"),
    COMPANY((short)22, "company"),
    POSITION((short)23, "position"),
    PARENTID((short)24, "parentid"),
    EMAIL_VERIFIED((short)25, "email_verified"),
    NICKNAME((short)26, "nickname"),
    COUNTRY_CODE((short)27, "countryCode");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // USERNAME
          return USERNAME;
        case 3: // PASSWORD
          return PASSWORD;
        case 4: // IS_DISABLE
          return IS_DISABLE;
        case 5: // RANK
          return RANK;
        case 6: // REGISTER_TIME
          return REGISTER_TIME;
        case 7: // REGISTER_IP
          return REGISTER_IP;
        case 8: // LAST_LOGIN_TIME
          return LAST_LOGIN_TIME;
        case 9: // LAST_LOGIN_IP
          return LAST_LOGIN_IP;
        case 10: // LOGIN_COUNT
          return LOGIN_COUNT;
        case 11: // MOBILE
          return MOBILE;
        case 12: // EMAIL
          return EMAIL;
        case 13: // ACTIVATION
          return ACTIVATION;
        case 14: // ACTIVATION_CODE
          return ACTIVATION_CODE;
        case 15: // TOKEN
          return TOKEN;
        case 16: // NAME
          return NAME;
        case 17: // HEADIMG
          return HEADIMG;
        case 18: // COUNTRY_ID
          return COUNTRY_ID;
        case 19: // WECHAT_ID
          return WECHAT_ID;
        case 20: // UNIONID
          return UNIONID;
        case 21: // SOURCE
          return SOURCE;
        case 22: // COMPANY
          return COMPANY;
        case 23: // POSITION
          return POSITION;
        case 24: // PARENTID
          return PARENTID;
        case 25: // EMAIL_VERIFIED
          return EMAIL_VERIFIED;
        case 26: // NICKNAME
          return NICKNAME;
        case 27: // COUNTRY_CODE
          return COUNTRY_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __IS_DISABLE_ISSET_ID = 1;
  private static final int __RANK_ISSET_ID = 2;
  private static final int __LOGIN_COUNT_ISSET_ID = 3;
  private static final int __MOBILE_ISSET_ID = 4;
  private static final int __ACTIVATION_ISSET_ID = 5;
  private static final int __COUNTRY_ID_ISSET_ID = 6;
  private static final int __WECHAT_ID_ISSET_ID = 7;
  private static final int __SOURCE_ISSET_ID = 8;
  private static final int __PARENTID_ISSET_ID = 9;
  private static final int __EMAIL_VERIFIED_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.USERNAME,_Fields.PASSWORD,_Fields.IS_DISABLE,_Fields.RANK,_Fields.REGISTER_TIME,_Fields.REGISTER_IP,_Fields.LAST_LOGIN_TIME,_Fields.LAST_LOGIN_IP,_Fields.LOGIN_COUNT,_Fields.MOBILE,_Fields.EMAIL,_Fields.ACTIVATION,_Fields.ACTIVATION_CODE,_Fields.TOKEN,_Fields.NAME,_Fields.HEADIMG,_Fields.COUNTRY_ID,_Fields.WECHAT_ID,_Fields.UNIONID,_Fields.SOURCE,_Fields.COMPANY,_Fields.POSITION,_Fields.PARENTID,_Fields.EMAIL_VERIFIED,_Fields.NICKNAME,_Fields.COUNTRY_CODE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_DISABLE, new org.apache.thrift.meta_data.FieldMetaData("is_disable", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.RANK, new org.apache.thrift.meta_data.FieldMetaData("rank", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REGISTER_TIME, new org.apache.thrift.meta_data.FieldMetaData("register_time", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.REGISTER_IP, new org.apache.thrift.meta_data.FieldMetaData("register_ip", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_LOGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("last_login_time", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.LAST_LOGIN_IP, new org.apache.thrift.meta_data.FieldMetaData("last_login_ip", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_COUNT, new org.apache.thrift.meta_data.FieldMetaData("login_count", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTIVATION, new org.apache.thrift.meta_data.FieldMetaData("activation", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ACTIVATION_CODE, new org.apache.thrift.meta_data.FieldMetaData("activation_code", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HEADIMG, new org.apache.thrift.meta_data.FieldMetaData("headimg", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNTRY_ID, new org.apache.thrift.meta_data.FieldMetaData("country_id", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.WECHAT_ID, new org.apache.thrift.meta_data.FieldMetaData("wechat_id", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UNIONID, new org.apache.thrift.meta_data.FieldMetaData("unionid", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.COMPANY, new org.apache.thrift.meta_data.FieldMetaData("company", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENTID, new org.apache.thrift.meta_data.FieldMetaData("parentid", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EMAIL_VERIFIED, new org.apache.thrift.meta_data.FieldMetaData("email_verified", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NICKNAME, new org.apache.thrift.meta_data.FieldMetaData("nickname", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNTRY_CODE, new org.apache.thrift.meta_data.FieldMetaData("countryCode", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(User.class, metaDataMap);
  }

  public User() {
    this.countryCode = "86";

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public User(User other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    this.is_disable = other.is_disable;
    this.rank = other.rank;
    if (other.isSetRegister_time()) {
      this.register_time = other.register_time;
    }
    if (other.isSetRegister_ip()) {
      this.register_ip = other.register_ip;
    }
    if (other.isSetLast_login_time()) {
      this.last_login_time = other.last_login_time;
    }
    if (other.isSetLast_login_ip()) {
      this.last_login_ip = other.last_login_ip;
    }
    this.login_count = other.login_count;
    this.mobile = other.mobile;
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    this.activation = other.activation;
    if (other.isSetActivation_code()) {
      this.activation_code = other.activation_code;
    }
    if (other.isSetToken()) {
      this.token = other.token;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetHeadimg()) {
      this.headimg = other.headimg;
    }
    this.country_id = other.country_id;
    this.wechat_id = other.wechat_id;
    if (other.isSetUnionid()) {
      this.unionid = other.unionid;
    }
    this.source = other.source;
    if (other.isSetCompany()) {
      this.company = other.company;
    }
    if (other.isSetPosition()) {
      this.position = other.position;
    }
    this.parentid = other.parentid;
    this.email_verified = other.email_verified;
    if (other.isSetNickname()) {
      this.nickname = other.nickname;
    }
    if (other.isSetCountryCode()) {
      this.countryCode = other.countryCode;
    }
  }

  public User deepCopy() {
    return new User(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.username = null;
    this.password = null;
    setIs_disableIsSet(false);
    this.is_disable = 0;
    setRankIsSet(false);
    this.rank = 0;
    this.register_time = null;
    this.register_ip = null;
    this.last_login_time = null;
    this.last_login_ip = null;
    setLogin_countIsSet(false);
    this.login_count = 0;
    setMobileIsSet(false);
    this.mobile = 0;
    this.email = null;
    setActivationIsSet(false);
    this.activation = 0;
    this.activation_code = null;
    this.token = null;
    this.name = null;
    this.headimg = null;
    setCountry_idIsSet(false);
    this.country_id = 0;
    setWechat_idIsSet(false);
    this.wechat_id = 0;
    this.unionid = null;
    setSourceIsSet(false);
    this.source = 0;
    this.company = null;
    this.position = null;
    setParentidIsSet(false);
    this.parentid = 0;
    setEmail_verifiedIsSet(false);
    this.email_verified = 0;
    this.nickname = null;
    this.countryCode = "86";

  }

  public long getId() {
    return this.id;
  }

  public User setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getUsername() {
    return this.username;
  }

  public User setUsername(java.lang.String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public java.lang.String getPassword() {
    return this.password;
  }

  public User setPassword(java.lang.String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public byte getIs_disable() {
    return this.is_disable;
  }

  public User setIs_disable(byte is_disable) {
    this.is_disable = is_disable;
    setIs_disableIsSet(true);
    return this;
  }

  public void unsetIs_disable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_DISABLE_ISSET_ID);
  }

  /** Returns true if field is_disable is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_disable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_DISABLE_ISSET_ID);
  }

  public void setIs_disableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_DISABLE_ISSET_ID, value);
  }

  public long getRank() {
    return this.rank;
  }

  public User setRank(long rank) {
    this.rank = rank;
    setRankIsSet(true);
    return this;
  }

  public void unsetRank() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RANK_ISSET_ID);
  }

  /** Returns true if field rank is set (has been assigned a value) and false otherwise */
  public boolean isSetRank() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RANK_ISSET_ID);
  }

  public void setRankIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RANK_ISSET_ID, value);
  }

  public java.lang.String getRegister_time() {
    return this.register_time;
  }

  public User setRegister_time(java.lang.String register_time) {
    this.register_time = register_time;
    return this;
  }

  public void unsetRegister_time() {
    this.register_time = null;
  }

  /** Returns true if field register_time is set (has been assigned a value) and false otherwise */
  public boolean isSetRegister_time() {
    return this.register_time != null;
  }

  public void setRegister_timeIsSet(boolean value) {
    if (!value) {
      this.register_time = null;
    }
  }

  public java.lang.String getRegister_ip() {
    return this.register_ip;
  }

  public User setRegister_ip(java.lang.String register_ip) {
    this.register_ip = register_ip;
    return this;
  }

  public void unsetRegister_ip() {
    this.register_ip = null;
  }

  /** Returns true if field register_ip is set (has been assigned a value) and false otherwise */
  public boolean isSetRegister_ip() {
    return this.register_ip != null;
  }

  public void setRegister_ipIsSet(boolean value) {
    if (!value) {
      this.register_ip = null;
    }
  }

  public java.lang.String getLast_login_time() {
    return this.last_login_time;
  }

  public User setLast_login_time(java.lang.String last_login_time) {
    this.last_login_time = last_login_time;
    return this;
  }

  public void unsetLast_login_time() {
    this.last_login_time = null;
  }

  /** Returns true if field last_login_time is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_login_time() {
    return this.last_login_time != null;
  }

  public void setLast_login_timeIsSet(boolean value) {
    if (!value) {
      this.last_login_time = null;
    }
  }

  public java.lang.String getLast_login_ip() {
    return this.last_login_ip;
  }

  public User setLast_login_ip(java.lang.String last_login_ip) {
    this.last_login_ip = last_login_ip;
    return this;
  }

  public void unsetLast_login_ip() {
    this.last_login_ip = null;
  }

  /** Returns true if field last_login_ip is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_login_ip() {
    return this.last_login_ip != null;
  }

  public void setLast_login_ipIsSet(boolean value) {
    if (!value) {
      this.last_login_ip = null;
    }
  }

  public long getLogin_count() {
    return this.login_count;
  }

  public User setLogin_count(long login_count) {
    this.login_count = login_count;
    setLogin_countIsSet(true);
    return this;
  }

  public void unsetLogin_count() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOGIN_COUNT_ISSET_ID);
  }

  /** Returns true if field login_count is set (has been assigned a value) and false otherwise */
  public boolean isSetLogin_count() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOGIN_COUNT_ISSET_ID);
  }

  public void setLogin_countIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOGIN_COUNT_ISSET_ID, value);
  }

  public long getMobile() {
    return this.mobile;
  }

  public User setMobile(long mobile) {
    this.mobile = mobile;
    setMobileIsSet(true);
    return this;
  }

  public void unsetMobile() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MOBILE_ISSET_ID);
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MOBILE_ISSET_ID);
  }

  public void setMobileIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MOBILE_ISSET_ID, value);
  }

  public java.lang.String getEmail() {
    return this.email;
  }

  public User setEmail(java.lang.String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public byte getActivation() {
    return this.activation;
  }

  public User setActivation(byte activation) {
    this.activation = activation;
    setActivationIsSet(true);
    return this;
  }

  public void unsetActivation() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACTIVATION_ISSET_ID);
  }

  /** Returns true if field activation is set (has been assigned a value) and false otherwise */
  public boolean isSetActivation() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACTIVATION_ISSET_ID);
  }

  public void setActivationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACTIVATION_ISSET_ID, value);
  }

  public java.lang.String getActivation_code() {
    return this.activation_code;
  }

  public User setActivation_code(java.lang.String activation_code) {
    this.activation_code = activation_code;
    return this;
  }

  public void unsetActivation_code() {
    this.activation_code = null;
  }

  /** Returns true if field activation_code is set (has been assigned a value) and false otherwise */
  public boolean isSetActivation_code() {
    return this.activation_code != null;
  }

  public void setActivation_codeIsSet(boolean value) {
    if (!value) {
      this.activation_code = null;
    }
  }

  public java.lang.String getToken() {
    return this.token;
  }

  public User setToken(java.lang.String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  public java.lang.String getName() {
    return this.name;
  }

  public User setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public java.lang.String getHeadimg() {
    return this.headimg;
  }

  public User setHeadimg(java.lang.String headimg) {
    this.headimg = headimg;
    return this;
  }

  public void unsetHeadimg() {
    this.headimg = null;
  }

  /** Returns true if field headimg is set (has been assigned a value) and false otherwise */
  public boolean isSetHeadimg() {
    return this.headimg != null;
  }

  public void setHeadimgIsSet(boolean value) {
    if (!value) {
      this.headimg = null;
    }
  }

  public long getCountry_id() {
    return this.country_id;
  }

  public User setCountry_id(long country_id) {
    this.country_id = country_id;
    setCountry_idIsSet(true);
    return this;
  }

  public void unsetCountry_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNTRY_ID_ISSET_ID);
  }

  /** Returns true if field country_id is set (has been assigned a value) and false otherwise */
  public boolean isSetCountry_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNTRY_ID_ISSET_ID);
  }

  public void setCountry_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNTRY_ID_ISSET_ID, value);
  }

  public long getWechat_id() {
    return this.wechat_id;
  }

  public User setWechat_id(long wechat_id) {
    this.wechat_id = wechat_id;
    setWechat_idIsSet(true);
    return this;
  }

  public void unsetWechat_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WECHAT_ID_ISSET_ID);
  }

  /** Returns true if field wechat_id is set (has been assigned a value) and false otherwise */
  public boolean isSetWechat_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WECHAT_ID_ISSET_ID);
  }

  public void setWechat_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WECHAT_ID_ISSET_ID, value);
  }

  public java.lang.String getUnionid() {
    return this.unionid;
  }

  public User setUnionid(java.lang.String unionid) {
    this.unionid = unionid;
    return this;
  }

  public void unsetUnionid() {
    this.unionid = null;
  }

  /** Returns true if field unionid is set (has been assigned a value) and false otherwise */
  public boolean isSetUnionid() {
    return this.unionid != null;
  }

  public void setUnionidIsSet(boolean value) {
    if (!value) {
      this.unionid = null;
    }
  }

  public byte getSource() {
    return this.source;
  }

  public User setSource(byte source) {
    this.source = source;
    setSourceIsSet(true);
    return this;
  }

  public void unsetSource() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SOURCE_ISSET_ID);
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SOURCE_ISSET_ID);
  }

  public void setSourceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SOURCE_ISSET_ID, value);
  }

  public java.lang.String getCompany() {
    return this.company;
  }

  public User setCompany(java.lang.String company) {
    this.company = company;
    return this;
  }

  public void unsetCompany() {
    this.company = null;
  }

  /** Returns true if field company is set (has been assigned a value) and false otherwise */
  public boolean isSetCompany() {
    return this.company != null;
  }

  public void setCompanyIsSet(boolean value) {
    if (!value) {
      this.company = null;
    }
  }

  public java.lang.String getPosition() {
    return this.position;
  }

  public User setPosition(java.lang.String position) {
    this.position = position;
    return this;
  }

  public void unsetPosition() {
    this.position = null;
  }

  /** Returns true if field position is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition() {
    return this.position != null;
  }

  public void setPositionIsSet(boolean value) {
    if (!value) {
      this.position = null;
    }
  }

  public long getParentid() {
    return this.parentid;
  }

  public User setParentid(long parentid) {
    this.parentid = parentid;
    setParentidIsSet(true);
    return this;
  }

  public void unsetParentid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  /** Returns true if field parentid is set (has been assigned a value) and false otherwise */
  public boolean isSetParentid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  public void setParentidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARENTID_ISSET_ID, value);
  }

  public int getEmail_verified() {
    return this.email_verified;
  }

  public User setEmail_verified(int email_verified) {
    this.email_verified = email_verified;
    setEmail_verifiedIsSet(true);
    return this;
  }

  public void unsetEmail_verified() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMAIL_VERIFIED_ISSET_ID);
  }

  /** Returns true if field email_verified is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail_verified() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMAIL_VERIFIED_ISSET_ID);
  }

  public void setEmail_verifiedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMAIL_VERIFIED_ISSET_ID, value);
  }

  public java.lang.String getNickname() {
    return this.nickname;
  }

  public User setNickname(java.lang.String nickname) {
    this.nickname = nickname;
    return this;
  }

  public void unsetNickname() {
    this.nickname = null;
  }

  /** Returns true if field nickname is set (has been assigned a value) and false otherwise */
  public boolean isSetNickname() {
    return this.nickname != null;
  }

  public void setNicknameIsSet(boolean value) {
    if (!value) {
      this.nickname = null;
    }
  }

  public java.lang.String getCountryCode() {
    return this.countryCode;
  }

  public User setCountryCode(java.lang.String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  public void unsetCountryCode() {
    this.countryCode = null;
  }

  /** Returns true if field countryCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCountryCode() {
    return this.countryCode != null;
  }

  public void setCountryCodeIsSet(boolean value) {
    if (!value) {
      this.countryCode = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((java.lang.Long)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((java.lang.String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((java.lang.String)value);
        }
        break;

      case IS_DISABLE:
        if (value == null) {
          unsetIs_disable();
        } else {
          setIs_disable((java.lang.Byte)value);
        }
        break;

      case RANK:
        if (value == null) {
          unsetRank();
        } else {
          setRank((java.lang.Long)value);
        }
        break;

      case REGISTER_TIME:
        if (value == null) {
          unsetRegister_time();
        } else {
          setRegister_time((java.lang.String)value);
        }
        break;

      case REGISTER_IP:
        if (value == null) {
          unsetRegister_ip();
        } else {
          setRegister_ip((java.lang.String)value);
        }
        break;

      case LAST_LOGIN_TIME:
        if (value == null) {
          unsetLast_login_time();
        } else {
          setLast_login_time((java.lang.String)value);
        }
        break;

      case LAST_LOGIN_IP:
        if (value == null) {
          unsetLast_login_ip();
        } else {
          setLast_login_ip((java.lang.String)value);
        }
        break;

      case LOGIN_COUNT:
        if (value == null) {
          unsetLogin_count();
        } else {
          setLogin_count((java.lang.Long)value);
        }
        break;

      case MOBILE:
        if (value == null) {
          unsetMobile();
        } else {
          setMobile((java.lang.Long)value);
        }
        break;

      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          setEmail((java.lang.String)value);
        }
        break;

      case ACTIVATION:
        if (value == null) {
          unsetActivation();
        } else {
          setActivation((java.lang.Byte)value);
        }
        break;

      case ACTIVATION_CODE:
        if (value == null) {
          unsetActivation_code();
        } else {
          setActivation_code((java.lang.String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((java.lang.String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((java.lang.String)value);
        }
        break;

      case HEADIMG:
        if (value == null) {
          unsetHeadimg();
        } else {
          setHeadimg((java.lang.String)value);
        }
        break;

      case COUNTRY_ID:
        if (value == null) {
          unsetCountry_id();
        } else {
          setCountry_id((java.lang.Long)value);
        }
        break;

      case WECHAT_ID:
        if (value == null) {
          unsetWechat_id();
        } else {
          setWechat_id((java.lang.Long)value);
        }
        break;

      case UNIONID:
        if (value == null) {
          unsetUnionid();
        } else {
          setUnionid((java.lang.String)value);
        }
        break;

      case SOURCE:
        if (value == null) {
          unsetSource();
        } else {
          setSource((java.lang.Byte)value);
        }
        break;

      case COMPANY:
        if (value == null) {
          unsetCompany();
        } else {
          setCompany((java.lang.String)value);
        }
        break;

      case POSITION:
        if (value == null) {
          unsetPosition();
        } else {
          setPosition((java.lang.String)value);
        }
        break;

      case PARENTID:
        if (value == null) {
          unsetParentid();
        } else {
          setParentid((java.lang.Long)value);
        }
        break;

      case EMAIL_VERIFIED:
        if (value == null) {
          unsetEmail_verified();
        } else {
          setEmail_verified((java.lang.Integer)value);
        }
        break;

      case NICKNAME:
        if (value == null) {
          unsetNickname();
        } else {
          setNickname((java.lang.String)value);
        }
        break;

      case COUNTRY_CODE:
        if (value == null) {
          unsetCountryCode();
        } else {
          setCountryCode((java.lang.String)value);
        }
        break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
      case ID:
        return getId();

      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      case IS_DISABLE:
        return getIs_disable();

      case RANK:
        return getRank();

      case REGISTER_TIME:
        return getRegister_time();

      case REGISTER_IP:
        return getRegister_ip();

      case LAST_LOGIN_TIME:
        return getLast_login_time();

      case LAST_LOGIN_IP:
        return getLast_login_ip();

      case LOGIN_COUNT:
        return getLogin_count();

      case MOBILE:
        return getMobile();

      case EMAIL:
        return getEmail();

      case ACTIVATION:
        return getActivation();

      case ACTIVATION_CODE:
        return getActivation_code();

      case TOKEN:
        return getToken();

      case NAME:
        return getName();

      case HEADIMG:
        return getHeadimg();

      case COUNTRY_ID:
        return getCountry_id();

      case WECHAT_ID:
        return getWechat_id();

      case UNIONID:
        return getUnionid();

      case SOURCE:
        return getSource();

      case COMPANY:
        return getCompany();

      case POSITION:
        return getPosition();

      case PARENTID:
        return getParentid();

      case EMAIL_VERIFIED:
        return getEmail_verified();

      case NICKNAME:
        return getNickname();

      case COUNTRY_CODE:
        return getCountryCode();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
      case ID:
        return isSetId();
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      case IS_DISABLE:
        return isSetIs_disable();
      case RANK:
        return isSetRank();
      case REGISTER_TIME:
        return isSetRegister_time();
      case REGISTER_IP:
        return isSetRegister_ip();
      case LAST_LOGIN_TIME:
        return isSetLast_login_time();
      case LAST_LOGIN_IP:
        return isSetLast_login_ip();
      case LOGIN_COUNT:
        return isSetLogin_count();
      case MOBILE:
        return isSetMobile();
      case EMAIL:
        return isSetEmail();
      case ACTIVATION:
        return isSetActivation();
      case ACTIVATION_CODE:
        return isSetActivation_code();
      case TOKEN:
        return isSetToken();
      case NAME:
        return isSetName();
      case HEADIMG:
        return isSetHeadimg();
      case COUNTRY_ID:
        return isSetCountry_id();
      case WECHAT_ID:
        return isSetWechat_id();
      case UNIONID:
        return isSetUnionid();
      case SOURCE:
        return isSetSource();
      case COMPANY:
        return isSetCompany();
      case POSITION:
        return isSetPosition();
      case PARENTID:
        return isSetParentid();
      case EMAIL_VERIFIED:
        return isSetEmail_verified();
      case NICKNAME:
        return isSetNickname();
      case COUNTRY_CODE:
        return isSetCountryCode();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof User)
      return this.equals((User)that);
    return false;
  }

  public boolean equals(User that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_is_disable = true && this.isSetIs_disable();
    boolean that_present_is_disable = true && that.isSetIs_disable();
    if (this_present_is_disable || that_present_is_disable) {
      if (!(this_present_is_disable && that_present_is_disable))
        return false;
      if (this.is_disable != that.is_disable)
        return false;
    }

    boolean this_present_rank = true && this.isSetRank();
    boolean that_present_rank = true && that.isSetRank();
    if (this_present_rank || that_present_rank) {
      if (!(this_present_rank && that_present_rank))
        return false;
      if (this.rank != that.rank)
        return false;
    }

    boolean this_present_register_time = true && this.isSetRegister_time();
    boolean that_present_register_time = true && that.isSetRegister_time();
    if (this_present_register_time || that_present_register_time) {
      if (!(this_present_register_time && that_present_register_time))
        return false;
      if (!this.register_time.equals(that.register_time))
        return false;
    }

    boolean this_present_register_ip = true && this.isSetRegister_ip();
    boolean that_present_register_ip = true && that.isSetRegister_ip();
    if (this_present_register_ip || that_present_register_ip) {
      if (!(this_present_register_ip && that_present_register_ip))
        return false;
      if (!this.register_ip.equals(that.register_ip))
        return false;
    }

    boolean this_present_last_login_time = true && this.isSetLast_login_time();
    boolean that_present_last_login_time = true && that.isSetLast_login_time();
    if (this_present_last_login_time || that_present_last_login_time) {
      if (!(this_present_last_login_time && that_present_last_login_time))
        return false;
      if (!this.last_login_time.equals(that.last_login_time))
        return false;
    }

    boolean this_present_last_login_ip = true && this.isSetLast_login_ip();
    boolean that_present_last_login_ip = true && that.isSetLast_login_ip();
    if (this_present_last_login_ip || that_present_last_login_ip) {
      if (!(this_present_last_login_ip && that_present_last_login_ip))
        return false;
      if (!this.last_login_ip.equals(that.last_login_ip))
        return false;
    }

    boolean this_present_login_count = true && this.isSetLogin_count();
    boolean that_present_login_count = true && that.isSetLogin_count();
    if (this_present_login_count || that_present_login_count) {
      if (!(this_present_login_count && that_present_login_count))
        return false;
      if (this.login_count != that.login_count)
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (this.mobile != that.mobile)
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_activation = true && this.isSetActivation();
    boolean that_present_activation = true && that.isSetActivation();
    if (this_present_activation || that_present_activation) {
      if (!(this_present_activation && that_present_activation))
        return false;
      if (this.activation != that.activation)
        return false;
    }

    boolean this_present_activation_code = true && this.isSetActivation_code();
    boolean that_present_activation_code = true && that.isSetActivation_code();
    if (this_present_activation_code || that_present_activation_code) {
      if (!(this_present_activation_code && that_present_activation_code))
        return false;
      if (!this.activation_code.equals(that.activation_code))
        return false;
    }

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_headimg = true && this.isSetHeadimg();
    boolean that_present_headimg = true && that.isSetHeadimg();
    if (this_present_headimg || that_present_headimg) {
      if (!(this_present_headimg && that_present_headimg))
        return false;
      if (!this.headimg.equals(that.headimg))
        return false;
    }

    boolean this_present_country_id = true && this.isSetCountry_id();
    boolean that_present_country_id = true && that.isSetCountry_id();
    if (this_present_country_id || that_present_country_id) {
      if (!(this_present_country_id && that_present_country_id))
        return false;
      if (this.country_id != that.country_id)
        return false;
    }

    boolean this_present_wechat_id = true && this.isSetWechat_id();
    boolean that_present_wechat_id = true && that.isSetWechat_id();
    if (this_present_wechat_id || that_present_wechat_id) {
      if (!(this_present_wechat_id && that_present_wechat_id))
        return false;
      if (this.wechat_id != that.wechat_id)
        return false;
    }

    boolean this_present_unionid = true && this.isSetUnionid();
    boolean that_present_unionid = true && that.isSetUnionid();
    if (this_present_unionid || that_present_unionid) {
      if (!(this_present_unionid && that_present_unionid))
        return false;
      if (!this.unionid.equals(that.unionid))
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (this.source != that.source)
        return false;
    }

    boolean this_present_company = true && this.isSetCompany();
    boolean that_present_company = true && that.isSetCompany();
    if (this_present_company || that_present_company) {
      if (!(this_present_company && that_present_company))
        return false;
      if (!this.company.equals(that.company))
        return false;
    }

    boolean this_present_position = true && this.isSetPosition();
    boolean that_present_position = true && that.isSetPosition();
    if (this_present_position || that_present_position) {
      if (!(this_present_position && that_present_position))
        return false;
      if (!this.position.equals(that.position))
        return false;
    }

    boolean this_present_parentid = true && this.isSetParentid();
    boolean that_present_parentid = true && that.isSetParentid();
    if (this_present_parentid || that_present_parentid) {
      if (!(this_present_parentid && that_present_parentid))
        return false;
      if (this.parentid != that.parentid)
        return false;
    }

    boolean this_present_email_verified = true && this.isSetEmail_verified();
    boolean that_present_email_verified = true && that.isSetEmail_verified();
    if (this_present_email_verified || that_present_email_verified) {
      if (!(this_present_email_verified && that_present_email_verified))
        return false;
      if (this.email_verified != that.email_verified)
        return false;
    }

    boolean this_present_nickname = true && this.isSetNickname();
    boolean that_present_nickname = true && that.isSetNickname();
    if (this_present_nickname || that_present_nickname) {
      if (!(this_present_nickname && that_present_nickname))
        return false;
      if (!this.nickname.equals(that.nickname))
        return false;
    }

    boolean this_present_countryCode = true && this.isSetCountryCode();
    boolean that_present_countryCode = true && that.isSetCountryCode();
    if (this_present_countryCode || that_present_countryCode) {
      if (!(this_present_countryCode && that_present_countryCode))
        return false;
      if (!this.countryCode.equals(that.countryCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
    if (isSetUsername())
      hashCode = hashCode * 8191 + username.hashCode();

    hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
    if (isSetPassword())
      hashCode = hashCode * 8191 + password.hashCode();

    hashCode = hashCode * 8191 + ((isSetIs_disable()) ? 131071 : 524287);
    if (isSetIs_disable())
      hashCode = hashCode * 8191 + (int) (is_disable);

    hashCode = hashCode * 8191 + ((isSetRank()) ? 131071 : 524287);
    if (isSetRank())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rank);

    hashCode = hashCode * 8191 + ((isSetRegister_time()) ? 131071 : 524287);
    if (isSetRegister_time())
      hashCode = hashCode * 8191 + register_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetRegister_ip()) ? 131071 : 524287);
    if (isSetRegister_ip())
      hashCode = hashCode * 8191 + register_ip.hashCode();

    hashCode = hashCode * 8191 + ((isSetLast_login_time()) ? 131071 : 524287);
    if (isSetLast_login_time())
      hashCode = hashCode * 8191 + last_login_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetLast_login_ip()) ? 131071 : 524287);
    if (isSetLast_login_ip())
      hashCode = hashCode * 8191 + last_login_ip.hashCode();

    hashCode = hashCode * 8191 + ((isSetLogin_count()) ? 131071 : 524287);
    if (isSetLogin_count())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(login_count);

    hashCode = hashCode * 8191 + ((isSetMobile()) ? 131071 : 524287);
    if (isSetMobile())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(mobile);

    hashCode = hashCode * 8191 + ((isSetEmail()) ? 131071 : 524287);
    if (isSetEmail())
      hashCode = hashCode * 8191 + email.hashCode();

    hashCode = hashCode * 8191 + ((isSetActivation()) ? 131071 : 524287);
    if (isSetActivation())
      hashCode = hashCode * 8191 + (int) (activation);

    hashCode = hashCode * 8191 + ((isSetActivation_code()) ? 131071 : 524287);
    if (isSetActivation_code())
      hashCode = hashCode * 8191 + activation_code.hashCode();

    hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
    if (isSetToken())
      hashCode = hashCode * 8191 + token.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetHeadimg()) ? 131071 : 524287);
    if (isSetHeadimg())
      hashCode = hashCode * 8191 + headimg.hashCode();

    hashCode = hashCode * 8191 + ((isSetCountry_id()) ? 131071 : 524287);
    if (isSetCountry_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(country_id);

    hashCode = hashCode * 8191 + ((isSetWechat_id()) ? 131071 : 524287);
    if (isSetWechat_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(wechat_id);

    hashCode = hashCode * 8191 + ((isSetUnionid()) ? 131071 : 524287);
    if (isSetUnionid())
      hashCode = hashCode * 8191 + unionid.hashCode();

    hashCode = hashCode * 8191 + ((isSetSource()) ? 131071 : 524287);
    if (isSetSource())
      hashCode = hashCode * 8191 + (int) (source);

    hashCode = hashCode * 8191 + ((isSetCompany()) ? 131071 : 524287);
    if (isSetCompany())
      hashCode = hashCode * 8191 + company.hashCode();

    hashCode = hashCode * 8191 + ((isSetPosition()) ? 131071 : 524287);
    if (isSetPosition())
      hashCode = hashCode * 8191 + position.hashCode();

    hashCode = hashCode * 8191 + ((isSetParentid()) ? 131071 : 524287);
    if (isSetParentid())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(parentid);

    hashCode = hashCode * 8191 + ((isSetEmail_verified()) ? 131071 : 524287);
    if (isSetEmail_verified())
      hashCode = hashCode * 8191 + email_verified;

    hashCode = hashCode * 8191 + ((isSetNickname()) ? 131071 : 524287);
    if (isSetNickname())
      hashCode = hashCode * 8191 + nickname.hashCode();

    hashCode = hashCode * 8191 + ((isSetCountryCode()) ? 131071 : 524287);
    if (isSetCountryCode())
      hashCode = hashCode * 8191 + countryCode.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(User other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIs_disable()).compareTo(other.isSetIs_disable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_disable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_disable, other.is_disable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRank()).compareTo(other.isSetRank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rank, other.rank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRegister_time()).compareTo(other.isSetRegister_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegister_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.register_time, other.register_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRegister_ip()).compareTo(other.isSetRegister_ip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegister_ip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.register_ip, other.register_ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLast_login_time()).compareTo(other.isSetLast_login_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_login_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_login_time, other.last_login_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLast_login_ip()).compareTo(other.isSetLast_login_ip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_login_ip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_login_ip, other.last_login_ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLogin_count()).compareTo(other.isSetLogin_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogin_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.login_count, other.login_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetActivation()).compareTo(other.isSetActivation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activation, other.activation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetActivation_code()).compareTo(other.isSetActivation_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivation_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activation_code, other.activation_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHeadimg()).compareTo(other.isSetHeadimg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeadimg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headimg, other.headimg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCountry_id()).compareTo(other.isSetCountry_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountry_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.country_id, other.country_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWechat_id()).compareTo(other.isSetWechat_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWechat_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wechat_id, other.wechat_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUnionid()).compareTo(other.isSetUnionid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnionid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unionid, other.unionid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompany()).compareTo(other.isSetCompany());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompany()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company, other.company);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParentid()).compareTo(other.isSetParentid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentid, other.parentid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEmail_verified()).compareTo(other.isSetEmail_verified());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail_verified()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email_verified, other.email_verified);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNickname()).compareTo(other.isSetNickname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNickname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickname, other.nickname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCountryCode()).compareTo(other.isSetCountryCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountryCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryCode, other.countryCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("User(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetUsername()) {
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
    }
    if (isSetPassword()) {
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
    }
    if (isSetIs_disable()) {
      if (!first) sb.append(", ");
      sb.append("is_disable:");
      sb.append(this.is_disable);
      first = false;
    }
    if (isSetRank()) {
      if (!first) sb.append(", ");
      sb.append("rank:");
      sb.append(this.rank);
      first = false;
    }
    if (isSetRegister_time()) {
      if (!first) sb.append(", ");
      sb.append("register_time:");
      if (this.register_time == null) {
        sb.append("null");
      } else {
        sb.append(this.register_time);
      }
      first = false;
    }
    if (isSetRegister_ip()) {
      if (!first) sb.append(", ");
      sb.append("register_ip:");
      if (this.register_ip == null) {
        sb.append("null");
      } else {
        sb.append(this.register_ip);
      }
      first = false;
    }
    if (isSetLast_login_time()) {
      if (!first) sb.append(", ");
      sb.append("last_login_time:");
      if (this.last_login_time == null) {
        sb.append("null");
      } else {
        sb.append(this.last_login_time);
      }
      first = false;
    }
    if (isSetLast_login_ip()) {
      if (!first) sb.append(", ");
      sb.append("last_login_ip:");
      if (this.last_login_ip == null) {
        sb.append("null");
      } else {
        sb.append(this.last_login_ip);
      }
      first = false;
    }
    if (isSetLogin_count()) {
      if (!first) sb.append(", ");
      sb.append("login_count:");
      sb.append(this.login_count);
      first = false;
    }
    if (isSetMobile()) {
      if (!first) sb.append(", ");
      sb.append("mobile:");
      sb.append(this.mobile);
      first = false;
    }
    if (isSetEmail()) {
      if (!first) sb.append(", ");
      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
    }
    if (isSetActivation()) {
      if (!first) sb.append(", ");
      sb.append("activation:");
      sb.append(this.activation);
      first = false;
    }
    if (isSetActivation_code()) {
      if (!first) sb.append(", ");
      sb.append("activation_code:");
      if (this.activation_code == null) {
        sb.append("null");
      } else {
        sb.append(this.activation_code);
      }
      first = false;
    }
    if (isSetToken()) {
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetHeadimg()) {
      if (!first) sb.append(", ");
      sb.append("headimg:");
      if (this.headimg == null) {
        sb.append("null");
      } else {
        sb.append(this.headimg);
      }
      first = false;
    }
    if (isSetCountry_id()) {
      if (!first) sb.append(", ");
      sb.append("country_id:");
      sb.append(this.country_id);
      first = false;
    }
    if (isSetWechat_id()) {
      if (!first) sb.append(", ");
      sb.append("wechat_id:");
      sb.append(this.wechat_id);
      first = false;
    }
    if (isSetUnionid()) {
      if (!first) sb.append(", ");
      sb.append("unionid:");
      if (this.unionid == null) {
        sb.append("null");
      } else {
        sb.append(this.unionid);
      }
      first = false;
    }
    if (isSetSource()) {
      if (!first) sb.append(", ");
      sb.append("source:");
      sb.append(this.source);
      first = false;
    }
    if (isSetCompany()) {
      if (!first) sb.append(", ");
      sb.append("company:");
      if (this.company == null) {
        sb.append("null");
      } else {
        sb.append(this.company);
      }
      first = false;
    }
    if (isSetPosition()) {
      if (!first) sb.append(", ");
      sb.append("position:");
      if (this.position == null) {
        sb.append("null");
      } else {
        sb.append(this.position);
      }
      first = false;
    }
    if (isSetParentid()) {
      if (!first) sb.append(", ");
      sb.append("parentid:");
      sb.append(this.parentid);
      first = false;
    }
    if (isSetEmail_verified()) {
      if (!first) sb.append(", ");
      sb.append("email_verified:");
      sb.append(this.email_verified);
      first = false;
    }
    if (isSetNickname()) {
      if (!first) sb.append(", ");
      sb.append("nickname:");
      if (this.nickname == null) {
        sb.append("null");
      } else {
        sb.append(this.nickname);
      }
      first = false;
    }
    if (isSetCountryCode()) {
      if (!first) sb.append(", ");
      sb.append("countryCode:");
      if (this.countryCode == null) {
        sb.append("null");
      } else {
        sb.append(this.countryCode);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserStandardScheme getScheme() {
      return new UserStandardScheme();
    }
  }

  private static class UserStandardScheme extends org.apache.thrift.scheme.StandardScheme<User> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, User struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_DISABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.is_disable = iprot.readByte();
              struct.setIs_disableIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RANK
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rank = iprot.readI64();
              struct.setRankIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REGISTER_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.register_time = iprot.readString();
              struct.setRegister_timeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REGISTER_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.register_ip = iprot.readString();
              struct.setRegister_ipIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LAST_LOGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.last_login_time = iprot.readString();
              struct.setLast_login_timeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LAST_LOGIN_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.last_login_ip = iprot.readString();
              struct.setLast_login_ipIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LOGIN_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.login_count = iprot.readI64();
              struct.setLogin_countIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mobile = iprot.readI64();
              struct.setMobileIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ACTIVATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.activation = iprot.readByte();
              struct.setActivationIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ACTIVATION_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activation_code = iprot.readString();
              struct.setActivation_codeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.token = iprot.readString();
              struct.setTokenIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // HEADIMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.headimg = iprot.readString();
              struct.setHeadimgIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // COUNTRY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.country_id = iprot.readI64();
              struct.setCountry_idIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // WECHAT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.wechat_id = iprot.readI64();
              struct.setWechat_idIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // UNIONID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unionid = iprot.readString();
              struct.setUnionidIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.source = iprot.readByte();
              struct.setSourceIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // COMPANY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.company = iprot.readString();
              struct.setCompanyIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.position = iprot.readString();
              struct.setPositionIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // PARENTID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.parentid = iprot.readI64();
              struct.setParentidIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // EMAIL_VERIFIED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.email_verified = iprot.readI32();
              struct.setEmail_verifiedIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // NICKNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nickname = iprot.readString();
              struct.setNicknameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // COUNTRY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.countryCode = iprot.readString();
              struct.setCountryCodeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, User struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.username != null) {
        if (struct.isSetUsername()) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
      }
      if (struct.password != null) {
        if (struct.isSetPassword()) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_disable()) {
        oprot.writeFieldBegin(IS_DISABLE_FIELD_DESC);
        oprot.writeByte(struct.is_disable);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRank()) {
        oprot.writeFieldBegin(RANK_FIELD_DESC);
        oprot.writeI64(struct.rank);
        oprot.writeFieldEnd();
      }
      if (struct.register_time != null) {
        if (struct.isSetRegister_time()) {
          oprot.writeFieldBegin(REGISTER_TIME_FIELD_DESC);
          oprot.writeString(struct.register_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.register_ip != null) {
        if (struct.isSetRegister_ip()) {
          oprot.writeFieldBegin(REGISTER_IP_FIELD_DESC);
          oprot.writeString(struct.register_ip);
          oprot.writeFieldEnd();
        }
      }
      if (struct.last_login_time != null) {
        if (struct.isSetLast_login_time()) {
          oprot.writeFieldBegin(LAST_LOGIN_TIME_FIELD_DESC);
          oprot.writeString(struct.last_login_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.last_login_ip != null) {
        if (struct.isSetLast_login_ip()) {
          oprot.writeFieldBegin(LAST_LOGIN_IP_FIELD_DESC);
          oprot.writeString(struct.last_login_ip);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLogin_count()) {
        oprot.writeFieldBegin(LOGIN_COUNT_FIELD_DESC);
        oprot.writeI64(struct.login_count);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMobile()) {
        oprot.writeFieldBegin(MOBILE_FIELD_DESC);
        oprot.writeI64(struct.mobile);
        oprot.writeFieldEnd();
      }
      if (struct.email != null) {
        if (struct.isSetEmail()) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetActivation()) {
        oprot.writeFieldBegin(ACTIVATION_FIELD_DESC);
        oprot.writeByte(struct.activation);
        oprot.writeFieldEnd();
      }
      if (struct.activation_code != null) {
        if (struct.isSetActivation_code()) {
          oprot.writeFieldBegin(ACTIVATION_CODE_FIELD_DESC);
          oprot.writeString(struct.activation_code);
          oprot.writeFieldEnd();
        }
      }
      if (struct.token != null) {
        if (struct.isSetToken()) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.headimg != null) {
        if (struct.isSetHeadimg()) {
          oprot.writeFieldBegin(HEADIMG_FIELD_DESC);
          oprot.writeString(struct.headimg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCountry_id()) {
        oprot.writeFieldBegin(COUNTRY_ID_FIELD_DESC);
        oprot.writeI64(struct.country_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWechat_id()) {
        oprot.writeFieldBegin(WECHAT_ID_FIELD_DESC);
        oprot.writeI64(struct.wechat_id);
        oprot.writeFieldEnd();
      }
      if (struct.unionid != null) {
        if (struct.isSetUnionid()) {
          oprot.writeFieldBegin(UNIONID_FIELD_DESC);
          oprot.writeString(struct.unionid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSource()) {
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        oprot.writeByte(struct.source);
        oprot.writeFieldEnd();
      }
      if (struct.company != null) {
        if (struct.isSetCompany()) {
          oprot.writeFieldBegin(COMPANY_FIELD_DESC);
          oprot.writeString(struct.company);
          oprot.writeFieldEnd();
        }
      }
      if (struct.position != null) {
        if (struct.isSetPosition()) {
          oprot.writeFieldBegin(POSITION_FIELD_DESC);
          oprot.writeString(struct.position);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetParentid()) {
        oprot.writeFieldBegin(PARENTID_FIELD_DESC);
        oprot.writeI64(struct.parentid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEmail_verified()) {
        oprot.writeFieldBegin(EMAIL_VERIFIED_FIELD_DESC);
        oprot.writeI32(struct.email_verified);
        oprot.writeFieldEnd();
      }
      if (struct.nickname != null) {
        if (struct.isSetNickname()) {
          oprot.writeFieldBegin(NICKNAME_FIELD_DESC);
          oprot.writeString(struct.nickname);
          oprot.writeFieldEnd();
        }
      }
      if (struct.countryCode != null) {
        if (struct.isSetCountryCode()) {
          oprot.writeFieldBegin(COUNTRY_CODE_FIELD_DESC);
          oprot.writeString(struct.countryCode);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserTupleScheme getScheme() {
      return new UserTupleScheme();
    }
  }

  private static class UserTupleScheme extends org.apache.thrift.scheme.TupleScheme<User> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetUsername()) {
        optionals.set(1);
      }
      if (struct.isSetPassword()) {
        optionals.set(2);
      }
      if (struct.isSetIs_disable()) {
        optionals.set(3);
      }
      if (struct.isSetRank()) {
        optionals.set(4);
      }
      if (struct.isSetRegister_time()) {
        optionals.set(5);
      }
      if (struct.isSetRegister_ip()) {
        optionals.set(6);
      }
      if (struct.isSetLast_login_time()) {
        optionals.set(7);
      }
      if (struct.isSetLast_login_ip()) {
        optionals.set(8);
      }
      if (struct.isSetLogin_count()) {
        optionals.set(9);
      }
      if (struct.isSetMobile()) {
        optionals.set(10);
      }
      if (struct.isSetEmail()) {
        optionals.set(11);
      }
      if (struct.isSetActivation()) {
        optionals.set(12);
      }
      if (struct.isSetActivation_code()) {
        optionals.set(13);
      }
      if (struct.isSetToken()) {
        optionals.set(14);
      }
      if (struct.isSetName()) {
        optionals.set(15);
      }
      if (struct.isSetHeadimg()) {
        optionals.set(16);
      }
      if (struct.isSetCountry_id()) {
        optionals.set(17);
      }
      if (struct.isSetWechat_id()) {
        optionals.set(18);
      }
      if (struct.isSetUnionid()) {
        optionals.set(19);
      }
      if (struct.isSetSource()) {
        optionals.set(20);
      }
      if (struct.isSetCompany()) {
        optionals.set(21);
      }
      if (struct.isSetPosition()) {
        optionals.set(22);
      }
      if (struct.isSetParentid()) {
        optionals.set(23);
      }
      if (struct.isSetEmail_verified()) {
        optionals.set(24);
      }
      if (struct.isSetNickname()) {
        optionals.set(25);
      }
      if (struct.isSetCountryCode()) {
        optionals.set(26);
      }
      oprot.writeBitSet(optionals, 27);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetIs_disable()) {
        oprot.writeByte(struct.is_disable);
      }
      if (struct.isSetRank()) {
        oprot.writeI64(struct.rank);
      }
      if (struct.isSetRegister_time()) {
        oprot.writeString(struct.register_time);
      }
      if (struct.isSetRegister_ip()) {
        oprot.writeString(struct.register_ip);
      }
      if (struct.isSetLast_login_time()) {
        oprot.writeString(struct.last_login_time);
      }
      if (struct.isSetLast_login_ip()) {
        oprot.writeString(struct.last_login_ip);
      }
      if (struct.isSetLogin_count()) {
        oprot.writeI64(struct.login_count);
      }
      if (struct.isSetMobile()) {
        oprot.writeI64(struct.mobile);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetActivation()) {
        oprot.writeByte(struct.activation);
      }
      if (struct.isSetActivation_code()) {
        oprot.writeString(struct.activation_code);
      }
      if (struct.isSetToken()) {
        oprot.writeString(struct.token);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetHeadimg()) {
        oprot.writeString(struct.headimg);
      }
      if (struct.isSetCountry_id()) {
        oprot.writeI64(struct.country_id);
      }
      if (struct.isSetWechat_id()) {
        oprot.writeI64(struct.wechat_id);
      }
      if (struct.isSetUnionid()) {
        oprot.writeString(struct.unionid);
      }
      if (struct.isSetSource()) {
        oprot.writeByte(struct.source);
      }
      if (struct.isSetCompany()) {
        oprot.writeString(struct.company);
      }
      if (struct.isSetPosition()) {
        oprot.writeString(struct.position);
      }
      if (struct.isSetParentid()) {
        oprot.writeI64(struct.parentid);
      }
      if (struct.isSetEmail_verified()) {
        oprot.writeI32(struct.email_verified);
      }
      if (struct.isSetNickname()) {
        oprot.writeString(struct.nickname);
      }
      if (struct.isSetCountryCode()) {
        oprot.writeString(struct.countryCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(27);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(3)) {
        struct.is_disable = iprot.readByte();
        struct.setIs_disableIsSet(true);
      }
      if (incoming.get(4)) {
        struct.rank = iprot.readI64();
        struct.setRankIsSet(true);
      }
      if (incoming.get(5)) {
        struct.register_time = iprot.readString();
        struct.setRegister_timeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.register_ip = iprot.readString();
        struct.setRegister_ipIsSet(true);
      }
      if (incoming.get(7)) {
        struct.last_login_time = iprot.readString();
        struct.setLast_login_timeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.last_login_ip = iprot.readString();
        struct.setLast_login_ipIsSet(true);
      }
      if (incoming.get(9)) {
        struct.login_count = iprot.readI64();
        struct.setLogin_countIsSet(true);
      }
      if (incoming.get(10)) {
        struct.mobile = iprot.readI64();
        struct.setMobileIsSet(true);
      }
      if (incoming.get(11)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(12)) {
        struct.activation = iprot.readByte();
        struct.setActivationIsSet(true);
      }
      if (incoming.get(13)) {
        struct.activation_code = iprot.readString();
        struct.setActivation_codeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
      if (incoming.get(15)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(16)) {
        struct.headimg = iprot.readString();
        struct.setHeadimgIsSet(true);
      }
      if (incoming.get(17)) {
        struct.country_id = iprot.readI64();
        struct.setCountry_idIsSet(true);
      }
      if (incoming.get(18)) {
        struct.wechat_id = iprot.readI64();
        struct.setWechat_idIsSet(true);
      }
      if (incoming.get(19)) {
        struct.unionid = iprot.readString();
        struct.setUnionidIsSet(true);
      }
      if (incoming.get(20)) {
        struct.source = iprot.readByte();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(21)) {
        struct.company = iprot.readString();
        struct.setCompanyIsSet(true);
      }
      if (incoming.get(22)) {
        struct.position = iprot.readString();
        struct.setPositionIsSet(true);
      }
      if (incoming.get(23)) {
        struct.parentid = iprot.readI64();
        struct.setParentidIsSet(true);
      }
      if (incoming.get(24)) {
        struct.email_verified = iprot.readI32();
        struct.setEmail_verifiedIsSet(true);
      }
      if (incoming.get(25)) {
        struct.nickname = iprot.readString();
        struct.setNicknameIsSet(true);
      }
      if (incoming.get(26)) {
        struct.countryCode = iprot.readString();
        struct.setCountryCodeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

