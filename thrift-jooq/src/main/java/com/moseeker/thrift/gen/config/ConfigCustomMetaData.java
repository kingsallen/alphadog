/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.config;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-09-11")
public class ConfigCustomMetaData implements org.apache.thrift.TBase<ConfigCustomMetaData, ConfigCustomMetaData._Fields>, java.io.Serializable, Cloneable, Comparable<ConfigCustomMetaData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ConfigCustomMetaData");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FIELD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FIELD_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldTitle", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FIELD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField IS_BASIC_FIELD_DESC = new org.apache.thrift.protocol.TField("isBasic", org.apache.thrift.protocol.TType.BYTE, (short)6);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField NEEDED_FIELD_DESC = new org.apache.thrift.protocol.TField("needed", org.apache.thrift.protocol.TType.BYTE, (short)8);
  private static final org.apache.thrift.protocol.TField FIELD_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldDescription", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField MAPPING_FIELD_DESC = new org.apache.thrift.protocol.TField("mapping", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField VALIDATE_RE_FIELD_DESC = new org.apache.thrift.protocol.TField("validateRe", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField DICT_CONSTANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dictConstantId", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField DICT_CONSTANT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("dictConstantValue", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ConfigCustomMetaDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ConfigCustomMetaDataTupleSchemeFactory();

  public int id; // optional
  public String fieldName; // optional
  public String fieldTitle; // optional
  public int fieldType; // optional
  public int priority; // optional
  public byte isBasic; // optional
  public int companyId; // optional
  public byte needed; // optional
  public String fieldDescription; // optional
  public String mapping; // optional
  public int parentId; // optional
  public String validateRe; // optional
  public int dictConstantId; // optional
  public String dictConstantValue; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    FIELD_NAME((short)2, "fieldName"),
    FIELD_TITLE((short)3, "fieldTitle"),
    FIELD_TYPE((short)4, "fieldType"),
    PRIORITY((short)5, "priority"),
    IS_BASIC((short)6, "isBasic"),
    COMPANY_ID((short)7, "companyId"),
    NEEDED((short)8, "needed"),
    FIELD_DESCRIPTION((short)9, "fieldDescription"),
    MAPPING((short)10, "mapping"),
    PARENT_ID((short)11, "parentId"),
    VALIDATE_RE((short)12, "validateRe"),
    DICT_CONSTANT_ID((short)13, "dictConstantId"),
    DICT_CONSTANT_VALUE((short)14, "dictConstantValue");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // FIELD_NAME
          return FIELD_NAME;
        case 3: // FIELD_TITLE
          return FIELD_TITLE;
        case 4: // FIELD_TYPE
          return FIELD_TYPE;
        case 5: // PRIORITY
          return PRIORITY;
        case 6: // IS_BASIC
          return IS_BASIC;
        case 7: // COMPANY_ID
          return COMPANY_ID;
        case 8: // NEEDED
          return NEEDED;
        case 9: // FIELD_DESCRIPTION
          return FIELD_DESCRIPTION;
        case 10: // MAPPING
          return MAPPING;
        case 11: // PARENT_ID
          return PARENT_ID;
        case 12: // VALIDATE_RE
          return VALIDATE_RE;
        case 13: // DICT_CONSTANT_ID
          return DICT_CONSTANT_ID;
        case 14: // DICT_CONSTANT_VALUE
          return DICT_CONSTANT_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __FIELDTYPE_ISSET_ID = 1;
  private static final int __PRIORITY_ISSET_ID = 2;
  private static final int __ISBASIC_ISSET_ID = 3;
  private static final int __COMPANYID_ISSET_ID = 4;
  private static final int __NEEDED_ISSET_ID = 5;
  private static final int __PARENTID_ISSET_ID = 6;
  private static final int __DICTCONSTANTID_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.FIELD_NAME,_Fields.FIELD_TITLE,_Fields.FIELD_TYPE,_Fields.PRIORITY,_Fields.IS_BASIC,_Fields.COMPANY_ID,_Fields.NEEDED,_Fields.FIELD_DESCRIPTION,_Fields.MAPPING,_Fields.PARENT_ID,_Fields.VALIDATE_RE,_Fields.DICT_CONSTANT_ID,_Fields.DICT_CONSTANT_VALUE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIELD_NAME, new org.apache.thrift.meta_data.FieldMetaData("fieldName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD_TITLE, new org.apache.thrift.meta_data.FieldMetaData("fieldTitle", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fieldType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_BASIC, new org.apache.thrift.meta_data.FieldMetaData("isBasic", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NEEDED, new org.apache.thrift.meta_data.FieldMetaData("needed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.FIELD_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("fieldDescription", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAPPING, new org.apache.thrift.meta_data.FieldMetaData("mapping", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VALIDATE_RE, new org.apache.thrift.meta_data.FieldMetaData("validateRe", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DICT_CONSTANT_ID, new org.apache.thrift.meta_data.FieldMetaData("dictConstantId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DICT_CONSTANT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("dictConstantValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ConfigCustomMetaData.class, metaDataMap);
  }

  public ConfigCustomMetaData() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ConfigCustomMetaData(ConfigCustomMetaData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetFieldName()) {
      this.fieldName = other.fieldName;
    }
    if (other.isSetFieldTitle()) {
      this.fieldTitle = other.fieldTitle;
    }
    this.fieldType = other.fieldType;
    this.priority = other.priority;
    this.isBasic = other.isBasic;
    this.companyId = other.companyId;
    this.needed = other.needed;
    if (other.isSetFieldDescription()) {
      this.fieldDescription = other.fieldDescription;
    }
    if (other.isSetMapping()) {
      this.mapping = other.mapping;
    }
    this.parentId = other.parentId;
    if (other.isSetValidateRe()) {
      this.validateRe = other.validateRe;
    }
    this.dictConstantId = other.dictConstantId;
    if (other.isSetDictConstantValue()) {
      this.dictConstantValue = other.dictConstantValue;
    }
  }

  public ConfigCustomMetaData deepCopy() {
    return new ConfigCustomMetaData(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.fieldName = null;
    this.fieldTitle = null;
    setFieldTypeIsSet(false);
    this.fieldType = 0;
    setPriorityIsSet(false);
    this.priority = 0;
    setIsBasicIsSet(false);
    this.isBasic = 0;
    setCompanyIdIsSet(false);
    this.companyId = 0;
    setNeededIsSet(false);
    this.needed = 0;
    this.fieldDescription = null;
    this.mapping = null;
    setParentIdIsSet(false);
    this.parentId = 0;
    this.validateRe = null;
    setDictConstantIdIsSet(false);
    this.dictConstantId = 0;
    this.dictConstantValue = null;
  }

  public int getId() {
    return this.id;
  }

  public ConfigCustomMetaData setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getFieldName() {
    return this.fieldName;
  }

  public ConfigCustomMetaData setFieldName(String fieldName) {
    this.fieldName = fieldName;
    return this;
  }

  public void unsetFieldName() {
    this.fieldName = null;
  }

  /** Returns true if field fieldName is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldName() {
    return this.fieldName != null;
  }

  public void setFieldNameIsSet(boolean value) {
    if (!value) {
      this.fieldName = null;
    }
  }

  public String getFieldTitle() {
    return this.fieldTitle;
  }

  public ConfigCustomMetaData setFieldTitle(String fieldTitle) {
    this.fieldTitle = fieldTitle;
    return this;
  }

  public void unsetFieldTitle() {
    this.fieldTitle = null;
  }

  /** Returns true if field fieldTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldTitle() {
    return this.fieldTitle != null;
  }

  public void setFieldTitleIsSet(boolean value) {
    if (!value) {
      this.fieldTitle = null;
    }
  }

  public int getFieldType() {
    return this.fieldType;
  }

  public ConfigCustomMetaData setFieldType(int fieldType) {
    this.fieldType = fieldType;
    setFieldTypeIsSet(true);
    return this;
  }

  public void unsetFieldType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FIELDTYPE_ISSET_ID);
  }

  /** Returns true if field fieldType is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FIELDTYPE_ISSET_ID);
  }

  public void setFieldTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FIELDTYPE_ISSET_ID, value);
  }

  public int getPriority() {
    return this.priority;
  }

  public ConfigCustomMetaData setPriority(int priority) {
    this.priority = priority;
    setPriorityIsSet(true);
    return this;
  }

  public void unsetPriority() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  public void setPriorityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
  }

  public byte getIsBasic() {
    return this.isBasic;
  }

  public ConfigCustomMetaData setIsBasic(byte isBasic) {
    this.isBasic = isBasic;
    setIsBasicIsSet(true);
    return this;
  }

  public void unsetIsBasic() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISBASIC_ISSET_ID);
  }

  /** Returns true if field isBasic is set (has been assigned a value) and false otherwise */
  public boolean isSetIsBasic() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISBASIC_ISSET_ID);
  }

  public void setIsBasicIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISBASIC_ISSET_ID, value);
  }

  public int getCompanyId() {
    return this.companyId;
  }

  public ConfigCustomMetaData setCompanyId(int companyId) {
    this.companyId = companyId;
    setCompanyIdIsSet(true);
    return this;
  }

  public void unsetCompanyId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  public void setCompanyIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
  }

  public byte getNeeded() {
    return this.needed;
  }

  public ConfigCustomMetaData setNeeded(byte needed) {
    this.needed = needed;
    setNeededIsSet(true);
    return this;
  }

  public void unsetNeeded() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEEDED_ISSET_ID);
  }

  /** Returns true if field needed is set (has been assigned a value) and false otherwise */
  public boolean isSetNeeded() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEEDED_ISSET_ID);
  }

  public void setNeededIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEEDED_ISSET_ID, value);
  }

  public String getFieldDescription() {
    return this.fieldDescription;
  }

  public ConfigCustomMetaData setFieldDescription(String fieldDescription) {
    this.fieldDescription = fieldDescription;
    return this;
  }

  public void unsetFieldDescription() {
    this.fieldDescription = null;
  }

  /** Returns true if field fieldDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldDescription() {
    return this.fieldDescription != null;
  }

  public void setFieldDescriptionIsSet(boolean value) {
    if (!value) {
      this.fieldDescription = null;
    }
  }

  public String getMapping() {
    return this.mapping;
  }

  public ConfigCustomMetaData setMapping(String mapping) {
    this.mapping = mapping;
    return this;
  }

  public void unsetMapping() {
    this.mapping = null;
  }

  /** Returns true if field mapping is set (has been assigned a value) and false otherwise */
  public boolean isSetMapping() {
    return this.mapping != null;
  }

  public void setMappingIsSet(boolean value) {
    if (!value) {
      this.mapping = null;
    }
  }

  public int getParentId() {
    return this.parentId;
  }

  public ConfigCustomMetaData setParentId(int parentId) {
    this.parentId = parentId;
    setParentIdIsSet(true);
    return this;
  }

  public void unsetParentId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  public void setParentIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARENTID_ISSET_ID, value);
  }

  public String getValidateRe() {
    return this.validateRe;
  }

  public ConfigCustomMetaData setValidateRe(String validateRe) {
    this.validateRe = validateRe;
    return this;
  }

  public void unsetValidateRe() {
    this.validateRe = null;
  }

  /** Returns true if field validateRe is set (has been assigned a value) and false otherwise */
  public boolean isSetValidateRe() {
    return this.validateRe != null;
  }

  public void setValidateReIsSet(boolean value) {
    if (!value) {
      this.validateRe = null;
    }
  }

  public int getDictConstantId() {
    return this.dictConstantId;
  }

  public ConfigCustomMetaData setDictConstantId(int dictConstantId) {
    this.dictConstantId = dictConstantId;
    setDictConstantIdIsSet(true);
    return this;
  }

  public void unsetDictConstantId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DICTCONSTANTID_ISSET_ID);
  }

  /** Returns true if field dictConstantId is set (has been assigned a value) and false otherwise */
  public boolean isSetDictConstantId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DICTCONSTANTID_ISSET_ID);
  }

  public void setDictConstantIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DICTCONSTANTID_ISSET_ID, value);
  }

  public String getDictConstantValue() {
    return this.dictConstantValue;
  }

  public ConfigCustomMetaData setDictConstantValue(String dictConstantValue) {
    this.dictConstantValue = dictConstantValue;
    return this;
  }

  public void unsetDictConstantValue() {
    this.dictConstantValue = null;
  }

  /** Returns true if field dictConstantValue is set (has been assigned a value) and false otherwise */
  public boolean isSetDictConstantValue() {
    return this.dictConstantValue != null;
  }

  public void setDictConstantValueIsSet(boolean value) {
    if (!value) {
      this.dictConstantValue = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case FIELD_NAME:
      if (value == null) {
        unsetFieldName();
      } else {
        setFieldName((String)value);
      }
      break;

    case FIELD_TITLE:
      if (value == null) {
        unsetFieldTitle();
      } else {
        setFieldTitle((String)value);
      }
      break;

    case FIELD_TYPE:
      if (value == null) {
        unsetFieldType();
      } else {
        setFieldType((Integer)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((Integer)value);
      }
      break;

    case IS_BASIC:
      if (value == null) {
        unsetIsBasic();
      } else {
        setIsBasic((Byte)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompanyId();
      } else {
        setCompanyId((Integer)value);
      }
      break;

    case NEEDED:
      if (value == null) {
        unsetNeeded();
      } else {
        setNeeded((Byte)value);
      }
      break;

    case FIELD_DESCRIPTION:
      if (value == null) {
        unsetFieldDescription();
      } else {
        setFieldDescription((String)value);
      }
      break;

    case MAPPING:
      if (value == null) {
        unsetMapping();
      } else {
        setMapping((String)value);
      }
      break;

    case PARENT_ID:
      if (value == null) {
        unsetParentId();
      } else {
        setParentId((Integer)value);
      }
      break;

    case VALIDATE_RE:
      if (value == null) {
        unsetValidateRe();
      } else {
        setValidateRe((String)value);
      }
      break;

    case DICT_CONSTANT_ID:
      if (value == null) {
        unsetDictConstantId();
      } else {
        setDictConstantId((Integer)value);
      }
      break;

    case DICT_CONSTANT_VALUE:
      if (value == null) {
        unsetDictConstantValue();
      } else {
        setDictConstantValue((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case FIELD_NAME:
      return getFieldName();

    case FIELD_TITLE:
      return getFieldTitle();

    case FIELD_TYPE:
      return getFieldType();

    case PRIORITY:
      return getPriority();

    case IS_BASIC:
      return getIsBasic();

    case COMPANY_ID:
      return getCompanyId();

    case NEEDED:
      return getNeeded();

    case FIELD_DESCRIPTION:
      return getFieldDescription();

    case MAPPING:
      return getMapping();

    case PARENT_ID:
      return getParentId();

    case VALIDATE_RE:
      return getValidateRe();

    case DICT_CONSTANT_ID:
      return getDictConstantId();

    case DICT_CONSTANT_VALUE:
      return getDictConstantValue();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case FIELD_NAME:
      return isSetFieldName();
    case FIELD_TITLE:
      return isSetFieldTitle();
    case FIELD_TYPE:
      return isSetFieldType();
    case PRIORITY:
      return isSetPriority();
    case IS_BASIC:
      return isSetIsBasic();
    case COMPANY_ID:
      return isSetCompanyId();
    case NEEDED:
      return isSetNeeded();
    case FIELD_DESCRIPTION:
      return isSetFieldDescription();
    case MAPPING:
      return isSetMapping();
    case PARENT_ID:
      return isSetParentId();
    case VALIDATE_RE:
      return isSetValidateRe();
    case DICT_CONSTANT_ID:
      return isSetDictConstantId();
    case DICT_CONSTANT_VALUE:
      return isSetDictConstantValue();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ConfigCustomMetaData)
      return this.equals((ConfigCustomMetaData)that);
    return false;
  }

  public boolean equals(ConfigCustomMetaData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_fieldName = true && this.isSetFieldName();
    boolean that_present_fieldName = true && that.isSetFieldName();
    if (this_present_fieldName || that_present_fieldName) {
      if (!(this_present_fieldName && that_present_fieldName))
        return false;
      if (!this.fieldName.equals(that.fieldName))
        return false;
    }

    boolean this_present_fieldTitle = true && this.isSetFieldTitle();
    boolean that_present_fieldTitle = true && that.isSetFieldTitle();
    if (this_present_fieldTitle || that_present_fieldTitle) {
      if (!(this_present_fieldTitle && that_present_fieldTitle))
        return false;
      if (!this.fieldTitle.equals(that.fieldTitle))
        return false;
    }

    boolean this_present_fieldType = true && this.isSetFieldType();
    boolean that_present_fieldType = true && that.isSetFieldType();
    if (this_present_fieldType || that_present_fieldType) {
      if (!(this_present_fieldType && that_present_fieldType))
        return false;
      if (this.fieldType != that.fieldType)
        return false;
    }

    boolean this_present_priority = true && this.isSetPriority();
    boolean that_present_priority = true && that.isSetPriority();
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (this.priority != that.priority)
        return false;
    }

    boolean this_present_isBasic = true && this.isSetIsBasic();
    boolean that_present_isBasic = true && that.isSetIsBasic();
    if (this_present_isBasic || that_present_isBasic) {
      if (!(this_present_isBasic && that_present_isBasic))
        return false;
      if (this.isBasic != that.isBasic)
        return false;
    }

    boolean this_present_companyId = true && this.isSetCompanyId();
    boolean that_present_companyId = true && that.isSetCompanyId();
    if (this_present_companyId || that_present_companyId) {
      if (!(this_present_companyId && that_present_companyId))
        return false;
      if (this.companyId != that.companyId)
        return false;
    }

    boolean this_present_needed = true && this.isSetNeeded();
    boolean that_present_needed = true && that.isSetNeeded();
    if (this_present_needed || that_present_needed) {
      if (!(this_present_needed && that_present_needed))
        return false;
      if (this.needed != that.needed)
        return false;
    }

    boolean this_present_fieldDescription = true && this.isSetFieldDescription();
    boolean that_present_fieldDescription = true && that.isSetFieldDescription();
    if (this_present_fieldDescription || that_present_fieldDescription) {
      if (!(this_present_fieldDescription && that_present_fieldDescription))
        return false;
      if (!this.fieldDescription.equals(that.fieldDescription))
        return false;
    }

    boolean this_present_mapping = true && this.isSetMapping();
    boolean that_present_mapping = true && that.isSetMapping();
    if (this_present_mapping || that_present_mapping) {
      if (!(this_present_mapping && that_present_mapping))
        return false;
      if (!this.mapping.equals(that.mapping))
        return false;
    }

    boolean this_present_parentId = true && this.isSetParentId();
    boolean that_present_parentId = true && that.isSetParentId();
    if (this_present_parentId || that_present_parentId) {
      if (!(this_present_parentId && that_present_parentId))
        return false;
      if (this.parentId != that.parentId)
        return false;
    }

    boolean this_present_validateRe = true && this.isSetValidateRe();
    boolean that_present_validateRe = true && that.isSetValidateRe();
    if (this_present_validateRe || that_present_validateRe) {
      if (!(this_present_validateRe && that_present_validateRe))
        return false;
      if (!this.validateRe.equals(that.validateRe))
        return false;
    }

    boolean this_present_dictConstantId = true && this.isSetDictConstantId();
    boolean that_present_dictConstantId = true && that.isSetDictConstantId();
    if (this_present_dictConstantId || that_present_dictConstantId) {
      if (!(this_present_dictConstantId && that_present_dictConstantId))
        return false;
      if (this.dictConstantId != that.dictConstantId)
        return false;
    }

    boolean this_present_dictConstantValue = true && this.isSetDictConstantValue();
    boolean that_present_dictConstantValue = true && that.isSetDictConstantValue();
    if (this_present_dictConstantValue || that_present_dictConstantValue) {
      if (!(this_present_dictConstantValue && that_present_dictConstantValue))
        return false;
      if (!this.dictConstantValue.equals(that.dictConstantValue))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetFieldName()) ? 131071 : 524287);
    if (isSetFieldName())
      hashCode = hashCode * 8191 + fieldName.hashCode();

    hashCode = hashCode * 8191 + ((isSetFieldTitle()) ? 131071 : 524287);
    if (isSetFieldTitle())
      hashCode = hashCode * 8191 + fieldTitle.hashCode();

    hashCode = hashCode * 8191 + ((isSetFieldType()) ? 131071 : 524287);
    if (isSetFieldType())
      hashCode = hashCode * 8191 + fieldType;

    hashCode = hashCode * 8191 + ((isSetPriority()) ? 131071 : 524287);
    if (isSetPriority())
      hashCode = hashCode * 8191 + priority;

    hashCode = hashCode * 8191 + ((isSetIsBasic()) ? 131071 : 524287);
    if (isSetIsBasic())
      hashCode = hashCode * 8191 + (int) (isBasic);

    hashCode = hashCode * 8191 + ((isSetCompanyId()) ? 131071 : 524287);
    if (isSetCompanyId())
      hashCode = hashCode * 8191 + companyId;

    hashCode = hashCode * 8191 + ((isSetNeeded()) ? 131071 : 524287);
    if (isSetNeeded())
      hashCode = hashCode * 8191 + (int) (needed);

    hashCode = hashCode * 8191 + ((isSetFieldDescription()) ? 131071 : 524287);
    if (isSetFieldDescription())
      hashCode = hashCode * 8191 + fieldDescription.hashCode();

    hashCode = hashCode * 8191 + ((isSetMapping()) ? 131071 : 524287);
    if (isSetMapping())
      hashCode = hashCode * 8191 + mapping.hashCode();

    hashCode = hashCode * 8191 + ((isSetParentId()) ? 131071 : 524287);
    if (isSetParentId())
      hashCode = hashCode * 8191 + parentId;

    hashCode = hashCode * 8191 + ((isSetValidateRe()) ? 131071 : 524287);
    if (isSetValidateRe())
      hashCode = hashCode * 8191 + validateRe.hashCode();

    hashCode = hashCode * 8191 + ((isSetDictConstantId()) ? 131071 : 524287);
    if (isSetDictConstantId())
      hashCode = hashCode * 8191 + dictConstantId;

    hashCode = hashCode * 8191 + ((isSetDictConstantValue()) ? 131071 : 524287);
    if (isSetDictConstantValue())
      hashCode = hashCode * 8191 + dictConstantValue.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ConfigCustomMetaData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldName()).compareTo(other.isSetFieldName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldName, other.fieldName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldTitle()).compareTo(other.isSetFieldTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldTitle, other.fieldTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldType()).compareTo(other.isSetFieldType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldType, other.fieldType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsBasic()).compareTo(other.isSetIsBasic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsBasic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isBasic, other.isBasic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNeeded()).compareTo(other.isSetNeeded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeeded()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.needed, other.needed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldDescription()).compareTo(other.isSetFieldDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldDescription, other.fieldDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapping()).compareTo(other.isSetMapping());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapping()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapping, other.mapping);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValidateRe()).compareTo(other.isSetValidateRe());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidateRe()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validateRe, other.validateRe);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDictConstantId()).compareTo(other.isSetDictConstantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDictConstantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dictConstantId, other.dictConstantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDictConstantValue()).compareTo(other.isSetDictConstantValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDictConstantValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dictConstantValue, other.dictConstantValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ConfigCustomMetaData(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetFieldName()) {
      if (!first) sb.append(", ");
      sb.append("fieldName:");
      if (this.fieldName == null) {
        sb.append("null");
      } else {
        sb.append(this.fieldName);
      }
      first = false;
    }
    if (isSetFieldTitle()) {
      if (!first) sb.append(", ");
      sb.append("fieldTitle:");
      if (this.fieldTitle == null) {
        sb.append("null");
      } else {
        sb.append(this.fieldTitle);
      }
      first = false;
    }
    if (isSetFieldType()) {
      if (!first) sb.append(", ");
      sb.append("fieldType:");
      sb.append(this.fieldType);
      first = false;
    }
    if (isSetPriority()) {
      if (!first) sb.append(", ");
      sb.append("priority:");
      sb.append(this.priority);
      first = false;
    }
    if (isSetIsBasic()) {
      if (!first) sb.append(", ");
      sb.append("isBasic:");
      sb.append(this.isBasic);
      first = false;
    }
    if (isSetCompanyId()) {
      if (!first) sb.append(", ");
      sb.append("companyId:");
      sb.append(this.companyId);
      first = false;
    }
    if (isSetNeeded()) {
      if (!first) sb.append(", ");
      sb.append("needed:");
      sb.append(this.needed);
      first = false;
    }
    if (isSetFieldDescription()) {
      if (!first) sb.append(", ");
      sb.append("fieldDescription:");
      if (this.fieldDescription == null) {
        sb.append("null");
      } else {
        sb.append(this.fieldDescription);
      }
      first = false;
    }
    if (isSetMapping()) {
      if (!first) sb.append(", ");
      sb.append("mapping:");
      if (this.mapping == null) {
        sb.append("null");
      } else {
        sb.append(this.mapping);
      }
      first = false;
    }
    if (isSetParentId()) {
      if (!first) sb.append(", ");
      sb.append("parentId:");
      sb.append(this.parentId);
      first = false;
    }
    if (isSetValidateRe()) {
      if (!first) sb.append(", ");
      sb.append("validateRe:");
      if (this.validateRe == null) {
        sb.append("null");
      } else {
        sb.append(this.validateRe);
      }
      first = false;
    }
    if (isSetDictConstantId()) {
      if (!first) sb.append(", ");
      sb.append("dictConstantId:");
      sb.append(this.dictConstantId);
      first = false;
    }
    if (isSetDictConstantValue()) {
      if (!first) sb.append(", ");
      sb.append("dictConstantValue:");
      if (this.dictConstantValue == null) {
        sb.append("null");
      } else {
        sb.append(this.dictConstantValue);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ConfigCustomMetaDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConfigCustomMetaDataStandardScheme getScheme() {
      return new ConfigCustomMetaDataStandardScheme();
    }
  }

  private static class ConfigCustomMetaDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<ConfigCustomMetaData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ConfigCustomMetaData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FIELD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fieldName = iprot.readString();
              struct.setFieldNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FIELD_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fieldTitle = iprot.readString();
              struct.setFieldTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FIELD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fieldType = iprot.readI32();
              struct.setFieldTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priority = iprot.readI32();
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_BASIC
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.isBasic = iprot.readByte();
              struct.setIsBasicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.companyId = iprot.readI32();
              struct.setCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NEEDED
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.needed = iprot.readByte();
              struct.setNeededIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FIELD_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fieldDescription = iprot.readString();
              struct.setFieldDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MAPPING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mapping = iprot.readString();
              struct.setMappingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PARENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parentId = iprot.readI32();
              struct.setParentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // VALIDATE_RE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.validateRe = iprot.readString();
              struct.setValidateReIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DICT_CONSTANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dictConstantId = iprot.readI32();
              struct.setDictConstantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DICT_CONSTANT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dictConstantValue = iprot.readString();
              struct.setDictConstantValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ConfigCustomMetaData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.fieldName != null) {
        if (struct.isSetFieldName()) {
          oprot.writeFieldBegin(FIELD_NAME_FIELD_DESC);
          oprot.writeString(struct.fieldName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fieldTitle != null) {
        if (struct.isSetFieldTitle()) {
          oprot.writeFieldBegin(FIELD_TITLE_FIELD_DESC);
          oprot.writeString(struct.fieldTitle);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFieldType()) {
        oprot.writeFieldBegin(FIELD_TYPE_FIELD_DESC);
        oprot.writeI32(struct.fieldType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPriority()) {
        oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
        oprot.writeI32(struct.priority);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsBasic()) {
        oprot.writeFieldBegin(IS_BASIC_FIELD_DESC);
        oprot.writeByte(struct.isBasic);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompanyId()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.companyId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNeeded()) {
        oprot.writeFieldBegin(NEEDED_FIELD_DESC);
        oprot.writeByte(struct.needed);
        oprot.writeFieldEnd();
      }
      if (struct.fieldDescription != null) {
        if (struct.isSetFieldDescription()) {
          oprot.writeFieldBegin(FIELD_DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.fieldDescription);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mapping != null) {
        if (struct.isSetMapping()) {
          oprot.writeFieldBegin(MAPPING_FIELD_DESC);
          oprot.writeString(struct.mapping);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetParentId()) {
        oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
        oprot.writeI32(struct.parentId);
        oprot.writeFieldEnd();
      }
      if (struct.validateRe != null) {
        if (struct.isSetValidateRe()) {
          oprot.writeFieldBegin(VALIDATE_RE_FIELD_DESC);
          oprot.writeString(struct.validateRe);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDictConstantId()) {
        oprot.writeFieldBegin(DICT_CONSTANT_ID_FIELD_DESC);
        oprot.writeI32(struct.dictConstantId);
        oprot.writeFieldEnd();
      }
      if (struct.dictConstantValue != null) {
        if (struct.isSetDictConstantValue()) {
          oprot.writeFieldBegin(DICT_CONSTANT_VALUE_FIELD_DESC);
          oprot.writeString(struct.dictConstantValue);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ConfigCustomMetaDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConfigCustomMetaDataTupleScheme getScheme() {
      return new ConfigCustomMetaDataTupleScheme();
    }
  }

  private static class ConfigCustomMetaDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<ConfigCustomMetaData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ConfigCustomMetaData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetFieldName()) {
        optionals.set(1);
      }
      if (struct.isSetFieldTitle()) {
        optionals.set(2);
      }
      if (struct.isSetFieldType()) {
        optionals.set(3);
      }
      if (struct.isSetPriority()) {
        optionals.set(4);
      }
      if (struct.isSetIsBasic()) {
        optionals.set(5);
      }
      if (struct.isSetCompanyId()) {
        optionals.set(6);
      }
      if (struct.isSetNeeded()) {
        optionals.set(7);
      }
      if (struct.isSetFieldDescription()) {
        optionals.set(8);
      }
      if (struct.isSetMapping()) {
        optionals.set(9);
      }
      if (struct.isSetParentId()) {
        optionals.set(10);
      }
      if (struct.isSetValidateRe()) {
        optionals.set(11);
      }
      if (struct.isSetDictConstantId()) {
        optionals.set(12);
      }
      if (struct.isSetDictConstantValue()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetFieldName()) {
        oprot.writeString(struct.fieldName);
      }
      if (struct.isSetFieldTitle()) {
        oprot.writeString(struct.fieldTitle);
      }
      if (struct.isSetFieldType()) {
        oprot.writeI32(struct.fieldType);
      }
      if (struct.isSetPriority()) {
        oprot.writeI32(struct.priority);
      }
      if (struct.isSetIsBasic()) {
        oprot.writeByte(struct.isBasic);
      }
      if (struct.isSetCompanyId()) {
        oprot.writeI32(struct.companyId);
      }
      if (struct.isSetNeeded()) {
        oprot.writeByte(struct.needed);
      }
      if (struct.isSetFieldDescription()) {
        oprot.writeString(struct.fieldDescription);
      }
      if (struct.isSetMapping()) {
        oprot.writeString(struct.mapping);
      }
      if (struct.isSetParentId()) {
        oprot.writeI32(struct.parentId);
      }
      if (struct.isSetValidateRe()) {
        oprot.writeString(struct.validateRe);
      }
      if (struct.isSetDictConstantId()) {
        oprot.writeI32(struct.dictConstantId);
      }
      if (struct.isSetDictConstantValue()) {
        oprot.writeString(struct.dictConstantValue);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ConfigCustomMetaData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fieldName = iprot.readString();
        struct.setFieldNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fieldTitle = iprot.readString();
        struct.setFieldTitleIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fieldType = iprot.readI32();
        struct.setFieldTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.priority = iprot.readI32();
        struct.setPriorityIsSet(true);
      }
      if (incoming.get(5)) {
        struct.isBasic = iprot.readByte();
        struct.setIsBasicIsSet(true);
      }
      if (incoming.get(6)) {
        struct.companyId = iprot.readI32();
        struct.setCompanyIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.needed = iprot.readByte();
        struct.setNeededIsSet(true);
      }
      if (incoming.get(8)) {
        struct.fieldDescription = iprot.readString();
        struct.setFieldDescriptionIsSet(true);
      }
      if (incoming.get(9)) {
        struct.mapping = iprot.readString();
        struct.setMappingIsSet(true);
      }
      if (incoming.get(10)) {
        struct.parentId = iprot.readI32();
        struct.setParentIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.validateRe = iprot.readString();
        struct.setValidateReIsSet(true);
      }
      if (incoming.get(12)) {
        struct.dictConstantId = iprot.readI32();
        struct.setDictConstantIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.dictConstantValue = iprot.readString();
        struct.setDictConstantValueIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

