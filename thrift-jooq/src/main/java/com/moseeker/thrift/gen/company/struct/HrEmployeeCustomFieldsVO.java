/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.company.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-03-02")
public class HrEmployeeCustomFieldsVO implements org.apache.thrift.TBase<HrEmployeeCustomFieldsVO, HrEmployeeCustomFieldsVO._Fields>, java.io.Serializable, Cloneable, Comparable<HrEmployeeCustomFieldsVO> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HrEmployeeCustomFieldsVO");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField FNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fname", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FVALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("fvalues", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField OPTION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("option_type", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HrEmployeeCustomFieldsVOStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HrEmployeeCustomFieldsVOTupleSchemeFactory();

    public int id; // optional
    public java.lang.String fname; // optional
    public java.util.List<java.lang.String> fvalues; // optional
    public int option_type; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        ID((short)1, "id"),
        FNAME((short)2, "fname"),
        FVALUES((short)3, "fvalues"),
        OPTION_TYPE((short)4, "option_type");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case 1: // ID
                    return ID;
                case 2: // FNAME
                    return FNAME;
                case 3: // FVALUES
                    return FVALUES;
                case 4: // OPTION_TYPE
                    return OPTION_TYPE;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private static final int __OPTION_TYPE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.ID,_Fields.FNAME,_Fields.FVALUES,_Fields.OPTION_TYPE};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.FNAME, new org.apache.thrift.meta_data.FieldMetaData("fname", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.FVALUES, new org.apache.thrift.meta_data.FieldMetaData("fvalues", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        tmpMap.put(_Fields.OPTION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("option_type", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HrEmployeeCustomFieldsVO.class, metaDataMap);
    }

    public HrEmployeeCustomFieldsVO() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public HrEmployeeCustomFieldsVO(HrEmployeeCustomFieldsVO other) {
        __isset_bitfield = other.__isset_bitfield;
        this.id = other.id;
        if (other.isSetFname()) {
            this.fname = other.fname;
        }
        if (other.isSetFvalues()) {
            java.util.List<java.lang.String> __this__fvalues = new java.util.ArrayList<java.lang.String>(other.fvalues);
            this.fvalues = __this__fvalues;
        }
        this.option_type = other.option_type;
    }

    public HrEmployeeCustomFieldsVO deepCopy() {
        return new HrEmployeeCustomFieldsVO(this);
    }

    @Override
    public void clear() {
        setIdIsSet(false);
        this.id = 0;
        this.fname = null;
        this.fvalues = null;
        setOption_typeIsSet(false);
        this.option_type = 0;
    }

    public int getId() {
        return this.id;
    }

    public HrEmployeeCustomFieldsVO setId(int id) {
        this.id = id;
        setIdIsSet(true);
        return this;
    }

    public void unsetId() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public java.lang.String getFname() {
        return this.fname;
    }

    public HrEmployeeCustomFieldsVO setFname(java.lang.String fname) {
        this.fname = fname;
        return this;
    }

    public void unsetFname() {
        this.fname = null;
    }

    /** Returns true if field fname is set (has been assigned a value) and false otherwise */
    public boolean isSetFname() {
        return this.fname != null;
    }

    public void setFnameIsSet(boolean value) {
        if (!value) {
            this.fname = null;
        }
    }

    public int getFvaluesSize() {
        return (this.fvalues == null) ? 0 : this.fvalues.size();
    }

    public java.util.Iterator<java.lang.String> getFvaluesIterator() {
        return (this.fvalues == null) ? null : this.fvalues.iterator();
    }

    public void addToFvalues(java.lang.String elem) {
        if (this.fvalues == null) {
            this.fvalues = new java.util.ArrayList<java.lang.String>();
        }
        this.fvalues.add(elem);
    }

    public java.util.List<java.lang.String> getFvalues() {
        return this.fvalues;
    }

    public HrEmployeeCustomFieldsVO setFvalues(java.util.List<java.lang.String> fvalues) {
        this.fvalues = fvalues;
        return this;
    }

    public void unsetFvalues() {
        this.fvalues = null;
    }

    /** Returns true if field fvalues is set (has been assigned a value) and false otherwise */
    public boolean isSetFvalues() {
        return this.fvalues != null;
    }

    public void setFvaluesIsSet(boolean value) {
        if (!value) {
            this.fvalues = null;
        }
    }

    public int getOption_type() {
        return this.option_type;
    }

    public HrEmployeeCustomFieldsVO setOption_type(int option_type) {
        this.option_type = option_type;
        setOption_typeIsSet(true);
        return this;
    }

    public void unsetOption_type() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OPTION_TYPE_ISSET_ID);
    }

    /** Returns true if field option_type is set (has been assigned a value) and false otherwise */
    public boolean isSetOption_type() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OPTION_TYPE_ISSET_ID);
    }

    public void setOption_typeIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OPTION_TYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
        switch (field) {
            case ID:
                if (value == null) {
                    unsetId();
                } else {
                    setId((java.lang.Integer)value);
                }
                break;

            case FNAME:
                if (value == null) {
                    unsetFname();
                } else {
                    setFname((java.lang.String)value);
                }
                break;

            case FVALUES:
                if (value == null) {
                    unsetFvalues();
                } else {
                    setFvalues((java.util.List<java.lang.String>)value);
                }
                break;

            case OPTION_TYPE:
                if (value == null) {
                    unsetOption_type();
                } else {
                    setOption_type((java.lang.Integer)value);
                }
                break;

        }
    }

    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case ID:
                return getId();

            case FNAME:
                return getFname();

            case FVALUES:
                return getFvalues();

            case OPTION_TYPE:
                return getOption_type();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case ID:
                return isSetId();
            case FNAME:
                return isSetFname();
            case FVALUES:
                return isSetFvalues();
            case OPTION_TYPE:
                return isSetOption_type();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that == null)
            return false;
        if (that instanceof HrEmployeeCustomFieldsVO)
            return this.equals((HrEmployeeCustomFieldsVO)that);
        return false;
    }

    public boolean equals(HrEmployeeCustomFieldsVO that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_id = true && this.isSetId();
        boolean that_present_id = true && that.isSetId();
        if (this_present_id || that_present_id) {
            if (!(this_present_id && that_present_id))
                return false;
            if (this.id != that.id)
                return false;
        }

        boolean this_present_fname = true && this.isSetFname();
        boolean that_present_fname = true && that.isSetFname();
        if (this_present_fname || that_present_fname) {
            if (!(this_present_fname && that_present_fname))
                return false;
            if (!this.fname.equals(that.fname))
                return false;
        }

        boolean this_present_fvalues = true && this.isSetFvalues();
        boolean that_present_fvalues = true && that.isSetFvalues();
        if (this_present_fvalues || that_present_fvalues) {
            if (!(this_present_fvalues && that_present_fvalues))
                return false;
            if (!this.fvalues.equals(that.fvalues))
                return false;
        }

        boolean this_present_option_type = true && this.isSetOption_type();
        boolean that_present_option_type = true && that.isSetOption_type();
        if (this_present_option_type || that_present_option_type) {
            if (!(this_present_option_type && that_present_option_type))
                return false;
            if (this.option_type != that.option_type)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
        if (isSetId())
            hashCode = hashCode * 8191 + id;

        hashCode = hashCode * 8191 + ((isSetFname()) ? 131071 : 524287);
        if (isSetFname())
            hashCode = hashCode * 8191 + fname.hashCode();

        hashCode = hashCode * 8191 + ((isSetFvalues()) ? 131071 : 524287);
        if (isSetFvalues())
            hashCode = hashCode * 8191 + fvalues.hashCode();

        hashCode = hashCode * 8191 + ((isSetOption_type()) ? 131071 : 524287);
        if (isSetOption_type())
            hashCode = hashCode * 8191 + option_type;

        return hashCode;
    }

    @Override
    public int compareTo(HrEmployeeCustomFieldsVO other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetFname()).compareTo(other.isSetFname());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFname()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fname, other.fname);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetFvalues()).compareTo(other.isSetFvalues());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFvalues()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fvalues, other.fvalues);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetOption_type()).compareTo(other.isSetOption_type());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetOption_type()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option_type, other.option_type);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("HrEmployeeCustomFieldsVO(");
        boolean first = true;

        if (isSetId()) {
            sb.append("id:");
            sb.append(this.id);
            first = false;
        }
        if (isSetFname()) {
            if (!first) sb.append(", ");
            sb.append("fname:");
            if (this.fname == null) {
                sb.append("null");
            } else {
                sb.append(this.fname);
            }
            first = false;
        }
        if (isSetFvalues()) {
            if (!first) sb.append(", ");
            sb.append("fvalues:");
            if (this.fvalues == null) {
                sb.append("null");
            } else {
                sb.append(this.fvalues);
            }
            first = false;
        }
        if (isSetOption_type()) {
            if (!first) sb.append(", ");
            sb.append("option_type:");
            sb.append(this.option_type);
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class HrEmployeeCustomFieldsVOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public HrEmployeeCustomFieldsVOStandardScheme getScheme() {
            return new HrEmployeeCustomFieldsVOStandardScheme();
        }
    }

    private static class HrEmployeeCustomFieldsVOStandardScheme extends org.apache.thrift.scheme.StandardScheme<HrEmployeeCustomFieldsVO> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, HrEmployeeCustomFieldsVO struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true)
            {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.id = iprot.readI32();
                            struct.setIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // FNAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.fname = iprot.readString();
                            struct.setFnameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // FVALUES
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                                struct.fvalues = new java.util.ArrayList<java.lang.String>(_list24.size);
                                java.lang.String _elem25;
                                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                                {
                                    _elem25 = iprot.readString();
                                    struct.fvalues.add(_elem25);
                                }
                                iprot.readListEnd();
                            }
                            struct.setFvaluesIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // OPTION_TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.option_type = iprot.readI32();
                            struct.setOption_typeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, HrEmployeeCustomFieldsVO struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.isSetId()) {
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI32(struct.id);
                oprot.writeFieldEnd();
            }
            if (struct.fname != null) {
                if (struct.isSetFname()) {
                    oprot.writeFieldBegin(FNAME_FIELD_DESC);
                    oprot.writeString(struct.fname);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.fvalues != null) {
                if (struct.isSetFvalues()) {
                    oprot.writeFieldBegin(FVALUES_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.fvalues.size()));
                        for (java.lang.String _iter27 : struct.fvalues)
                        {
                            oprot.writeString(_iter27);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetOption_type()) {
                oprot.writeFieldBegin(OPTION_TYPE_FIELD_DESC);
                oprot.writeI32(struct.option_type);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class HrEmployeeCustomFieldsVOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public HrEmployeeCustomFieldsVOTupleScheme getScheme() {
            return new HrEmployeeCustomFieldsVOTupleScheme();
        }
    }

    private static class HrEmployeeCustomFieldsVOTupleScheme extends org.apache.thrift.scheme.TupleScheme<HrEmployeeCustomFieldsVO> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, HrEmployeeCustomFieldsVO struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetId()) {
                optionals.set(0);
            }
            if (struct.isSetFname()) {
                optionals.set(1);
            }
            if (struct.isSetFvalues()) {
                optionals.set(2);
            }
            if (struct.isSetOption_type()) {
                optionals.set(3);
            }
            oprot.writeBitSet(optionals, 4);
            if (struct.isSetId()) {
                oprot.writeI32(struct.id);
            }
            if (struct.isSetFname()) {
                oprot.writeString(struct.fname);
            }
            if (struct.isSetFvalues()) {
                {
                    oprot.writeI32(struct.fvalues.size());
                    for (java.lang.String _iter28 : struct.fvalues)
                    {
                        oprot.writeString(_iter28);
                    }
                }
            }
            if (struct.isSetOption_type()) {
                oprot.writeI32(struct.option_type);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, HrEmployeeCustomFieldsVO struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(4);
            if (incoming.get(0)) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
            }
            if (incoming.get(1)) {
                struct.fname = iprot.readString();
                struct.setFnameIsSet(true);
            }
            if (incoming.get(2)) {
                {
                    org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    struct.fvalues = new java.util.ArrayList<java.lang.String>(_list29.size);
                    java.lang.String _elem30;
                    for (int _i31 = 0; _i31 < _list29.size; ++_i31)
                    {
                        _elem30 = iprot.readString();
                        struct.fvalues.add(_elem30);
                    }
                }
                struct.setFvaluesIsSet(true);
            }
            if (incoming.get(3)) {
                struct.option_type = iprot.readI32();
                struct.setOption_typeIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

