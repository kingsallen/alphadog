/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.configdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-11-06")
public class ConfigSysCvTplDO implements org.apache.thrift.TBase<ConfigSysCvTplDO, ConfigSysCvTplDO._Fields>, java.io.Serializable, Cloneable, Comparable<ConfigSysCvTplDO> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ConfigSysCvTplDO");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField FIELD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FIELD_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldTitle", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField FIELD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldType", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField ERROR_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("errorMsg", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField IS_BASIC_FIELD_DESC = new org.apache.thrift.protocol.TField("isBasic", org.apache.thrift.protocol.TType.I32, (short)7);
    private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField DISABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("disable", org.apache.thrift.protocol.TType.I32, (short)10);
    private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)11);
    private static final org.apache.thrift.protocol.TField NEEDED_FIELD_DESC = new org.apache.thrift.protocol.TField("needed", org.apache.thrift.protocol.TType.I32, (short)12);
    private static final org.apache.thrift.protocol.TField FIELD_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldDescription", org.apache.thrift.protocol.TType.STRING, (short)13);
    private static final org.apache.thrift.protocol.TField MAPPING_FIELD_DESC = new org.apache.thrift.protocol.TField("mapping", org.apache.thrift.protocol.TType.STRING, (short)14);
    private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.I32, (short)15);
    private static final org.apache.thrift.protocol.TField VALIDATE_RE_FIELD_DESC = new org.apache.thrift.protocol.TField("validateRe", org.apache.thrift.protocol.TType.STRING, (short)16);
    private static final org.apache.thrift.protocol.TField DICT_CONSTANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dictConstantId", org.apache.thrift.protocol.TType.I32, (short)17);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ConfigSysCvTplDOStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ConfigSysCvTplDOTupleSchemeFactory();

    public int id; // optional
    public java.lang.String fieldName; // optional
    public java.lang.String fieldTitle; // optional
    public int fieldType; // optional
    public java.lang.String errorMsg; // optional
    public int priority; // optional
    public int isBasic; // optional
    public java.lang.String createTime; // optional
    public java.lang.String updateTime; // optional
    public int disable; // optional
    public int companyId; // optional
    public int needed; // optional
    public java.lang.String fieldDescription; // optional
    public java.lang.String mapping; // optional
    public int parentId; // optional
    public java.lang.String validateRe; // optional
    public int dictConstantId; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        ID((short)1, "id"),
        FIELD_NAME((short)2, "fieldName"),
        FIELD_TITLE((short)3, "fieldTitle"),
        FIELD_TYPE((short)4, "fieldType"),
        ERROR_MSG((short)5, "errorMsg"),
        PRIORITY((short)6, "priority"),
        IS_BASIC((short)7, "isBasic"),
        CREATE_TIME((short)8, "createTime"),
        UPDATE_TIME((short)9, "updateTime"),
        DISABLE((short)10, "disable"),
        COMPANY_ID((short)11, "companyId"),
        NEEDED((short)12, "needed"),
        FIELD_DESCRIPTION((short)13, "fieldDescription"),
        MAPPING((short)14, "mapping"),
        PARENT_ID((short)15, "parentId"),
        VALIDATE_RE((short)16, "validateRe"),
        DICT_CONSTANT_ID((short)17, "dictConstantId");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case 1: // ID
                    return ID;
                case 2: // FIELD_NAME
                    return FIELD_NAME;
                case 3: // FIELD_TITLE
                    return FIELD_TITLE;
                case 4: // FIELD_TYPE
                    return FIELD_TYPE;
                case 5: // ERROR_MSG
                    return ERROR_MSG;
                case 6: // PRIORITY
                    return PRIORITY;
                case 7: // IS_BASIC
                    return IS_BASIC;
                case 8: // CREATE_TIME
                    return CREATE_TIME;
                case 9: // UPDATE_TIME
                    return UPDATE_TIME;
                case 10: // DISABLE
                    return DISABLE;
                case 11: // COMPANY_ID
                    return COMPANY_ID;
                case 12: // NEEDED
                    return NEEDED;
                case 13: // FIELD_DESCRIPTION
                    return FIELD_DESCRIPTION;
                case 14: // MAPPING
                    return MAPPING;
                case 15: // PARENT_ID
                    return PARENT_ID;
                case 16: // VALIDATE_RE
                    return VALIDATE_RE;
                case 17: // DICT_CONSTANT_ID
                    return DICT_CONSTANT_ID;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private static final int __FIELDTYPE_ISSET_ID = 1;
    private static final int __PRIORITY_ISSET_ID = 2;
    private static final int __ISBASIC_ISSET_ID = 3;
    private static final int __DISABLE_ISSET_ID = 4;
    private static final int __COMPANYID_ISSET_ID = 5;
    private static final int __NEEDED_ISSET_ID = 6;
    private static final int __PARENTID_ISSET_ID = 7;
    private static final int __DICTCONSTANTID_ISSET_ID = 8;
    private short __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.ID,_Fields.FIELD_NAME,_Fields.FIELD_TITLE,_Fields.FIELD_TYPE,_Fields.ERROR_MSG,_Fields.PRIORITY,_Fields.IS_BASIC,_Fields.CREATE_TIME,_Fields.UPDATE_TIME,_Fields.DISABLE,_Fields.COMPANY_ID,_Fields.NEEDED,_Fields.FIELD_DESCRIPTION,_Fields.MAPPING,_Fields.PARENT_ID,_Fields.VALIDATE_RE,_Fields.DICT_CONSTANT_ID};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.FIELD_NAME, new org.apache.thrift.meta_data.FieldMetaData("fieldName", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.FIELD_TITLE, new org.apache.thrift.meta_data.FieldMetaData("fieldTitle", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.FIELD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fieldType", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.ERROR_MSG, new org.apache.thrift.meta_data.FieldMetaData("errorMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.IS_BASIC, new org.apache.thrift.meta_data.FieldMetaData("isBasic", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.DISABLE, new org.apache.thrift.meta_data.FieldMetaData("disable", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.NEEDED, new org.apache.thrift.meta_data.FieldMetaData("needed", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.FIELD_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("fieldDescription", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.MAPPING, new org.apache.thrift.meta_data.FieldMetaData("mapping", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.VALIDATE_RE, new org.apache.thrift.meta_data.FieldMetaData("validateRe", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.DICT_CONSTANT_ID, new org.apache.thrift.meta_data.FieldMetaData("dictConstantId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ConfigSysCvTplDO.class, metaDataMap);
    }

    public ConfigSysCvTplDO() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ConfigSysCvTplDO(ConfigSysCvTplDO other) {
        __isset_bitfield = other.__isset_bitfield;
        this.id = other.id;
        if (other.isSetFieldName()) {
            this.fieldName = other.fieldName;
        }
        if (other.isSetFieldTitle()) {
            this.fieldTitle = other.fieldTitle;
        }
        this.fieldType = other.fieldType;
        if (other.isSetErrorMsg()) {
            this.errorMsg = other.errorMsg;
        }
        this.priority = other.priority;
        this.isBasic = other.isBasic;
        if (other.isSetCreateTime()) {
            this.createTime = other.createTime;
        }
        if (other.isSetUpdateTime()) {
            this.updateTime = other.updateTime;
        }
        this.disable = other.disable;
        this.companyId = other.companyId;
        this.needed = other.needed;
        if (other.isSetFieldDescription()) {
            this.fieldDescription = other.fieldDescription;
        }
        if (other.isSetMapping()) {
            this.mapping = other.mapping;
        }
        this.parentId = other.parentId;
        if (other.isSetValidateRe()) {
            this.validateRe = other.validateRe;
        }
        this.dictConstantId = other.dictConstantId;
    }

    public ConfigSysCvTplDO deepCopy() {
        return new ConfigSysCvTplDO(this);
    }

    @Override
    public void clear() {
        setIdIsSet(false);
        this.id = 0;
        this.fieldName = null;
        this.fieldTitle = null;
        setFieldTypeIsSet(false);
        this.fieldType = 0;
        this.errorMsg = null;
        setPriorityIsSet(false);
        this.priority = 0;
        setIsBasicIsSet(false);
        this.isBasic = 0;
        this.createTime = null;
        this.updateTime = null;
        setDisableIsSet(false);
        this.disable = 0;
        setCompanyIdIsSet(false);
        this.companyId = 0;
        setNeededIsSet(false);
        this.needed = 0;
        this.fieldDescription = null;
        this.mapping = null;
        setParentIdIsSet(false);
        this.parentId = 0;
        this.validateRe = null;
        setDictConstantIdIsSet(false);
        this.dictConstantId = 0;
    }

    public int getId() {
        return this.id;
    }

    public ConfigSysCvTplDO setId(int id) {
        this.id = id;
        setIdIsSet(true);
        return this;
    }

    public void unsetId() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public java.lang.String getFieldName() {
        return this.fieldName;
    }

    public ConfigSysCvTplDO setFieldName(java.lang.String fieldName) {
        this.fieldName = fieldName;
        return this;
    }

    public void unsetFieldName() {
        this.fieldName = null;
    }

    /** Returns true if field fieldName is set (has been assigned a value) and false otherwise */
    public boolean isSetFieldName() {
        return this.fieldName != null;
    }

    public void setFieldNameIsSet(boolean value) {
        if (!value) {
            this.fieldName = null;
        }
    }

    public java.lang.String getFieldTitle() {
        return this.fieldTitle;
    }

    public ConfigSysCvTplDO setFieldTitle(java.lang.String fieldTitle) {
        this.fieldTitle = fieldTitle;
        return this;
    }

    public void unsetFieldTitle() {
        this.fieldTitle = null;
    }

    /** Returns true if field fieldTitle is set (has been assigned a value) and false otherwise */
    public boolean isSetFieldTitle() {
        return this.fieldTitle != null;
    }

    public void setFieldTitleIsSet(boolean value) {
        if (!value) {
            this.fieldTitle = null;
        }
    }

    public int getFieldType() {
        return this.fieldType;
    }

    public ConfigSysCvTplDO setFieldType(int fieldType) {
        this.fieldType = fieldType;
        setFieldTypeIsSet(true);
        return this;
    }

    public void unsetFieldType() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FIELDTYPE_ISSET_ID);
    }

    /** Returns true if field fieldType is set (has been assigned a value) and false otherwise */
    public boolean isSetFieldType() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FIELDTYPE_ISSET_ID);
    }

    public void setFieldTypeIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FIELDTYPE_ISSET_ID, value);
    }

    public java.lang.String getErrorMsg() {
        return this.errorMsg;
    }

    public ConfigSysCvTplDO setErrorMsg(java.lang.String errorMsg) {
        this.errorMsg = errorMsg;
        return this;
    }

    public void unsetErrorMsg() {
        this.errorMsg = null;
    }

    /** Returns true if field errorMsg is set (has been assigned a value) and false otherwise */
    public boolean isSetErrorMsg() {
        return this.errorMsg != null;
    }

    public void setErrorMsgIsSet(boolean value) {
        if (!value) {
            this.errorMsg = null;
        }
    }

    public int getPriority() {
        return this.priority;
    }

    public ConfigSysCvTplDO setPriority(int priority) {
        this.priority = priority;
        setPriorityIsSet(true);
        return this;
    }

    public void unsetPriority() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
    }

    /** Returns true if field priority is set (has been assigned a value) and false otherwise */
    public boolean isSetPriority() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
    }

    public void setPriorityIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
    }

    public int getIsBasic() {
        return this.isBasic;
    }

    public ConfigSysCvTplDO setIsBasic(int isBasic) {
        this.isBasic = isBasic;
        setIsBasicIsSet(true);
        return this;
    }

    public void unsetIsBasic() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISBASIC_ISSET_ID);
    }

    /** Returns true if field isBasic is set (has been assigned a value) and false otherwise */
    public boolean isSetIsBasic() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISBASIC_ISSET_ID);
    }

    public void setIsBasicIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISBASIC_ISSET_ID, value);
    }

    public java.lang.String getCreateTime() {
        return this.createTime;
    }

    public ConfigSysCvTplDO setCreateTime(java.lang.String createTime) {
        this.createTime = createTime;
        return this;
    }

    public void unsetCreateTime() {
        this.createTime = null;
    }

    /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
    public boolean isSetCreateTime() {
        return this.createTime != null;
    }

    public void setCreateTimeIsSet(boolean value) {
        if (!value) {
            this.createTime = null;
        }
    }

    public java.lang.String getUpdateTime() {
        return this.updateTime;
    }

    public ConfigSysCvTplDO setUpdateTime(java.lang.String updateTime) {
        this.updateTime = updateTime;
        return this;
    }

    public void unsetUpdateTime() {
        this.updateTime = null;
    }

    /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
    public boolean isSetUpdateTime() {
        return this.updateTime != null;
    }

    public void setUpdateTimeIsSet(boolean value) {
        if (!value) {
            this.updateTime = null;
        }
    }

    public int getDisable() {
        return this.disable;
    }

    public ConfigSysCvTplDO setDisable(int disable) {
        this.disable = disable;
        setDisableIsSet(true);
        return this;
    }

    public void unsetDisable() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISABLE_ISSET_ID);
    }

    /** Returns true if field disable is set (has been assigned a value) and false otherwise */
    public boolean isSetDisable() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISABLE_ISSET_ID);
    }

    public void setDisableIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISABLE_ISSET_ID, value);
    }

    public int getCompanyId() {
        return this.companyId;
    }

    public ConfigSysCvTplDO setCompanyId(int companyId) {
        this.companyId = companyId;
        setCompanyIdIsSet(true);
        return this;
    }

    public void unsetCompanyId() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
    }

    /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
    public boolean isSetCompanyId() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
    }

    public void setCompanyIdIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
    }

    public int getNeeded() {
        return this.needed;
    }

    public ConfigSysCvTplDO setNeeded(int needed) {
        this.needed = needed;
        setNeededIsSet(true);
        return this;
    }

    public void unsetNeeded() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEEDED_ISSET_ID);
    }

    /** Returns true if field needed is set (has been assigned a value) and false otherwise */
    public boolean isSetNeeded() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEEDED_ISSET_ID);
    }

    public void setNeededIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEEDED_ISSET_ID, value);
    }

    public java.lang.String getFieldDescription() {
        return this.fieldDescription;
    }

    public ConfigSysCvTplDO setFieldDescription(java.lang.String fieldDescription) {
        this.fieldDescription = fieldDescription;
        return this;
    }

    public void unsetFieldDescription() {
        this.fieldDescription = null;
    }

    /** Returns true if field fieldDescription is set (has been assigned a value) and false otherwise */
    public boolean isSetFieldDescription() {
        return this.fieldDescription != null;
    }

    public void setFieldDescriptionIsSet(boolean value) {
        if (!value) {
            this.fieldDescription = null;
        }
    }

    public java.lang.String getMapping() {
        return this.mapping;
    }

    public ConfigSysCvTplDO setMapping(java.lang.String mapping) {
        this.mapping = mapping;
        return this;
    }

    public void unsetMapping() {
        this.mapping = null;
    }

    /** Returns true if field mapping is set (has been assigned a value) and false otherwise */
    public boolean isSetMapping() {
        return this.mapping != null;
    }

    public void setMappingIsSet(boolean value) {
        if (!value) {
            this.mapping = null;
        }
    }

    public int getParentId() {
        return this.parentId;
    }

    public ConfigSysCvTplDO setParentId(int parentId) {
        this.parentId = parentId;
        setParentIdIsSet(true);
        return this;
    }

    public void unsetParentId() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARENTID_ISSET_ID);
    }

    /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
    public boolean isSetParentId() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARENTID_ISSET_ID);
    }

    public void setParentIdIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARENTID_ISSET_ID, value);
    }

    public java.lang.String getValidateRe() {
        return this.validateRe;
    }

    public ConfigSysCvTplDO setValidateRe(java.lang.String validateRe) {
        this.validateRe = validateRe;
        return this;
    }

    public void unsetValidateRe() {
        this.validateRe = null;
    }

    /** Returns true if field validateRe is set (has been assigned a value) and false otherwise */
    public boolean isSetValidateRe() {
        return this.validateRe != null;
    }

    public void setValidateReIsSet(boolean value) {
        if (!value) {
            this.validateRe = null;
        }
    }

    public int getDictConstantId() {
        return this.dictConstantId;
    }

    public ConfigSysCvTplDO setDictConstantId(int dictConstantId) {
        this.dictConstantId = dictConstantId;
        setDictConstantIdIsSet(true);
        return this;
    }

    public void unsetDictConstantId() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DICTCONSTANTID_ISSET_ID);
    }

    /** Returns true if field dictConstantId is set (has been assigned a value) and false otherwise */
    public boolean isSetDictConstantId() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DICTCONSTANTID_ISSET_ID);
    }

    public void setDictConstantIdIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DICTCONSTANTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
        switch (field) {
            case ID:
                if (value == null) {
                    unsetId();
                } else {
                    setId((java.lang.Integer)value);
                }
                break;

            case FIELD_NAME:
                if (value == null) {
                    unsetFieldName();
                } else {
                    setFieldName((java.lang.String)value);
                }
                break;

            case FIELD_TITLE:
                if (value == null) {
                    unsetFieldTitle();
                } else {
                    setFieldTitle((java.lang.String)value);
                }
                break;

            case FIELD_TYPE:
                if (value == null) {
                    unsetFieldType();
                } else {
                    setFieldType((java.lang.Integer)value);
                }
                break;

            case ERROR_MSG:
                if (value == null) {
                    unsetErrorMsg();
                } else {
                    setErrorMsg((java.lang.String)value);
                }
                break;

            case PRIORITY:
                if (value == null) {
                    unsetPriority();
                } else {
                    setPriority((java.lang.Integer)value);
                }
                break;

            case IS_BASIC:
                if (value == null) {
                    unsetIsBasic();
                } else {
                    setIsBasic((java.lang.Integer)value);
                }
                break;

            case CREATE_TIME:
                if (value == null) {
                    unsetCreateTime();
                } else {
                    setCreateTime((java.lang.String)value);
                }
                break;

            case UPDATE_TIME:
                if (value == null) {
                    unsetUpdateTime();
                } else {
                    setUpdateTime((java.lang.String)value);
                }
                break;

            case DISABLE:
                if (value == null) {
                    unsetDisable();
                } else {
                    setDisable((java.lang.Integer)value);
                }
                break;

            case COMPANY_ID:
                if (value == null) {
                    unsetCompanyId();
                } else {
                    setCompanyId((java.lang.Integer)value);
                }
                break;

            case NEEDED:
                if (value == null) {
                    unsetNeeded();
                } else {
                    setNeeded((java.lang.Integer)value);
                }
                break;

            case FIELD_DESCRIPTION:
                if (value == null) {
                    unsetFieldDescription();
                } else {
                    setFieldDescription((java.lang.String)value);
                }
                break;

            case MAPPING:
                if (value == null) {
                    unsetMapping();
                } else {
                    setMapping((java.lang.String)value);
                }
                break;

            case PARENT_ID:
                if (value == null) {
                    unsetParentId();
                } else {
                    setParentId((java.lang.Integer)value);
                }
                break;

            case VALIDATE_RE:
                if (value == null) {
                    unsetValidateRe();
                } else {
                    setValidateRe((java.lang.String)value);
                }
                break;

            case DICT_CONSTANT_ID:
                if (value == null) {
                    unsetDictConstantId();
                } else {
                    setDictConstantId((java.lang.Integer)value);
                }
                break;

        }
    }

    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case ID:
                return getId();

            case FIELD_NAME:
                return getFieldName();

            case FIELD_TITLE:
                return getFieldTitle();

            case FIELD_TYPE:
                return getFieldType();

            case ERROR_MSG:
                return getErrorMsg();

            case PRIORITY:
                return getPriority();

            case IS_BASIC:
                return getIsBasic();

            case CREATE_TIME:
                return getCreateTime();

            case UPDATE_TIME:
                return getUpdateTime();

            case DISABLE:
                return getDisable();

            case COMPANY_ID:
                return getCompanyId();

            case NEEDED:
                return getNeeded();

            case FIELD_DESCRIPTION:
                return getFieldDescription();

            case MAPPING:
                return getMapping();

            case PARENT_ID:
                return getParentId();

            case VALIDATE_RE:
                return getValidateRe();

            case DICT_CONSTANT_ID:
                return getDictConstantId();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case ID:
                return isSetId();
            case FIELD_NAME:
                return isSetFieldName();
            case FIELD_TITLE:
                return isSetFieldTitle();
            case FIELD_TYPE:
                return isSetFieldType();
            case ERROR_MSG:
                return isSetErrorMsg();
            case PRIORITY:
                return isSetPriority();
            case IS_BASIC:
                return isSetIsBasic();
            case CREATE_TIME:
                return isSetCreateTime();
            case UPDATE_TIME:
                return isSetUpdateTime();
            case DISABLE:
                return isSetDisable();
            case COMPANY_ID:
                return isSetCompanyId();
            case NEEDED:
                return isSetNeeded();
            case FIELD_DESCRIPTION:
                return isSetFieldDescription();
            case MAPPING:
                return isSetMapping();
            case PARENT_ID:
                return isSetParentId();
            case VALIDATE_RE:
                return isSetValidateRe();
            case DICT_CONSTANT_ID:
                return isSetDictConstantId();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that == null)
            return false;
        if (that instanceof ConfigSysCvTplDO)
            return this.equals((ConfigSysCvTplDO)that);
        return false;
    }

    public boolean equals(ConfigSysCvTplDO that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_id = true && this.isSetId();
        boolean that_present_id = true && that.isSetId();
        if (this_present_id || that_present_id) {
            if (!(this_present_id && that_present_id))
                return false;
            if (this.id != that.id)
                return false;
        }

        boolean this_present_fieldName = true && this.isSetFieldName();
        boolean that_present_fieldName = true && that.isSetFieldName();
        if (this_present_fieldName || that_present_fieldName) {
            if (!(this_present_fieldName && that_present_fieldName))
                return false;
            if (!this.fieldName.equals(that.fieldName))
                return false;
        }

        boolean this_present_fieldTitle = true && this.isSetFieldTitle();
        boolean that_present_fieldTitle = true && that.isSetFieldTitle();
        if (this_present_fieldTitle || that_present_fieldTitle) {
            if (!(this_present_fieldTitle && that_present_fieldTitle))
                return false;
            if (!this.fieldTitle.equals(that.fieldTitle))
                return false;
        }

        boolean this_present_fieldType = true && this.isSetFieldType();
        boolean that_present_fieldType = true && that.isSetFieldType();
        if (this_present_fieldType || that_present_fieldType) {
            if (!(this_present_fieldType && that_present_fieldType))
                return false;
            if (this.fieldType != that.fieldType)
                return false;
        }

        boolean this_present_errorMsg = true && this.isSetErrorMsg();
        boolean that_present_errorMsg = true && that.isSetErrorMsg();
        if (this_present_errorMsg || that_present_errorMsg) {
            if (!(this_present_errorMsg && that_present_errorMsg))
                return false;
            if (!this.errorMsg.equals(that.errorMsg))
                return false;
        }

        boolean this_present_priority = true && this.isSetPriority();
        boolean that_present_priority = true && that.isSetPriority();
        if (this_present_priority || that_present_priority) {
            if (!(this_present_priority && that_present_priority))
                return false;
            if (this.priority != that.priority)
                return false;
        }

        boolean this_present_isBasic = true && this.isSetIsBasic();
        boolean that_present_isBasic = true && that.isSetIsBasic();
        if (this_present_isBasic || that_present_isBasic) {
            if (!(this_present_isBasic && that_present_isBasic))
                return false;
            if (this.isBasic != that.isBasic)
                return false;
        }

        boolean this_present_createTime = true && this.isSetCreateTime();
        boolean that_present_createTime = true && that.isSetCreateTime();
        if (this_present_createTime || that_present_createTime) {
            if (!(this_present_createTime && that_present_createTime))
                return false;
            if (!this.createTime.equals(that.createTime))
                return false;
        }

        boolean this_present_updateTime = true && this.isSetUpdateTime();
        boolean that_present_updateTime = true && that.isSetUpdateTime();
        if (this_present_updateTime || that_present_updateTime) {
            if (!(this_present_updateTime && that_present_updateTime))
                return false;
            if (!this.updateTime.equals(that.updateTime))
                return false;
        }

        boolean this_present_disable = true && this.isSetDisable();
        boolean that_present_disable = true && that.isSetDisable();
        if (this_present_disable || that_present_disable) {
            if (!(this_present_disable && that_present_disable))
                return false;
            if (this.disable != that.disable)
                return false;
        }

        boolean this_present_companyId = true && this.isSetCompanyId();
        boolean that_present_companyId = true && that.isSetCompanyId();
        if (this_present_companyId || that_present_companyId) {
            if (!(this_present_companyId && that_present_companyId))
                return false;
            if (this.companyId != that.companyId)
                return false;
        }

        boolean this_present_needed = true && this.isSetNeeded();
        boolean that_present_needed = true && that.isSetNeeded();
        if (this_present_needed || that_present_needed) {
            if (!(this_present_needed && that_present_needed))
                return false;
            if (this.needed != that.needed)
                return false;
        }

        boolean this_present_fieldDescription = true && this.isSetFieldDescription();
        boolean that_present_fieldDescription = true && that.isSetFieldDescription();
        if (this_present_fieldDescription || that_present_fieldDescription) {
            if (!(this_present_fieldDescription && that_present_fieldDescription))
                return false;
            if (!this.fieldDescription.equals(that.fieldDescription))
                return false;
        }

        boolean this_present_mapping = true && this.isSetMapping();
        boolean that_present_mapping = true && that.isSetMapping();
        if (this_present_mapping || that_present_mapping) {
            if (!(this_present_mapping && that_present_mapping))
                return false;
            if (!this.mapping.equals(that.mapping))
                return false;
        }

        boolean this_present_parentId = true && this.isSetParentId();
        boolean that_present_parentId = true && that.isSetParentId();
        if (this_present_parentId || that_present_parentId) {
            if (!(this_present_parentId && that_present_parentId))
                return false;
            if (this.parentId != that.parentId)
                return false;
        }

        boolean this_present_validateRe = true && this.isSetValidateRe();
        boolean that_present_validateRe = true && that.isSetValidateRe();
        if (this_present_validateRe || that_present_validateRe) {
            if (!(this_present_validateRe && that_present_validateRe))
                return false;
            if (!this.validateRe.equals(that.validateRe))
                return false;
        }

        boolean this_present_dictConstantId = true && this.isSetDictConstantId();
        boolean that_present_dictConstantId = true && that.isSetDictConstantId();
        if (this_present_dictConstantId || that_present_dictConstantId) {
            if (!(this_present_dictConstantId && that_present_dictConstantId))
                return false;
            if (this.dictConstantId != that.dictConstantId)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
        if (isSetId())
            hashCode = hashCode * 8191 + id;

        hashCode = hashCode * 8191 + ((isSetFieldName()) ? 131071 : 524287);
        if (isSetFieldName())
            hashCode = hashCode * 8191 + fieldName.hashCode();

        hashCode = hashCode * 8191 + ((isSetFieldTitle()) ? 131071 : 524287);
        if (isSetFieldTitle())
            hashCode = hashCode * 8191 + fieldTitle.hashCode();

        hashCode = hashCode * 8191 + ((isSetFieldType()) ? 131071 : 524287);
        if (isSetFieldType())
            hashCode = hashCode * 8191 + fieldType;

        hashCode = hashCode * 8191 + ((isSetErrorMsg()) ? 131071 : 524287);
        if (isSetErrorMsg())
            hashCode = hashCode * 8191 + errorMsg.hashCode();

        hashCode = hashCode * 8191 + ((isSetPriority()) ? 131071 : 524287);
        if (isSetPriority())
            hashCode = hashCode * 8191 + priority;

        hashCode = hashCode * 8191 + ((isSetIsBasic()) ? 131071 : 524287);
        if (isSetIsBasic())
            hashCode = hashCode * 8191 + isBasic;

        hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
        if (isSetCreateTime())
            hashCode = hashCode * 8191 + createTime.hashCode();

        hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
        if (isSetUpdateTime())
            hashCode = hashCode * 8191 + updateTime.hashCode();

        hashCode = hashCode * 8191 + ((isSetDisable()) ? 131071 : 524287);
        if (isSetDisable())
            hashCode = hashCode * 8191 + disable;

        hashCode = hashCode * 8191 + ((isSetCompanyId()) ? 131071 : 524287);
        if (isSetCompanyId())
            hashCode = hashCode * 8191 + companyId;

        hashCode = hashCode * 8191 + ((isSetNeeded()) ? 131071 : 524287);
        if (isSetNeeded())
            hashCode = hashCode * 8191 + needed;

        hashCode = hashCode * 8191 + ((isSetFieldDescription()) ? 131071 : 524287);
        if (isSetFieldDescription())
            hashCode = hashCode * 8191 + fieldDescription.hashCode();

        hashCode = hashCode * 8191 + ((isSetMapping()) ? 131071 : 524287);
        if (isSetMapping())
            hashCode = hashCode * 8191 + mapping.hashCode();

        hashCode = hashCode * 8191 + ((isSetParentId()) ? 131071 : 524287);
        if (isSetParentId())
            hashCode = hashCode * 8191 + parentId;

        hashCode = hashCode * 8191 + ((isSetValidateRe()) ? 131071 : 524287);
        if (isSetValidateRe())
            hashCode = hashCode * 8191 + validateRe.hashCode();

        hashCode = hashCode * 8191 + ((isSetDictConstantId()) ? 131071 : 524287);
        if (isSetDictConstantId())
            hashCode = hashCode * 8191 + dictConstantId;

        return hashCode;
    }

    @Override
    public int compareTo(ConfigSysCvTplDO other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetFieldName()).compareTo(other.isSetFieldName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFieldName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldName, other.fieldName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetFieldTitle()).compareTo(other.isSetFieldTitle());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFieldTitle()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldTitle, other.fieldTitle);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetFieldType()).compareTo(other.isSetFieldType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFieldType()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldType, other.fieldType);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetErrorMsg()).compareTo(other.isSetErrorMsg());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetErrorMsg()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorMsg, other.errorMsg);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPriority()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetIsBasic()).compareTo(other.isSetIsBasic());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetIsBasic()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isBasic, other.isBasic);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCreateTime()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUpdateTime()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetDisable()).compareTo(other.isSetDisable());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDisable()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable, other.disable);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCompanyId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetNeeded()).compareTo(other.isSetNeeded());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetNeeded()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.needed, other.needed);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetFieldDescription()).compareTo(other.isSetFieldDescription());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFieldDescription()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldDescription, other.fieldDescription);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetMapping()).compareTo(other.isSetMapping());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMapping()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapping, other.mapping);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetParentId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetValidateRe()).compareTo(other.isSetValidateRe());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetValidateRe()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validateRe, other.validateRe);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetDictConstantId()).compareTo(other.isSetDictConstantId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDictConstantId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dictConstantId, other.dictConstantId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("ConfigSysCvTplDO(");
        boolean first = true;

        if (isSetId()) {
            sb.append("id:");
            sb.append(this.id);
            first = false;
        }
        if (isSetFieldName()) {
            if (!first) sb.append(", ");
            sb.append("fieldName:");
            if (this.fieldName == null) {
                sb.append("null");
            } else {
                sb.append(this.fieldName);
            }
            first = false;
        }
        if (isSetFieldTitle()) {
            if (!first) sb.append(", ");
            sb.append("fieldTitle:");
            if (this.fieldTitle == null) {
                sb.append("null");
            } else {
                sb.append(this.fieldTitle);
            }
            first = false;
        }
        if (isSetFieldType()) {
            if (!first) sb.append(", ");
            sb.append("fieldType:");
            sb.append(this.fieldType);
            first = false;
        }
        if (isSetErrorMsg()) {
            if (!first) sb.append(", ");
            sb.append("errorMsg:");
            if (this.errorMsg == null) {
                sb.append("null");
            } else {
                sb.append(this.errorMsg);
            }
            first = false;
        }
        if (isSetPriority()) {
            if (!first) sb.append(", ");
            sb.append("priority:");
            sb.append(this.priority);
            first = false;
        }
        if (isSetIsBasic()) {
            if (!first) sb.append(", ");
            sb.append("isBasic:");
            sb.append(this.isBasic);
            first = false;
        }
        if (isSetCreateTime()) {
            if (!first) sb.append(", ");
            sb.append("createTime:");
            if (this.createTime == null) {
                sb.append("null");
            } else {
                sb.append(this.createTime);
            }
            first = false;
        }
        if (isSetUpdateTime()) {
            if (!first) sb.append(", ");
            sb.append("updateTime:");
            if (this.updateTime == null) {
                sb.append("null");
            } else {
                sb.append(this.updateTime);
            }
            first = false;
        }
        if (isSetDisable()) {
            if (!first) sb.append(", ");
            sb.append("disable:");
            sb.append(this.disable);
            first = false;
        }
        if (isSetCompanyId()) {
            if (!first) sb.append(", ");
            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
        }
        if (isSetNeeded()) {
            if (!first) sb.append(", ");
            sb.append("needed:");
            sb.append(this.needed);
            first = false;
        }
        if (isSetFieldDescription()) {
            if (!first) sb.append(", ");
            sb.append("fieldDescription:");
            if (this.fieldDescription == null) {
                sb.append("null");
            } else {
                sb.append(this.fieldDescription);
            }
            first = false;
        }
        if (isSetMapping()) {
            if (!first) sb.append(", ");
            sb.append("mapping:");
            if (this.mapping == null) {
                sb.append("null");
            } else {
                sb.append(this.mapping);
            }
            first = false;
        }
        if (isSetParentId()) {
            if (!first) sb.append(", ");
            sb.append("parentId:");
            sb.append(this.parentId);
            first = false;
        }
        if (isSetValidateRe()) {
            if (!first) sb.append(", ");
            sb.append("validateRe:");
            if (this.validateRe == null) {
                sb.append("null");
            } else {
                sb.append(this.validateRe);
            }
            first = false;
        }
        if (isSetDictConstantId()) {
            if (!first) sb.append(", ");
            sb.append("dictConstantId:");
            sb.append(this.dictConstantId);
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class ConfigSysCvTplDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public ConfigSysCvTplDOStandardScheme getScheme() {
            return new ConfigSysCvTplDOStandardScheme();
        }
    }

    private static class ConfigSysCvTplDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<ConfigSysCvTplDO> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, ConfigSysCvTplDO struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true)
            {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.id = iprot.readI32();
                            struct.setIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // FIELD_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.fieldName = iprot.readString();
                            struct.setFieldNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // FIELD_TITLE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.fieldTitle = iprot.readString();
                            struct.setFieldTitleIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // FIELD_TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.fieldType = iprot.readI32();
                            struct.setFieldTypeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // ERROR_MSG
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.errorMsg = iprot.readString();
                            struct.setErrorMsgIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // PRIORITY
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.priority = iprot.readI32();
                            struct.setPriorityIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // IS_BASIC
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.isBasic = iprot.readI32();
                            struct.setIsBasicIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 8: // CREATE_TIME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.createTime = iprot.readString();
                            struct.setCreateTimeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 9: // UPDATE_TIME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.updateTime = iprot.readString();
                            struct.setUpdateTimeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 10: // DISABLE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.disable = iprot.readI32();
                            struct.setDisableIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 11: // COMPANY_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.companyId = iprot.readI32();
                            struct.setCompanyIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 12: // NEEDED
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.needed = iprot.readI32();
                            struct.setNeededIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 13: // FIELD_DESCRIPTION
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.fieldDescription = iprot.readString();
                            struct.setFieldDescriptionIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 14: // MAPPING
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.mapping = iprot.readString();
                            struct.setMappingIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 15: // PARENT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.parentId = iprot.readI32();
                            struct.setParentIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 16: // VALIDATE_RE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.validateRe = iprot.readString();
                            struct.setValidateReIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 17: // DICT_CONSTANT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.dictConstantId = iprot.readI32();
                            struct.setDictConstantIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, ConfigSysCvTplDO struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.isSetId()) {
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI32(struct.id);
                oprot.writeFieldEnd();
            }
            if (struct.fieldName != null) {
                if (struct.isSetFieldName()) {
                    oprot.writeFieldBegin(FIELD_NAME_FIELD_DESC);
                    oprot.writeString(struct.fieldName);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.fieldTitle != null) {
                if (struct.isSetFieldTitle()) {
                    oprot.writeFieldBegin(FIELD_TITLE_FIELD_DESC);
                    oprot.writeString(struct.fieldTitle);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetFieldType()) {
                oprot.writeFieldBegin(FIELD_TYPE_FIELD_DESC);
                oprot.writeI32(struct.fieldType);
                oprot.writeFieldEnd();
            }
            if (struct.errorMsg != null) {
                if (struct.isSetErrorMsg()) {
                    oprot.writeFieldBegin(ERROR_MSG_FIELD_DESC);
                    oprot.writeString(struct.errorMsg);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetPriority()) {
                oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
                oprot.writeI32(struct.priority);
                oprot.writeFieldEnd();
            }
            if (struct.isSetIsBasic()) {
                oprot.writeFieldBegin(IS_BASIC_FIELD_DESC);
                oprot.writeI32(struct.isBasic);
                oprot.writeFieldEnd();
            }
            if (struct.createTime != null) {
                if (struct.isSetCreateTime()) {
                    oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
                    oprot.writeString(struct.createTime);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.updateTime != null) {
                if (struct.isSetUpdateTime()) {
                    oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
                    oprot.writeString(struct.updateTime);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetDisable()) {
                oprot.writeFieldBegin(DISABLE_FIELD_DESC);
                oprot.writeI32(struct.disable);
                oprot.writeFieldEnd();
            }
            if (struct.isSetCompanyId()) {
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
            }
            if (struct.isSetNeeded()) {
                oprot.writeFieldBegin(NEEDED_FIELD_DESC);
                oprot.writeI32(struct.needed);
                oprot.writeFieldEnd();
            }
            if (struct.fieldDescription != null) {
                if (struct.isSetFieldDescription()) {
                    oprot.writeFieldBegin(FIELD_DESCRIPTION_FIELD_DESC);
                    oprot.writeString(struct.fieldDescription);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.mapping != null) {
                if (struct.isSetMapping()) {
                    oprot.writeFieldBegin(MAPPING_FIELD_DESC);
                    oprot.writeString(struct.mapping);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetParentId()) {
                oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
                oprot.writeI32(struct.parentId);
                oprot.writeFieldEnd();
            }
            if (struct.validateRe != null) {
                if (struct.isSetValidateRe()) {
                    oprot.writeFieldBegin(VALIDATE_RE_FIELD_DESC);
                    oprot.writeString(struct.validateRe);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetDictConstantId()) {
                oprot.writeFieldBegin(DICT_CONSTANT_ID_FIELD_DESC);
                oprot.writeI32(struct.dictConstantId);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class ConfigSysCvTplDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public ConfigSysCvTplDOTupleScheme getScheme() {
            return new ConfigSysCvTplDOTupleScheme();
        }
    }

    private static class ConfigSysCvTplDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<ConfigSysCvTplDO> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, ConfigSysCvTplDO struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetId()) {
                optionals.set(0);
            }
            if (struct.isSetFieldName()) {
                optionals.set(1);
            }
            if (struct.isSetFieldTitle()) {
                optionals.set(2);
            }
            if (struct.isSetFieldType()) {
                optionals.set(3);
            }
            if (struct.isSetErrorMsg()) {
                optionals.set(4);
            }
            if (struct.isSetPriority()) {
                optionals.set(5);
            }
            if (struct.isSetIsBasic()) {
                optionals.set(6);
            }
            if (struct.isSetCreateTime()) {
                optionals.set(7);
            }
            if (struct.isSetUpdateTime()) {
                optionals.set(8);
            }
            if (struct.isSetDisable()) {
                optionals.set(9);
            }
            if (struct.isSetCompanyId()) {
                optionals.set(10);
            }
            if (struct.isSetNeeded()) {
                optionals.set(11);
            }
            if (struct.isSetFieldDescription()) {
                optionals.set(12);
            }
            if (struct.isSetMapping()) {
                optionals.set(13);
            }
            if (struct.isSetParentId()) {
                optionals.set(14);
            }
            if (struct.isSetValidateRe()) {
                optionals.set(15);
            }
            if (struct.isSetDictConstantId()) {
                optionals.set(16);
            }
            oprot.writeBitSet(optionals, 17);
            if (struct.isSetId()) {
                oprot.writeI32(struct.id);
            }
            if (struct.isSetFieldName()) {
                oprot.writeString(struct.fieldName);
            }
            if (struct.isSetFieldTitle()) {
                oprot.writeString(struct.fieldTitle);
            }
            if (struct.isSetFieldType()) {
                oprot.writeI32(struct.fieldType);
            }
            if (struct.isSetErrorMsg()) {
                oprot.writeString(struct.errorMsg);
            }
            if (struct.isSetPriority()) {
                oprot.writeI32(struct.priority);
            }
            if (struct.isSetIsBasic()) {
                oprot.writeI32(struct.isBasic);
            }
            if (struct.isSetCreateTime()) {
                oprot.writeString(struct.createTime);
            }
            if (struct.isSetUpdateTime()) {
                oprot.writeString(struct.updateTime);
            }
            if (struct.isSetDisable()) {
                oprot.writeI32(struct.disable);
            }
            if (struct.isSetCompanyId()) {
                oprot.writeI32(struct.companyId);
            }
            if (struct.isSetNeeded()) {
                oprot.writeI32(struct.needed);
            }
            if (struct.isSetFieldDescription()) {
                oprot.writeString(struct.fieldDescription);
            }
            if (struct.isSetMapping()) {
                oprot.writeString(struct.mapping);
            }
            if (struct.isSetParentId()) {
                oprot.writeI32(struct.parentId);
            }
            if (struct.isSetValidateRe()) {
                oprot.writeString(struct.validateRe);
            }
            if (struct.isSetDictConstantId()) {
                oprot.writeI32(struct.dictConstantId);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, ConfigSysCvTplDO struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(17);
            if (incoming.get(0)) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
            }
            if (incoming.get(1)) {
                struct.fieldName = iprot.readString();
                struct.setFieldNameIsSet(true);
            }
            if (incoming.get(2)) {
                struct.fieldTitle = iprot.readString();
                struct.setFieldTitleIsSet(true);
            }
            if (incoming.get(3)) {
                struct.fieldType = iprot.readI32();
                struct.setFieldTypeIsSet(true);
            }
            if (incoming.get(4)) {
                struct.errorMsg = iprot.readString();
                struct.setErrorMsgIsSet(true);
            }
            if (incoming.get(5)) {
                struct.priority = iprot.readI32();
                struct.setPriorityIsSet(true);
            }
            if (incoming.get(6)) {
                struct.isBasic = iprot.readI32();
                struct.setIsBasicIsSet(true);
            }
            if (incoming.get(7)) {
                struct.createTime = iprot.readString();
                struct.setCreateTimeIsSet(true);
            }
            if (incoming.get(8)) {
                struct.updateTime = iprot.readString();
                struct.setUpdateTimeIsSet(true);
            }
            if (incoming.get(9)) {
                struct.disable = iprot.readI32();
                struct.setDisableIsSet(true);
            }
            if (incoming.get(10)) {
                struct.companyId = iprot.readI32();
                struct.setCompanyIdIsSet(true);
            }
            if (incoming.get(11)) {
                struct.needed = iprot.readI32();
                struct.setNeededIsSet(true);
            }
            if (incoming.get(12)) {
                struct.fieldDescription = iprot.readString();
                struct.setFieldDescriptionIsSet(true);
            }
            if (incoming.get(13)) {
                struct.mapping = iprot.readString();
                struct.setMappingIsSet(true);
            }
            if (incoming.get(14)) {
                struct.parentId = iprot.readI32();
                struct.setParentIdIsSet(true);
            }
            if (incoming.get(15)) {
                struct.validateRe = iprot.readString();
                struct.setValidateReIsSet(true);
            }
            if (incoming.get(16)) {
                struct.dictConstantId = iprot.readI32();
                struct.setDictConstantIdIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

