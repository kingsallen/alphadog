/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dict.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-11-27")
public class DictReferralEvaluateService {

    public interface Iface {

        public java.util.List<com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO> getDictReferralEvalute(int code) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void getDictReferralEvalute(int code, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO>> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {}
            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }
            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot)
        {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public java.util.List<com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO> getDictReferralEvalute(int code) throws org.apache.thrift.TException
        {
            send_getDictReferralEvalute(code);
            return recv_getDictReferralEvalute();
        }

        public void send_getDictReferralEvalute(int code) throws org.apache.thrift.TException
        {
            getDictReferralEvalute_args args = new getDictReferralEvalute_args();
            args.setCode(code);
            sendBase("getDictReferralEvalute", args);
        }

        public java.util.List<com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO> recv_getDictReferralEvalute() throws org.apache.thrift.TException
        {
            getDictReferralEvalute_result result = new getDictReferralEvalute_result();
            receiveBase(result, "getDictReferralEvalute");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDictReferralEvalute failed: unknown result");
        }

    }
    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }
            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void getDictReferralEvalute(int code, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO>> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getDictReferralEvalute_call method_call = new getDictReferralEvalute_call(code, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getDictReferralEvalute_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO>> {
            private int code;
            public getDictReferralEvalute_call(int code, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.code = code;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDictReferralEvalute", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getDictReferralEvalute_args args = new getDictReferralEvalute_args();
                args.setCode(code);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.util.List<com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getDictReferralEvalute();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
        public Processor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
            processMap.put("getDictReferralEvalute", new getDictReferralEvalute());
            return processMap;
        }

        public static class getDictReferralEvalute<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDictReferralEvalute_args> {
            public getDictReferralEvalute() {
                super("getDictReferralEvalute");
            }

            public getDictReferralEvalute_args getEmptyArgsInstance() {
                return new getDictReferralEvalute_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getDictReferralEvalute_result getResult(I iface, getDictReferralEvalute_args args) throws org.apache.thrift.TException {
                getDictReferralEvalute_result result = new getDictReferralEvalute_result();
                result.success = iface.getDictReferralEvalute(args.code);
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("getDictReferralEvalute", new getDictReferralEvalute());
            return processMap;
        }

        public static class getDictReferralEvalute<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDictReferralEvalute_args, java.util.List<com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO>> {
            public getDictReferralEvalute() {
                super("getDictReferralEvalute");
            }

            public getDictReferralEvalute_args getEmptyArgsInstance() {
                return new getDictReferralEvalute_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO>>() {
                    public void onComplete(java.util.List<com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO> o) {
                        getDictReferralEvalute_result result = new getDictReferralEvalute_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getDictReferralEvalute_result result = new getDictReferralEvalute_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getDictReferralEvalute_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO>> resultHandler) throws org.apache.thrift.TException {
                iface.getDictReferralEvalute(args.code,resultHandler);
            }
        }

    }

    public static class getDictReferralEvalute_args implements org.apache.thrift.TBase<getDictReferralEvalute_args, getDictReferralEvalute_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDictReferralEvalute_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDictReferralEvalute_args");

        private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.I32, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDictReferralEvalute_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDictReferralEvalute_argsTupleSchemeFactory();

        public int code; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CODE((short)1, "code");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // CODE
                        return CODE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __CODE_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDictReferralEvalute_args.class, metaDataMap);
        }

        public getDictReferralEvalute_args() {
        }

        public getDictReferralEvalute_args(
                int code)
        {
            this();
            this.code = code;
            setCodeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getDictReferralEvalute_args(getDictReferralEvalute_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.code = other.code;
        }

        public getDictReferralEvalute_args deepCopy() {
            return new getDictReferralEvalute_args(this);
        }

        @Override
        public void clear() {
            setCodeIsSet(false);
            this.code = 0;
        }

        public int getCode() {
            return this.code;
        }

        public getDictReferralEvalute_args setCode(int code) {
            this.code = code;
            setCodeIsSet(true);
            return this;
        }

        public void unsetCode() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CODE_ISSET_ID);
        }

        /** Returns true if field code is set (has been assigned a value) and false otherwise */
        public boolean isSetCode() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CODE_ISSET_ID);
        }

        public void setCodeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CODE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case CODE:
                    if (value == null) {
                        unsetCode();
                    } else {
                        setCode((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case CODE:
                    return getCode();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case CODE:
                    return isSetCode();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getDictReferralEvalute_args)
                return this.equals((getDictReferralEvalute_args)that);
            return false;
        }

        public boolean equals(getDictReferralEvalute_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_code = true;
            boolean that_present_code = true;
            if (this_present_code || that_present_code) {
                if (!(this_present_code && that_present_code))
                    return false;
                if (this.code != that.code)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + code;

            return hashCode;
        }

        @Override
        public int compareTo(getDictReferralEvalute_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCode()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getDictReferralEvalute_args(");
            boolean first = true;

            sb.append("code:");
            sb.append(this.code);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getDictReferralEvalute_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getDictReferralEvalute_argsStandardScheme getScheme() {
                return new getDictReferralEvalute_argsStandardScheme();
            }
        }

        private static class getDictReferralEvalute_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDictReferralEvalute_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getDictReferralEvalute_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // CODE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.code = iprot.readI32();
                                struct.setCodeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getDictReferralEvalute_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(CODE_FIELD_DESC);
                oprot.writeI32(struct.code);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getDictReferralEvalute_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getDictReferralEvalute_argsTupleScheme getScheme() {
                return new getDictReferralEvalute_argsTupleScheme();
            }
        }

        private static class getDictReferralEvalute_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDictReferralEvalute_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getDictReferralEvalute_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCode()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetCode()) {
                    oprot.writeI32(struct.code);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getDictReferralEvalute_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.code = iprot.readI32();
                    struct.setCodeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getDictReferralEvalute_result implements org.apache.thrift.TBase<getDictReferralEvalute_result, getDictReferralEvalute_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDictReferralEvalute_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDictReferralEvalute_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDictReferralEvalute_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDictReferralEvalute_resultTupleSchemeFactory();

        public java.util.List<com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO> success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO.class))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDictReferralEvalute_result.class, metaDataMap);
        }

        public getDictReferralEvalute_result() {
        }

        public getDictReferralEvalute_result(
                java.util.List<com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO> success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getDictReferralEvalute_result(getDictReferralEvalute_result other) {
            if (other.isSetSuccess()) {
                java.util.List<com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO> __this__success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO>(other.success.size());
                for (com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO other_element : other.success) {
                    __this__success.add(new com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO(other_element));
                }
                this.success = __this__success;
            }
        }

        public getDictReferralEvalute_result deepCopy() {
            return new getDictReferralEvalute_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO elem) {
            if (this.success == null) {
                this.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO>();
            }
            this.success.add(elem);
        }

        public java.util.List<com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO> getSuccess() {
            return this.success;
        }

        public getDictReferralEvalute_result setSuccess(java.util.List<com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.util.List<com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO>)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getDictReferralEvalute_result)
                return this.equals((getDictReferralEvalute_result)that);
            return false;
        }

        public boolean equals(getDictReferralEvalute_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getDictReferralEvalute_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getDictReferralEvalute_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getDictReferralEvalute_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getDictReferralEvalute_resultStandardScheme getScheme() {
                return new getDictReferralEvalute_resultStandardScheme();
            }
        }

        private static class getDictReferralEvalute_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDictReferralEvalute_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getDictReferralEvalute_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                                    struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO>(_list16.size);
                                    com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO _elem17;
                                    for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                                    {
                                        _elem17 = new com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO();
                                        _elem17.read(iprot);
                                        struct.success.add(_elem17);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getDictReferralEvalute_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO _iter19 : struct.success)
                        {
                            _iter19.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getDictReferralEvalute_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getDictReferralEvalute_resultTupleScheme getScheme() {
                return new getDictReferralEvalute_resultTupleScheme();
            }
        }

        private static class getDictReferralEvalute_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDictReferralEvalute_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getDictReferralEvalute_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO _iter20 : struct.success)
                        {
                            _iter20.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getDictReferralEvalute_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO>(_list21.size);
                        com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO _elem22;
                        for (int _i23 = 0; _i23 < _list21.size; ++_i23)
                        {
                            _elem22 = new com.moseeker.thrift.gen.dao.struct.dictdb.DictReferralEvaluateDO();
                            _elem22.read(iprot);
                            struct.success.add(_elem22);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

}
