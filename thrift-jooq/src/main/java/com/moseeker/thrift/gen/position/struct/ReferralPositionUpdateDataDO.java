/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.position.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-09-14")
public class ReferralPositionUpdateDataDO implements org.apache.thrift.TBase<ReferralPositionUpdateDataDO, ReferralPositionUpdateDataDO._Fields>, java.io.Serializable, Cloneable, Comparable<ReferralPositionUpdateDataDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReferralPositionUpdateDataDO");

  private static final org.apache.thrift.protocol.TField PIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("pids", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField ALL_SELECTED_FIELD_DESC = new org.apache.thrift.protocol.TField("all_selected", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("account_id", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ACCOUNT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("account_type", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CANDIDATE_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("candidate_source", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField EMPLOYMENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("employment_type", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField KEY_WORD_FIELD_DESC = new org.apache.thrift.protocol.TField("keyWord", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ReferralPositionUpdateDataDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ReferralPositionUpdateDataDOTupleSchemeFactory();

  public java.util.List<Integer> pids; // optional
  public int all_selected; // optional
  public int company_id; // optional
  public int account_id; // optional
  public int account_type; // optional
  public String city; // optional
  public int candidate_source; // optional
  public int employment_type; // optional
  public String keyWord; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PIDS((short)1, "pids"),
    ALL_SELECTED((short)2, "all_selected"),
    COMPANY_ID((short)3, "company_id"),
    ACCOUNT_ID((short)4, "account_id"),
    ACCOUNT_TYPE((short)5, "account_type"),
    CITY((short)6, "city"),
    CANDIDATE_SOURCE((short)7, "candidate_source"),
    EMPLOYMENT_TYPE((short)8, "employment_type"),
    KEY_WORD((short)9, "keyWord");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PIDS
          return PIDS;
        case 2: // ALL_SELECTED
          return ALL_SELECTED;
        case 3: // COMPANY_ID
          return COMPANY_ID;
        case 4: // ACCOUNT_ID
          return ACCOUNT_ID;
        case 5: // ACCOUNT_TYPE
          return ACCOUNT_TYPE;
        case 6: // CITY
          return CITY;
        case 7: // CANDIDATE_SOURCE
          return CANDIDATE_SOURCE;
        case 8: // EMPLOYMENT_TYPE
          return EMPLOYMENT_TYPE;
        case 9: // KEY_WORD
          return KEY_WORD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ALL_SELECTED_ISSET_ID = 0;
  private static final int __COMPANY_ID_ISSET_ID = 1;
  private static final int __ACCOUNT_ID_ISSET_ID = 2;
  private static final int __ACCOUNT_TYPE_ISSET_ID = 3;
  private static final int __CANDIDATE_SOURCE_ISSET_ID = 4;
  private static final int __EMPLOYMENT_TYPE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PIDS,_Fields.ALL_SELECTED,_Fields.COMPANY_ID,_Fields.ACCOUNT_ID,_Fields.ACCOUNT_TYPE,_Fields.CITY,_Fields.CANDIDATE_SOURCE,_Fields.EMPLOYMENT_TYPE,_Fields.KEY_WORD};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PIDS, new org.apache.thrift.meta_data.FieldMetaData("pids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.ALL_SELECTED, new org.apache.thrift.meta_data.FieldMetaData("all_selected", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("account_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCOUNT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("account_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CANDIDATE_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("candidate_source", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EMPLOYMENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("employment_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.KEY_WORD, new org.apache.thrift.meta_data.FieldMetaData("keyWord", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReferralPositionUpdateDataDO.class, metaDataMap);
  }

  public ReferralPositionUpdateDataDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReferralPositionUpdateDataDO(ReferralPositionUpdateDataDO other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPids()) {
      java.util.List<Integer> __this__pids = new java.util.ArrayList<Integer>(other.pids);
      this.pids = __this__pids;
    }
    this.all_selected = other.all_selected;
    this.company_id = other.company_id;
    this.account_id = other.account_id;
    this.account_type = other.account_type;
    if (other.isSetCity()) {
      this.city = other.city;
    }
    this.candidate_source = other.candidate_source;
    this.employment_type = other.employment_type;
    if (other.isSetKeyWord()) {
      this.keyWord = other.keyWord;
    }
  }

  public ReferralPositionUpdateDataDO deepCopy() {
    return new ReferralPositionUpdateDataDO(this);
  }

  @Override
  public void clear() {
    this.pids = null;
    setAll_selectedIsSet(false);
    this.all_selected = 0;
    setCompany_idIsSet(false);
    this.company_id = 0;
    setAccount_idIsSet(false);
    this.account_id = 0;
    setAccount_typeIsSet(false);
    this.account_type = 0;
    this.city = null;
    setCandidate_sourceIsSet(false);
    this.candidate_source = 0;
    setEmployment_typeIsSet(false);
    this.employment_type = 0;
    this.keyWord = null;
  }

  public int getPidsSize() {
    return (this.pids == null) ? 0 : this.pids.size();
  }

  public java.util.Iterator<Integer> getPidsIterator() {
    return (this.pids == null) ? null : this.pids.iterator();
  }

  public void addToPids(int elem) {
    if (this.pids == null) {
      this.pids = new java.util.ArrayList<Integer>();
    }
    this.pids.add(elem);
  }

  public java.util.List<Integer> getPids() {
    return this.pids;
  }

  public ReferralPositionUpdateDataDO setPids(java.util.List<Integer> pids) {
    this.pids = pids;
    return this;
  }

  public void unsetPids() {
    this.pids = null;
  }

  /** Returns true if field pids is set (has been assigned a value) and false otherwise */
  public boolean isSetPids() {
    return this.pids != null;
  }

  public void setPidsIsSet(boolean value) {
    if (!value) {
      this.pids = null;
    }
  }

  public int getAll_selected() {
    return this.all_selected;
  }

  public ReferralPositionUpdateDataDO setAll_selected(int all_selected) {
    this.all_selected = all_selected;
    setAll_selectedIsSet(true);
    return this;
  }

  public void unsetAll_selected() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ALL_SELECTED_ISSET_ID);
  }

  /** Returns true if field all_selected is set (has been assigned a value) and false otherwise */
  public boolean isSetAll_selected() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ALL_SELECTED_ISSET_ID);
  }

  public void setAll_selectedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ALL_SELECTED_ISSET_ID, value);
  }

  public int getCompany_id() {
    return this.company_id;
  }

  public ReferralPositionUpdateDataDO setCompany_id(int company_id) {
    this.company_id = company_id;
    setCompany_idIsSet(true);
    return this;
  }

  public void unsetCompany_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
  }

  /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
  public boolean isSetCompany_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
  }

  public void setCompany_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
  }

  public int getAccount_id() {
    return this.account_id;
  }

  public ReferralPositionUpdateDataDO setAccount_id(int account_id) {
    this.account_id = account_id;
    setAccount_idIsSet(true);
    return this;
  }

  public void unsetAccount_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCOUNT_ID_ISSET_ID);
  }

  /** Returns true if field account_id is set (has been assigned a value) and false otherwise */
  public boolean isSetAccount_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCOUNT_ID_ISSET_ID);
  }

  public void setAccount_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCOUNT_ID_ISSET_ID, value);
  }

  public int getAccount_type() {
    return this.account_type;
  }

  public ReferralPositionUpdateDataDO setAccount_type(int account_type) {
    this.account_type = account_type;
    setAccount_typeIsSet(true);
    return this;
  }

  public void unsetAccount_type() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCOUNT_TYPE_ISSET_ID);
  }

  /** Returns true if field account_type is set (has been assigned a value) and false otherwise */
  public boolean isSetAccount_type() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCOUNT_TYPE_ISSET_ID);
  }

  public void setAccount_typeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCOUNT_TYPE_ISSET_ID, value);
  }

  public String getCity() {
    return this.city;
  }

  public ReferralPositionUpdateDataDO setCity(String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public int getCandidate_source() {
    return this.candidate_source;
  }

  public ReferralPositionUpdateDataDO setCandidate_source(int candidate_source) {
    this.candidate_source = candidate_source;
    setCandidate_sourceIsSet(true);
    return this;
  }

  public void unsetCandidate_source() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CANDIDATE_SOURCE_ISSET_ID);
  }

  /** Returns true if field candidate_source is set (has been assigned a value) and false otherwise */
  public boolean isSetCandidate_source() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CANDIDATE_SOURCE_ISSET_ID);
  }

  public void setCandidate_sourceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CANDIDATE_SOURCE_ISSET_ID, value);
  }

  public int getEmployment_type() {
    return this.employment_type;
  }

  public ReferralPositionUpdateDataDO setEmployment_type(int employment_type) {
    this.employment_type = employment_type;
    setEmployment_typeIsSet(true);
    return this;
  }

  public void unsetEmployment_type() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMPLOYMENT_TYPE_ISSET_ID);
  }

  /** Returns true if field employment_type is set (has been assigned a value) and false otherwise */
  public boolean isSetEmployment_type() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMPLOYMENT_TYPE_ISSET_ID);
  }

  public void setEmployment_typeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMPLOYMENT_TYPE_ISSET_ID, value);
  }

  public String getKeyWord() {
    return this.keyWord;
  }

  public ReferralPositionUpdateDataDO setKeyWord(String keyWord) {
    this.keyWord = keyWord;
    return this;
  }

  public void unsetKeyWord() {
    this.keyWord = null;
  }

  /** Returns true if field keyWord is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyWord() {
    return this.keyWord != null;
  }

  public void setKeyWordIsSet(boolean value) {
    if (!value) {
      this.keyWord = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PIDS:
      if (value == null) {
        unsetPids();
      } else {
        setPids((java.util.List<Integer>)value);
      }
      break;

    case ALL_SELECTED:
      if (value == null) {
        unsetAll_selected();
      } else {
        setAll_selected((Integer)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompany_id();
      } else {
        setCompany_id((Integer)value);
      }
      break;

    case ACCOUNT_ID:
      if (value == null) {
        unsetAccount_id();
      } else {
        setAccount_id((Integer)value);
      }
      break;

    case ACCOUNT_TYPE:
      if (value == null) {
        unsetAccount_type();
      } else {
        setAccount_type((Integer)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case CANDIDATE_SOURCE:
      if (value == null) {
        unsetCandidate_source();
      } else {
        setCandidate_source((Integer)value);
      }
      break;

    case EMPLOYMENT_TYPE:
      if (value == null) {
        unsetEmployment_type();
      } else {
        setEmployment_type((Integer)value);
      }
      break;

    case KEY_WORD:
      if (value == null) {
        unsetKeyWord();
      } else {
        setKeyWord((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PIDS:
      return getPids();

    case ALL_SELECTED:
      return getAll_selected();

    case COMPANY_ID:
      return getCompany_id();

    case ACCOUNT_ID:
      return getAccount_id();

    case ACCOUNT_TYPE:
      return getAccount_type();

    case CITY:
      return getCity();

    case CANDIDATE_SOURCE:
      return getCandidate_source();

    case EMPLOYMENT_TYPE:
      return getEmployment_type();

    case KEY_WORD:
      return getKeyWord();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PIDS:
      return isSetPids();
    case ALL_SELECTED:
      return isSetAll_selected();
    case COMPANY_ID:
      return isSetCompany_id();
    case ACCOUNT_ID:
      return isSetAccount_id();
    case ACCOUNT_TYPE:
      return isSetAccount_type();
    case CITY:
      return isSetCity();
    case CANDIDATE_SOURCE:
      return isSetCandidate_source();
    case EMPLOYMENT_TYPE:
      return isSetEmployment_type();
    case KEY_WORD:
      return isSetKeyWord();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReferralPositionUpdateDataDO)
      return this.equals((ReferralPositionUpdateDataDO)that);
    return false;
  }

  public boolean equals(ReferralPositionUpdateDataDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_pids = true && this.isSetPids();
    boolean that_present_pids = true && that.isSetPids();
    if (this_present_pids || that_present_pids) {
      if (!(this_present_pids && that_present_pids))
        return false;
      if (!this.pids.equals(that.pids))
        return false;
    }

    boolean this_present_all_selected = true && this.isSetAll_selected();
    boolean that_present_all_selected = true && that.isSetAll_selected();
    if (this_present_all_selected || that_present_all_selected) {
      if (!(this_present_all_selected && that_present_all_selected))
        return false;
      if (this.all_selected != that.all_selected)
        return false;
    }

    boolean this_present_company_id = true && this.isSetCompany_id();
    boolean that_present_company_id = true && that.isSetCompany_id();
    if (this_present_company_id || that_present_company_id) {
      if (!(this_present_company_id && that_present_company_id))
        return false;
      if (this.company_id != that.company_id)
        return false;
    }

    boolean this_present_account_id = true && this.isSetAccount_id();
    boolean that_present_account_id = true && that.isSetAccount_id();
    if (this_present_account_id || that_present_account_id) {
      if (!(this_present_account_id && that_present_account_id))
        return false;
      if (this.account_id != that.account_id)
        return false;
    }

    boolean this_present_account_type = true && this.isSetAccount_type();
    boolean that_present_account_type = true && that.isSetAccount_type();
    if (this_present_account_type || that_present_account_type) {
      if (!(this_present_account_type && that_present_account_type))
        return false;
      if (this.account_type != that.account_type)
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_candidate_source = true && this.isSetCandidate_source();
    boolean that_present_candidate_source = true && that.isSetCandidate_source();
    if (this_present_candidate_source || that_present_candidate_source) {
      if (!(this_present_candidate_source && that_present_candidate_source))
        return false;
      if (this.candidate_source != that.candidate_source)
        return false;
    }

    boolean this_present_employment_type = true && this.isSetEmployment_type();
    boolean that_present_employment_type = true && that.isSetEmployment_type();
    if (this_present_employment_type || that_present_employment_type) {
      if (!(this_present_employment_type && that_present_employment_type))
        return false;
      if (this.employment_type != that.employment_type)
        return false;
    }

    boolean this_present_keyWord = true && this.isSetKeyWord();
    boolean that_present_keyWord = true && that.isSetKeyWord();
    if (this_present_keyWord || that_present_keyWord) {
      if (!(this_present_keyWord && that_present_keyWord))
        return false;
      if (!this.keyWord.equals(that.keyWord))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPids()) ? 131071 : 524287);
    if (isSetPids())
      hashCode = hashCode * 8191 + pids.hashCode();

    hashCode = hashCode * 8191 + ((isSetAll_selected()) ? 131071 : 524287);
    if (isSetAll_selected())
      hashCode = hashCode * 8191 + all_selected;

    hashCode = hashCode * 8191 + ((isSetCompany_id()) ? 131071 : 524287);
    if (isSetCompany_id())
      hashCode = hashCode * 8191 + company_id;

    hashCode = hashCode * 8191 + ((isSetAccount_id()) ? 131071 : 524287);
    if (isSetAccount_id())
      hashCode = hashCode * 8191 + account_id;

    hashCode = hashCode * 8191 + ((isSetAccount_type()) ? 131071 : 524287);
    if (isSetAccount_type())
      hashCode = hashCode * 8191 + account_type;

    hashCode = hashCode * 8191 + ((isSetCity()) ? 131071 : 524287);
    if (isSetCity())
      hashCode = hashCode * 8191 + city.hashCode();

    hashCode = hashCode * 8191 + ((isSetCandidate_source()) ? 131071 : 524287);
    if (isSetCandidate_source())
      hashCode = hashCode * 8191 + candidate_source;

    hashCode = hashCode * 8191 + ((isSetEmployment_type()) ? 131071 : 524287);
    if (isSetEmployment_type())
      hashCode = hashCode * 8191 + employment_type;

    hashCode = hashCode * 8191 + ((isSetKeyWord()) ? 131071 : 524287);
    if (isSetKeyWord())
      hashCode = hashCode * 8191 + keyWord.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ReferralPositionUpdateDataDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPids()).compareTo(other.isSetPids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pids, other.pids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAll_selected()).compareTo(other.isSetAll_selected());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAll_selected()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_selected, other.all_selected);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompany_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccount_id()).compareTo(other.isSetAccount_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccount_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.account_id, other.account_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccount_type()).compareTo(other.isSetAccount_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccount_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.account_type, other.account_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCandidate_source()).compareTo(other.isSetCandidate_source());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCandidate_source()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.candidate_source, other.candidate_source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmployment_type()).compareTo(other.isSetEmployment_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmployment_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employment_type, other.employment_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeyWord()).compareTo(other.isSetKeyWord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyWord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyWord, other.keyWord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReferralPositionUpdateDataDO(");
    boolean first = true;

    if (isSetPids()) {
      sb.append("pids:");
      if (this.pids == null) {
        sb.append("null");
      } else {
        sb.append(this.pids);
      }
      first = false;
    }
    if (isSetAll_selected()) {
      if (!first) sb.append(", ");
      sb.append("all_selected:");
      sb.append(this.all_selected);
      first = false;
    }
    if (isSetCompany_id()) {
      if (!first) sb.append(", ");
      sb.append("company_id:");
      sb.append(this.company_id);
      first = false;
    }
    if (isSetAccount_id()) {
      if (!first) sb.append(", ");
      sb.append("account_id:");
      sb.append(this.account_id);
      first = false;
    }
    if (isSetAccount_type()) {
      if (!first) sb.append(", ");
      sb.append("account_type:");
      sb.append(this.account_type);
      first = false;
    }
    if (isSetCity()) {
      if (!first) sb.append(", ");
      sb.append("city:");
      if (this.city == null) {
        sb.append("null");
      } else {
        sb.append(this.city);
      }
      first = false;
    }
    if (isSetCandidate_source()) {
      if (!first) sb.append(", ");
      sb.append("candidate_source:");
      sb.append(this.candidate_source);
      first = false;
    }
    if (isSetEmployment_type()) {
      if (!first) sb.append(", ");
      sb.append("employment_type:");
      sb.append(this.employment_type);
      first = false;
    }
    if (isSetKeyWord()) {
      if (!first) sb.append(", ");
      sb.append("keyWord:");
      if (this.keyWord == null) {
        sb.append("null");
      } else {
        sb.append(this.keyWord);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReferralPositionUpdateDataDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ReferralPositionUpdateDataDOStandardScheme getScheme() {
      return new ReferralPositionUpdateDataDOStandardScheme();
    }
  }

  private static class ReferralPositionUpdateDataDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<ReferralPositionUpdateDataDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReferralPositionUpdateDataDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list74 = iprot.readListBegin();
                struct.pids = new java.util.ArrayList<Integer>(_list74.size);
                int _elem75;
                for (int _i76 = 0; _i76 < _list74.size; ++_i76)
                {
                  _elem75 = iprot.readI32();
                  struct.pids.add(_elem75);
                }
                iprot.readListEnd();
              }
              struct.setPidsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ALL_SELECTED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.all_selected = iprot.readI32();
              struct.setAll_selectedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.company_id = iprot.readI32();
              struct.setCompany_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.account_id = iprot.readI32();
              struct.setAccount_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ACCOUNT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.account_type = iprot.readI32();
              struct.setAccount_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CANDIDATE_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.candidate_source = iprot.readI32();
              struct.setCandidate_sourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EMPLOYMENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.employment_type = iprot.readI32();
              struct.setEmployment_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // KEY_WORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.keyWord = iprot.readString();
              struct.setKeyWordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReferralPositionUpdateDataDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pids != null) {
        if (struct.isSetPids()) {
          oprot.writeFieldBegin(PIDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.pids.size()));
            for (int _iter77 : struct.pids)
            {
              oprot.writeI32(_iter77);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAll_selected()) {
        oprot.writeFieldBegin(ALL_SELECTED_FIELD_DESC);
        oprot.writeI32(struct.all_selected);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompany_id()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.company_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAccount_id()) {
        oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.account_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAccount_type()) {
        oprot.writeFieldBegin(ACCOUNT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.account_type);
        oprot.writeFieldEnd();
      }
      if (struct.city != null) {
        if (struct.isSetCity()) {
          oprot.writeFieldBegin(CITY_FIELD_DESC);
          oprot.writeString(struct.city);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCandidate_source()) {
        oprot.writeFieldBegin(CANDIDATE_SOURCE_FIELD_DESC);
        oprot.writeI32(struct.candidate_source);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEmployment_type()) {
        oprot.writeFieldBegin(EMPLOYMENT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.employment_type);
        oprot.writeFieldEnd();
      }
      if (struct.keyWord != null) {
        if (struct.isSetKeyWord()) {
          oprot.writeFieldBegin(KEY_WORD_FIELD_DESC);
          oprot.writeString(struct.keyWord);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReferralPositionUpdateDataDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ReferralPositionUpdateDataDOTupleScheme getScheme() {
      return new ReferralPositionUpdateDataDOTupleScheme();
    }
  }

  private static class ReferralPositionUpdateDataDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<ReferralPositionUpdateDataDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReferralPositionUpdateDataDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPids()) {
        optionals.set(0);
      }
      if (struct.isSetAll_selected()) {
        optionals.set(1);
      }
      if (struct.isSetCompany_id()) {
        optionals.set(2);
      }
      if (struct.isSetAccount_id()) {
        optionals.set(3);
      }
      if (struct.isSetAccount_type()) {
        optionals.set(4);
      }
      if (struct.isSetCity()) {
        optionals.set(5);
      }
      if (struct.isSetCandidate_source()) {
        optionals.set(6);
      }
      if (struct.isSetEmployment_type()) {
        optionals.set(7);
      }
      if (struct.isSetKeyWord()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetPids()) {
        {
          oprot.writeI32(struct.pids.size());
          for (int _iter78 : struct.pids)
          {
            oprot.writeI32(_iter78);
          }
        }
      }
      if (struct.isSetAll_selected()) {
        oprot.writeI32(struct.all_selected);
      }
      if (struct.isSetCompany_id()) {
        oprot.writeI32(struct.company_id);
      }
      if (struct.isSetAccount_id()) {
        oprot.writeI32(struct.account_id);
      }
      if (struct.isSetAccount_type()) {
        oprot.writeI32(struct.account_type);
      }
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
      if (struct.isSetCandidate_source()) {
        oprot.writeI32(struct.candidate_source);
      }
      if (struct.isSetEmployment_type()) {
        oprot.writeI32(struct.employment_type);
      }
      if (struct.isSetKeyWord()) {
        oprot.writeString(struct.keyWord);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReferralPositionUpdateDataDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list79 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.pids = new java.util.ArrayList<Integer>(_list79.size);
          int _elem80;
          for (int _i81 = 0; _i81 < _list79.size; ++_i81)
          {
            _elem80 = iprot.readI32();
            struct.pids.add(_elem80);
          }
        }
        struct.setPidsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.all_selected = iprot.readI32();
        struct.setAll_selectedIsSet(true);
      }
      if (incoming.get(2)) {
        struct.company_id = iprot.readI32();
        struct.setCompany_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.account_id = iprot.readI32();
        struct.setAccount_idIsSet(true);
      }
      if (incoming.get(4)) {
        struct.account_type = iprot.readI32();
        struct.setAccount_typeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
      if (incoming.get(6)) {
        struct.candidate_source = iprot.readI32();
        struct.setCandidate_sourceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.employment_type = iprot.readI32();
        struct.setEmployment_typeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.keyWord = iprot.readString();
        struct.setKeyWordIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

