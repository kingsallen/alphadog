/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.useraccounts.struct;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2016-05-06")
public class userloginresp implements org.apache.thrift.TBase<userloginresp, userloginresp._Fields>, java.io.Serializable, Cloneable, Comparable<userloginresp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userloginresp");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField UNIONID_FIELD_DESC = new org.apache.thrift.protocol.TField("unionid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LAST_LOGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("last_login_time", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final SchemeFactory STANDARD_SCHEME_FACTORY = new userloginrespStandardSchemeFactory();
  private static final SchemeFactory TUPLE_SCHEME_FACTORY = new userloginrespTupleSchemeFactory();

  public int user_id; // required
  public String unionid; // required
  public String mobile; // required
  public String last_login_time; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "user_id"),
    UNIONID((short)2, "unionid"),
    MOBILE((short)3, "mobile"),
    LAST_LOGIN_TIME((short)4, "last_login_time");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // UNIONID
          return UNIONID;
        case 3: // MOBILE
          return MOBILE;
        case 4: // LAST_LOGIN_TIME
          return LAST_LOGIN_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USER_ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.LAST_LOGIN_TIME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNIONID, new org.apache.thrift.meta_data.FieldMetaData("unionid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_LOGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("last_login_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userloginresp.class, metaDataMap);
  }

  public userloginresp() {
  }

  public userloginresp(
    int user_id,
    String unionid,
    String mobile)
  {
    this();
    this.user_id = user_id;
    setUser_idIsSet(true);
    this.unionid = unionid;
    this.mobile = mobile;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public userloginresp(userloginresp other) {
    __isset_bitfield = other.__isset_bitfield;
    this.user_id = other.user_id;
    if (other.isSetUnionid()) {
      this.unionid = other.unionid;
    }
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    if (other.isSetLast_login_time()) {
      this.last_login_time = other.last_login_time;
    }
  }

  public userloginresp deepCopy() {
    return new userloginresp(this);
  }

  @Override
  public void clear() {
    setUser_idIsSet(false);
    this.user_id = 0;
    this.unionid = null;
    this.mobile = null;
    this.last_login_time = null;
  }

  public int getUser_id() {
    return this.user_id;
  }

  public userloginresp setUser_id(int user_id) {
    this.user_id = user_id;
    setUser_idIsSet(true);
    return this;
  }

  public void unsetUser_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USER_ID_ISSET_ID);
  }

  /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_id() {
    return EncodingUtils.testBit(__isset_bitfield, __USER_ID_ISSET_ID);
  }

  public void setUser_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USER_ID_ISSET_ID, value);
  }

  public String getUnionid() {
    return this.unionid;
  }

  public userloginresp setUnionid(String unionid) {
    this.unionid = unionid;
    return this;
  }

  public void unsetUnionid() {
    this.unionid = null;
  }

  /** Returns true if field unionid is set (has been assigned a value) and false otherwise */
  public boolean isSetUnionid() {
    return this.unionid != null;
  }

  public void setUnionidIsSet(boolean value) {
    if (!value) {
      this.unionid = null;
    }
  }

  public String getMobile() {
    return this.mobile;
  }

  public userloginresp setMobile(String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  public String getLast_login_time() {
    return this.last_login_time;
  }

  public userloginresp setLast_login_time(String last_login_time) {
    this.last_login_time = last_login_time;
    return this;
  }

  public void unsetLast_login_time() {
    this.last_login_time = null;
  }

  /** Returns true if field last_login_time is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_login_time() {
    return this.last_login_time != null;
  }

  public void setLast_login_timeIsSet(boolean value) {
    if (!value) {
      this.last_login_time = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUser_id();
      } else {
        setUser_id((Integer)value);
      }
      break;

    case UNIONID:
      if (value == null) {
        unsetUnionid();
      } else {
        setUnionid((String)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;

    case LAST_LOGIN_TIME:
      if (value == null) {
        unsetLast_login_time();
      } else {
        setLast_login_time((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return getUser_id();

    case UNIONID:
      return getUnionid();

    case MOBILE:
      return getMobile();

    case LAST_LOGIN_TIME:
      return getLast_login_time();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUser_id();
    case UNIONID:
      return isSetUnionid();
    case MOBILE:
      return isSetMobile();
    case LAST_LOGIN_TIME:
      return isSetLast_login_time();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof userloginresp)
      return this.equals((userloginresp)that);
    return false;
  }

  public boolean equals(userloginresp that) {
    if (that == null)
      return false;

    boolean this_present_user_id = true;
    boolean that_present_user_id = true;
    if (this_present_user_id || that_present_user_id) {
      if (!(this_present_user_id && that_present_user_id))
        return false;
      if (this.user_id != that.user_id)
        return false;
    }

    boolean this_present_unionid = true && this.isSetUnionid();
    boolean that_present_unionid = true && that.isSetUnionid();
    if (this_present_unionid || that_present_unionid) {
      if (!(this_present_unionid && that_present_unionid))
        return false;
      if (!this.unionid.equals(that.unionid))
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    boolean this_present_last_login_time = true && this.isSetLast_login_time();
    boolean that_present_last_login_time = true && that.isSetLast_login_time();
    if (this_present_last_login_time || that_present_last_login_time) {
      if (!(this_present_last_login_time && that_present_last_login_time))
        return false;
      if (!this.last_login_time.equals(that.last_login_time))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + user_id;

    hashCode = hashCode * 8191 + ((isSetUnionid()) ? 131071 : 524287);
    if (isSetUnionid())
      hashCode = hashCode * 8191 + unionid.hashCode();

    hashCode = hashCode * 8191 + ((isSetMobile()) ? 131071 : 524287);
    if (isSetMobile())
      hashCode = hashCode * 8191 + mobile.hashCode();

    hashCode = hashCode * 8191 + ((isSetLast_login_time()) ? 131071 : 524287);
    if (isSetLast_login_time())
      hashCode = hashCode * 8191 + last_login_time.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(userloginresp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUser_id()).compareTo(other.isSetUser_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, other.user_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnionid()).compareTo(other.isSetUnionid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnionid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unionid, other.unionid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLast_login_time()).compareTo(other.isSetLast_login_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_login_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_login_time, other.last_login_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("userloginresp(");
    boolean first = true;

    sb.append("user_id:");
    sb.append(this.user_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unionid:");
    if (this.unionid == null) {
      sb.append("null");
    } else {
      sb.append(this.unionid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobile:");
    if (this.mobile == null) {
      sb.append("null");
    } else {
      sb.append(this.mobile);
    }
    first = false;
    if (isSetLast_login_time()) {
      if (!first) sb.append(", ");
      sb.append("last_login_time:");
      if (this.last_login_time == null) {
        sb.append("null");
      } else {
        sb.append(this.last_login_time);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class userloginrespStandardSchemeFactory implements SchemeFactory {
    public userloginrespStandardScheme getScheme() {
      return new userloginrespStandardScheme();
    }
  }

  private static class userloginrespStandardScheme extends StandardScheme<userloginresp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, userloginresp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.user_id = iprot.readI32();
              struct.setUser_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UNIONID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unionid = iprot.readString();
              struct.setUnionidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LAST_LOGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.last_login_time = iprot.readString();
              struct.setLast_login_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, userloginresp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.user_id);
      oprot.writeFieldEnd();
      if (struct.unionid != null) {
        oprot.writeFieldBegin(UNIONID_FIELD_DESC);
        oprot.writeString(struct.unionid);
        oprot.writeFieldEnd();
      }
      if (struct.mobile != null) {
        oprot.writeFieldBegin(MOBILE_FIELD_DESC);
        oprot.writeString(struct.mobile);
        oprot.writeFieldEnd();
      }
      if (struct.last_login_time != null) {
        if (struct.isSetLast_login_time()) {
          oprot.writeFieldBegin(LAST_LOGIN_TIME_FIELD_DESC);
          oprot.writeString(struct.last_login_time);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class userloginrespTupleSchemeFactory implements SchemeFactory {
    public userloginrespTupleScheme getScheme() {
      return new userloginrespTupleScheme();
    }
  }

  private static class userloginrespTupleScheme extends TupleScheme<userloginresp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, userloginresp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUser_id()) {
        optionals.set(0);
      }
      if (struct.isSetUnionid()) {
        optionals.set(1);
      }
      if (struct.isSetMobile()) {
        optionals.set(2);
      }
      if (struct.isSetLast_login_time()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetUser_id()) {
        oprot.writeI32(struct.user_id);
      }
      if (struct.isSetUnionid()) {
        oprot.writeString(struct.unionid);
      }
      if (struct.isSetMobile()) {
        oprot.writeString(struct.mobile);
      }
      if (struct.isSetLast_login_time()) {
        oprot.writeString(struct.last_login_time);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, userloginresp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.user_id = iprot.readI32();
        struct.setUser_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.unionid = iprot.readString();
        struct.setUnionidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mobile = iprot.readString();
        struct.setMobileIsSet(true);
      }
      if (incoming.get(3)) {
        struct.last_login_time = iprot.readString();
        struct.setLast_login_timeIsSet(true);
      }
    }
  }

  private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

