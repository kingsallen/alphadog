/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.mq.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-11-11")
public class MessageBody implements org.apache.thrift.TBase<MessageBody, MessageBody._Fields>, java.io.Serializable, Cloneable, Comparable<MessageBody> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageBody");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SEND_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("sendCondition", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SEND_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("sendTime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SEND_TO_FIELD_DESC = new org.apache.thrift.protocol.TField("sendTo", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SAMPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("sample", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField FIRST_FIELD_DESC = new org.apache.thrift.protocol.TField("first", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.BYTE, (short)10);
  private static final org.apache.thrift.protocol.TField CUSTOM_FIRST_FIELD_DESC = new org.apache.thrift.protocol.TField("customFirst", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CUSTOM_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("customRemark", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField FLEXIBLE_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("flexibleFields", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField SEND_FREQUENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("sendFrequency", org.apache.thrift.protocol.TType.STRUCT, (short)14);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageBodyStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageBodyTupleSchemeFactory();

  public int id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String title; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String sendCondition; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String sendTime; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String sendTo; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String sample; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String first; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String priority; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String remark; // optional
  public byte status; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String customFirst; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String customRemark; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<FlexibleField> flexibleFields; // optional
  public @org.apache.thrift.annotation.Nullable WxMessageFrequency sendFrequency; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TITLE((short)2, "title"),
    SEND_CONDITION((short)3, "sendCondition"),
    SEND_TIME((short)4, "sendTime"),
    SEND_TO((short)5, "sendTo"),
    SAMPLE((short)6, "sample"),
    FIRST((short)7, "first"),
    PRIORITY((short)8, "priority"),
    REMARK((short)9, "remark"),
    STATUS((short)10, "status"),
    CUSTOM_FIRST((short)11, "customFirst"),
    CUSTOM_REMARK((short)12, "customRemark"),
    FLEXIBLE_FIELDS((short)13, "flexibleFields"),
    SEND_FREQUENCY((short)14, "sendFrequency");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TITLE
          return TITLE;
        case 3: // SEND_CONDITION
          return SEND_CONDITION;
        case 4: // SEND_TIME
          return SEND_TIME;
        case 5: // SEND_TO
          return SEND_TO;
        case 6: // SAMPLE
          return SAMPLE;
        case 7: // FIRST
          return FIRST;
        case 8: // PRIORITY
          return PRIORITY;
        case 9: // REMARK
          return REMARK;
        case 10: // STATUS
          return STATUS;
        case 11: // CUSTOM_FIRST
          return CUSTOM_FIRST;
        case 12: // CUSTOM_REMARK
          return CUSTOM_REMARK;
        case 13: // FLEXIBLE_FIELDS
          return FLEXIBLE_FIELDS;
        case 14: // SEND_FREQUENCY
          return SEND_FREQUENCY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.TITLE,_Fields.SEND_CONDITION,_Fields.SEND_TIME,_Fields.SEND_TO,_Fields.SAMPLE,_Fields.FIRST,_Fields.PRIORITY,_Fields.REMARK,_Fields.STATUS,_Fields.CUSTOM_FIRST,_Fields.CUSTOM_REMARK,_Fields.FLEXIBLE_FIELDS,_Fields.SEND_FREQUENCY};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEND_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("sendCondition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEND_TIME, new org.apache.thrift.meta_data.FieldMetaData("sendTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEND_TO, new org.apache.thrift.meta_data.FieldMetaData("sendTo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SAMPLE, new org.apache.thrift.meta_data.FieldMetaData("sample", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIRST, new org.apache.thrift.meta_data.FieldMetaData("first", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CUSTOM_FIRST, new org.apache.thrift.meta_data.FieldMetaData("customFirst", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUSTOM_REMARK, new org.apache.thrift.meta_data.FieldMetaData("customRemark", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLEXIBLE_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("flexibleFields", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "FlexibleField"))));
    tmpMap.put(_Fields.SEND_FREQUENCY, new org.apache.thrift.meta_data.FieldMetaData("sendFrequency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "WxMessageFrequency")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageBody.class, metaDataMap);
  }

  public MessageBody() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MessageBody(MessageBody other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetSendCondition()) {
      this.sendCondition = other.sendCondition;
    }
    if (other.isSetSendTime()) {
      this.sendTime = other.sendTime;
    }
    if (other.isSetSendTo()) {
      this.sendTo = other.sendTo;
    }
    if (other.isSetSample()) {
      this.sample = other.sample;
    }
    if (other.isSetFirst()) {
      this.first = other.first;
    }
    if (other.isSetPriority()) {
      this.priority = other.priority;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.status = other.status;
    if (other.isSetCustomFirst()) {
      this.customFirst = other.customFirst;
    }
    if (other.isSetCustomRemark()) {
      this.customRemark = other.customRemark;
    }
    if (other.isSetFlexibleFields()) {
      java.util.List<FlexibleField> __this__flexibleFields = new java.util.ArrayList<FlexibleField>(other.flexibleFields.size());
      for (FlexibleField other_element : other.flexibleFields) {
        __this__flexibleFields.add(new FlexibleField(other_element));
      }
      this.flexibleFields = __this__flexibleFields;
    }
    if (other.isSetSendFrequency()) {
      this.sendFrequency = new WxMessageFrequency(other.sendFrequency);
    }
  }

  public MessageBody deepCopy() {
    return new MessageBody(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.title = null;
    this.sendCondition = null;
    this.sendTime = null;
    this.sendTo = null;
    this.sample = null;
    this.first = null;
    this.priority = null;
    this.remark = null;
    setStatusIsSet(false);
    this.status = 0;
    this.customFirst = null;
    this.customRemark = null;
    this.flexibleFields = null;
    this.sendFrequency = null;
  }

  public int getId() {
    return this.id;
  }

  public MessageBody setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTitle() {
    return this.title;
  }

  public MessageBody setTitle(@org.apache.thrift.annotation.Nullable java.lang.String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSendCondition() {
    return this.sendCondition;
  }

  public MessageBody setSendCondition(@org.apache.thrift.annotation.Nullable java.lang.String sendCondition) {
    this.sendCondition = sendCondition;
    return this;
  }

  public void unsetSendCondition() {
    this.sendCondition = null;
  }

  /** Returns true if field sendCondition is set (has been assigned a value) and false otherwise */
  public boolean isSetSendCondition() {
    return this.sendCondition != null;
  }

  public void setSendConditionIsSet(boolean value) {
    if (!value) {
      this.sendCondition = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSendTime() {
    return this.sendTime;
  }

  public MessageBody setSendTime(@org.apache.thrift.annotation.Nullable java.lang.String sendTime) {
    this.sendTime = sendTime;
    return this;
  }

  public void unsetSendTime() {
    this.sendTime = null;
  }

  /** Returns true if field sendTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSendTime() {
    return this.sendTime != null;
  }

  public void setSendTimeIsSet(boolean value) {
    if (!value) {
      this.sendTime = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSendTo() {
    return this.sendTo;
  }

  public MessageBody setSendTo(@org.apache.thrift.annotation.Nullable java.lang.String sendTo) {
    this.sendTo = sendTo;
    return this;
  }

  public void unsetSendTo() {
    this.sendTo = null;
  }

  /** Returns true if field sendTo is set (has been assigned a value) and false otherwise */
  public boolean isSetSendTo() {
    return this.sendTo != null;
  }

  public void setSendToIsSet(boolean value) {
    if (!value) {
      this.sendTo = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSample() {
    return this.sample;
  }

  public MessageBody setSample(@org.apache.thrift.annotation.Nullable java.lang.String sample) {
    this.sample = sample;
    return this;
  }

  public void unsetSample() {
    this.sample = null;
  }

  /** Returns true if field sample is set (has been assigned a value) and false otherwise */
  public boolean isSetSample() {
    return this.sample != null;
  }

  public void setSampleIsSet(boolean value) {
    if (!value) {
      this.sample = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFirst() {
    return this.first;
  }

  public MessageBody setFirst(@org.apache.thrift.annotation.Nullable java.lang.String first) {
    this.first = first;
    return this;
  }

  public void unsetFirst() {
    this.first = null;
  }

  /** Returns true if field first is set (has been assigned a value) and false otherwise */
  public boolean isSetFirst() {
    return this.first != null;
  }

  public void setFirstIsSet(boolean value) {
    if (!value) {
      this.first = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPriority() {
    return this.priority;
  }

  public MessageBody setPriority(@org.apache.thrift.annotation.Nullable java.lang.String priority) {
    this.priority = priority;
    return this;
  }

  public void unsetPriority() {
    this.priority = null;
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return this.priority != null;
  }

  public void setPriorityIsSet(boolean value) {
    if (!value) {
      this.priority = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRemark() {
    return this.remark;
  }

  public MessageBody setRemark(@org.apache.thrift.annotation.Nullable java.lang.String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public byte getStatus() {
    return this.status;
  }

  public MessageBody setStatus(byte status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCustomFirst() {
    return this.customFirst;
  }

  public MessageBody setCustomFirst(@org.apache.thrift.annotation.Nullable java.lang.String customFirst) {
    this.customFirst = customFirst;
    return this;
  }

  public void unsetCustomFirst() {
    this.customFirst = null;
  }

  /** Returns true if field customFirst is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomFirst() {
    return this.customFirst != null;
  }

  public void setCustomFirstIsSet(boolean value) {
    if (!value) {
      this.customFirst = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCustomRemark() {
    return this.customRemark;
  }

  public MessageBody setCustomRemark(@org.apache.thrift.annotation.Nullable java.lang.String customRemark) {
    this.customRemark = customRemark;
    return this;
  }

  public void unsetCustomRemark() {
    this.customRemark = null;
  }

  /** Returns true if field customRemark is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomRemark() {
    return this.customRemark != null;
  }

  public void setCustomRemarkIsSet(boolean value) {
    if (!value) {
      this.customRemark = null;
    }
  }

  public int getFlexibleFieldsSize() {
    return (this.flexibleFields == null) ? 0 : this.flexibleFields.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<FlexibleField> getFlexibleFieldsIterator() {
    return (this.flexibleFields == null) ? null : this.flexibleFields.iterator();
  }

  public void addToFlexibleFields(FlexibleField elem) {
    if (this.flexibleFields == null) {
      this.flexibleFields = new java.util.ArrayList<FlexibleField>();
    }
    this.flexibleFields.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<FlexibleField> getFlexibleFields() {
    return this.flexibleFields;
  }

  public MessageBody setFlexibleFields(@org.apache.thrift.annotation.Nullable java.util.List<FlexibleField> flexibleFields) {
    this.flexibleFields = flexibleFields;
    return this;
  }

  public void unsetFlexibleFields() {
    this.flexibleFields = null;
  }

  /** Returns true if field flexibleFields is set (has been assigned a value) and false otherwise */
  public boolean isSetFlexibleFields() {
    return this.flexibleFields != null;
  }

  public void setFlexibleFieldsIsSet(boolean value) {
    if (!value) {
      this.flexibleFields = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public WxMessageFrequency getSendFrequency() {
    return this.sendFrequency;
  }

  public MessageBody setSendFrequency(@org.apache.thrift.annotation.Nullable WxMessageFrequency sendFrequency) {
    this.sendFrequency = sendFrequency;
    return this;
  }

  public void unsetSendFrequency() {
    this.sendFrequency = null;
  }

  /** Returns true if field sendFrequency is set (has been assigned a value) and false otherwise */
  public boolean isSetSendFrequency() {
    return this.sendFrequency != null;
  }

  public void setSendFrequencyIsSet(boolean value) {
    if (!value) {
      this.sendFrequency = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((java.lang.String)value);
      }
      break;

    case SEND_CONDITION:
      if (value == null) {
        unsetSendCondition();
      } else {
        setSendCondition((java.lang.String)value);
      }
      break;

    case SEND_TIME:
      if (value == null) {
        unsetSendTime();
      } else {
        setSendTime((java.lang.String)value);
      }
      break;

    case SEND_TO:
      if (value == null) {
        unsetSendTo();
      } else {
        setSendTo((java.lang.String)value);
      }
      break;

    case SAMPLE:
      if (value == null) {
        unsetSample();
      } else {
        setSample((java.lang.String)value);
      }
      break;

    case FIRST:
      if (value == null) {
        unsetFirst();
      } else {
        setFirst((java.lang.String)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((java.lang.String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((java.lang.String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((java.lang.Byte)value);
      }
      break;

    case CUSTOM_FIRST:
      if (value == null) {
        unsetCustomFirst();
      } else {
        setCustomFirst((java.lang.String)value);
      }
      break;

    case CUSTOM_REMARK:
      if (value == null) {
        unsetCustomRemark();
      } else {
        setCustomRemark((java.lang.String)value);
      }
      break;

    case FLEXIBLE_FIELDS:
      if (value == null) {
        unsetFlexibleFields();
      } else {
        setFlexibleFields((java.util.List<FlexibleField>)value);
      }
      break;

    case SEND_FREQUENCY:
      if (value == null) {
        unsetSendFrequency();
      } else {
        setSendFrequency((WxMessageFrequency)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TITLE:
      return getTitle();

    case SEND_CONDITION:
      return getSendCondition();

    case SEND_TIME:
      return getSendTime();

    case SEND_TO:
      return getSendTo();

    case SAMPLE:
      return getSample();

    case FIRST:
      return getFirst();

    case PRIORITY:
      return getPriority();

    case REMARK:
      return getRemark();

    case STATUS:
      return getStatus();

    case CUSTOM_FIRST:
      return getCustomFirst();

    case CUSTOM_REMARK:
      return getCustomRemark();

    case FLEXIBLE_FIELDS:
      return getFlexibleFields();

    case SEND_FREQUENCY:
      return getSendFrequency();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TITLE:
      return isSetTitle();
    case SEND_CONDITION:
      return isSetSendCondition();
    case SEND_TIME:
      return isSetSendTime();
    case SEND_TO:
      return isSetSendTo();
    case SAMPLE:
      return isSetSample();
    case FIRST:
      return isSetFirst();
    case PRIORITY:
      return isSetPriority();
    case REMARK:
      return isSetRemark();
    case STATUS:
      return isSetStatus();
    case CUSTOM_FIRST:
      return isSetCustomFirst();
    case CUSTOM_REMARK:
      return isSetCustomRemark();
    case FLEXIBLE_FIELDS:
      return isSetFlexibleFields();
    case SEND_FREQUENCY:
      return isSetSendFrequency();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MessageBody)
      return this.equals((MessageBody)that);
    return false;
  }

  public boolean equals(MessageBody that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_sendCondition = true && this.isSetSendCondition();
    boolean that_present_sendCondition = true && that.isSetSendCondition();
    if (this_present_sendCondition || that_present_sendCondition) {
      if (!(this_present_sendCondition && that_present_sendCondition))
        return false;
      if (!this.sendCondition.equals(that.sendCondition))
        return false;
    }

    boolean this_present_sendTime = true && this.isSetSendTime();
    boolean that_present_sendTime = true && that.isSetSendTime();
    if (this_present_sendTime || that_present_sendTime) {
      if (!(this_present_sendTime && that_present_sendTime))
        return false;
      if (!this.sendTime.equals(that.sendTime))
        return false;
    }

    boolean this_present_sendTo = true && this.isSetSendTo();
    boolean that_present_sendTo = true && that.isSetSendTo();
    if (this_present_sendTo || that_present_sendTo) {
      if (!(this_present_sendTo && that_present_sendTo))
        return false;
      if (!this.sendTo.equals(that.sendTo))
        return false;
    }

    boolean this_present_sample = true && this.isSetSample();
    boolean that_present_sample = true && that.isSetSample();
    if (this_present_sample || that_present_sample) {
      if (!(this_present_sample && that_present_sample))
        return false;
      if (!this.sample.equals(that.sample))
        return false;
    }

    boolean this_present_first = true && this.isSetFirst();
    boolean that_present_first = true && that.isSetFirst();
    if (this_present_first || that_present_first) {
      if (!(this_present_first && that_present_first))
        return false;
      if (!this.first.equals(that.first))
        return false;
    }

    boolean this_present_priority = true && this.isSetPriority();
    boolean that_present_priority = true && that.isSetPriority();
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (!this.priority.equals(that.priority))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_customFirst = true && this.isSetCustomFirst();
    boolean that_present_customFirst = true && that.isSetCustomFirst();
    if (this_present_customFirst || that_present_customFirst) {
      if (!(this_present_customFirst && that_present_customFirst))
        return false;
      if (!this.customFirst.equals(that.customFirst))
        return false;
    }

    boolean this_present_customRemark = true && this.isSetCustomRemark();
    boolean that_present_customRemark = true && that.isSetCustomRemark();
    if (this_present_customRemark || that_present_customRemark) {
      if (!(this_present_customRemark && that_present_customRemark))
        return false;
      if (!this.customRemark.equals(that.customRemark))
        return false;
    }

    boolean this_present_flexibleFields = true && this.isSetFlexibleFields();
    boolean that_present_flexibleFields = true && that.isSetFlexibleFields();
    if (this_present_flexibleFields || that_present_flexibleFields) {
      if (!(this_present_flexibleFields && that_present_flexibleFields))
        return false;
      if (!this.flexibleFields.equals(that.flexibleFields))
        return false;
    }

    boolean this_present_sendFrequency = true && this.isSetSendFrequency();
    boolean that_present_sendFrequency = true && that.isSetSendFrequency();
    if (this_present_sendFrequency || that_present_sendFrequency) {
      if (!(this_present_sendFrequency && that_present_sendFrequency))
        return false;
      if (!this.sendFrequency.equals(that.sendFrequency))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + ((isSetSendCondition()) ? 131071 : 524287);
    if (isSetSendCondition())
      hashCode = hashCode * 8191 + sendCondition.hashCode();

    hashCode = hashCode * 8191 + ((isSetSendTime()) ? 131071 : 524287);
    if (isSetSendTime())
      hashCode = hashCode * 8191 + sendTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetSendTo()) ? 131071 : 524287);
    if (isSetSendTo())
      hashCode = hashCode * 8191 + sendTo.hashCode();

    hashCode = hashCode * 8191 + ((isSetSample()) ? 131071 : 524287);
    if (isSetSample())
      hashCode = hashCode * 8191 + sample.hashCode();

    hashCode = hashCode * 8191 + ((isSetFirst()) ? 131071 : 524287);
    if (isSetFirst())
      hashCode = hashCode * 8191 + first.hashCode();

    hashCode = hashCode * 8191 + ((isSetPriority()) ? 131071 : 524287);
    if (isSetPriority())
      hashCode = hashCode * 8191 + priority.hashCode();

    hashCode = hashCode * 8191 + ((isSetRemark()) ? 131071 : 524287);
    if (isSetRemark())
      hashCode = hashCode * 8191 + remark.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + (int) (status);

    hashCode = hashCode * 8191 + ((isSetCustomFirst()) ? 131071 : 524287);
    if (isSetCustomFirst())
      hashCode = hashCode * 8191 + customFirst.hashCode();

    hashCode = hashCode * 8191 + ((isSetCustomRemark()) ? 131071 : 524287);
    if (isSetCustomRemark())
      hashCode = hashCode * 8191 + customRemark.hashCode();

    hashCode = hashCode * 8191 + ((isSetFlexibleFields()) ? 131071 : 524287);
    if (isSetFlexibleFields())
      hashCode = hashCode * 8191 + flexibleFields.hashCode();

    hashCode = hashCode * 8191 + ((isSetSendFrequency()) ? 131071 : 524287);
    if (isSetSendFrequency())
      hashCode = hashCode * 8191 + sendFrequency.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MessageBody other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSendCondition()).compareTo(other.isSetSendCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendCondition, other.sendCondition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSendTime()).compareTo(other.isSetSendTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendTime, other.sendTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSendTo()).compareTo(other.isSetSendTo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendTo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendTo, other.sendTo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSample()).compareTo(other.isSetSample());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSample()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sample, other.sample);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFirst()).compareTo(other.isSetFirst());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirst()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.first, other.first);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCustomFirst()).compareTo(other.isSetCustomFirst());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomFirst()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customFirst, other.customFirst);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCustomRemark()).compareTo(other.isSetCustomRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customRemark, other.customRemark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFlexibleFields()).compareTo(other.isSetFlexibleFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlexibleFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flexibleFields, other.flexibleFields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSendFrequency()).compareTo(other.isSetSendFrequency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendFrequency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendFrequency, other.sendFrequency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MessageBody(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetSendCondition()) {
      if (!first) sb.append(", ");
      sb.append("sendCondition:");
      if (this.sendCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.sendCondition);
      }
      first = false;
    }
    if (isSetSendTime()) {
      if (!first) sb.append(", ");
      sb.append("sendTime:");
      if (this.sendTime == null) {
        sb.append("null");
      } else {
        sb.append(this.sendTime);
      }
      first = false;
    }
    if (isSetSendTo()) {
      if (!first) sb.append(", ");
      sb.append("sendTo:");
      if (this.sendTo == null) {
        sb.append("null");
      } else {
        sb.append(this.sendTo);
      }
      first = false;
    }
    if (isSetSample()) {
      if (!first) sb.append(", ");
      sb.append("sample:");
      if (this.sample == null) {
        sb.append("null");
      } else {
        sb.append(this.sample);
      }
      first = false;
    }
    if (isSetFirst()) {
      if (!first) sb.append(", ");
      sb.append("first:");
      if (this.first == null) {
        sb.append("null");
      } else {
        sb.append(this.first);
      }
      first = false;
    }
    if (isSetPriority()) {
      if (!first) sb.append(", ");
      sb.append("priority:");
      if (this.priority == null) {
        sb.append("null");
      } else {
        sb.append(this.priority);
      }
      first = false;
    }
    if (isSetRemark()) {
      if (!first) sb.append(", ");
      sb.append("remark:");
      if (this.remark == null) {
        sb.append("null");
      } else {
        sb.append(this.remark);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
    }
    if (isSetCustomFirst()) {
      if (!first) sb.append(", ");
      sb.append("customFirst:");
      if (this.customFirst == null) {
        sb.append("null");
      } else {
        sb.append(this.customFirst);
      }
      first = false;
    }
    if (isSetCustomRemark()) {
      if (!first) sb.append(", ");
      sb.append("customRemark:");
      if (this.customRemark == null) {
        sb.append("null");
      } else {
        sb.append(this.customRemark);
      }
      first = false;
    }
    if (isSetFlexibleFields()) {
      if (!first) sb.append(", ");
      sb.append("flexibleFields:");
      if (this.flexibleFields == null) {
        sb.append("null");
      } else {
        sb.append(this.flexibleFields);
      }
      first = false;
    }
    if (isSetSendFrequency()) {
      if (!first) sb.append(", ");
      sb.append("sendFrequency:");
      if (this.sendFrequency == null) {
        sb.append("null");
      } else {
        sb.append(this.sendFrequency);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MessageBodyStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MessageBodyStandardScheme getScheme() {
      return new MessageBodyStandardScheme();
    }
  }

  private static class MessageBodyStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageBody> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MessageBody struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SEND_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sendCondition = iprot.readString();
              struct.setSendConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SEND_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sendTime = iprot.readString();
              struct.setSendTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SEND_TO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sendTo = iprot.readString();
              struct.setSendToIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SAMPLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sample = iprot.readString();
              struct.setSampleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FIRST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.first = iprot.readString();
              struct.setFirstIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.priority = iprot.readString();
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.status = iprot.readByte();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CUSTOM_FIRST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.customFirst = iprot.readString();
              struct.setCustomFirstIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CUSTOM_REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.customRemark = iprot.readString();
              struct.setCustomRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FLEXIBLE_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list38 = iprot.readListBegin();
                struct.flexibleFields = new java.util.ArrayList<FlexibleField>(_list38.size);
                @org.apache.thrift.annotation.Nullable FlexibleField _elem39;
                for (int _i40 = 0; _i40 < _list38.size; ++_i40)
                {
                  _elem39 = new FlexibleField();
                  _elem39.read(iprot);
                  struct.flexibleFields.add(_elem39);
                }
                iprot.readListEnd();
              }
              struct.setFlexibleFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SEND_FREQUENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sendFrequency = new WxMessageFrequency();
              struct.sendFrequency.read(iprot);
              struct.setSendFrequencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MessageBody struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sendCondition != null) {
        if (struct.isSetSendCondition()) {
          oprot.writeFieldBegin(SEND_CONDITION_FIELD_DESC);
          oprot.writeString(struct.sendCondition);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sendTime != null) {
        if (struct.isSetSendTime()) {
          oprot.writeFieldBegin(SEND_TIME_FIELD_DESC);
          oprot.writeString(struct.sendTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sendTo != null) {
        if (struct.isSetSendTo()) {
          oprot.writeFieldBegin(SEND_TO_FIELD_DESC);
          oprot.writeString(struct.sendTo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sample != null) {
        if (struct.isSetSample()) {
          oprot.writeFieldBegin(SAMPLE_FIELD_DESC);
          oprot.writeString(struct.sample);
          oprot.writeFieldEnd();
        }
      }
      if (struct.first != null) {
        if (struct.isSetFirst()) {
          oprot.writeFieldBegin(FIRST_FIELD_DESC);
          oprot.writeString(struct.first);
          oprot.writeFieldEnd();
        }
      }
      if (struct.priority != null) {
        if (struct.isSetPriority()) {
          oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
          oprot.writeString(struct.priority);
          oprot.writeFieldEnd();
        }
      }
      if (struct.remark != null) {
        if (struct.isSetRemark()) {
          oprot.writeFieldBegin(REMARK_FIELD_DESC);
          oprot.writeString(struct.remark);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStatus()) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeByte(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.customFirst != null) {
        if (struct.isSetCustomFirst()) {
          oprot.writeFieldBegin(CUSTOM_FIRST_FIELD_DESC);
          oprot.writeString(struct.customFirst);
          oprot.writeFieldEnd();
        }
      }
      if (struct.customRemark != null) {
        if (struct.isSetCustomRemark()) {
          oprot.writeFieldBegin(CUSTOM_REMARK_FIELD_DESC);
          oprot.writeString(struct.customRemark);
          oprot.writeFieldEnd();
        }
      }
      if (struct.flexibleFields != null) {
        if (struct.isSetFlexibleFields()) {
          oprot.writeFieldBegin(FLEXIBLE_FIELDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.flexibleFields.size()));
            for (FlexibleField _iter41 : struct.flexibleFields)
            {
              _iter41.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sendFrequency != null) {
        if (struct.isSetSendFrequency()) {
          oprot.writeFieldBegin(SEND_FREQUENCY_FIELD_DESC);
          struct.sendFrequency.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MessageBodyTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MessageBodyTupleScheme getScheme() {
      return new MessageBodyTupleScheme();
    }
  }

  private static class MessageBodyTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageBody> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MessageBody struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetTitle()) {
        optionals.set(1);
      }
      if (struct.isSetSendCondition()) {
        optionals.set(2);
      }
      if (struct.isSetSendTime()) {
        optionals.set(3);
      }
      if (struct.isSetSendTo()) {
        optionals.set(4);
      }
      if (struct.isSetSample()) {
        optionals.set(5);
      }
      if (struct.isSetFirst()) {
        optionals.set(6);
      }
      if (struct.isSetPriority()) {
        optionals.set(7);
      }
      if (struct.isSetRemark()) {
        optionals.set(8);
      }
      if (struct.isSetStatus()) {
        optionals.set(9);
      }
      if (struct.isSetCustomFirst()) {
        optionals.set(10);
      }
      if (struct.isSetCustomRemark()) {
        optionals.set(11);
      }
      if (struct.isSetFlexibleFields()) {
        optionals.set(12);
      }
      if (struct.isSetSendFrequency()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetSendCondition()) {
        oprot.writeString(struct.sendCondition);
      }
      if (struct.isSetSendTime()) {
        oprot.writeString(struct.sendTime);
      }
      if (struct.isSetSendTo()) {
        oprot.writeString(struct.sendTo);
      }
      if (struct.isSetSample()) {
        oprot.writeString(struct.sample);
      }
      if (struct.isSetFirst()) {
        oprot.writeString(struct.first);
      }
      if (struct.isSetPriority()) {
        oprot.writeString(struct.priority);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetStatus()) {
        oprot.writeByte(struct.status);
      }
      if (struct.isSetCustomFirst()) {
        oprot.writeString(struct.customFirst);
      }
      if (struct.isSetCustomRemark()) {
        oprot.writeString(struct.customRemark);
      }
      if (struct.isSetFlexibleFields()) {
        {
          oprot.writeI32(struct.flexibleFields.size());
          for (FlexibleField _iter42 : struct.flexibleFields)
          {
            _iter42.write(oprot);
          }
        }
      }
      if (struct.isSetSendFrequency()) {
        struct.sendFrequency.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MessageBody struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sendCondition = iprot.readString();
        struct.setSendConditionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sendTime = iprot.readString();
        struct.setSendTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sendTo = iprot.readString();
        struct.setSendToIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sample = iprot.readString();
        struct.setSampleIsSet(true);
      }
      if (incoming.get(6)) {
        struct.first = iprot.readString();
        struct.setFirstIsSet(true);
      }
      if (incoming.get(7)) {
        struct.priority = iprot.readString();
        struct.setPriorityIsSet(true);
      }
      if (incoming.get(8)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(9)) {
        struct.status = iprot.readByte();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(10)) {
        struct.customFirst = iprot.readString();
        struct.setCustomFirstIsSet(true);
      }
      if (incoming.get(11)) {
        struct.customRemark = iprot.readString();
        struct.setCustomRemarkIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list43 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.flexibleFields = new java.util.ArrayList<FlexibleField>(_list43.size);
          @org.apache.thrift.annotation.Nullable FlexibleField _elem44;
          for (int _i45 = 0; _i45 < _list43.size; ++_i45)
          {
            _elem44 = new FlexibleField();
            _elem44.read(iprot);
            struct.flexibleFields.add(_elem44);
          }
        }
        struct.setFlexibleFieldsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.sendFrequency = new WxMessageFrequency();
        struct.sendFrequency.read(iprot);
        struct.setSendFrequencyIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

