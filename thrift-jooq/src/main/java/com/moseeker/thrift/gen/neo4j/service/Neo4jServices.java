/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.neo4j.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-10-27")
public class Neo4jServices {

  public interface Iface {

    public void addNeo4jForWard(int startUserId, int endUserId, int shareChainId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public java.util.List<com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany> fetchUserThreeDepthEmployee(int userId, int companyId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public java.util.List<com.moseeker.thrift.gen.neo4j.struct.UserDepth> fetchEmployeeThreeDepthUser(int userId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public java.util.List<java.lang.Integer> fetchShortestPath(int startUserId, int endUserId, int companyId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addNeo4jForWard(int startUserId, int endUserId, int shareChainId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void fetchUserThreeDepthEmployee(int userId, int companyId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany>> resultHandler) throws org.apache.thrift.TException;

    public void fetchEmployeeThreeDepthUser(int userId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.neo4j.struct.UserDepth>> resultHandler) throws org.apache.thrift.TException;

    public void fetchShortestPath(int startUserId, int endUserId, int companyId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void addNeo4jForWard(int startUserId, int endUserId, int shareChainId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_addNeo4jForWard(startUserId, endUserId, shareChainId);
      recv_addNeo4jForWard();
    }

    public void send_addNeo4jForWard(int startUserId, int endUserId, int shareChainId) throws org.apache.thrift.TException
    {
      addNeo4jForWard_args args = new addNeo4jForWard_args();
      args.setStartUserId(startUserId);
      args.setEndUserId(endUserId);
      args.setShareChainId(shareChainId);
      sendBase("addNeo4jForWard", args);
    }

    public void recv_addNeo4jForWard() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      addNeo4jForWard_result result = new addNeo4jForWard_result();
      receiveBase(result, "addNeo4jForWard");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public java.util.List<com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany> fetchUserThreeDepthEmployee(int userId, int companyId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_fetchUserThreeDepthEmployee(userId, companyId);
      return recv_fetchUserThreeDepthEmployee();
    }

    public void send_fetchUserThreeDepthEmployee(int userId, int companyId) throws org.apache.thrift.TException
    {
      fetchUserThreeDepthEmployee_args args = new fetchUserThreeDepthEmployee_args();
      args.setUserId(userId);
      args.setCompanyId(companyId);
      sendBase("fetchUserThreeDepthEmployee", args);
    }

    public java.util.List<com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany> recv_fetchUserThreeDepthEmployee() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      fetchUserThreeDepthEmployee_result result = new fetchUserThreeDepthEmployee_result();
      receiveBase(result, "fetchUserThreeDepthEmployee");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchUserThreeDepthEmployee failed: unknown result");
    }

    public java.util.List<com.moseeker.thrift.gen.neo4j.struct.UserDepth> fetchEmployeeThreeDepthUser(int userId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_fetchEmployeeThreeDepthUser(userId);
      return recv_fetchEmployeeThreeDepthUser();
    }

    public void send_fetchEmployeeThreeDepthUser(int userId) throws org.apache.thrift.TException
    {
      fetchEmployeeThreeDepthUser_args args = new fetchEmployeeThreeDepthUser_args();
      args.setUserId(userId);
      sendBase("fetchEmployeeThreeDepthUser", args);
    }

    public java.util.List<com.moseeker.thrift.gen.neo4j.struct.UserDepth> recv_fetchEmployeeThreeDepthUser() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      fetchEmployeeThreeDepthUser_result result = new fetchEmployeeThreeDepthUser_result();
      receiveBase(result, "fetchEmployeeThreeDepthUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchEmployeeThreeDepthUser failed: unknown result");
    }

    public java.util.List<java.lang.Integer> fetchShortestPath(int startUserId, int endUserId, int companyId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_fetchShortestPath(startUserId, endUserId, companyId);
      return recv_fetchShortestPath();
    }

    public void send_fetchShortestPath(int startUserId, int endUserId, int companyId) throws org.apache.thrift.TException
    {
      fetchShortestPath_args args = new fetchShortestPath_args();
      args.setStartUserId(startUserId);
      args.setEndUserId(endUserId);
      args.setCompanyId(companyId);
      sendBase("fetchShortestPath", args);
    }

    public java.util.List<java.lang.Integer> recv_fetchShortestPath() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      fetchShortestPath_result result = new fetchShortestPath_result();
      receiveBase(result, "fetchShortestPath");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchShortestPath failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addNeo4jForWard(int startUserId, int endUserId, int shareChainId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addNeo4jForWard_call method_call = new addNeo4jForWard_call(startUserId, endUserId, shareChainId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addNeo4jForWard_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int startUserId;
      private int endUserId;
      private int shareChainId;
      public addNeo4jForWard_call(int startUserId, int endUserId, int shareChainId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.startUserId = startUserId;
        this.endUserId = endUserId;
        this.shareChainId = shareChainId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addNeo4jForWard", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addNeo4jForWard_args args = new addNeo4jForWard_args();
        args.setStartUserId(startUserId);
        args.setEndUserId(endUserId);
        args.setShareChainId(shareChainId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void fetchUserThreeDepthEmployee(int userId, int companyId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fetchUserThreeDepthEmployee_call method_call = new fetchUserThreeDepthEmployee_call(userId, companyId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetchUserThreeDepthEmployee_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany>> {
      private int userId;
      private int companyId;
      public fetchUserThreeDepthEmployee_call(int userId, int companyId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.companyId = companyId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchUserThreeDepthEmployee", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetchUserThreeDepthEmployee_args args = new fetchUserThreeDepthEmployee_args();
        args.setUserId(userId);
        args.setCompanyId(companyId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany> getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetchUserThreeDepthEmployee();
      }
    }

    public void fetchEmployeeThreeDepthUser(int userId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.neo4j.struct.UserDepth>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fetchEmployeeThreeDepthUser_call method_call = new fetchEmployeeThreeDepthUser_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetchEmployeeThreeDepthUser_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.moseeker.thrift.gen.neo4j.struct.UserDepth>> {
      private int userId;
      public fetchEmployeeThreeDepthUser_call(int userId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.neo4j.struct.UserDepth>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchEmployeeThreeDepthUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetchEmployeeThreeDepthUser_args args = new fetchEmployeeThreeDepthUser_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.moseeker.thrift.gen.neo4j.struct.UserDepth> getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetchEmployeeThreeDepthUser();
      }
    }

    public void fetchShortestPath(int startUserId, int endUserId, int companyId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fetchShortestPath_call method_call = new fetchShortestPath_call(startUserId, endUserId, companyId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetchShortestPath_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.Integer>> {
      private int startUserId;
      private int endUserId;
      private int companyId;
      public fetchShortestPath_call(int startUserId, int endUserId, int companyId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.startUserId = startUserId;
        this.endUserId = endUserId;
        this.companyId = companyId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchShortestPath", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetchShortestPath_args args = new fetchShortestPath_args();
        args.setStartUserId(startUserId);
        args.setEndUserId(endUserId);
        args.setCompanyId(companyId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.Integer> getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetchShortestPath();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addNeo4jForWard", new addNeo4jForWard());
      processMap.put("fetchUserThreeDepthEmployee", new fetchUserThreeDepthEmployee());
      processMap.put("fetchEmployeeThreeDepthUser", new fetchEmployeeThreeDepthUser());
      processMap.put("fetchShortestPath", new fetchShortestPath());
      return processMap;
    }

    public static class addNeo4jForWard<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addNeo4jForWard_args> {
      public addNeo4jForWard() {
        super("addNeo4jForWard");
      }

      public addNeo4jForWard_args getEmptyArgsInstance() {
        return new addNeo4jForWard_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public addNeo4jForWard_result getResult(I iface, addNeo4jForWard_args args) throws org.apache.thrift.TException {
        addNeo4jForWard_result result = new addNeo4jForWard_result();
        try {
          iface.addNeo4jForWard(args.startUserId, args.endUserId, args.shareChainId);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class fetchUserThreeDepthEmployee<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchUserThreeDepthEmployee_args> {
      public fetchUserThreeDepthEmployee() {
        super("fetchUserThreeDepthEmployee");
      }

      public fetchUserThreeDepthEmployee_args getEmptyArgsInstance() {
        return new fetchUserThreeDepthEmployee_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public fetchUserThreeDepthEmployee_result getResult(I iface, fetchUserThreeDepthEmployee_args args) throws org.apache.thrift.TException {
        fetchUserThreeDepthEmployee_result result = new fetchUserThreeDepthEmployee_result();
        try {
          result.success = iface.fetchUserThreeDepthEmployee(args.userId, args.companyId);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class fetchEmployeeThreeDepthUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchEmployeeThreeDepthUser_args> {
      public fetchEmployeeThreeDepthUser() {
        super("fetchEmployeeThreeDepthUser");
      }

      public fetchEmployeeThreeDepthUser_args getEmptyArgsInstance() {
        return new fetchEmployeeThreeDepthUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public fetchEmployeeThreeDepthUser_result getResult(I iface, fetchEmployeeThreeDepthUser_args args) throws org.apache.thrift.TException {
        fetchEmployeeThreeDepthUser_result result = new fetchEmployeeThreeDepthUser_result();
        try {
          result.success = iface.fetchEmployeeThreeDepthUser(args.userId);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class fetchShortestPath<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchShortestPath_args> {
      public fetchShortestPath() {
        super("fetchShortestPath");
      }

      public fetchShortestPath_args getEmptyArgsInstance() {
        return new fetchShortestPath_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public fetchShortestPath_result getResult(I iface, fetchShortestPath_args args) throws org.apache.thrift.TException {
        fetchShortestPath_result result = new fetchShortestPath_result();
        try {
          result.success = iface.fetchShortestPath(args.startUserId, args.endUserId, args.companyId);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addNeo4jForWard", new addNeo4jForWard());
      processMap.put("fetchUserThreeDepthEmployee", new fetchUserThreeDepthEmployee());
      processMap.put("fetchEmployeeThreeDepthUser", new fetchEmployeeThreeDepthUser());
      processMap.put("fetchShortestPath", new fetchShortestPath());
      return processMap;
    }

    public static class addNeo4jForWard<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addNeo4jForWard_args, Void> {
      public addNeo4jForWard() {
        super("addNeo4jForWard");
      }

      public addNeo4jForWard_args getEmptyArgsInstance() {
        return new addNeo4jForWard_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addNeo4jForWard_result result = new addNeo4jForWard_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addNeo4jForWard_result result = new addNeo4jForWard_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addNeo4jForWard_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.addNeo4jForWard(args.startUserId, args.endUserId, args.shareChainId,resultHandler);
      }
    }

    public static class fetchUserThreeDepthEmployee<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fetchUserThreeDepthEmployee_args, java.util.List<com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany>> {
      public fetchUserThreeDepthEmployee() {
        super("fetchUserThreeDepthEmployee");
      }

      public fetchUserThreeDepthEmployee_args getEmptyArgsInstance() {
        return new fetchUserThreeDepthEmployee_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany>>() { 
          public void onComplete(java.util.List<com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany> o) {
            fetchUserThreeDepthEmployee_result result = new fetchUserThreeDepthEmployee_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            fetchUserThreeDepthEmployee_result result = new fetchUserThreeDepthEmployee_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, fetchUserThreeDepthEmployee_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany>> resultHandler) throws org.apache.thrift.TException {
        iface.fetchUserThreeDepthEmployee(args.userId, args.companyId,resultHandler);
      }
    }

    public static class fetchEmployeeThreeDepthUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fetchEmployeeThreeDepthUser_args, java.util.List<com.moseeker.thrift.gen.neo4j.struct.UserDepth>> {
      public fetchEmployeeThreeDepthUser() {
        super("fetchEmployeeThreeDepthUser");
      }

      public fetchEmployeeThreeDepthUser_args getEmptyArgsInstance() {
        return new fetchEmployeeThreeDepthUser_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.neo4j.struct.UserDepth>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.neo4j.struct.UserDepth>>() { 
          public void onComplete(java.util.List<com.moseeker.thrift.gen.neo4j.struct.UserDepth> o) {
            fetchEmployeeThreeDepthUser_result result = new fetchEmployeeThreeDepthUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            fetchEmployeeThreeDepthUser_result result = new fetchEmployeeThreeDepthUser_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, fetchEmployeeThreeDepthUser_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.moseeker.thrift.gen.neo4j.struct.UserDepth>> resultHandler) throws org.apache.thrift.TException {
        iface.fetchEmployeeThreeDepthUser(args.userId,resultHandler);
      }
    }

    public static class fetchShortestPath<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fetchShortestPath_args, java.util.List<java.lang.Integer>> {
      public fetchShortestPath() {
        super("fetchShortestPath");
      }

      public fetchShortestPath_args getEmptyArgsInstance() {
        return new fetchShortestPath_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>>() { 
          public void onComplete(java.util.List<java.lang.Integer> o) {
            fetchShortestPath_result result = new fetchShortestPath_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            fetchShortestPath_result result = new fetchShortestPath_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, fetchShortestPath_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> resultHandler) throws org.apache.thrift.TException {
        iface.fetchShortestPath(args.startUserId, args.endUserId, args.companyId,resultHandler);
      }
    }

  }

  public static class addNeo4jForWard_args implements org.apache.thrift.TBase<addNeo4jForWard_args, addNeo4jForWard_args._Fields>, java.io.Serializable, Cloneable, Comparable<addNeo4jForWard_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addNeo4jForWard_args");

    private static final org.apache.thrift.protocol.TField START_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("startUserId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField END_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("endUserId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SHARE_CHAIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shareChainId", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addNeo4jForWard_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addNeo4jForWard_argsTupleSchemeFactory();

    public int startUserId; // required
    public int endUserId; // required
    public int shareChainId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      START_USER_ID((short)1, "startUserId"),
      END_USER_ID((short)2, "endUserId"),
      SHARE_CHAIN_ID((short)3, "shareChainId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // START_USER_ID
            return START_USER_ID;
          case 2: // END_USER_ID
            return END_USER_ID;
          case 3: // SHARE_CHAIN_ID
            return SHARE_CHAIN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STARTUSERID_ISSET_ID = 0;
    private static final int __ENDUSERID_ISSET_ID = 1;
    private static final int __SHARECHAINID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.START_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("startUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.END_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("endUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SHARE_CHAIN_ID, new org.apache.thrift.meta_data.FieldMetaData("shareChainId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addNeo4jForWard_args.class, metaDataMap);
    }

    public addNeo4jForWard_args() {
    }

    public addNeo4jForWard_args(
      int startUserId,
      int endUserId,
      int shareChainId)
    {
      this();
      this.startUserId = startUserId;
      setStartUserIdIsSet(true);
      this.endUserId = endUserId;
      setEndUserIdIsSet(true);
      this.shareChainId = shareChainId;
      setShareChainIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addNeo4jForWard_args(addNeo4jForWard_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.startUserId = other.startUserId;
      this.endUserId = other.endUserId;
      this.shareChainId = other.shareChainId;
    }

    public addNeo4jForWard_args deepCopy() {
      return new addNeo4jForWard_args(this);
    }

    @Override
    public void clear() {
      setStartUserIdIsSet(false);
      this.startUserId = 0;
      setEndUserIdIsSet(false);
      this.endUserId = 0;
      setShareChainIdIsSet(false);
      this.shareChainId = 0;
    }

    public int getStartUserId() {
      return this.startUserId;
    }

    public addNeo4jForWard_args setStartUserId(int startUserId) {
      this.startUserId = startUserId;
      setStartUserIdIsSet(true);
      return this;
    }

    public void unsetStartUserId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTUSERID_ISSET_ID);
    }

    /** Returns true if field startUserId is set (has been assigned a value) and false otherwise */
    public boolean isSetStartUserId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTUSERID_ISSET_ID);
    }

    public void setStartUserIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTUSERID_ISSET_ID, value);
    }

    public int getEndUserId() {
      return this.endUserId;
    }

    public addNeo4jForWard_args setEndUserId(int endUserId) {
      this.endUserId = endUserId;
      setEndUserIdIsSet(true);
      return this;
    }

    public void unsetEndUserId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENDUSERID_ISSET_ID);
    }

    /** Returns true if field endUserId is set (has been assigned a value) and false otherwise */
    public boolean isSetEndUserId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENDUSERID_ISSET_ID);
    }

    public void setEndUserIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENDUSERID_ISSET_ID, value);
    }

    public int getShareChainId() {
      return this.shareChainId;
    }

    public addNeo4jForWard_args setShareChainId(int shareChainId) {
      this.shareChainId = shareChainId;
      setShareChainIdIsSet(true);
      return this;
    }

    public void unsetShareChainId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHARECHAINID_ISSET_ID);
    }

    /** Returns true if field shareChainId is set (has been assigned a value) and false otherwise */
    public boolean isSetShareChainId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHARECHAINID_ISSET_ID);
    }

    public void setShareChainIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHARECHAINID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case START_USER_ID:
        if (value == null) {
          unsetStartUserId();
        } else {
          setStartUserId((java.lang.Integer)value);
        }
        break;

      case END_USER_ID:
        if (value == null) {
          unsetEndUserId();
        } else {
          setEndUserId((java.lang.Integer)value);
        }
        break;

      case SHARE_CHAIN_ID:
        if (value == null) {
          unsetShareChainId();
        } else {
          setShareChainId((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case START_USER_ID:
        return getStartUserId();

      case END_USER_ID:
        return getEndUserId();

      case SHARE_CHAIN_ID:
        return getShareChainId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case START_USER_ID:
        return isSetStartUserId();
      case END_USER_ID:
        return isSetEndUserId();
      case SHARE_CHAIN_ID:
        return isSetShareChainId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addNeo4jForWard_args)
        return this.equals((addNeo4jForWard_args)that);
      return false;
    }

    public boolean equals(addNeo4jForWard_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_startUserId = true;
      boolean that_present_startUserId = true;
      if (this_present_startUserId || that_present_startUserId) {
        if (!(this_present_startUserId && that_present_startUserId))
          return false;
        if (this.startUserId != that.startUserId)
          return false;
      }

      boolean this_present_endUserId = true;
      boolean that_present_endUserId = true;
      if (this_present_endUserId || that_present_endUserId) {
        if (!(this_present_endUserId && that_present_endUserId))
          return false;
        if (this.endUserId != that.endUserId)
          return false;
      }

      boolean this_present_shareChainId = true;
      boolean that_present_shareChainId = true;
      if (this_present_shareChainId || that_present_shareChainId) {
        if (!(this_present_shareChainId && that_present_shareChainId))
          return false;
        if (this.shareChainId != that.shareChainId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + startUserId;

      hashCode = hashCode * 8191 + endUserId;

      hashCode = hashCode * 8191 + shareChainId;

      return hashCode;
    }

    @Override
    public int compareTo(addNeo4jForWard_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetStartUserId()).compareTo(other.isSetStartUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startUserId, other.startUserId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEndUserId()).compareTo(other.isSetEndUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endUserId, other.endUserId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetShareChainId()).compareTo(other.isSetShareChainId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShareChainId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareChainId, other.shareChainId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addNeo4jForWard_args(");
      boolean first = true;

      sb.append("startUserId:");
      sb.append(this.startUserId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endUserId:");
      sb.append(this.endUserId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("shareChainId:");
      sb.append(this.shareChainId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addNeo4jForWard_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addNeo4jForWard_argsStandardScheme getScheme() {
        return new addNeo4jForWard_argsStandardScheme();
      }
    }

    private static class addNeo4jForWard_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addNeo4jForWard_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addNeo4jForWard_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // START_USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.startUserId = iprot.readI32();
                struct.setStartUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // END_USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.endUserId = iprot.readI32();
                struct.setEndUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SHARE_CHAIN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.shareChainId = iprot.readI32();
                struct.setShareChainIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addNeo4jForWard_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(START_USER_ID_FIELD_DESC);
        oprot.writeI32(struct.startUserId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_USER_ID_FIELD_DESC);
        oprot.writeI32(struct.endUserId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SHARE_CHAIN_ID_FIELD_DESC);
        oprot.writeI32(struct.shareChainId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addNeo4jForWard_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addNeo4jForWard_argsTupleScheme getScheme() {
        return new addNeo4jForWard_argsTupleScheme();
      }
    }

    private static class addNeo4jForWard_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addNeo4jForWard_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addNeo4jForWard_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetStartUserId()) {
          optionals.set(0);
        }
        if (struct.isSetEndUserId()) {
          optionals.set(1);
        }
        if (struct.isSetShareChainId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetStartUserId()) {
          oprot.writeI32(struct.startUserId);
        }
        if (struct.isSetEndUserId()) {
          oprot.writeI32(struct.endUserId);
        }
        if (struct.isSetShareChainId()) {
          oprot.writeI32(struct.shareChainId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addNeo4jForWard_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.startUserId = iprot.readI32();
          struct.setStartUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.endUserId = iprot.readI32();
          struct.setEndUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.shareChainId = iprot.readI32();
          struct.setShareChainIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addNeo4jForWard_result implements org.apache.thrift.TBase<addNeo4jForWard_result, addNeo4jForWard_result._Fields>, java.io.Serializable, Cloneable, Comparable<addNeo4jForWard_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addNeo4jForWard_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addNeo4jForWard_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addNeo4jForWard_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addNeo4jForWard_result.class, metaDataMap);
    }

    public addNeo4jForWard_result() {
    }

    public addNeo4jForWard_result(
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addNeo4jForWard_result(addNeo4jForWard_result other) {
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public addNeo4jForWard_result deepCopy() {
      return new addNeo4jForWard_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public addNeo4jForWard_result setE(@org.apache.thrift.annotation.Nullable com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addNeo4jForWard_result)
        return this.equals((addNeo4jForWard_result)that);
      return false;
    }

    public boolean equals(addNeo4jForWard_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addNeo4jForWard_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addNeo4jForWard_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addNeo4jForWard_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addNeo4jForWard_resultStandardScheme getScheme() {
        return new addNeo4jForWard_resultStandardScheme();
      }
    }

    private static class addNeo4jForWard_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addNeo4jForWard_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addNeo4jForWard_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addNeo4jForWard_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addNeo4jForWard_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addNeo4jForWard_resultTupleScheme getScheme() {
        return new addNeo4jForWard_resultTupleScheme();
      }
    }

    private static class addNeo4jForWard_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addNeo4jForWard_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addNeo4jForWard_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addNeo4jForWard_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fetchUserThreeDepthEmployee_args implements org.apache.thrift.TBase<fetchUserThreeDepthEmployee_args, fetchUserThreeDepthEmployee_args._Fields>, java.io.Serializable, Cloneable, Comparable<fetchUserThreeDepthEmployee_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchUserThreeDepthEmployee_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetchUserThreeDepthEmployee_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetchUserThreeDepthEmployee_argsTupleSchemeFactory();

    public int userId; // required
    public int companyId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      COMPANY_ID((short)2, "companyId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // COMPANY_ID
            return COMPANY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __COMPANYID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchUserThreeDepthEmployee_args.class, metaDataMap);
    }

    public fetchUserThreeDepthEmployee_args() {
    }

    public fetchUserThreeDepthEmployee_args(
      int userId,
      int companyId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.companyId = companyId;
      setCompanyIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchUserThreeDepthEmployee_args(fetchUserThreeDepthEmployee_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      this.companyId = other.companyId;
    }

    public fetchUserThreeDepthEmployee_args deepCopy() {
      return new fetchUserThreeDepthEmployee_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      setCompanyIdIsSet(false);
      this.companyId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public fetchUserThreeDepthEmployee_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getCompanyId() {
      return this.companyId;
    }

    public fetchUserThreeDepthEmployee_args setCompanyId(int companyId) {
      this.companyId = companyId;
      setCompanyIdIsSet(true);
      return this;
    }

    public void unsetCompanyId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
    }

    /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
    public boolean isSetCompanyId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
    }

    public void setCompanyIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.Integer)value);
        }
        break;

      case COMPANY_ID:
        if (value == null) {
          unsetCompanyId();
        } else {
          setCompanyId((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case COMPANY_ID:
        return getCompanyId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case COMPANY_ID:
        return isSetCompanyId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchUserThreeDepthEmployee_args)
        return this.equals((fetchUserThreeDepthEmployee_args)that);
      return false;
    }

    public boolean equals(fetchUserThreeDepthEmployee_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_companyId = true;
      boolean that_present_companyId = true;
      if (this_present_companyId || that_present_companyId) {
        if (!(this_present_companyId && that_present_companyId))
          return false;
        if (this.companyId != that.companyId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + userId;

      hashCode = hashCode * 8191 + companyId;

      return hashCode;
    }

    @Override
    public int compareTo(fetchUserThreeDepthEmployee_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompanyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fetchUserThreeDepthEmployee_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("companyId:");
      sb.append(this.companyId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchUserThreeDepthEmployee_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchUserThreeDepthEmployee_argsStandardScheme getScheme() {
        return new fetchUserThreeDepthEmployee_argsStandardScheme();
      }
    }

    private static class fetchUserThreeDepthEmployee_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetchUserThreeDepthEmployee_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchUserThreeDepthEmployee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMPANY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.companyId = iprot.readI32();
                struct.setCompanyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchUserThreeDepthEmployee_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.companyId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchUserThreeDepthEmployee_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchUserThreeDepthEmployee_argsTupleScheme getScheme() {
        return new fetchUserThreeDepthEmployee_argsTupleScheme();
      }
    }

    private static class fetchUserThreeDepthEmployee_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetchUserThreeDepthEmployee_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchUserThreeDepthEmployee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetCompanyId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetCompanyId()) {
          oprot.writeI32(struct.companyId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchUserThreeDepthEmployee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.companyId = iprot.readI32();
          struct.setCompanyIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fetchUserThreeDepthEmployee_result implements org.apache.thrift.TBase<fetchUserThreeDepthEmployee_result, fetchUserThreeDepthEmployee_result._Fields>, java.io.Serializable, Cloneable, Comparable<fetchUserThreeDepthEmployee_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchUserThreeDepthEmployee_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetchUserThreeDepthEmployee_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetchUserThreeDepthEmployee_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany> success; // required
    public @org.apache.thrift.annotation.Nullable com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchUserThreeDepthEmployee_result.class, metaDataMap);
    }

    public fetchUserThreeDepthEmployee_result() {
    }

    public fetchUserThreeDepthEmployee_result(
      java.util.List<com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany> success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchUserThreeDepthEmployee_result(fetchUserThreeDepthEmployee_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany> __this__success = new java.util.ArrayList<com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany>(other.success.size());
        for (com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany other_element : other.success) {
          __this__success.add(new com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public fetchUserThreeDepthEmployee_result deepCopy() {
      return new fetchUserThreeDepthEmployee_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany> getSuccess() {
      return this.success;
    }

    public fetchUserThreeDepthEmployee_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public fetchUserThreeDepthEmployee_result setE(@org.apache.thrift.annotation.Nullable com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchUserThreeDepthEmployee_result)
        return this.equals((fetchUserThreeDepthEmployee_result)that);
      return false;
    }

    public boolean equals(fetchUserThreeDepthEmployee_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(fetchUserThreeDepthEmployee_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fetchUserThreeDepthEmployee_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchUserThreeDepthEmployee_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchUserThreeDepthEmployee_resultStandardScheme getScheme() {
        return new fetchUserThreeDepthEmployee_resultStandardScheme();
      }
    }

    private static class fetchUserThreeDepthEmployee_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetchUserThreeDepthEmployee_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchUserThreeDepthEmployee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany>(_list0.size);
                  @org.apache.thrift.annotation.Nullable com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchUserThreeDepthEmployee_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchUserThreeDepthEmployee_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchUserThreeDepthEmployee_resultTupleScheme getScheme() {
        return new fetchUserThreeDepthEmployee_resultTupleScheme();
      }
    }

    private static class fetchUserThreeDepthEmployee_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetchUserThreeDepthEmployee_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchUserThreeDepthEmployee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchUserThreeDepthEmployee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany>(_list5.size);
            @org.apache.thrift.annotation.Nullable com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.moseeker.thrift.gen.neo4j.struct.EmployeeCompany();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fetchEmployeeThreeDepthUser_args implements org.apache.thrift.TBase<fetchEmployeeThreeDepthUser_args, fetchEmployeeThreeDepthUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<fetchEmployeeThreeDepthUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchEmployeeThreeDepthUser_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetchEmployeeThreeDepthUser_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetchEmployeeThreeDepthUser_argsTupleSchemeFactory();

    public int userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchEmployeeThreeDepthUser_args.class, metaDataMap);
    }

    public fetchEmployeeThreeDepthUser_args() {
    }

    public fetchEmployeeThreeDepthUser_args(
      int userId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchEmployeeThreeDepthUser_args(fetchEmployeeThreeDepthUser_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
    }

    public fetchEmployeeThreeDepthUser_args deepCopy() {
      return new fetchEmployeeThreeDepthUser_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public fetchEmployeeThreeDepthUser_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchEmployeeThreeDepthUser_args)
        return this.equals((fetchEmployeeThreeDepthUser_args)that);
      return false;
    }

    public boolean equals(fetchEmployeeThreeDepthUser_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + userId;

      return hashCode;
    }

    @Override
    public int compareTo(fetchEmployeeThreeDepthUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fetchEmployeeThreeDepthUser_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchEmployeeThreeDepthUser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchEmployeeThreeDepthUser_argsStandardScheme getScheme() {
        return new fetchEmployeeThreeDepthUser_argsStandardScheme();
      }
    }

    private static class fetchEmployeeThreeDepthUser_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetchEmployeeThreeDepthUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchEmployeeThreeDepthUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchEmployeeThreeDepthUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchEmployeeThreeDepthUser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchEmployeeThreeDepthUser_argsTupleScheme getScheme() {
        return new fetchEmployeeThreeDepthUser_argsTupleScheme();
      }
    }

    private static class fetchEmployeeThreeDepthUser_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetchEmployeeThreeDepthUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchEmployeeThreeDepthUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchEmployeeThreeDepthUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fetchEmployeeThreeDepthUser_result implements org.apache.thrift.TBase<fetchEmployeeThreeDepthUser_result, fetchEmployeeThreeDepthUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<fetchEmployeeThreeDepthUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchEmployeeThreeDepthUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetchEmployeeThreeDepthUser_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetchEmployeeThreeDepthUser_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<com.moseeker.thrift.gen.neo4j.struct.UserDepth> success; // required
    public @org.apache.thrift.annotation.Nullable com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.neo4j.struct.UserDepth.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchEmployeeThreeDepthUser_result.class, metaDataMap);
    }

    public fetchEmployeeThreeDepthUser_result() {
    }

    public fetchEmployeeThreeDepthUser_result(
      java.util.List<com.moseeker.thrift.gen.neo4j.struct.UserDepth> success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchEmployeeThreeDepthUser_result(fetchEmployeeThreeDepthUser_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.moseeker.thrift.gen.neo4j.struct.UserDepth> __this__success = new java.util.ArrayList<com.moseeker.thrift.gen.neo4j.struct.UserDepth>(other.success.size());
        for (com.moseeker.thrift.gen.neo4j.struct.UserDepth other_element : other.success) {
          __this__success.add(new com.moseeker.thrift.gen.neo4j.struct.UserDepth(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public fetchEmployeeThreeDepthUser_result deepCopy() {
      return new fetchEmployeeThreeDepthUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<com.moseeker.thrift.gen.neo4j.struct.UserDepth> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.moseeker.thrift.gen.neo4j.struct.UserDepth elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.moseeker.thrift.gen.neo4j.struct.UserDepth>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<com.moseeker.thrift.gen.neo4j.struct.UserDepth> getSuccess() {
      return this.success;
    }

    public fetchEmployeeThreeDepthUser_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<com.moseeker.thrift.gen.neo4j.struct.UserDepth> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public fetchEmployeeThreeDepthUser_result setE(@org.apache.thrift.annotation.Nullable com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.moseeker.thrift.gen.neo4j.struct.UserDepth>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchEmployeeThreeDepthUser_result)
        return this.equals((fetchEmployeeThreeDepthUser_result)that);
      return false;
    }

    public boolean equals(fetchEmployeeThreeDepthUser_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(fetchEmployeeThreeDepthUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fetchEmployeeThreeDepthUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchEmployeeThreeDepthUser_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchEmployeeThreeDepthUser_resultStandardScheme getScheme() {
        return new fetchEmployeeThreeDepthUser_resultStandardScheme();
      }
    }

    private static class fetchEmployeeThreeDepthUser_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetchEmployeeThreeDepthUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchEmployeeThreeDepthUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.neo4j.struct.UserDepth>(_list8.size);
                  @org.apache.thrift.annotation.Nullable com.moseeker.thrift.gen.neo4j.struct.UserDepth _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new com.moseeker.thrift.gen.neo4j.struct.UserDepth();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchEmployeeThreeDepthUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.moseeker.thrift.gen.neo4j.struct.UserDepth _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchEmployeeThreeDepthUser_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchEmployeeThreeDepthUser_resultTupleScheme getScheme() {
        return new fetchEmployeeThreeDepthUser_resultTupleScheme();
      }
    }

    private static class fetchEmployeeThreeDepthUser_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetchEmployeeThreeDepthUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchEmployeeThreeDepthUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.moseeker.thrift.gen.neo4j.struct.UserDepth _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchEmployeeThreeDepthUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.moseeker.thrift.gen.neo4j.struct.UserDepth>(_list13.size);
            @org.apache.thrift.annotation.Nullable com.moseeker.thrift.gen.neo4j.struct.UserDepth _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new com.moseeker.thrift.gen.neo4j.struct.UserDepth();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fetchShortestPath_args implements org.apache.thrift.TBase<fetchShortestPath_args, fetchShortestPath_args._Fields>, java.io.Serializable, Cloneable, Comparable<fetchShortestPath_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchShortestPath_args");

    private static final org.apache.thrift.protocol.TField START_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("startUserId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField END_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("endUserId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetchShortestPath_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetchShortestPath_argsTupleSchemeFactory();

    public int startUserId; // required
    public int endUserId; // required
    public int companyId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      START_USER_ID((short)1, "startUserId"),
      END_USER_ID((short)2, "endUserId"),
      COMPANY_ID((short)3, "companyId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // START_USER_ID
            return START_USER_ID;
          case 2: // END_USER_ID
            return END_USER_ID;
          case 3: // COMPANY_ID
            return COMPANY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STARTUSERID_ISSET_ID = 0;
    private static final int __ENDUSERID_ISSET_ID = 1;
    private static final int __COMPANYID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.START_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("startUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.END_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("endUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchShortestPath_args.class, metaDataMap);
    }

    public fetchShortestPath_args() {
    }

    public fetchShortestPath_args(
      int startUserId,
      int endUserId,
      int companyId)
    {
      this();
      this.startUserId = startUserId;
      setStartUserIdIsSet(true);
      this.endUserId = endUserId;
      setEndUserIdIsSet(true);
      this.companyId = companyId;
      setCompanyIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchShortestPath_args(fetchShortestPath_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.startUserId = other.startUserId;
      this.endUserId = other.endUserId;
      this.companyId = other.companyId;
    }

    public fetchShortestPath_args deepCopy() {
      return new fetchShortestPath_args(this);
    }

    @Override
    public void clear() {
      setStartUserIdIsSet(false);
      this.startUserId = 0;
      setEndUserIdIsSet(false);
      this.endUserId = 0;
      setCompanyIdIsSet(false);
      this.companyId = 0;
    }

    public int getStartUserId() {
      return this.startUserId;
    }

    public fetchShortestPath_args setStartUserId(int startUserId) {
      this.startUserId = startUserId;
      setStartUserIdIsSet(true);
      return this;
    }

    public void unsetStartUserId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTUSERID_ISSET_ID);
    }

    /** Returns true if field startUserId is set (has been assigned a value) and false otherwise */
    public boolean isSetStartUserId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTUSERID_ISSET_ID);
    }

    public void setStartUserIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTUSERID_ISSET_ID, value);
    }

    public int getEndUserId() {
      return this.endUserId;
    }

    public fetchShortestPath_args setEndUserId(int endUserId) {
      this.endUserId = endUserId;
      setEndUserIdIsSet(true);
      return this;
    }

    public void unsetEndUserId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENDUSERID_ISSET_ID);
    }

    /** Returns true if field endUserId is set (has been assigned a value) and false otherwise */
    public boolean isSetEndUserId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENDUSERID_ISSET_ID);
    }

    public void setEndUserIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENDUSERID_ISSET_ID, value);
    }

    public int getCompanyId() {
      return this.companyId;
    }

    public fetchShortestPath_args setCompanyId(int companyId) {
      this.companyId = companyId;
      setCompanyIdIsSet(true);
      return this;
    }

    public void unsetCompanyId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
    }

    /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
    public boolean isSetCompanyId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
    }

    public void setCompanyIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case START_USER_ID:
        if (value == null) {
          unsetStartUserId();
        } else {
          setStartUserId((java.lang.Integer)value);
        }
        break;

      case END_USER_ID:
        if (value == null) {
          unsetEndUserId();
        } else {
          setEndUserId((java.lang.Integer)value);
        }
        break;

      case COMPANY_ID:
        if (value == null) {
          unsetCompanyId();
        } else {
          setCompanyId((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case START_USER_ID:
        return getStartUserId();

      case END_USER_ID:
        return getEndUserId();

      case COMPANY_ID:
        return getCompanyId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case START_USER_ID:
        return isSetStartUserId();
      case END_USER_ID:
        return isSetEndUserId();
      case COMPANY_ID:
        return isSetCompanyId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchShortestPath_args)
        return this.equals((fetchShortestPath_args)that);
      return false;
    }

    public boolean equals(fetchShortestPath_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_startUserId = true;
      boolean that_present_startUserId = true;
      if (this_present_startUserId || that_present_startUserId) {
        if (!(this_present_startUserId && that_present_startUserId))
          return false;
        if (this.startUserId != that.startUserId)
          return false;
      }

      boolean this_present_endUserId = true;
      boolean that_present_endUserId = true;
      if (this_present_endUserId || that_present_endUserId) {
        if (!(this_present_endUserId && that_present_endUserId))
          return false;
        if (this.endUserId != that.endUserId)
          return false;
      }

      boolean this_present_companyId = true;
      boolean that_present_companyId = true;
      if (this_present_companyId || that_present_companyId) {
        if (!(this_present_companyId && that_present_companyId))
          return false;
        if (this.companyId != that.companyId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + startUserId;

      hashCode = hashCode * 8191 + endUserId;

      hashCode = hashCode * 8191 + companyId;

      return hashCode;
    }

    @Override
    public int compareTo(fetchShortestPath_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetStartUserId()).compareTo(other.isSetStartUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startUserId, other.startUserId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEndUserId()).compareTo(other.isSetEndUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endUserId, other.endUserId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompanyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fetchShortestPath_args(");
      boolean first = true;

      sb.append("startUserId:");
      sb.append(this.startUserId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endUserId:");
      sb.append(this.endUserId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("companyId:");
      sb.append(this.companyId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchShortestPath_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchShortestPath_argsStandardScheme getScheme() {
        return new fetchShortestPath_argsStandardScheme();
      }
    }

    private static class fetchShortestPath_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetchShortestPath_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchShortestPath_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // START_USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.startUserId = iprot.readI32();
                struct.setStartUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // END_USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.endUserId = iprot.readI32();
                struct.setEndUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COMPANY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.companyId = iprot.readI32();
                struct.setCompanyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchShortestPath_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(START_USER_ID_FIELD_DESC);
        oprot.writeI32(struct.startUserId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_USER_ID_FIELD_DESC);
        oprot.writeI32(struct.endUserId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.companyId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchShortestPath_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchShortestPath_argsTupleScheme getScheme() {
        return new fetchShortestPath_argsTupleScheme();
      }
    }

    private static class fetchShortestPath_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetchShortestPath_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchShortestPath_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetStartUserId()) {
          optionals.set(0);
        }
        if (struct.isSetEndUserId()) {
          optionals.set(1);
        }
        if (struct.isSetCompanyId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetStartUserId()) {
          oprot.writeI32(struct.startUserId);
        }
        if (struct.isSetEndUserId()) {
          oprot.writeI32(struct.endUserId);
        }
        if (struct.isSetCompanyId()) {
          oprot.writeI32(struct.companyId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchShortestPath_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.startUserId = iprot.readI32();
          struct.setStartUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.endUserId = iprot.readI32();
          struct.setEndUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.companyId = iprot.readI32();
          struct.setCompanyIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fetchShortestPath_result implements org.apache.thrift.TBase<fetchShortestPath_result, fetchShortestPath_result._Fields>, java.io.Serializable, Cloneable, Comparable<fetchShortestPath_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchShortestPath_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetchShortestPath_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetchShortestPath_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> success; // required
    public @org.apache.thrift.annotation.Nullable com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchShortestPath_result.class, metaDataMap);
    }

    public fetchShortestPath_result() {
    }

    public fetchShortestPath_result(
      java.util.List<java.lang.Integer> success,
      com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchShortestPath_result(fetchShortestPath_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.Integer> __this__success = new java.util.ArrayList<java.lang.Integer>(other.success);
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public fetchShortestPath_result deepCopy() {
      return new fetchShortestPath_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.Integer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(int elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.Integer>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.Integer> getSuccess() {
      return this.success;
    }

    public fetchShortestPath_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public fetchShortestPath_result setE(@org.apache.thrift.annotation.Nullable com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.Integer>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchShortestPath_result)
        return this.equals((fetchShortestPath_result)that);
      return false;
    }

    public boolean equals(fetchShortestPath_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(fetchShortestPath_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fetchShortestPath_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchShortestPath_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchShortestPath_resultStandardScheme getScheme() {
        return new fetchShortestPath_resultStandardScheme();
      }
    }

    private static class fetchShortestPath_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetchShortestPath_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchShortestPath_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.Integer>(_list16.size);
                  int _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = iprot.readI32();
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchShortestPath_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (int _iter19 : struct.success)
            {
              oprot.writeI32(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchShortestPath_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchShortestPath_resultTupleScheme getScheme() {
        return new fetchShortestPath_resultTupleScheme();
      }
    }

    private static class fetchShortestPath_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetchShortestPath_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchShortestPath_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (int _iter20 : struct.success)
            {
              oprot.writeI32(_iter20);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchShortestPath_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.Integer>(_list21.size);
            int _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = iprot.readI32();
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
