/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.userdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-04-12")
public class UserUserTmpDO implements org.apache.thrift.TBase<UserUserTmpDO, UserUserTmpDO._Fields>, java.io.Serializable, Cloneable, Comparable<UserUserTmpDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserUserTmpDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IS_DISABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isDisable", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField RANK_FIELD_DESC = new org.apache.thrift.protocol.TField("rank", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField REGISTER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("registerTime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REGISTER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("registerIp", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LAST_LOGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLoginTime", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField LAST_LOGIN_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLoginIp", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField LOGIN_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("loginCount", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField ACTIVATION_FIELD_DESC = new org.apache.thrift.protocol.TField("activation", org.apache.thrift.protocol.TType.BYTE, (short)13);
  private static final org.apache.thrift.protocol.TField ACTIVATION_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("activationCode", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField HEADIMG_FIELD_DESC = new org.apache.thrift.protocol.TField("headimg", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField NATIONAL_CODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nationalCodeId", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField WECHAT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("wechatId", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField UNIONID_FIELD_DESC = new org.apache.thrift.protocol.TField("unionid", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField COMPANY_FIELD_DESC = new org.apache.thrift.protocol.TField("company", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField PARENTID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentid", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField NICKNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickname", org.apache.thrift.protocol.TType.STRING, (short)25);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UserUserTmpDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UserUserTmpDOTupleSchemeFactory();

  public int id; // optional
  public java.lang.String username; // optional
  public java.lang.String password; // optional
  public byte isDisable; // optional
  public int rank; // optional
  public java.lang.String registerTime; // optional
  public java.lang.String registerIp; // optional
  public java.lang.String lastLoginTime; // optional
  public java.lang.String lastLoginIp; // optional
  public int loginCount; // optional
  public int mobile; // optional
  public java.lang.String email; // optional
  public byte activation; // optional
  public java.lang.String activationCode; // optional
  public java.lang.String token; // optional
  public java.lang.String name; // optional
  public java.lang.String headimg; // optional
  public int nationalCodeId; // optional
  public int wechatId; // optional
  public java.lang.String unionid; // optional
  public double source; // optional
  public java.lang.String company; // optional
  public java.lang.String position; // optional
  public int parentid; // optional
  public java.lang.String nickname; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    USERNAME((short)2, "username"),
    PASSWORD((short)3, "password"),
    IS_DISABLE((short)4, "isDisable"),
    RANK((short)5, "rank"),
    REGISTER_TIME((short)6, "registerTime"),
    REGISTER_IP((short)7, "registerIp"),
    LAST_LOGIN_TIME((short)8, "lastLoginTime"),
    LAST_LOGIN_IP((short)9, "lastLoginIp"),
    LOGIN_COUNT((short)10, "loginCount"),
    MOBILE((short)11, "mobile"),
    EMAIL((short)12, "email"),
    ACTIVATION((short)13, "activation"),
    ACTIVATION_CODE((short)14, "activationCode"),
    TOKEN((short)15, "token"),
    NAME((short)16, "name"),
    HEADIMG((short)17, "headimg"),
    NATIONAL_CODE_ID((short)18, "nationalCodeId"),
    WECHAT_ID((short)19, "wechatId"),
    UNIONID((short)20, "unionid"),
    SOURCE((short)21, "source"),
    COMPANY((short)22, "company"),
    POSITION((short)23, "position"),
    PARENTID((short)24, "parentid"),
    NICKNAME((short)25, "nickname");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // USERNAME
          return USERNAME;
        case 3: // PASSWORD
          return PASSWORD;
        case 4: // IS_DISABLE
          return IS_DISABLE;
        case 5: // RANK
          return RANK;
        case 6: // REGISTER_TIME
          return REGISTER_TIME;
        case 7: // REGISTER_IP
          return REGISTER_IP;
        case 8: // LAST_LOGIN_TIME
          return LAST_LOGIN_TIME;
        case 9: // LAST_LOGIN_IP
          return LAST_LOGIN_IP;
        case 10: // LOGIN_COUNT
          return LOGIN_COUNT;
        case 11: // MOBILE
          return MOBILE;
        case 12: // EMAIL
          return EMAIL;
        case 13: // ACTIVATION
          return ACTIVATION;
        case 14: // ACTIVATION_CODE
          return ACTIVATION_CODE;
        case 15: // TOKEN
          return TOKEN;
        case 16: // NAME
          return NAME;
        case 17: // HEADIMG
          return HEADIMG;
        case 18: // NATIONAL_CODE_ID
          return NATIONAL_CODE_ID;
        case 19: // WECHAT_ID
          return WECHAT_ID;
        case 20: // UNIONID
          return UNIONID;
        case 21: // SOURCE
          return SOURCE;
        case 22: // COMPANY
          return COMPANY;
        case 23: // POSITION
          return POSITION;
        case 24: // PARENTID
          return PARENTID;
        case 25: // NICKNAME
          return NICKNAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __ISDISABLE_ISSET_ID = 1;
  private static final int __RANK_ISSET_ID = 2;
  private static final int __LOGINCOUNT_ISSET_ID = 3;
  private static final int __MOBILE_ISSET_ID = 4;
  private static final int __ACTIVATION_ISSET_ID = 5;
  private static final int __NATIONALCODEID_ISSET_ID = 6;
  private static final int __WECHATID_ISSET_ID = 7;
  private static final int __SOURCE_ISSET_ID = 8;
  private static final int __PARENTID_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.USERNAME,_Fields.PASSWORD,_Fields.IS_DISABLE,_Fields.RANK,_Fields.REGISTER_TIME,_Fields.REGISTER_IP,_Fields.LAST_LOGIN_TIME,_Fields.LAST_LOGIN_IP,_Fields.LOGIN_COUNT,_Fields.MOBILE,_Fields.EMAIL,_Fields.ACTIVATION,_Fields.ACTIVATION_CODE,_Fields.TOKEN,_Fields.NAME,_Fields.HEADIMG,_Fields.NATIONAL_CODE_ID,_Fields.WECHAT_ID,_Fields.UNIONID,_Fields.SOURCE,_Fields.COMPANY,_Fields.POSITION,_Fields.PARENTID,_Fields.NICKNAME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_DISABLE, new org.apache.thrift.meta_data.FieldMetaData("isDisable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.RANK, new org.apache.thrift.meta_data.FieldMetaData("rank", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REGISTER_TIME, new org.apache.thrift.meta_data.FieldMetaData("registerTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGISTER_IP, new org.apache.thrift.meta_data.FieldMetaData("registerIp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_LOGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastLoginTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_LOGIN_IP, new org.apache.thrift.meta_data.FieldMetaData("lastLoginIp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_COUNT, new org.apache.thrift.meta_data.FieldMetaData("loginCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTIVATION, new org.apache.thrift.meta_data.FieldMetaData("activation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ACTIVATION_CODE, new org.apache.thrift.meta_data.FieldMetaData("activationCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HEADIMG, new org.apache.thrift.meta_data.FieldMetaData("headimg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NATIONAL_CODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nationalCodeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WECHAT_ID, new org.apache.thrift.meta_data.FieldMetaData("wechatId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNIONID, new org.apache.thrift.meta_data.FieldMetaData("unionid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COMPANY, new org.apache.thrift.meta_data.FieldMetaData("company", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENTID, new org.apache.thrift.meta_data.FieldMetaData("parentid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NICKNAME, new org.apache.thrift.meta_data.FieldMetaData("nickname", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserUserTmpDO.class, metaDataMap);
  }

  public UserUserTmpDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserUserTmpDO(UserUserTmpDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    this.isDisable = other.isDisable;
    this.rank = other.rank;
    if (other.isSetRegisterTime()) {
      this.registerTime = other.registerTime;
    }
    if (other.isSetRegisterIp()) {
      this.registerIp = other.registerIp;
    }
    if (other.isSetLastLoginTime()) {
      this.lastLoginTime = other.lastLoginTime;
    }
    if (other.isSetLastLoginIp()) {
      this.lastLoginIp = other.lastLoginIp;
    }
    this.loginCount = other.loginCount;
    this.mobile = other.mobile;
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    this.activation = other.activation;
    if (other.isSetActivationCode()) {
      this.activationCode = other.activationCode;
    }
    if (other.isSetToken()) {
      this.token = other.token;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetHeadimg()) {
      this.headimg = other.headimg;
    }
    this.nationalCodeId = other.nationalCodeId;
    this.wechatId = other.wechatId;
    if (other.isSetUnionid()) {
      this.unionid = other.unionid;
    }
    this.source = other.source;
    if (other.isSetCompany()) {
      this.company = other.company;
    }
    if (other.isSetPosition()) {
      this.position = other.position;
    }
    this.parentid = other.parentid;
    if (other.isSetNickname()) {
      this.nickname = other.nickname;
    }
  }

  public UserUserTmpDO deepCopy() {
    return new UserUserTmpDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.username = null;
    this.password = null;
    setIsDisableIsSet(false);
    this.isDisable = 0;
    setRankIsSet(false);
    this.rank = 0;
    this.registerTime = null;
    this.registerIp = null;
    this.lastLoginTime = null;
    this.lastLoginIp = null;
    setLoginCountIsSet(false);
    this.loginCount = 0;
    setMobileIsSet(false);
    this.mobile = 0;
    this.email = null;
    setActivationIsSet(false);
    this.activation = 0;
    this.activationCode = null;
    this.token = null;
    this.name = null;
    this.headimg = null;
    setNationalCodeIdIsSet(false);
    this.nationalCodeId = 0;
    setWechatIdIsSet(false);
    this.wechatId = 0;
    this.unionid = null;
    setSourceIsSet(false);
    this.source = 0.0;
    this.company = null;
    this.position = null;
    setParentidIsSet(false);
    this.parentid = 0;
    this.nickname = null;
  }

  public int getId() {
    return this.id;
  }

  public UserUserTmpDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getUsername() {
    return this.username;
  }

  public UserUserTmpDO setUsername(java.lang.String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public java.lang.String getPassword() {
    return this.password;
  }

  public UserUserTmpDO setPassword(java.lang.String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public byte getIsDisable() {
    return this.isDisable;
  }

  public UserUserTmpDO setIsDisable(byte isDisable) {
    this.isDisable = isDisable;
    setIsDisableIsSet(true);
    return this;
  }

  public void unsetIsDisable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISDISABLE_ISSET_ID);
  }

  /** Returns true if field isDisable is set (has been assigned a value) and false otherwise */
  public boolean isSetIsDisable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISDISABLE_ISSET_ID);
  }

  public void setIsDisableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISDISABLE_ISSET_ID, value);
  }

  public int getRank() {
    return this.rank;
  }

  public UserUserTmpDO setRank(int rank) {
    this.rank = rank;
    setRankIsSet(true);
    return this;
  }

  public void unsetRank() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RANK_ISSET_ID);
  }

  /** Returns true if field rank is set (has been assigned a value) and false otherwise */
  public boolean isSetRank() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RANK_ISSET_ID);
  }

  public void setRankIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RANK_ISSET_ID, value);
  }

  public java.lang.String getRegisterTime() {
    return this.registerTime;
  }

  public UserUserTmpDO setRegisterTime(java.lang.String registerTime) {
    this.registerTime = registerTime;
    return this;
  }

  public void unsetRegisterTime() {
    this.registerTime = null;
  }

  /** Returns true if field registerTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRegisterTime() {
    return this.registerTime != null;
  }

  public void setRegisterTimeIsSet(boolean value) {
    if (!value) {
      this.registerTime = null;
    }
  }

  public java.lang.String getRegisterIp() {
    return this.registerIp;
  }

  public UserUserTmpDO setRegisterIp(java.lang.String registerIp) {
    this.registerIp = registerIp;
    return this;
  }

  public void unsetRegisterIp() {
    this.registerIp = null;
  }

  /** Returns true if field registerIp is set (has been assigned a value) and false otherwise */
  public boolean isSetRegisterIp() {
    return this.registerIp != null;
  }

  public void setRegisterIpIsSet(boolean value) {
    if (!value) {
      this.registerIp = null;
    }
  }

  public java.lang.String getLastLoginTime() {
    return this.lastLoginTime;
  }

  public UserUserTmpDO setLastLoginTime(java.lang.String lastLoginTime) {
    this.lastLoginTime = lastLoginTime;
    return this;
  }

  public void unsetLastLoginTime() {
    this.lastLoginTime = null;
  }

  /** Returns true if field lastLoginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastLoginTime() {
    return this.lastLoginTime != null;
  }

  public void setLastLoginTimeIsSet(boolean value) {
    if (!value) {
      this.lastLoginTime = null;
    }
  }

  public java.lang.String getLastLoginIp() {
    return this.lastLoginIp;
  }

  public UserUserTmpDO setLastLoginIp(java.lang.String lastLoginIp) {
    this.lastLoginIp = lastLoginIp;
    return this;
  }

  public void unsetLastLoginIp() {
    this.lastLoginIp = null;
  }

  /** Returns true if field lastLoginIp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastLoginIp() {
    return this.lastLoginIp != null;
  }

  public void setLastLoginIpIsSet(boolean value) {
    if (!value) {
      this.lastLoginIp = null;
    }
  }

  public int getLoginCount() {
    return this.loginCount;
  }

  public UserUserTmpDO setLoginCount(int loginCount) {
    this.loginCount = loginCount;
    setLoginCountIsSet(true);
    return this;
  }

  public void unsetLoginCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOGINCOUNT_ISSET_ID);
  }

  /** Returns true if field loginCount is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOGINCOUNT_ISSET_ID);
  }

  public void setLoginCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOGINCOUNT_ISSET_ID, value);
  }

  public int getMobile() {
    return this.mobile;
  }

  public UserUserTmpDO setMobile(int mobile) {
    this.mobile = mobile;
    setMobileIsSet(true);
    return this;
  }

  public void unsetMobile() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MOBILE_ISSET_ID);
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MOBILE_ISSET_ID);
  }

  public void setMobileIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MOBILE_ISSET_ID, value);
  }

  public java.lang.String getEmail() {
    return this.email;
  }

  public UserUserTmpDO setEmail(java.lang.String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public byte getActivation() {
    return this.activation;
  }

  public UserUserTmpDO setActivation(byte activation) {
    this.activation = activation;
    setActivationIsSet(true);
    return this;
  }

  public void unsetActivation() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACTIVATION_ISSET_ID);
  }

  /** Returns true if field activation is set (has been assigned a value) and false otherwise */
  public boolean isSetActivation() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACTIVATION_ISSET_ID);
  }

  public void setActivationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACTIVATION_ISSET_ID, value);
  }

  public java.lang.String getActivationCode() {
    return this.activationCode;
  }

  public UserUserTmpDO setActivationCode(java.lang.String activationCode) {
    this.activationCode = activationCode;
    return this;
  }

  public void unsetActivationCode() {
    this.activationCode = null;
  }

  /** Returns true if field activationCode is set (has been assigned a value) and false otherwise */
  public boolean isSetActivationCode() {
    return this.activationCode != null;
  }

  public void setActivationCodeIsSet(boolean value) {
    if (!value) {
      this.activationCode = null;
    }
  }

  public java.lang.String getToken() {
    return this.token;
  }

  public UserUserTmpDO setToken(java.lang.String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  public java.lang.String getName() {
    return this.name;
  }

  public UserUserTmpDO setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public java.lang.String getHeadimg() {
    return this.headimg;
  }

  public UserUserTmpDO setHeadimg(java.lang.String headimg) {
    this.headimg = headimg;
    return this;
  }

  public void unsetHeadimg() {
    this.headimg = null;
  }

  /** Returns true if field headimg is set (has been assigned a value) and false otherwise */
  public boolean isSetHeadimg() {
    return this.headimg != null;
  }

  public void setHeadimgIsSet(boolean value) {
    if (!value) {
      this.headimg = null;
    }
  }

  public int getNationalCodeId() {
    return this.nationalCodeId;
  }

  public UserUserTmpDO setNationalCodeId(int nationalCodeId) {
    this.nationalCodeId = nationalCodeId;
    setNationalCodeIdIsSet(true);
    return this;
  }

  public void unsetNationalCodeId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NATIONALCODEID_ISSET_ID);
  }

  /** Returns true if field nationalCodeId is set (has been assigned a value) and false otherwise */
  public boolean isSetNationalCodeId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NATIONALCODEID_ISSET_ID);
  }

  public void setNationalCodeIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NATIONALCODEID_ISSET_ID, value);
  }

  public int getWechatId() {
    return this.wechatId;
  }

  public UserUserTmpDO setWechatId(int wechatId) {
    this.wechatId = wechatId;
    setWechatIdIsSet(true);
    return this;
  }

  public void unsetWechatId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WECHATID_ISSET_ID);
  }

  /** Returns true if field wechatId is set (has been assigned a value) and false otherwise */
  public boolean isSetWechatId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WECHATID_ISSET_ID);
  }

  public void setWechatIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WECHATID_ISSET_ID, value);
  }

  public java.lang.String getUnionid() {
    return this.unionid;
  }

  public UserUserTmpDO setUnionid(java.lang.String unionid) {
    this.unionid = unionid;
    return this;
  }

  public void unsetUnionid() {
    this.unionid = null;
  }

  /** Returns true if field unionid is set (has been assigned a value) and false otherwise */
  public boolean isSetUnionid() {
    return this.unionid != null;
  }

  public void setUnionidIsSet(boolean value) {
    if (!value) {
      this.unionid = null;
    }
  }

  public double getSource() {
    return this.source;
  }

  public UserUserTmpDO setSource(double source) {
    this.source = source;
    setSourceIsSet(true);
    return this;
  }

  public void unsetSource() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SOURCE_ISSET_ID);
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SOURCE_ISSET_ID);
  }

  public void setSourceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SOURCE_ISSET_ID, value);
  }

  public java.lang.String getCompany() {
    return this.company;
  }

  public UserUserTmpDO setCompany(java.lang.String company) {
    this.company = company;
    return this;
  }

  public void unsetCompany() {
    this.company = null;
  }

  /** Returns true if field company is set (has been assigned a value) and false otherwise */
  public boolean isSetCompany() {
    return this.company != null;
  }

  public void setCompanyIsSet(boolean value) {
    if (!value) {
      this.company = null;
    }
  }

  public java.lang.String getPosition() {
    return this.position;
  }

  public UserUserTmpDO setPosition(java.lang.String position) {
    this.position = position;
    return this;
  }

  public void unsetPosition() {
    this.position = null;
  }

  /** Returns true if field position is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition() {
    return this.position != null;
  }

  public void setPositionIsSet(boolean value) {
    if (!value) {
      this.position = null;
    }
  }

  public int getParentid() {
    return this.parentid;
  }

  public UserUserTmpDO setParentid(int parentid) {
    this.parentid = parentid;
    setParentidIsSet(true);
    return this;
  }

  public void unsetParentid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  /** Returns true if field parentid is set (has been assigned a value) and false otherwise */
  public boolean isSetParentid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  public void setParentidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARENTID_ISSET_ID, value);
  }

  public java.lang.String getNickname() {
    return this.nickname;
  }

  public UserUserTmpDO setNickname(java.lang.String nickname) {
    this.nickname = nickname;
    return this;
  }

  public void unsetNickname() {
    this.nickname = null;
  }

  /** Returns true if field nickname is set (has been assigned a value) and false otherwise */
  public boolean isSetNickname() {
    return this.nickname != null;
  }

  public void setNicknameIsSet(boolean value) {
    if (!value) {
      this.nickname = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((java.lang.String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((java.lang.String)value);
      }
      break;

    case IS_DISABLE:
      if (value == null) {
        unsetIsDisable();
      } else {
        setIsDisable((java.lang.Byte)value);
      }
      break;

    case RANK:
      if (value == null) {
        unsetRank();
      } else {
        setRank((java.lang.Integer)value);
      }
      break;

    case REGISTER_TIME:
      if (value == null) {
        unsetRegisterTime();
      } else {
        setRegisterTime((java.lang.String)value);
      }
      break;

    case REGISTER_IP:
      if (value == null) {
        unsetRegisterIp();
      } else {
        setRegisterIp((java.lang.String)value);
      }
      break;

    case LAST_LOGIN_TIME:
      if (value == null) {
        unsetLastLoginTime();
      } else {
        setLastLoginTime((java.lang.String)value);
      }
      break;

    case LAST_LOGIN_IP:
      if (value == null) {
        unsetLastLoginIp();
      } else {
        setLastLoginIp((java.lang.String)value);
      }
      break;

    case LOGIN_COUNT:
      if (value == null) {
        unsetLoginCount();
      } else {
        setLoginCount((java.lang.Integer)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((java.lang.Integer)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((java.lang.String)value);
      }
      break;

    case ACTIVATION:
      if (value == null) {
        unsetActivation();
      } else {
        setActivation((java.lang.Byte)value);
      }
      break;

    case ACTIVATION_CODE:
      if (value == null) {
        unsetActivationCode();
      } else {
        setActivationCode((java.lang.String)value);
      }
      break;

    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((java.lang.String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case HEADIMG:
      if (value == null) {
        unsetHeadimg();
      } else {
        setHeadimg((java.lang.String)value);
      }
      break;

    case NATIONAL_CODE_ID:
      if (value == null) {
        unsetNationalCodeId();
      } else {
        setNationalCodeId((java.lang.Integer)value);
      }
      break;

    case WECHAT_ID:
      if (value == null) {
        unsetWechatId();
      } else {
        setWechatId((java.lang.Integer)value);
      }
      break;

    case UNIONID:
      if (value == null) {
        unsetUnionid();
      } else {
        setUnionid((java.lang.String)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((java.lang.Double)value);
      }
      break;

    case COMPANY:
      if (value == null) {
        unsetCompany();
      } else {
        setCompany((java.lang.String)value);
      }
      break;

    case POSITION:
      if (value == null) {
        unsetPosition();
      } else {
        setPosition((java.lang.String)value);
      }
      break;

    case PARENTID:
      if (value == null) {
        unsetParentid();
      } else {
        setParentid((java.lang.Integer)value);
      }
      break;

    case NICKNAME:
      if (value == null) {
        unsetNickname();
      } else {
        setNickname((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case USERNAME:
      return getUsername();

    case PASSWORD:
      return getPassword();

    case IS_DISABLE:
      return getIsDisable();

    case RANK:
      return getRank();

    case REGISTER_TIME:
      return getRegisterTime();

    case REGISTER_IP:
      return getRegisterIp();

    case LAST_LOGIN_TIME:
      return getLastLoginTime();

    case LAST_LOGIN_IP:
      return getLastLoginIp();

    case LOGIN_COUNT:
      return getLoginCount();

    case MOBILE:
      return getMobile();

    case EMAIL:
      return getEmail();

    case ACTIVATION:
      return getActivation();

    case ACTIVATION_CODE:
      return getActivationCode();

    case TOKEN:
      return getToken();

    case NAME:
      return getName();

    case HEADIMG:
      return getHeadimg();

    case NATIONAL_CODE_ID:
      return getNationalCodeId();

    case WECHAT_ID:
      return getWechatId();

    case UNIONID:
      return getUnionid();

    case SOURCE:
      return getSource();

    case COMPANY:
      return getCompany();

    case POSITION:
      return getPosition();

    case PARENTID:
      return getParentid();

    case NICKNAME:
      return getNickname();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case USERNAME:
      return isSetUsername();
    case PASSWORD:
      return isSetPassword();
    case IS_DISABLE:
      return isSetIsDisable();
    case RANK:
      return isSetRank();
    case REGISTER_TIME:
      return isSetRegisterTime();
    case REGISTER_IP:
      return isSetRegisterIp();
    case LAST_LOGIN_TIME:
      return isSetLastLoginTime();
    case LAST_LOGIN_IP:
      return isSetLastLoginIp();
    case LOGIN_COUNT:
      return isSetLoginCount();
    case MOBILE:
      return isSetMobile();
    case EMAIL:
      return isSetEmail();
    case ACTIVATION:
      return isSetActivation();
    case ACTIVATION_CODE:
      return isSetActivationCode();
    case TOKEN:
      return isSetToken();
    case NAME:
      return isSetName();
    case HEADIMG:
      return isSetHeadimg();
    case NATIONAL_CODE_ID:
      return isSetNationalCodeId();
    case WECHAT_ID:
      return isSetWechatId();
    case UNIONID:
      return isSetUnionid();
    case SOURCE:
      return isSetSource();
    case COMPANY:
      return isSetCompany();
    case POSITION:
      return isSetPosition();
    case PARENTID:
      return isSetParentid();
    case NICKNAME:
      return isSetNickname();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof UserUserTmpDO)
      return this.equals((UserUserTmpDO)that);
    return false;
  }

  public boolean equals(UserUserTmpDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_isDisable = true && this.isSetIsDisable();
    boolean that_present_isDisable = true && that.isSetIsDisable();
    if (this_present_isDisable || that_present_isDisable) {
      if (!(this_present_isDisable && that_present_isDisable))
        return false;
      if (this.isDisable != that.isDisable)
        return false;
    }

    boolean this_present_rank = true && this.isSetRank();
    boolean that_present_rank = true && that.isSetRank();
    if (this_present_rank || that_present_rank) {
      if (!(this_present_rank && that_present_rank))
        return false;
      if (this.rank != that.rank)
        return false;
    }

    boolean this_present_registerTime = true && this.isSetRegisterTime();
    boolean that_present_registerTime = true && that.isSetRegisterTime();
    if (this_present_registerTime || that_present_registerTime) {
      if (!(this_present_registerTime && that_present_registerTime))
        return false;
      if (!this.registerTime.equals(that.registerTime))
        return false;
    }

    boolean this_present_registerIp = true && this.isSetRegisterIp();
    boolean that_present_registerIp = true && that.isSetRegisterIp();
    if (this_present_registerIp || that_present_registerIp) {
      if (!(this_present_registerIp && that_present_registerIp))
        return false;
      if (!this.registerIp.equals(that.registerIp))
        return false;
    }

    boolean this_present_lastLoginTime = true && this.isSetLastLoginTime();
    boolean that_present_lastLoginTime = true && that.isSetLastLoginTime();
    if (this_present_lastLoginTime || that_present_lastLoginTime) {
      if (!(this_present_lastLoginTime && that_present_lastLoginTime))
        return false;
      if (!this.lastLoginTime.equals(that.lastLoginTime))
        return false;
    }

    boolean this_present_lastLoginIp = true && this.isSetLastLoginIp();
    boolean that_present_lastLoginIp = true && that.isSetLastLoginIp();
    if (this_present_lastLoginIp || that_present_lastLoginIp) {
      if (!(this_present_lastLoginIp && that_present_lastLoginIp))
        return false;
      if (!this.lastLoginIp.equals(that.lastLoginIp))
        return false;
    }

    boolean this_present_loginCount = true && this.isSetLoginCount();
    boolean that_present_loginCount = true && that.isSetLoginCount();
    if (this_present_loginCount || that_present_loginCount) {
      if (!(this_present_loginCount && that_present_loginCount))
        return false;
      if (this.loginCount != that.loginCount)
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (this.mobile != that.mobile)
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_activation = true && this.isSetActivation();
    boolean that_present_activation = true && that.isSetActivation();
    if (this_present_activation || that_present_activation) {
      if (!(this_present_activation && that_present_activation))
        return false;
      if (this.activation != that.activation)
        return false;
    }

    boolean this_present_activationCode = true && this.isSetActivationCode();
    boolean that_present_activationCode = true && that.isSetActivationCode();
    if (this_present_activationCode || that_present_activationCode) {
      if (!(this_present_activationCode && that_present_activationCode))
        return false;
      if (!this.activationCode.equals(that.activationCode))
        return false;
    }

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_headimg = true && this.isSetHeadimg();
    boolean that_present_headimg = true && that.isSetHeadimg();
    if (this_present_headimg || that_present_headimg) {
      if (!(this_present_headimg && that_present_headimg))
        return false;
      if (!this.headimg.equals(that.headimg))
        return false;
    }

    boolean this_present_nationalCodeId = true && this.isSetNationalCodeId();
    boolean that_present_nationalCodeId = true && that.isSetNationalCodeId();
    if (this_present_nationalCodeId || that_present_nationalCodeId) {
      if (!(this_present_nationalCodeId && that_present_nationalCodeId))
        return false;
      if (this.nationalCodeId != that.nationalCodeId)
        return false;
    }

    boolean this_present_wechatId = true && this.isSetWechatId();
    boolean that_present_wechatId = true && that.isSetWechatId();
    if (this_present_wechatId || that_present_wechatId) {
      if (!(this_present_wechatId && that_present_wechatId))
        return false;
      if (this.wechatId != that.wechatId)
        return false;
    }

    boolean this_present_unionid = true && this.isSetUnionid();
    boolean that_present_unionid = true && that.isSetUnionid();
    if (this_present_unionid || that_present_unionid) {
      if (!(this_present_unionid && that_present_unionid))
        return false;
      if (!this.unionid.equals(that.unionid))
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (this.source != that.source)
        return false;
    }

    boolean this_present_company = true && this.isSetCompany();
    boolean that_present_company = true && that.isSetCompany();
    if (this_present_company || that_present_company) {
      if (!(this_present_company && that_present_company))
        return false;
      if (!this.company.equals(that.company))
        return false;
    }

    boolean this_present_position = true && this.isSetPosition();
    boolean that_present_position = true && that.isSetPosition();
    if (this_present_position || that_present_position) {
      if (!(this_present_position && that_present_position))
        return false;
      if (!this.position.equals(that.position))
        return false;
    }

    boolean this_present_parentid = true && this.isSetParentid();
    boolean that_present_parentid = true && that.isSetParentid();
    if (this_present_parentid || that_present_parentid) {
      if (!(this_present_parentid && that_present_parentid))
        return false;
      if (this.parentid != that.parentid)
        return false;
    }

    boolean this_present_nickname = true && this.isSetNickname();
    boolean that_present_nickname = true && that.isSetNickname();
    if (this_present_nickname || that_present_nickname) {
      if (!(this_present_nickname && that_present_nickname))
        return false;
      if (!this.nickname.equals(that.nickname))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
    if (isSetUsername())
      hashCode = hashCode * 8191 + username.hashCode();

    hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
    if (isSetPassword())
      hashCode = hashCode * 8191 + password.hashCode();

    hashCode = hashCode * 8191 + ((isSetIsDisable()) ? 131071 : 524287);
    if (isSetIsDisable())
      hashCode = hashCode * 8191 + (int) (isDisable);

    hashCode = hashCode * 8191 + ((isSetRank()) ? 131071 : 524287);
    if (isSetRank())
      hashCode = hashCode * 8191 + rank;

    hashCode = hashCode * 8191 + ((isSetRegisterTime()) ? 131071 : 524287);
    if (isSetRegisterTime())
      hashCode = hashCode * 8191 + registerTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetRegisterIp()) ? 131071 : 524287);
    if (isSetRegisterIp())
      hashCode = hashCode * 8191 + registerIp.hashCode();

    hashCode = hashCode * 8191 + ((isSetLastLoginTime()) ? 131071 : 524287);
    if (isSetLastLoginTime())
      hashCode = hashCode * 8191 + lastLoginTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetLastLoginIp()) ? 131071 : 524287);
    if (isSetLastLoginIp())
      hashCode = hashCode * 8191 + lastLoginIp.hashCode();

    hashCode = hashCode * 8191 + ((isSetLoginCount()) ? 131071 : 524287);
    if (isSetLoginCount())
      hashCode = hashCode * 8191 + loginCount;

    hashCode = hashCode * 8191 + ((isSetMobile()) ? 131071 : 524287);
    if (isSetMobile())
      hashCode = hashCode * 8191 + mobile;

    hashCode = hashCode * 8191 + ((isSetEmail()) ? 131071 : 524287);
    if (isSetEmail())
      hashCode = hashCode * 8191 + email.hashCode();

    hashCode = hashCode * 8191 + ((isSetActivation()) ? 131071 : 524287);
    if (isSetActivation())
      hashCode = hashCode * 8191 + (int) (activation);

    hashCode = hashCode * 8191 + ((isSetActivationCode()) ? 131071 : 524287);
    if (isSetActivationCode())
      hashCode = hashCode * 8191 + activationCode.hashCode();

    hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
    if (isSetToken())
      hashCode = hashCode * 8191 + token.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetHeadimg()) ? 131071 : 524287);
    if (isSetHeadimg())
      hashCode = hashCode * 8191 + headimg.hashCode();

    hashCode = hashCode * 8191 + ((isSetNationalCodeId()) ? 131071 : 524287);
    if (isSetNationalCodeId())
      hashCode = hashCode * 8191 + nationalCodeId;

    hashCode = hashCode * 8191 + ((isSetWechatId()) ? 131071 : 524287);
    if (isSetWechatId())
      hashCode = hashCode * 8191 + wechatId;

    hashCode = hashCode * 8191 + ((isSetUnionid()) ? 131071 : 524287);
    if (isSetUnionid())
      hashCode = hashCode * 8191 + unionid.hashCode();

    hashCode = hashCode * 8191 + ((isSetSource()) ? 131071 : 524287);
    if (isSetSource())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(source);

    hashCode = hashCode * 8191 + ((isSetCompany()) ? 131071 : 524287);
    if (isSetCompany())
      hashCode = hashCode * 8191 + company.hashCode();

    hashCode = hashCode * 8191 + ((isSetPosition()) ? 131071 : 524287);
    if (isSetPosition())
      hashCode = hashCode * 8191 + position.hashCode();

    hashCode = hashCode * 8191 + ((isSetParentid()) ? 131071 : 524287);
    if (isSetParentid())
      hashCode = hashCode * 8191 + parentid;

    hashCode = hashCode * 8191 + ((isSetNickname()) ? 131071 : 524287);
    if (isSetNickname())
      hashCode = hashCode * 8191 + nickname.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(UserUserTmpDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsDisable()).compareTo(other.isSetIsDisable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsDisable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDisable, other.isDisable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRank()).compareTo(other.isSetRank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rank, other.rank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRegisterTime()).compareTo(other.isSetRegisterTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegisterTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registerTime, other.registerTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRegisterIp()).compareTo(other.isSetRegisterIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegisterIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registerIp, other.registerIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLastLoginTime()).compareTo(other.isSetLastLoginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastLoginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLoginTime, other.lastLoginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLastLoginIp()).compareTo(other.isSetLastLoginIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastLoginIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLoginIp, other.lastLoginIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLoginCount()).compareTo(other.isSetLoginCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginCount, other.loginCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetActivation()).compareTo(other.isSetActivation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activation, other.activation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetActivationCode()).compareTo(other.isSetActivationCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivationCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activationCode, other.activationCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHeadimg()).compareTo(other.isSetHeadimg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeadimg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headimg, other.headimg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNationalCodeId()).compareTo(other.isSetNationalCodeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNationalCodeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nationalCodeId, other.nationalCodeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWechatId()).compareTo(other.isSetWechatId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWechatId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wechatId, other.wechatId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUnionid()).compareTo(other.isSetUnionid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnionid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unionid, other.unionid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompany()).compareTo(other.isSetCompany());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompany()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company, other.company);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParentid()).compareTo(other.isSetParentid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentid, other.parentid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNickname()).compareTo(other.isSetNickname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNickname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickname, other.nickname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("UserUserTmpDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetUsername()) {
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
    }
    if (isSetPassword()) {
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
    }
    if (isSetIsDisable()) {
      if (!first) sb.append(", ");
      sb.append("isDisable:");
      sb.append(this.isDisable);
      first = false;
    }
    if (isSetRank()) {
      if (!first) sb.append(", ");
      sb.append("rank:");
      sb.append(this.rank);
      first = false;
    }
    if (isSetRegisterTime()) {
      if (!first) sb.append(", ");
      sb.append("registerTime:");
      if (this.registerTime == null) {
        sb.append("null");
      } else {
        sb.append(this.registerTime);
      }
      first = false;
    }
    if (isSetRegisterIp()) {
      if (!first) sb.append(", ");
      sb.append("registerIp:");
      if (this.registerIp == null) {
        sb.append("null");
      } else {
        sb.append(this.registerIp);
      }
      first = false;
    }
    if (isSetLastLoginTime()) {
      if (!first) sb.append(", ");
      sb.append("lastLoginTime:");
      if (this.lastLoginTime == null) {
        sb.append("null");
      } else {
        sb.append(this.lastLoginTime);
      }
      first = false;
    }
    if (isSetLastLoginIp()) {
      if (!first) sb.append(", ");
      sb.append("lastLoginIp:");
      if (this.lastLoginIp == null) {
        sb.append("null");
      } else {
        sb.append(this.lastLoginIp);
      }
      first = false;
    }
    if (isSetLoginCount()) {
      if (!first) sb.append(", ");
      sb.append("loginCount:");
      sb.append(this.loginCount);
      first = false;
    }
    if (isSetMobile()) {
      if (!first) sb.append(", ");
      sb.append("mobile:");
      sb.append(this.mobile);
      first = false;
    }
    if (isSetEmail()) {
      if (!first) sb.append(", ");
      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
    }
    if (isSetActivation()) {
      if (!first) sb.append(", ");
      sb.append("activation:");
      sb.append(this.activation);
      first = false;
    }
    if (isSetActivationCode()) {
      if (!first) sb.append(", ");
      sb.append("activationCode:");
      if (this.activationCode == null) {
        sb.append("null");
      } else {
        sb.append(this.activationCode);
      }
      first = false;
    }
    if (isSetToken()) {
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetHeadimg()) {
      if (!first) sb.append(", ");
      sb.append("headimg:");
      if (this.headimg == null) {
        sb.append("null");
      } else {
        sb.append(this.headimg);
      }
      first = false;
    }
    if (isSetNationalCodeId()) {
      if (!first) sb.append(", ");
      sb.append("nationalCodeId:");
      sb.append(this.nationalCodeId);
      first = false;
    }
    if (isSetWechatId()) {
      if (!first) sb.append(", ");
      sb.append("wechatId:");
      sb.append(this.wechatId);
      first = false;
    }
    if (isSetUnionid()) {
      if (!first) sb.append(", ");
      sb.append("unionid:");
      if (this.unionid == null) {
        sb.append("null");
      } else {
        sb.append(this.unionid);
      }
      first = false;
    }
    if (isSetSource()) {
      if (!first) sb.append(", ");
      sb.append("source:");
      sb.append(this.source);
      first = false;
    }
    if (isSetCompany()) {
      if (!first) sb.append(", ");
      sb.append("company:");
      if (this.company == null) {
        sb.append("null");
      } else {
        sb.append(this.company);
      }
      first = false;
    }
    if (isSetPosition()) {
      if (!first) sb.append(", ");
      sb.append("position:");
      if (this.position == null) {
        sb.append("null");
      } else {
        sb.append(this.position);
      }
      first = false;
    }
    if (isSetParentid()) {
      if (!first) sb.append(", ");
      sb.append("parentid:");
      sb.append(this.parentid);
      first = false;
    }
    if (isSetNickname()) {
      if (!first) sb.append(", ");
      sb.append("nickname:");
      if (this.nickname == null) {
        sb.append("null");
      } else {
        sb.append(this.nickname);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserUserTmpDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserUserTmpDOStandardScheme getScheme() {
      return new UserUserTmpDOStandardScheme();
    }
  }

  private static class UserUserTmpDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<UserUserTmpDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserUserTmpDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_DISABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.isDisable = iprot.readByte();
              struct.setIsDisableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RANK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rank = iprot.readI32();
              struct.setRankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REGISTER_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.registerTime = iprot.readString();
              struct.setRegisterTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REGISTER_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.registerIp = iprot.readString();
              struct.setRegisterIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LAST_LOGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastLoginTime = iprot.readString();
              struct.setLastLoginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LAST_LOGIN_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastLoginIp = iprot.readString();
              struct.setLastLoginIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LOGIN_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loginCount = iprot.readI32();
              struct.setLoginCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mobile = iprot.readI32();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ACTIVATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.activation = iprot.readByte();
              struct.setActivationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ACTIVATION_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activationCode = iprot.readString();
              struct.setActivationCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.token = iprot.readString();
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // HEADIMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.headimg = iprot.readString();
              struct.setHeadimgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // NATIONAL_CODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nationalCodeId = iprot.readI32();
              struct.setNationalCodeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // WECHAT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wechatId = iprot.readI32();
              struct.setWechatIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // UNIONID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unionid = iprot.readString();
              struct.setUnionidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.source = iprot.readDouble();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // COMPANY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.company = iprot.readString();
              struct.setCompanyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.position = iprot.readString();
              struct.setPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // PARENTID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parentid = iprot.readI32();
              struct.setParentidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // NICKNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nickname = iprot.readString();
              struct.setNicknameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserUserTmpDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.username != null) {
        if (struct.isSetUsername()) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
      }
      if (struct.password != null) {
        if (struct.isSetPassword()) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsDisable()) {
        oprot.writeFieldBegin(IS_DISABLE_FIELD_DESC);
        oprot.writeByte(struct.isDisable);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRank()) {
        oprot.writeFieldBegin(RANK_FIELD_DESC);
        oprot.writeI32(struct.rank);
        oprot.writeFieldEnd();
      }
      if (struct.registerTime != null) {
        if (struct.isSetRegisterTime()) {
          oprot.writeFieldBegin(REGISTER_TIME_FIELD_DESC);
          oprot.writeString(struct.registerTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.registerIp != null) {
        if (struct.isSetRegisterIp()) {
          oprot.writeFieldBegin(REGISTER_IP_FIELD_DESC);
          oprot.writeString(struct.registerIp);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lastLoginTime != null) {
        if (struct.isSetLastLoginTime()) {
          oprot.writeFieldBegin(LAST_LOGIN_TIME_FIELD_DESC);
          oprot.writeString(struct.lastLoginTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lastLoginIp != null) {
        if (struct.isSetLastLoginIp()) {
          oprot.writeFieldBegin(LAST_LOGIN_IP_FIELD_DESC);
          oprot.writeString(struct.lastLoginIp);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLoginCount()) {
        oprot.writeFieldBegin(LOGIN_COUNT_FIELD_DESC);
        oprot.writeI32(struct.loginCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMobile()) {
        oprot.writeFieldBegin(MOBILE_FIELD_DESC);
        oprot.writeI32(struct.mobile);
        oprot.writeFieldEnd();
      }
      if (struct.email != null) {
        if (struct.isSetEmail()) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetActivation()) {
        oprot.writeFieldBegin(ACTIVATION_FIELD_DESC);
        oprot.writeByte(struct.activation);
        oprot.writeFieldEnd();
      }
      if (struct.activationCode != null) {
        if (struct.isSetActivationCode()) {
          oprot.writeFieldBegin(ACTIVATION_CODE_FIELD_DESC);
          oprot.writeString(struct.activationCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.token != null) {
        if (struct.isSetToken()) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.headimg != null) {
        if (struct.isSetHeadimg()) {
          oprot.writeFieldBegin(HEADIMG_FIELD_DESC);
          oprot.writeString(struct.headimg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNationalCodeId()) {
        oprot.writeFieldBegin(NATIONAL_CODE_ID_FIELD_DESC);
        oprot.writeI32(struct.nationalCodeId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWechatId()) {
        oprot.writeFieldBegin(WECHAT_ID_FIELD_DESC);
        oprot.writeI32(struct.wechatId);
        oprot.writeFieldEnd();
      }
      if (struct.unionid != null) {
        if (struct.isSetUnionid()) {
          oprot.writeFieldBegin(UNIONID_FIELD_DESC);
          oprot.writeString(struct.unionid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSource()) {
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        oprot.writeDouble(struct.source);
        oprot.writeFieldEnd();
      }
      if (struct.company != null) {
        if (struct.isSetCompany()) {
          oprot.writeFieldBegin(COMPANY_FIELD_DESC);
          oprot.writeString(struct.company);
          oprot.writeFieldEnd();
        }
      }
      if (struct.position != null) {
        if (struct.isSetPosition()) {
          oprot.writeFieldBegin(POSITION_FIELD_DESC);
          oprot.writeString(struct.position);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetParentid()) {
        oprot.writeFieldBegin(PARENTID_FIELD_DESC);
        oprot.writeI32(struct.parentid);
        oprot.writeFieldEnd();
      }
      if (struct.nickname != null) {
        if (struct.isSetNickname()) {
          oprot.writeFieldBegin(NICKNAME_FIELD_DESC);
          oprot.writeString(struct.nickname);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserUserTmpDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserUserTmpDOTupleScheme getScheme() {
      return new UserUserTmpDOTupleScheme();
    }
  }

  private static class UserUserTmpDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<UserUserTmpDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserUserTmpDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetUsername()) {
        optionals.set(1);
      }
      if (struct.isSetPassword()) {
        optionals.set(2);
      }
      if (struct.isSetIsDisable()) {
        optionals.set(3);
      }
      if (struct.isSetRank()) {
        optionals.set(4);
      }
      if (struct.isSetRegisterTime()) {
        optionals.set(5);
      }
      if (struct.isSetRegisterIp()) {
        optionals.set(6);
      }
      if (struct.isSetLastLoginTime()) {
        optionals.set(7);
      }
      if (struct.isSetLastLoginIp()) {
        optionals.set(8);
      }
      if (struct.isSetLoginCount()) {
        optionals.set(9);
      }
      if (struct.isSetMobile()) {
        optionals.set(10);
      }
      if (struct.isSetEmail()) {
        optionals.set(11);
      }
      if (struct.isSetActivation()) {
        optionals.set(12);
      }
      if (struct.isSetActivationCode()) {
        optionals.set(13);
      }
      if (struct.isSetToken()) {
        optionals.set(14);
      }
      if (struct.isSetName()) {
        optionals.set(15);
      }
      if (struct.isSetHeadimg()) {
        optionals.set(16);
      }
      if (struct.isSetNationalCodeId()) {
        optionals.set(17);
      }
      if (struct.isSetWechatId()) {
        optionals.set(18);
      }
      if (struct.isSetUnionid()) {
        optionals.set(19);
      }
      if (struct.isSetSource()) {
        optionals.set(20);
      }
      if (struct.isSetCompany()) {
        optionals.set(21);
      }
      if (struct.isSetPosition()) {
        optionals.set(22);
      }
      if (struct.isSetParentid()) {
        optionals.set(23);
      }
      if (struct.isSetNickname()) {
        optionals.set(24);
      }
      oprot.writeBitSet(optionals, 25);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetIsDisable()) {
        oprot.writeByte(struct.isDisable);
      }
      if (struct.isSetRank()) {
        oprot.writeI32(struct.rank);
      }
      if (struct.isSetRegisterTime()) {
        oprot.writeString(struct.registerTime);
      }
      if (struct.isSetRegisterIp()) {
        oprot.writeString(struct.registerIp);
      }
      if (struct.isSetLastLoginTime()) {
        oprot.writeString(struct.lastLoginTime);
      }
      if (struct.isSetLastLoginIp()) {
        oprot.writeString(struct.lastLoginIp);
      }
      if (struct.isSetLoginCount()) {
        oprot.writeI32(struct.loginCount);
      }
      if (struct.isSetMobile()) {
        oprot.writeI32(struct.mobile);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetActivation()) {
        oprot.writeByte(struct.activation);
      }
      if (struct.isSetActivationCode()) {
        oprot.writeString(struct.activationCode);
      }
      if (struct.isSetToken()) {
        oprot.writeString(struct.token);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetHeadimg()) {
        oprot.writeString(struct.headimg);
      }
      if (struct.isSetNationalCodeId()) {
        oprot.writeI32(struct.nationalCodeId);
      }
      if (struct.isSetWechatId()) {
        oprot.writeI32(struct.wechatId);
      }
      if (struct.isSetUnionid()) {
        oprot.writeString(struct.unionid);
      }
      if (struct.isSetSource()) {
        oprot.writeDouble(struct.source);
      }
      if (struct.isSetCompany()) {
        oprot.writeString(struct.company);
      }
      if (struct.isSetPosition()) {
        oprot.writeString(struct.position);
      }
      if (struct.isSetParentid()) {
        oprot.writeI32(struct.parentid);
      }
      if (struct.isSetNickname()) {
        oprot.writeString(struct.nickname);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserUserTmpDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(25);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(3)) {
        struct.isDisable = iprot.readByte();
        struct.setIsDisableIsSet(true);
      }
      if (incoming.get(4)) {
        struct.rank = iprot.readI32();
        struct.setRankIsSet(true);
      }
      if (incoming.get(5)) {
        struct.registerTime = iprot.readString();
        struct.setRegisterTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.registerIp = iprot.readString();
        struct.setRegisterIpIsSet(true);
      }
      if (incoming.get(7)) {
        struct.lastLoginTime = iprot.readString();
        struct.setLastLoginTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.lastLoginIp = iprot.readString();
        struct.setLastLoginIpIsSet(true);
      }
      if (incoming.get(9)) {
        struct.loginCount = iprot.readI32();
        struct.setLoginCountIsSet(true);
      }
      if (incoming.get(10)) {
        struct.mobile = iprot.readI32();
        struct.setMobileIsSet(true);
      }
      if (incoming.get(11)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(12)) {
        struct.activation = iprot.readByte();
        struct.setActivationIsSet(true);
      }
      if (incoming.get(13)) {
        struct.activationCode = iprot.readString();
        struct.setActivationCodeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
      if (incoming.get(15)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(16)) {
        struct.headimg = iprot.readString();
        struct.setHeadimgIsSet(true);
      }
      if (incoming.get(17)) {
        struct.nationalCodeId = iprot.readI32();
        struct.setNationalCodeIdIsSet(true);
      }
      if (incoming.get(18)) {
        struct.wechatId = iprot.readI32();
        struct.setWechatIdIsSet(true);
      }
      if (incoming.get(19)) {
        struct.unionid = iprot.readString();
        struct.setUnionidIsSet(true);
      }
      if (incoming.get(20)) {
        struct.source = iprot.readDouble();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(21)) {
        struct.company = iprot.readString();
        struct.setCompanyIsSet(true);
      }
      if (incoming.get(22)) {
        struct.position = iprot.readString();
        struct.setPositionIsSet(true);
      }
      if (incoming.get(23)) {
        struct.parentid = iprot.readI32();
        struct.setParentidIsSet(true);
      }
      if (incoming.get(24)) {
        struct.nickname = iprot.readString();
        struct.setNicknameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

