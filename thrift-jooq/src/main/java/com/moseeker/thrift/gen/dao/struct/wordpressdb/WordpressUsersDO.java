/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.wordpressdb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-04")
public class WordpressUsersDO implements org.apache.thrift.TBase<WordpressUsersDO, WordpressUsersDO._Fields>, java.io.Serializable, Cloneable, Comparable<WordpressUsersDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WordpressUsersDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField USER_LOGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("userLogin", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField USER_PASS_FIELD_DESC = new org.apache.thrift.protocol.TField("userPass", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USER_NICENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userNicename", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USER_EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("userEmail", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField USER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("userUrl", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField USER_REGISTERED_FIELD_DESC = new org.apache.thrift.protocol.TField("userRegistered", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField USER_ACTIVATION_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("userActivationKey", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField USER_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("userStatus", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField DISPLAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("displayName", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WordpressUsersDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WordpressUsersDOTupleSchemeFactory();

  public long id; // optional
  public String userLogin; // optional
  public String userPass; // optional
  public String userNicename; // optional
  public String userEmail; // optional
  public String userUrl; // optional
  public String userRegistered; // optional
  public String userActivationKey; // optional
  public int userStatus; // optional
  public String displayName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    USER_LOGIN((short)2, "userLogin"),
    USER_PASS((short)3, "userPass"),
    USER_NICENAME((short)4, "userNicename"),
    USER_EMAIL((short)5, "userEmail"),
    USER_URL((short)6, "userUrl"),
    USER_REGISTERED((short)7, "userRegistered"),
    USER_ACTIVATION_KEY((short)8, "userActivationKey"),
    USER_STATUS((short)9, "userStatus"),
    DISPLAY_NAME((short)10, "displayName");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // USER_LOGIN
          return USER_LOGIN;
        case 3: // USER_PASS
          return USER_PASS;
        case 4: // USER_NICENAME
          return USER_NICENAME;
        case 5: // USER_EMAIL
          return USER_EMAIL;
        case 6: // USER_URL
          return USER_URL;
        case 7: // USER_REGISTERED
          return USER_REGISTERED;
        case 8: // USER_ACTIVATION_KEY
          return USER_ACTIVATION_KEY;
        case 9: // USER_STATUS
          return USER_STATUS;
        case 10: // DISPLAY_NAME
          return DISPLAY_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __USERSTATUS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.USER_LOGIN,_Fields.USER_PASS,_Fields.USER_NICENAME,_Fields.USER_EMAIL,_Fields.USER_URL,_Fields.USER_REGISTERED,_Fields.USER_ACTIVATION_KEY,_Fields.USER_STATUS,_Fields.DISPLAY_NAME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER_LOGIN, new org.apache.thrift.meta_data.FieldMetaData("userLogin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_PASS, new org.apache.thrift.meta_data.FieldMetaData("userPass", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_NICENAME, new org.apache.thrift.meta_data.FieldMetaData("userNicename", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_EMAIL, new org.apache.thrift.meta_data.FieldMetaData("userEmail", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_URL, new org.apache.thrift.meta_data.FieldMetaData("userUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_REGISTERED, new org.apache.thrift.meta_data.FieldMetaData("userRegistered", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ACTIVATION_KEY, new org.apache.thrift.meta_data.FieldMetaData("userActivationKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_STATUS, new org.apache.thrift.meta_data.FieldMetaData("userStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DISPLAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("displayName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WordpressUsersDO.class, metaDataMap);
  }

  public WordpressUsersDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WordpressUsersDO(WordpressUsersDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetUserLogin()) {
      this.userLogin = other.userLogin;
    }
    if (other.isSetUserPass()) {
      this.userPass = other.userPass;
    }
    if (other.isSetUserNicename()) {
      this.userNicename = other.userNicename;
    }
    if (other.isSetUserEmail()) {
      this.userEmail = other.userEmail;
    }
    if (other.isSetUserUrl()) {
      this.userUrl = other.userUrl;
    }
    if (other.isSetUserRegistered()) {
      this.userRegistered = other.userRegistered;
    }
    if (other.isSetUserActivationKey()) {
      this.userActivationKey = other.userActivationKey;
    }
    this.userStatus = other.userStatus;
    if (other.isSetDisplayName()) {
      this.displayName = other.displayName;
    }
  }

  public WordpressUsersDO deepCopy() {
    return new WordpressUsersDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.userLogin = null;
    this.userPass = null;
    this.userNicename = null;
    this.userEmail = null;
    this.userUrl = null;
    this.userRegistered = null;
    this.userActivationKey = null;
    setUserStatusIsSet(false);
    this.userStatus = 0;
    this.displayName = null;
  }

  public long getId() {
    return this.id;
  }

  public WordpressUsersDO setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getUserLogin() {
    return this.userLogin;
  }

  public WordpressUsersDO setUserLogin(String userLogin) {
    this.userLogin = userLogin;
    return this;
  }

  public void unsetUserLogin() {
    this.userLogin = null;
  }

  /** Returns true if field userLogin is set (has been assigned a value) and false otherwise */
  public boolean isSetUserLogin() {
    return this.userLogin != null;
  }

  public void setUserLoginIsSet(boolean value) {
    if (!value) {
      this.userLogin = null;
    }
  }

  public String getUserPass() {
    return this.userPass;
  }

  public WordpressUsersDO setUserPass(String userPass) {
    this.userPass = userPass;
    return this;
  }

  public void unsetUserPass() {
    this.userPass = null;
  }

  /** Returns true if field userPass is set (has been assigned a value) and false otherwise */
  public boolean isSetUserPass() {
    return this.userPass != null;
  }

  public void setUserPassIsSet(boolean value) {
    if (!value) {
      this.userPass = null;
    }
  }

  public String getUserNicename() {
    return this.userNicename;
  }

  public WordpressUsersDO setUserNicename(String userNicename) {
    this.userNicename = userNicename;
    return this;
  }

  public void unsetUserNicename() {
    this.userNicename = null;
  }

  /** Returns true if field userNicename is set (has been assigned a value) and false otherwise */
  public boolean isSetUserNicename() {
    return this.userNicename != null;
  }

  public void setUserNicenameIsSet(boolean value) {
    if (!value) {
      this.userNicename = null;
    }
  }

  public String getUserEmail() {
    return this.userEmail;
  }

  public WordpressUsersDO setUserEmail(String userEmail) {
    this.userEmail = userEmail;
    return this;
  }

  public void unsetUserEmail() {
    this.userEmail = null;
  }

  /** Returns true if field userEmail is set (has been assigned a value) and false otherwise */
  public boolean isSetUserEmail() {
    return this.userEmail != null;
  }

  public void setUserEmailIsSet(boolean value) {
    if (!value) {
      this.userEmail = null;
    }
  }

  public String getUserUrl() {
    return this.userUrl;
  }

  public WordpressUsersDO setUserUrl(String userUrl) {
    this.userUrl = userUrl;
    return this;
  }

  public void unsetUserUrl() {
    this.userUrl = null;
  }

  /** Returns true if field userUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetUserUrl() {
    return this.userUrl != null;
  }

  public void setUserUrlIsSet(boolean value) {
    if (!value) {
      this.userUrl = null;
    }
  }

  public String getUserRegistered() {
    return this.userRegistered;
  }

  public WordpressUsersDO setUserRegistered(String userRegistered) {
    this.userRegistered = userRegistered;
    return this;
  }

  public void unsetUserRegistered() {
    this.userRegistered = null;
  }

  /** Returns true if field userRegistered is set (has been assigned a value) and false otherwise */
  public boolean isSetUserRegistered() {
    return this.userRegistered != null;
  }

  public void setUserRegisteredIsSet(boolean value) {
    if (!value) {
      this.userRegistered = null;
    }
  }

  public String getUserActivationKey() {
    return this.userActivationKey;
  }

  public WordpressUsersDO setUserActivationKey(String userActivationKey) {
    this.userActivationKey = userActivationKey;
    return this;
  }

  public void unsetUserActivationKey() {
    this.userActivationKey = null;
  }

  /** Returns true if field userActivationKey is set (has been assigned a value) and false otherwise */
  public boolean isSetUserActivationKey() {
    return this.userActivationKey != null;
  }

  public void setUserActivationKeyIsSet(boolean value) {
    if (!value) {
      this.userActivationKey = null;
    }
  }

  public int getUserStatus() {
    return this.userStatus;
  }

  public WordpressUsersDO setUserStatus(int userStatus) {
    this.userStatus = userStatus;
    setUserStatusIsSet(true);
    return this;
  }

  public void unsetUserStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERSTATUS_ISSET_ID);
  }

  /** Returns true if field userStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetUserStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERSTATUS_ISSET_ID);
  }

  public void setUserStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERSTATUS_ISSET_ID, value);
  }

  public String getDisplayName() {
    return this.displayName;
  }

  public WordpressUsersDO setDisplayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  public void unsetDisplayName() {
    this.displayName = null;
  }

  /** Returns true if field displayName is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayName() {
    return this.displayName != null;
  }

  public void setDisplayNameIsSet(boolean value) {
    if (!value) {
      this.displayName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case USER_LOGIN:
      if (value == null) {
        unsetUserLogin();
      } else {
        setUserLogin((String)value);
      }
      break;

    case USER_PASS:
      if (value == null) {
        unsetUserPass();
      } else {
        setUserPass((String)value);
      }
      break;

    case USER_NICENAME:
      if (value == null) {
        unsetUserNicename();
      } else {
        setUserNicename((String)value);
      }
      break;

    case USER_EMAIL:
      if (value == null) {
        unsetUserEmail();
      } else {
        setUserEmail((String)value);
      }
      break;

    case USER_URL:
      if (value == null) {
        unsetUserUrl();
      } else {
        setUserUrl((String)value);
      }
      break;

    case USER_REGISTERED:
      if (value == null) {
        unsetUserRegistered();
      } else {
        setUserRegistered((String)value);
      }
      break;

    case USER_ACTIVATION_KEY:
      if (value == null) {
        unsetUserActivationKey();
      } else {
        setUserActivationKey((String)value);
      }
      break;

    case USER_STATUS:
      if (value == null) {
        unsetUserStatus();
      } else {
        setUserStatus((Integer)value);
      }
      break;

    case DISPLAY_NAME:
      if (value == null) {
        unsetDisplayName();
      } else {
        setDisplayName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case USER_LOGIN:
      return getUserLogin();

    case USER_PASS:
      return getUserPass();

    case USER_NICENAME:
      return getUserNicename();

    case USER_EMAIL:
      return getUserEmail();

    case USER_URL:
      return getUserUrl();

    case USER_REGISTERED:
      return getUserRegistered();

    case USER_ACTIVATION_KEY:
      return getUserActivationKey();

    case USER_STATUS:
      return getUserStatus();

    case DISPLAY_NAME:
      return getDisplayName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case USER_LOGIN:
      return isSetUserLogin();
    case USER_PASS:
      return isSetUserPass();
    case USER_NICENAME:
      return isSetUserNicename();
    case USER_EMAIL:
      return isSetUserEmail();
    case USER_URL:
      return isSetUserUrl();
    case USER_REGISTERED:
      return isSetUserRegistered();
    case USER_ACTIVATION_KEY:
      return isSetUserActivationKey();
    case USER_STATUS:
      return isSetUserStatus();
    case DISPLAY_NAME:
      return isSetDisplayName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WordpressUsersDO)
      return this.equals((WordpressUsersDO)that);
    return false;
  }

  public boolean equals(WordpressUsersDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_userLogin = true && this.isSetUserLogin();
    boolean that_present_userLogin = true && that.isSetUserLogin();
    if (this_present_userLogin || that_present_userLogin) {
      if (!(this_present_userLogin && that_present_userLogin))
        return false;
      if (!this.userLogin.equals(that.userLogin))
        return false;
    }

    boolean this_present_userPass = true && this.isSetUserPass();
    boolean that_present_userPass = true && that.isSetUserPass();
    if (this_present_userPass || that_present_userPass) {
      if (!(this_present_userPass && that_present_userPass))
        return false;
      if (!this.userPass.equals(that.userPass))
        return false;
    }

    boolean this_present_userNicename = true && this.isSetUserNicename();
    boolean that_present_userNicename = true && that.isSetUserNicename();
    if (this_present_userNicename || that_present_userNicename) {
      if (!(this_present_userNicename && that_present_userNicename))
        return false;
      if (!this.userNicename.equals(that.userNicename))
        return false;
    }

    boolean this_present_userEmail = true && this.isSetUserEmail();
    boolean that_present_userEmail = true && that.isSetUserEmail();
    if (this_present_userEmail || that_present_userEmail) {
      if (!(this_present_userEmail && that_present_userEmail))
        return false;
      if (!this.userEmail.equals(that.userEmail))
        return false;
    }

    boolean this_present_userUrl = true && this.isSetUserUrl();
    boolean that_present_userUrl = true && that.isSetUserUrl();
    if (this_present_userUrl || that_present_userUrl) {
      if (!(this_present_userUrl && that_present_userUrl))
        return false;
      if (!this.userUrl.equals(that.userUrl))
        return false;
    }

    boolean this_present_userRegistered = true && this.isSetUserRegistered();
    boolean that_present_userRegistered = true && that.isSetUserRegistered();
    if (this_present_userRegistered || that_present_userRegistered) {
      if (!(this_present_userRegistered && that_present_userRegistered))
        return false;
      if (!this.userRegistered.equals(that.userRegistered))
        return false;
    }

    boolean this_present_userActivationKey = true && this.isSetUserActivationKey();
    boolean that_present_userActivationKey = true && that.isSetUserActivationKey();
    if (this_present_userActivationKey || that_present_userActivationKey) {
      if (!(this_present_userActivationKey && that_present_userActivationKey))
        return false;
      if (!this.userActivationKey.equals(that.userActivationKey))
        return false;
    }

    boolean this_present_userStatus = true && this.isSetUserStatus();
    boolean that_present_userStatus = true && that.isSetUserStatus();
    if (this_present_userStatus || that_present_userStatus) {
      if (!(this_present_userStatus && that_present_userStatus))
        return false;
      if (this.userStatus != that.userStatus)
        return false;
    }

    boolean this_present_displayName = true && this.isSetDisplayName();
    boolean that_present_displayName = true && that.isSetDisplayName();
    if (this_present_displayName || that_present_displayName) {
      if (!(this_present_displayName && that_present_displayName))
        return false;
      if (!this.displayName.equals(that.displayName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetUserLogin()) ? 131071 : 524287);
    if (isSetUserLogin())
      hashCode = hashCode * 8191 + userLogin.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserPass()) ? 131071 : 524287);
    if (isSetUserPass())
      hashCode = hashCode * 8191 + userPass.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserNicename()) ? 131071 : 524287);
    if (isSetUserNicename())
      hashCode = hashCode * 8191 + userNicename.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserEmail()) ? 131071 : 524287);
    if (isSetUserEmail())
      hashCode = hashCode * 8191 + userEmail.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserUrl()) ? 131071 : 524287);
    if (isSetUserUrl())
      hashCode = hashCode * 8191 + userUrl.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserRegistered()) ? 131071 : 524287);
    if (isSetUserRegistered())
      hashCode = hashCode * 8191 + userRegistered.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserActivationKey()) ? 131071 : 524287);
    if (isSetUserActivationKey())
      hashCode = hashCode * 8191 + userActivationKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserStatus()) ? 131071 : 524287);
    if (isSetUserStatus())
      hashCode = hashCode * 8191 + userStatus;

    hashCode = hashCode * 8191 + ((isSetDisplayName()) ? 131071 : 524287);
    if (isSetDisplayName())
      hashCode = hashCode * 8191 + displayName.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(WordpressUsersDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserLogin()).compareTo(other.isSetUserLogin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserLogin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userLogin, other.userLogin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserPass()).compareTo(other.isSetUserPass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserPass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userPass, other.userPass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserNicename()).compareTo(other.isSetUserNicename());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserNicename()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userNicename, other.userNicename);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserEmail()).compareTo(other.isSetUserEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userEmail, other.userEmail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserUrl()).compareTo(other.isSetUserUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userUrl, other.userUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserRegistered()).compareTo(other.isSetUserRegistered());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserRegistered()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userRegistered, other.userRegistered);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserActivationKey()).compareTo(other.isSetUserActivationKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserActivationKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userActivationKey, other.userActivationKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserStatus()).compareTo(other.isSetUserStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userStatus, other.userStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisplayName()).compareTo(other.isSetDisplayName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayName, other.displayName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WordpressUsersDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetUserLogin()) {
      if (!first) sb.append(", ");
      sb.append("userLogin:");
      if (this.userLogin == null) {
        sb.append("null");
      } else {
        sb.append(this.userLogin);
      }
      first = false;
    }
    if (isSetUserPass()) {
      if (!first) sb.append(", ");
      sb.append("userPass:");
      if (this.userPass == null) {
        sb.append("null");
      } else {
        sb.append(this.userPass);
      }
      first = false;
    }
    if (isSetUserNicename()) {
      if (!first) sb.append(", ");
      sb.append("userNicename:");
      if (this.userNicename == null) {
        sb.append("null");
      } else {
        sb.append(this.userNicename);
      }
      first = false;
    }
    if (isSetUserEmail()) {
      if (!first) sb.append(", ");
      sb.append("userEmail:");
      if (this.userEmail == null) {
        sb.append("null");
      } else {
        sb.append(this.userEmail);
      }
      first = false;
    }
    if (isSetUserUrl()) {
      if (!first) sb.append(", ");
      sb.append("userUrl:");
      if (this.userUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.userUrl);
      }
      first = false;
    }
    if (isSetUserRegistered()) {
      if (!first) sb.append(", ");
      sb.append("userRegistered:");
      if (this.userRegistered == null) {
        sb.append("null");
      } else {
        sb.append(this.userRegistered);
      }
      first = false;
    }
    if (isSetUserActivationKey()) {
      if (!first) sb.append(", ");
      sb.append("userActivationKey:");
      if (this.userActivationKey == null) {
        sb.append("null");
      } else {
        sb.append(this.userActivationKey);
      }
      first = false;
    }
    if (isSetUserStatus()) {
      if (!first) sb.append(", ");
      sb.append("userStatus:");
      sb.append(this.userStatus);
      first = false;
    }
    if (isSetDisplayName()) {
      if (!first) sb.append(", ");
      sb.append("displayName:");
      if (this.displayName == null) {
        sb.append("null");
      } else {
        sb.append(this.displayName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WordpressUsersDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WordpressUsersDOStandardScheme getScheme() {
      return new WordpressUsersDOStandardScheme();
    }
  }

  private static class WordpressUsersDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<WordpressUsersDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WordpressUsersDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_LOGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userLogin = iprot.readString();
              struct.setUserLoginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_PASS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userPass = iprot.readString();
              struct.setUserPassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_NICENAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userNicename = iprot.readString();
              struct.setUserNicenameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER_EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userEmail = iprot.readString();
              struct.setUserEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USER_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userUrl = iprot.readString();
              struct.setUserUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USER_REGISTERED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userRegistered = iprot.readString();
              struct.setUserRegisteredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // USER_ACTIVATION_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userActivationKey = iprot.readString();
              struct.setUserActivationKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // USER_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userStatus = iprot.readI32();
              struct.setUserStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DISPLAY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.displayName = iprot.readString();
              struct.setDisplayNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WordpressUsersDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.userLogin != null) {
        if (struct.isSetUserLogin()) {
          oprot.writeFieldBegin(USER_LOGIN_FIELD_DESC);
          oprot.writeString(struct.userLogin);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userPass != null) {
        if (struct.isSetUserPass()) {
          oprot.writeFieldBegin(USER_PASS_FIELD_DESC);
          oprot.writeString(struct.userPass);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userNicename != null) {
        if (struct.isSetUserNicename()) {
          oprot.writeFieldBegin(USER_NICENAME_FIELD_DESC);
          oprot.writeString(struct.userNicename);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userEmail != null) {
        if (struct.isSetUserEmail()) {
          oprot.writeFieldBegin(USER_EMAIL_FIELD_DESC);
          oprot.writeString(struct.userEmail);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userUrl != null) {
        if (struct.isSetUserUrl()) {
          oprot.writeFieldBegin(USER_URL_FIELD_DESC);
          oprot.writeString(struct.userUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userRegistered != null) {
        if (struct.isSetUserRegistered()) {
          oprot.writeFieldBegin(USER_REGISTERED_FIELD_DESC);
          oprot.writeString(struct.userRegistered);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userActivationKey != null) {
        if (struct.isSetUserActivationKey()) {
          oprot.writeFieldBegin(USER_ACTIVATION_KEY_FIELD_DESC);
          oprot.writeString(struct.userActivationKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUserStatus()) {
        oprot.writeFieldBegin(USER_STATUS_FIELD_DESC);
        oprot.writeI32(struct.userStatus);
        oprot.writeFieldEnd();
      }
      if (struct.displayName != null) {
        if (struct.isSetDisplayName()) {
          oprot.writeFieldBegin(DISPLAY_NAME_FIELD_DESC);
          oprot.writeString(struct.displayName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WordpressUsersDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WordpressUsersDOTupleScheme getScheme() {
      return new WordpressUsersDOTupleScheme();
    }
  }

  private static class WordpressUsersDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<WordpressUsersDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WordpressUsersDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetUserLogin()) {
        optionals.set(1);
      }
      if (struct.isSetUserPass()) {
        optionals.set(2);
      }
      if (struct.isSetUserNicename()) {
        optionals.set(3);
      }
      if (struct.isSetUserEmail()) {
        optionals.set(4);
      }
      if (struct.isSetUserUrl()) {
        optionals.set(5);
      }
      if (struct.isSetUserRegistered()) {
        optionals.set(6);
      }
      if (struct.isSetUserActivationKey()) {
        optionals.set(7);
      }
      if (struct.isSetUserStatus()) {
        optionals.set(8);
      }
      if (struct.isSetDisplayName()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetUserLogin()) {
        oprot.writeString(struct.userLogin);
      }
      if (struct.isSetUserPass()) {
        oprot.writeString(struct.userPass);
      }
      if (struct.isSetUserNicename()) {
        oprot.writeString(struct.userNicename);
      }
      if (struct.isSetUserEmail()) {
        oprot.writeString(struct.userEmail);
      }
      if (struct.isSetUserUrl()) {
        oprot.writeString(struct.userUrl);
      }
      if (struct.isSetUserRegistered()) {
        oprot.writeString(struct.userRegistered);
      }
      if (struct.isSetUserActivationKey()) {
        oprot.writeString(struct.userActivationKey);
      }
      if (struct.isSetUserStatus()) {
        oprot.writeI32(struct.userStatus);
      }
      if (struct.isSetDisplayName()) {
        oprot.writeString(struct.displayName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WordpressUsersDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userLogin = iprot.readString();
        struct.setUserLoginIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userPass = iprot.readString();
        struct.setUserPassIsSet(true);
      }
      if (incoming.get(3)) {
        struct.userNicename = iprot.readString();
        struct.setUserNicenameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.userEmail = iprot.readString();
        struct.setUserEmailIsSet(true);
      }
      if (incoming.get(5)) {
        struct.userUrl = iprot.readString();
        struct.setUserUrlIsSet(true);
      }
      if (incoming.get(6)) {
        struct.userRegistered = iprot.readString();
        struct.setUserRegisteredIsSet(true);
      }
      if (incoming.get(7)) {
        struct.userActivationKey = iprot.readString();
        struct.setUserActivationKeyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.userStatus = iprot.readI32();
        struct.setUserStatusIsSet(true);
      }
      if (incoming.get(9)) {
        struct.displayName = iprot.readString();
        struct.setDisplayNameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

