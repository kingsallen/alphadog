/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.dao.struct.talentpooldb;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-09-28")
public class TalentPoolProfileMoveDetailDO implements org.apache.thrift.TBase<TalentPoolProfileMoveDetailDO, TalentPoolProfileMoveDetailDO._Fields>, java.io.Serializable, Cloneable, Comparable<TalentPoolProfileMoveDetailDO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TalentPoolProfileMoveDetailDO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hrId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField PROFILE_MOVE_RECORD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("profile_move_record_id", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PROFILE_MOVE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("profile_move_status", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TalentPoolProfileMoveDetailDOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TalentPoolProfileMoveDetailDOTupleSchemeFactory();

  public int id; // optional
  public int hrId; // optional
  public long mobile; // optional
  public int profile_move_record_id; // optional
  public byte profile_move_status; // optional
  public String createTime; // optional
  public String updateTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    HR_ID((short)2, "hrId"),
    MOBILE((short)3, "mobile"),
    PROFILE_MOVE_RECORD_ID((short)4, "profile_move_record_id"),
    PROFILE_MOVE_STATUS((short)5, "profile_move_status"),
    CREATE_TIME((short)6, "createTime"),
    UPDATE_TIME((short)7, "updateTime");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // HR_ID
          return HR_ID;
        case 3: // MOBILE
          return MOBILE;
        case 4: // PROFILE_MOVE_RECORD_ID
          return PROFILE_MOVE_RECORD_ID;
        case 5: // PROFILE_MOVE_STATUS
          return PROFILE_MOVE_STATUS;
        case 6: // CREATE_TIME
          return CREATE_TIME;
        case 7: // UPDATE_TIME
          return UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __HRID_ISSET_ID = 1;
  private static final int __MOBILE_ISSET_ID = 2;
  private static final int __PROFILE_MOVE_RECORD_ID_ISSET_ID = 3;
  private static final int __PROFILE_MOVE_STATUS_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.HR_ID,_Fields.MOBILE,_Fields.PROFILE_MOVE_RECORD_ID,_Fields.PROFILE_MOVE_STATUS,_Fields.CREATE_TIME,_Fields.UPDATE_TIME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hrId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PROFILE_MOVE_RECORD_ID, new org.apache.thrift.meta_data.FieldMetaData("profile_move_record_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROFILE_MOVE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("profile_move_status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TalentPoolProfileMoveDetailDO.class, metaDataMap);
  }

  public TalentPoolProfileMoveDetailDO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TalentPoolProfileMoveDetailDO(TalentPoolProfileMoveDetailDO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.hrId = other.hrId;
    this.mobile = other.mobile;
    this.profile_move_record_id = other.profile_move_record_id;
    this.profile_move_status = other.profile_move_status;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
  }

  public TalentPoolProfileMoveDetailDO deepCopy() {
    return new TalentPoolProfileMoveDetailDO(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setHrIdIsSet(false);
    this.hrId = 0;
    setMobileIsSet(false);
    this.mobile = 0;
    setProfile_move_record_idIsSet(false);
    this.profile_move_record_id = 0;
    setProfile_move_statusIsSet(false);
    this.profile_move_status = 0;
    this.createTime = null;
    this.updateTime = null;
  }

  public int getId() {
    return this.id;
  }

  public TalentPoolProfileMoveDetailDO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getHrId() {
    return this.hrId;
  }

  public TalentPoolProfileMoveDetailDO setHrId(int hrId) {
    this.hrId = hrId;
    setHrIdIsSet(true);
    return this;
  }

  public void unsetHrId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HRID_ISSET_ID);
  }

  /** Returns true if field hrId is set (has been assigned a value) and false otherwise */
  public boolean isSetHrId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HRID_ISSET_ID);
  }

  public void setHrIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HRID_ISSET_ID, value);
  }

  public long getMobile() {
    return this.mobile;
  }

  public TalentPoolProfileMoveDetailDO setMobile(long mobile) {
    this.mobile = mobile;
    setMobileIsSet(true);
    return this;
  }

  public void unsetMobile() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MOBILE_ISSET_ID);
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MOBILE_ISSET_ID);
  }

  public void setMobileIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MOBILE_ISSET_ID, value);
  }

  public int getProfile_move_record_id() {
    return this.profile_move_record_id;
  }

  public TalentPoolProfileMoveDetailDO setProfile_move_record_id(int profile_move_record_id) {
    this.profile_move_record_id = profile_move_record_id;
    setProfile_move_record_idIsSet(true);
    return this;
  }

  public void unsetProfile_move_record_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROFILE_MOVE_RECORD_ID_ISSET_ID);
  }

  /** Returns true if field profile_move_record_id is set (has been assigned a value) and false otherwise */
  public boolean isSetProfile_move_record_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROFILE_MOVE_RECORD_ID_ISSET_ID);
  }

  public void setProfile_move_record_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROFILE_MOVE_RECORD_ID_ISSET_ID, value);
  }

  public byte getProfile_move_status() {
    return this.profile_move_status;
  }

  public TalentPoolProfileMoveDetailDO setProfile_move_status(byte profile_move_status) {
    this.profile_move_status = profile_move_status;
    setProfile_move_statusIsSet(true);
    return this;
  }

  public void unsetProfile_move_status() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROFILE_MOVE_STATUS_ISSET_ID);
  }

  /** Returns true if field profile_move_status is set (has been assigned a value) and false otherwise */
  public boolean isSetProfile_move_status() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROFILE_MOVE_STATUS_ISSET_ID);
  }

  public void setProfile_move_statusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROFILE_MOVE_STATUS_ISSET_ID, value);
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public TalentPoolProfileMoveDetailDO setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public TalentPoolProfileMoveDetailDO setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case HR_ID:
      if (value == null) {
        unsetHrId();
      } else {
        setHrId((Integer)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((Long)value);
      }
      break;

    case PROFILE_MOVE_RECORD_ID:
      if (value == null) {
        unsetProfile_move_record_id();
      } else {
        setProfile_move_record_id((Integer)value);
      }
      break;

    case PROFILE_MOVE_STATUS:
      if (value == null) {
        unsetProfile_move_status();
      } else {
        setProfile_move_status((Byte)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case HR_ID:
      return getHrId();

    case MOBILE:
      return getMobile();

    case PROFILE_MOVE_RECORD_ID:
      return getProfile_move_record_id();

    case PROFILE_MOVE_STATUS:
      return getProfile_move_status();

    case CREATE_TIME:
      return getCreateTime();

    case UPDATE_TIME:
      return getUpdateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case HR_ID:
      return isSetHrId();
    case MOBILE:
      return isSetMobile();
    case PROFILE_MOVE_RECORD_ID:
      return isSetProfile_move_record_id();
    case PROFILE_MOVE_STATUS:
      return isSetProfile_move_status();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TalentPoolProfileMoveDetailDO)
      return this.equals((TalentPoolProfileMoveDetailDO)that);
    return false;
  }

  public boolean equals(TalentPoolProfileMoveDetailDO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_hrId = true && this.isSetHrId();
    boolean that_present_hrId = true && that.isSetHrId();
    if (this_present_hrId || that_present_hrId) {
      if (!(this_present_hrId && that_present_hrId))
        return false;
      if (this.hrId != that.hrId)
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (this.mobile != that.mobile)
        return false;
    }

    boolean this_present_profile_move_record_id = true && this.isSetProfile_move_record_id();
    boolean that_present_profile_move_record_id = true && that.isSetProfile_move_record_id();
    if (this_present_profile_move_record_id || that_present_profile_move_record_id) {
      if (!(this_present_profile_move_record_id && that_present_profile_move_record_id))
        return false;
      if (this.profile_move_record_id != that.profile_move_record_id)
        return false;
    }

    boolean this_present_profile_move_status = true && this.isSetProfile_move_status();
    boolean that_present_profile_move_status = true && that.isSetProfile_move_status();
    if (this_present_profile_move_status || that_present_profile_move_status) {
      if (!(this_present_profile_move_status && that_present_profile_move_status))
        return false;
      if (this.profile_move_status != that.profile_move_status)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetHrId()) ? 131071 : 524287);
    if (isSetHrId())
      hashCode = hashCode * 8191 + hrId;

    hashCode = hashCode * 8191 + ((isSetMobile()) ? 131071 : 524287);
    if (isSetMobile())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(mobile);

    hashCode = hashCode * 8191 + ((isSetProfile_move_record_id()) ? 131071 : 524287);
    if (isSetProfile_move_record_id())
      hashCode = hashCode * 8191 + profile_move_record_id;

    hashCode = hashCode * 8191 + ((isSetProfile_move_status()) ? 131071 : 524287);
    if (isSetProfile_move_status())
      hashCode = hashCode * 8191 + (int) (profile_move_status);

    hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
    if (isSetCreateTime())
      hashCode = hashCode * 8191 + createTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
    if (isSetUpdateTime())
      hashCode = hashCode * 8191 + updateTime.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TalentPoolProfileMoveDetailDO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHrId()).compareTo(other.isSetHrId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHrId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrId, other.hrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfile_move_record_id()).compareTo(other.isSetProfile_move_record_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfile_move_record_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile_move_record_id, other.profile_move_record_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfile_move_status()).compareTo(other.isSetProfile_move_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfile_move_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile_move_status, other.profile_move_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TalentPoolProfileMoveDetailDO(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetHrId()) {
      if (!first) sb.append(", ");
      sb.append("hrId:");
      sb.append(this.hrId);
      first = false;
    }
    if (isSetMobile()) {
      if (!first) sb.append(", ");
      sb.append("mobile:");
      sb.append(this.mobile);
      first = false;
    }
    if (isSetProfile_move_record_id()) {
      if (!first) sb.append(", ");
      sb.append("profile_move_record_id:");
      sb.append(this.profile_move_record_id);
      first = false;
    }
    if (isSetProfile_move_status()) {
      if (!first) sb.append(", ");
      sb.append("profile_move_status:");
      sb.append(this.profile_move_status);
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TalentPoolProfileMoveDetailDOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TalentPoolProfileMoveDetailDOStandardScheme getScheme() {
      return new TalentPoolProfileMoveDetailDOStandardScheme();
    }
  }

  private static class TalentPoolProfileMoveDetailDOStandardScheme extends org.apache.thrift.scheme.StandardScheme<TalentPoolProfileMoveDetailDO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TalentPoolProfileMoveDetailDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hrId = iprot.readI32();
              struct.setHrIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mobile = iprot.readI64();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROFILE_MOVE_RECORD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.profile_move_record_id = iprot.readI32();
              struct.setProfile_move_record_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROFILE_MOVE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.profile_move_status = iprot.readByte();
              struct.setProfile_move_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TalentPoolProfileMoveDetailDO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHrId()) {
        oprot.writeFieldBegin(HR_ID_FIELD_DESC);
        oprot.writeI32(struct.hrId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMobile()) {
        oprot.writeFieldBegin(MOBILE_FIELD_DESC);
        oprot.writeI64(struct.mobile);
        oprot.writeFieldEnd();
      }
      if (struct.isSetProfile_move_record_id()) {
        oprot.writeFieldBegin(PROFILE_MOVE_RECORD_ID_FIELD_DESC);
        oprot.writeI32(struct.profile_move_record_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetProfile_move_status()) {
        oprot.writeFieldBegin(PROFILE_MOVE_STATUS_FIELD_DESC);
        oprot.writeByte(struct.profile_move_status);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateTime != null) {
        if (struct.isSetUpdateTime()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TalentPoolProfileMoveDetailDOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TalentPoolProfileMoveDetailDOTupleScheme getScheme() {
      return new TalentPoolProfileMoveDetailDOTupleScheme();
    }
  }

  private static class TalentPoolProfileMoveDetailDOTupleScheme extends org.apache.thrift.scheme.TupleScheme<TalentPoolProfileMoveDetailDO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TalentPoolProfileMoveDetailDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetHrId()) {
        optionals.set(1);
      }
      if (struct.isSetMobile()) {
        optionals.set(2);
      }
      if (struct.isSetProfile_move_record_id()) {
        optionals.set(3);
      }
      if (struct.isSetProfile_move_status()) {
        optionals.set(4);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(5);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetHrId()) {
        oprot.writeI32(struct.hrId);
      }
      if (struct.isSetMobile()) {
        oprot.writeI64(struct.mobile);
      }
      if (struct.isSetProfile_move_record_id()) {
        oprot.writeI32(struct.profile_move_record_id);
      }
      if (struct.isSetProfile_move_status()) {
        oprot.writeByte(struct.profile_move_status);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TalentPoolProfileMoveDetailDO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hrId = iprot.readI32();
        struct.setHrIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mobile = iprot.readI64();
        struct.setMobileIsSet(true);
      }
      if (incoming.get(3)) {
        struct.profile_move_record_id = iprot.readI32();
        struct.setProfile_move_record_idIsSet(true);
      }
      if (incoming.get(4)) {
        struct.profile_move_status = iprot.readByte();
        struct.setProfile_move_statusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

