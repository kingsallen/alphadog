/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.mq.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-06-28")
public class MessageTemplateNoticeStruct implements org.apache.thrift.TBase<MessageTemplateNoticeStruct, MessageTemplateNoticeStruct._Fields>, java.io.Serializable, Cloneable, Comparable<MessageTemplateNoticeStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageTemplateNoticeStruct");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField SYS_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_template_id", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField ENABLE_QX_RETRY_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_qx_retry", org.apache.thrift.protocol.TType.BYTE, (short)7);
  private static final org.apache.thrift.protocol.TField DELAY_FIELD_DESC = new org.apache.thrift.protocol.TField("delay", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField VALIDATORS_FIELD_DESC = new org.apache.thrift.protocol.TField("validators", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField VALIDATORS_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("validators_params", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageTemplateNoticeStructStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageTemplateNoticeStructTupleSchemeFactory();

  public int user_id; // optional
  public byte type; // optional
  public int sys_template_id; // optional
  public String url; // optional
  public int company_id; // optional
  public java.util.Map<String,MessageTplDataCol> data; // optional
  public byte enable_qx_retry; // optional
  public long delay; // optional
  public String validators; // optional
  public String id; // optional
  public String validators_params; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "user_id"),
    TYPE((short)2, "type"),
    SYS_TEMPLATE_ID((short)3, "sys_template_id"),
    URL((short)4, "url"),
    COMPANY_ID((short)5, "company_id"),
    DATA((short)6, "data"),
    ENABLE_QX_RETRY((short)7, "enable_qx_retry"),
    DELAY((short)8, "delay"),
    VALIDATORS((short)9, "validators"),
    ID((short)10, "id"),
    VALIDATORS_PARAMS((short)11, "validators_params");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // TYPE
          return TYPE;
        case 3: // SYS_TEMPLATE_ID
          return SYS_TEMPLATE_ID;
        case 4: // URL
          return URL;
        case 5: // COMPANY_ID
          return COMPANY_ID;
        case 6: // DATA
          return DATA;
        case 7: // ENABLE_QX_RETRY
          return ENABLE_QX_RETRY;
        case 8: // DELAY
          return DELAY;
        case 9: // VALIDATORS
          return VALIDATORS;
        case 10: // ID
          return ID;
        case 11: // VALIDATORS_PARAMS
          return VALIDATORS_PARAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USER_ID_ISSET_ID = 0;
  private static final int __TYPE_ISSET_ID = 1;
  private static final int __SYS_TEMPLATE_ID_ISSET_ID = 2;
  private static final int __COMPANY_ID_ISSET_ID = 3;
  private static final int __ENABLE_QX_RETRY_ISSET_ID = 4;
  private static final int __DELAY_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.USER_ID,_Fields.TYPE,_Fields.SYS_TEMPLATE_ID,_Fields.URL,_Fields.COMPANY_ID,_Fields.DATA,_Fields.ENABLE_QX_RETRY,_Fields.DELAY,_Fields.VALIDATORS,_Fields.ID,_Fields.VALIDATORS_PARAMS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SYS_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("sys_template_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MessageTplDataCol.class))));
    tmpMap.put(_Fields.ENABLE_QX_RETRY, new org.apache.thrift.meta_data.FieldMetaData("enable_qx_retry", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.DELAY, new org.apache.thrift.meta_data.FieldMetaData("delay", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VALIDATORS, new org.apache.thrift.meta_data.FieldMetaData("validators", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALIDATORS_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("validators_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageTemplateNoticeStruct.class, metaDataMap);
  }

  public MessageTemplateNoticeStruct() {
    this.enable_qx_retry = (byte)1;

    this.delay = 0L;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MessageTemplateNoticeStruct(MessageTemplateNoticeStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    this.user_id = other.user_id;
    this.type = other.type;
    this.sys_template_id = other.sys_template_id;
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    this.company_id = other.company_id;
    if (other.isSetData()) {
      java.util.Map<String,MessageTplDataCol> __this__data = new java.util.HashMap<String,MessageTplDataCol>(other.data.size());
      for (java.util.Map.Entry<String, MessageTplDataCol> other_element : other.data.entrySet()) {

        String other_element_key = other_element.getKey();
        MessageTplDataCol other_element_value = other_element.getValue();

        String __this__data_copy_key = other_element_key;

        MessageTplDataCol __this__data_copy_value = new MessageTplDataCol(other_element_value);

        __this__data.put(__this__data_copy_key, __this__data_copy_value);
      }
      this.data = __this__data;
    }
    this.enable_qx_retry = other.enable_qx_retry;
    this.delay = other.delay;
    if (other.isSetValidators()) {
      this.validators = other.validators;
    }
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetValidators_params()) {
      this.validators_params = other.validators_params;
    }
  }

  public MessageTemplateNoticeStruct deepCopy() {
    return new MessageTemplateNoticeStruct(this);
  }

  @Override
  public void clear() {
    setUser_idIsSet(false);
    this.user_id = 0;
    setTypeIsSet(false);
    this.type = 0;
    setSys_template_idIsSet(false);
    this.sys_template_id = 0;
    this.url = null;
    setCompany_idIsSet(false);
    this.company_id = 0;
    this.data = null;
    this.enable_qx_retry = (byte)1;

    this.delay = 0L;

    this.validators = null;
    this.id = null;
    this.validators_params = null;
  }

  public int getUser_id() {
    return this.user_id;
  }

  public MessageTemplateNoticeStruct setUser_id(int user_id) {
    this.user_id = user_id;
    setUser_idIsSet(true);
    return this;
  }

  public void unsetUser_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USER_ID_ISSET_ID);
  }

  /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USER_ID_ISSET_ID);
  }

  public void setUser_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USER_ID_ISSET_ID, value);
  }

  public byte getType() {
    return this.type;
  }

  public MessageTemplateNoticeStruct setType(byte type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public int getSys_template_id() {
    return this.sys_template_id;
  }

  public MessageTemplateNoticeStruct setSys_template_id(int sys_template_id) {
    this.sys_template_id = sys_template_id;
    setSys_template_idIsSet(true);
    return this;
  }

  public void unsetSys_template_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SYS_TEMPLATE_ID_ISSET_ID);
  }

  /** Returns true if field sys_template_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSys_template_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SYS_TEMPLATE_ID_ISSET_ID);
  }

  public void setSys_template_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SYS_TEMPLATE_ID_ISSET_ID, value);
  }

  public String getUrl() {
    return this.url;
  }

  public MessageTemplateNoticeStruct setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public int getCompany_id() {
    return this.company_id;
  }

  public MessageTemplateNoticeStruct setCompany_id(int company_id) {
    this.company_id = company_id;
    setCompany_idIsSet(true);
    return this;
  }

  public void unsetCompany_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
  }

  /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
  public boolean isSetCompany_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
  }

  public void setCompany_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
  }

  public int getDataSize() {
    return (this.data == null) ? 0 : this.data.size();
  }

  public void putToData(String key, MessageTplDataCol val) {
    if (this.data == null) {
      this.data = new java.util.HashMap<String,MessageTplDataCol>();
    }
    this.data.put(key, val);
  }

  public java.util.Map<String,MessageTplDataCol> getData() {
    return this.data;
  }

  public MessageTemplateNoticeStruct setData(java.util.Map<String,MessageTplDataCol> data) {
    this.data = data;
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public byte getEnable_qx_retry() {
    return this.enable_qx_retry;
  }

  public MessageTemplateNoticeStruct setEnable_qx_retry(byte enable_qx_retry) {
    this.enable_qx_retry = enable_qx_retry;
    setEnable_qx_retryIsSet(true);
    return this;
  }

  public void unsetEnable_qx_retry() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_QX_RETRY_ISSET_ID);
  }

  /** Returns true if field enable_qx_retry is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_qx_retry() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_QX_RETRY_ISSET_ID);
  }

  public void setEnable_qx_retryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_QX_RETRY_ISSET_ID, value);
  }

  public long getDelay() {
    return this.delay;
  }

  public MessageTemplateNoticeStruct setDelay(long delay) {
    this.delay = delay;
    setDelayIsSet(true);
    return this;
  }

  public void unsetDelay() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DELAY_ISSET_ID);
  }

  /** Returns true if field delay is set (has been assigned a value) and false otherwise */
  public boolean isSetDelay() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DELAY_ISSET_ID);
  }

  public void setDelayIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DELAY_ISSET_ID, value);
  }

  public String getValidators() {
    return this.validators;
  }

  public MessageTemplateNoticeStruct setValidators(String validators) {
    this.validators = validators;
    return this;
  }

  public void unsetValidators() {
    this.validators = null;
  }

  /** Returns true if field validators is set (has been assigned a value) and false otherwise */
  public boolean isSetValidators() {
    return this.validators != null;
  }

  public void setValidatorsIsSet(boolean value) {
    if (!value) {
      this.validators = null;
    }
  }

  public String getId() {
    return this.id;
  }

  public MessageTemplateNoticeStruct setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getValidators_params() {
    return this.validators_params;
  }

  public MessageTemplateNoticeStruct setValidators_params(String validators_params) {
    this.validators_params = validators_params;
    return this;
  }

  public void unsetValidators_params() {
    this.validators_params = null;
  }

  /** Returns true if field validators_params is set (has been assigned a value) and false otherwise */
  public boolean isSetValidators_params() {
    return this.validators_params != null;
  }

  public void setValidators_paramsIsSet(boolean value) {
    if (!value) {
      this.validators_params = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUser_id();
      } else {
        setUser_id((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Byte)value);
      }
      break;

    case SYS_TEMPLATE_ID:
      if (value == null) {
        unsetSys_template_id();
      } else {
        setSys_template_id((Integer)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompany_id();
      } else {
        setCompany_id((Integer)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((java.util.Map<String,MessageTplDataCol>)value);
      }
      break;

    case ENABLE_QX_RETRY:
      if (value == null) {
        unsetEnable_qx_retry();
      } else {
        setEnable_qx_retry((Byte)value);
      }
      break;

    case DELAY:
      if (value == null) {
        unsetDelay();
      } else {
        setDelay((Long)value);
      }
      break;

    case VALIDATORS:
      if (value == null) {
        unsetValidators();
      } else {
        setValidators((String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case VALIDATORS_PARAMS:
      if (value == null) {
        unsetValidators_params();
      } else {
        setValidators_params((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return getUser_id();

    case TYPE:
      return getType();

    case SYS_TEMPLATE_ID:
      return getSys_template_id();

    case URL:
      return getUrl();

    case COMPANY_ID:
      return getCompany_id();

    case DATA:
      return getData();

    case ENABLE_QX_RETRY:
      return getEnable_qx_retry();

    case DELAY:
      return getDelay();

    case VALIDATORS:
      return getValidators();

    case ID:
      return getId();

    case VALIDATORS_PARAMS:
      return getValidators_params();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUser_id();
    case TYPE:
      return isSetType();
    case SYS_TEMPLATE_ID:
      return isSetSys_template_id();
    case URL:
      return isSetUrl();
    case COMPANY_ID:
      return isSetCompany_id();
    case DATA:
      return isSetData();
    case ENABLE_QX_RETRY:
      return isSetEnable_qx_retry();
    case DELAY:
      return isSetDelay();
    case VALIDATORS:
      return isSetValidators();
    case ID:
      return isSetId();
    case VALIDATORS_PARAMS:
      return isSetValidators_params();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MessageTemplateNoticeStruct)
      return this.equals((MessageTemplateNoticeStruct)that);
    return false;
  }

  public boolean equals(MessageTemplateNoticeStruct that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_user_id = true && this.isSetUser_id();
    boolean that_present_user_id = true && that.isSetUser_id();
    if (this_present_user_id || that_present_user_id) {
      if (!(this_present_user_id && that_present_user_id))
        return false;
      if (this.user_id != that.user_id)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_sys_template_id = true && this.isSetSys_template_id();
    boolean that_present_sys_template_id = true && that.isSetSys_template_id();
    if (this_present_sys_template_id || that_present_sys_template_id) {
      if (!(this_present_sys_template_id && that_present_sys_template_id))
        return false;
      if (this.sys_template_id != that.sys_template_id)
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_company_id = true && this.isSetCompany_id();
    boolean that_present_company_id = true && that.isSetCompany_id();
    if (this_present_company_id || that_present_company_id) {
      if (!(this_present_company_id && that_present_company_id))
        return false;
      if (this.company_id != that.company_id)
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    boolean this_present_enable_qx_retry = true && this.isSetEnable_qx_retry();
    boolean that_present_enable_qx_retry = true && that.isSetEnable_qx_retry();
    if (this_present_enable_qx_retry || that_present_enable_qx_retry) {
      if (!(this_present_enable_qx_retry && that_present_enable_qx_retry))
        return false;
      if (this.enable_qx_retry != that.enable_qx_retry)
        return false;
    }

    boolean this_present_delay = true && this.isSetDelay();
    boolean that_present_delay = true && that.isSetDelay();
    if (this_present_delay || that_present_delay) {
      if (!(this_present_delay && that_present_delay))
        return false;
      if (this.delay != that.delay)
        return false;
    }

    boolean this_present_validators = true && this.isSetValidators();
    boolean that_present_validators = true && that.isSetValidators();
    if (this_present_validators || that_present_validators) {
      if (!(this_present_validators && that_present_validators))
        return false;
      if (!this.validators.equals(that.validators))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_validators_params = true && this.isSetValidators_params();
    boolean that_present_validators_params = true && that.isSetValidators_params();
    if (this_present_validators_params || that_present_validators_params) {
      if (!(this_present_validators_params && that_present_validators_params))
        return false;
      if (!this.validators_params.equals(that.validators_params))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUser_id()) ? 131071 : 524287);
    if (isSetUser_id())
      hashCode = hashCode * 8191 + user_id;

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + (int) (type);

    hashCode = hashCode * 8191 + ((isSetSys_template_id()) ? 131071 : 524287);
    if (isSetSys_template_id())
      hashCode = hashCode * 8191 + sys_template_id;

    hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
    if (isSetUrl())
      hashCode = hashCode * 8191 + url.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompany_id()) ? 131071 : 524287);
    if (isSetCompany_id())
      hashCode = hashCode * 8191 + company_id;

    hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
    if (isSetData())
      hashCode = hashCode * 8191 + data.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnable_qx_retry()) ? 131071 : 524287);
    if (isSetEnable_qx_retry())
      hashCode = hashCode * 8191 + (int) (enable_qx_retry);

    hashCode = hashCode * 8191 + ((isSetDelay()) ? 131071 : 524287);
    if (isSetDelay())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(delay);

    hashCode = hashCode * 8191 + ((isSetValidators()) ? 131071 : 524287);
    if (isSetValidators())
      hashCode = hashCode * 8191 + validators.hashCode();

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetValidators_params()) ? 131071 : 524287);
    if (isSetValidators_params())
      hashCode = hashCode * 8191 + validators_params.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MessageTemplateNoticeStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUser_id()).compareTo(other.isSetUser_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, other.user_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSys_template_id()).compareTo(other.isSetSys_template_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSys_template_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_template_id, other.sys_template_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompany_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnable_qx_retry()).compareTo(other.isSetEnable_qx_retry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_qx_retry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_qx_retry, other.enable_qx_retry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDelay()).compareTo(other.isSetDelay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDelay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delay, other.delay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValidators()).compareTo(other.isSetValidators());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidators()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validators, other.validators);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValidators_params()).compareTo(other.isSetValidators_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidators_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validators_params, other.validators_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MessageTemplateNoticeStruct(");
    boolean first = true;

    if (isSetUser_id()) {
      sb.append("user_id:");
      sb.append(this.user_id);
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
    }
    if (isSetSys_template_id()) {
      if (!first) sb.append(", ");
      sb.append("sys_template_id:");
      sb.append(this.sys_template_id);
      first = false;
    }
    if (isSetUrl()) {
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
    }
    if (isSetCompany_id()) {
      if (!first) sb.append(", ");
      sb.append("company_id:");
      sb.append(this.company_id);
      first = false;
    }
    if (isSetData()) {
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
    }
    if (isSetEnable_qx_retry()) {
      if (!first) sb.append(", ");
      sb.append("enable_qx_retry:");
      sb.append(this.enable_qx_retry);
      first = false;
    }
    if (isSetDelay()) {
      if (!first) sb.append(", ");
      sb.append("delay:");
      sb.append(this.delay);
      first = false;
    }
    if (isSetValidators()) {
      if (!first) sb.append(", ");
      sb.append("validators:");
      if (this.validators == null) {
        sb.append("null");
      } else {
        sb.append(this.validators);
      }
      first = false;
    }
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetValidators_params()) {
      if (!first) sb.append(", ");
      sb.append("validators_params:");
      if (this.validators_params == null) {
        sb.append("null");
      } else {
        sb.append(this.validators_params);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MessageTemplateNoticeStructStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MessageTemplateNoticeStructStandardScheme getScheme() {
      return new MessageTemplateNoticeStructStandardScheme();
    }
  }

  private static class MessageTemplateNoticeStructStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageTemplateNoticeStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MessageTemplateNoticeStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.user_id = iprot.readI32();
              struct.setUser_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.type = iprot.readByte();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SYS_TEMPLATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sys_template_id = iprot.readI32();
              struct.setSys_template_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.company_id = iprot.readI32();
              struct.setCompany_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.data = new java.util.HashMap<String,MessageTplDataCol>(2*_map0.size);
                String _key1;
                MessageTplDataCol _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = new MessageTplDataCol();
                  _val2.read(iprot);
                  struct.data.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ENABLE_QX_RETRY
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.enable_qx_retry = iprot.readByte();
              struct.setEnable_qx_retryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DELAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.delay = iprot.readI64();
              struct.setDelayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VALIDATORS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.validators = iprot.readString();
              struct.setValidatorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // VALIDATORS_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.validators_params = iprot.readString();
              struct.setValidators_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MessageTemplateNoticeStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetUser_id()) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.user_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetType()) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeByte(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSys_template_id()) {
        oprot.writeFieldBegin(SYS_TEMPLATE_ID_FIELD_DESC);
        oprot.writeI32(struct.sys_template_id);
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        if (struct.isSetUrl()) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCompany_id()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.company_id);
        oprot.writeFieldEnd();
      }
      if (struct.data != null) {
        if (struct.isSetData()) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.data.size()));
            for (java.util.Map.Entry<String, MessageTplDataCol> _iter4 : struct.data.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              _iter4.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEnable_qx_retry()) {
        oprot.writeFieldBegin(ENABLE_QX_RETRY_FIELD_DESC);
        oprot.writeByte(struct.enable_qx_retry);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDelay()) {
        oprot.writeFieldBegin(DELAY_FIELD_DESC);
        oprot.writeI64(struct.delay);
        oprot.writeFieldEnd();
      }
      if (struct.validators != null) {
        if (struct.isSetValidators()) {
          oprot.writeFieldBegin(VALIDATORS_FIELD_DESC);
          oprot.writeString(struct.validators);
          oprot.writeFieldEnd();
        }
      }
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.validators_params != null) {
        if (struct.isSetValidators_params()) {
          oprot.writeFieldBegin(VALIDATORS_PARAMS_FIELD_DESC);
          oprot.writeString(struct.validators_params);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MessageTemplateNoticeStructTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MessageTemplateNoticeStructTupleScheme getScheme() {
      return new MessageTemplateNoticeStructTupleScheme();
    }
  }

  private static class MessageTemplateNoticeStructTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageTemplateNoticeStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MessageTemplateNoticeStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUser_id()) {
        optionals.set(0);
      }
      if (struct.isSetType()) {
        optionals.set(1);
      }
      if (struct.isSetSys_template_id()) {
        optionals.set(2);
      }
      if (struct.isSetUrl()) {
        optionals.set(3);
      }
      if (struct.isSetCompany_id()) {
        optionals.set(4);
      }
      if (struct.isSetData()) {
        optionals.set(5);
      }
      if (struct.isSetEnable_qx_retry()) {
        optionals.set(6);
      }
      if (struct.isSetDelay()) {
        optionals.set(7);
      }
      if (struct.isSetValidators()) {
        optionals.set(8);
      }
      if (struct.isSetId()) {
        optionals.set(9);
      }
      if (struct.isSetValidators_params()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetUser_id()) {
        oprot.writeI32(struct.user_id);
      }
      if (struct.isSetType()) {
        oprot.writeByte(struct.type);
      }
      if (struct.isSetSys_template_id()) {
        oprot.writeI32(struct.sys_template_id);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetCompany_id()) {
        oprot.writeI32(struct.company_id);
      }
      if (struct.isSetData()) {
        {
          oprot.writeI32(struct.data.size());
          for (java.util.Map.Entry<String, MessageTplDataCol> _iter5 : struct.data.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            _iter5.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetEnable_qx_retry()) {
        oprot.writeByte(struct.enable_qx_retry);
      }
      if (struct.isSetDelay()) {
        oprot.writeI64(struct.delay);
      }
      if (struct.isSetValidators()) {
        oprot.writeString(struct.validators);
      }
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetValidators_params()) {
        oprot.writeString(struct.validators_params);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MessageTemplateNoticeStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.user_id = iprot.readI32();
        struct.setUser_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.type = iprot.readByte();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sys_template_id = iprot.readI32();
        struct.setSys_template_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(4)) {
        struct.company_id = iprot.readI32();
        struct.setCompany_idIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.data = new java.util.HashMap<String,MessageTplDataCol>(2*_map6.size);
          String _key7;
          MessageTplDataCol _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readString();
            _val8 = new MessageTplDataCol();
            _val8.read(iprot);
            struct.data.put(_key7, _val8);
          }
        }
        struct.setDataIsSet(true);
      }
      if (incoming.get(6)) {
        struct.enable_qx_retry = iprot.readByte();
        struct.setEnable_qx_retryIsSet(true);
      }
      if (incoming.get(7)) {
        struct.delay = iprot.readI64();
        struct.setDelayIsSet(true);
      }
      if (incoming.get(8)) {
        struct.validators = iprot.readString();
        struct.setValidatorsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.validators_params = iprot.readString();
        struct.setValidators_paramsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

