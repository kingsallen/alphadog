/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.mq.struct;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-08-05")
public class MessageTemplateNoticeStruct implements org.apache.thrift.TBase<MessageTemplateNoticeStruct, MessageTemplateNoticeStruct._Fields>, java.io.Serializable, Cloneable, Comparable<MessageTemplateNoticeStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageTemplateNoticeStruct");

  private static final org.apache.thrift.protocol.TField OPENID_FIELD_DESC = new org.apache.thrift.protocol.TField("openid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SYS_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_template_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("access_token", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField WECHAT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("wechat_id", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.MAP, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MessageTemplateNoticeStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MessageTemplateNoticeStructTupleSchemeFactory());
  }

  public String openid; // optional
  public int sys_template_id; // optional
  public String access_token; // optional
  public String url; // optional
  public int wechat_id; // optional
  public Map<String,MessageTplDataCol> data; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OPENID((short)1, "openid"),
    SYS_TEMPLATE_ID((short)2, "sys_template_id"),
    ACCESS_TOKEN((short)3, "access_token"),
    URL((short)4, "url"),
    WECHAT_ID((short)5, "wechat_id"),
    DATA((short)6, "data");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OPENID
          return OPENID;
        case 2: // SYS_TEMPLATE_ID
          return SYS_TEMPLATE_ID;
        case 3: // ACCESS_TOKEN
          return ACCESS_TOKEN;
        case 4: // URL
          return URL;
        case 5: // WECHAT_ID
          return WECHAT_ID;
        case 6: // DATA
          return DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SYS_TEMPLATE_ID_ISSET_ID = 0;
  private static final int __WECHAT_ID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.OPENID,_Fields.SYS_TEMPLATE_ID,_Fields.ACCESS_TOKEN,_Fields.URL,_Fields.WECHAT_ID,_Fields.DATA};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OPENID, new org.apache.thrift.meta_data.FieldMetaData("openid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SYS_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("sys_template_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("access_token", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WECHAT_ID, new org.apache.thrift.meta_data.FieldMetaData("wechat_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MessageTplDataCol.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageTemplateNoticeStruct.class, metaDataMap);
  }

  public MessageTemplateNoticeStruct() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MessageTemplateNoticeStruct(MessageTemplateNoticeStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOpenid()) {
      this.openid = other.openid;
    }
    this.sys_template_id = other.sys_template_id;
    if (other.isSetAccess_token()) {
      this.access_token = other.access_token;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    this.wechat_id = other.wechat_id;
    if (other.isSetData()) {
      Map<String,MessageTplDataCol> __this__data = new HashMap<String,MessageTplDataCol>(other.data.size());
      for (Map.Entry<String, MessageTplDataCol> other_element : other.data.entrySet()) {

        String other_element_key = other_element.getKey();
        MessageTplDataCol other_element_value = other_element.getValue();

        String __this__data_copy_key = other_element_key;

        MessageTplDataCol __this__data_copy_value = new MessageTplDataCol(other_element_value);

        __this__data.put(__this__data_copy_key, __this__data_copy_value);
      }
      this.data = __this__data;
    }
  }

  public MessageTemplateNoticeStruct deepCopy() {
    return new MessageTemplateNoticeStruct(this);
  }

  @Override
  public void clear() {
    this.openid = null;
    setSys_template_idIsSet(false);
    this.sys_template_id = 0;
    this.access_token = null;
    this.url = null;
    setWechat_idIsSet(false);
    this.wechat_id = 0;
    this.data = null;
  }

  public String getOpenid() {
    return this.openid;
  }

  public MessageTemplateNoticeStruct setOpenid(String openid) {
    this.openid = openid;
    return this;
  }

  public void unsetOpenid() {
    this.openid = null;
  }

  /** Returns true if field openid is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenid() {
    return this.openid != null;
  }

  public void setOpenidIsSet(boolean value) {
    if (!value) {
      this.openid = null;
    }
  }

  public int getSys_template_id() {
    return this.sys_template_id;
  }

  public MessageTemplateNoticeStruct setSys_template_id(int sys_template_id) {
    this.sys_template_id = sys_template_id;
    setSys_template_idIsSet(true);
    return this;
  }

  public void unsetSys_template_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SYS_TEMPLATE_ID_ISSET_ID);
  }

  /** Returns true if field sys_template_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSys_template_id() {
    return EncodingUtils.testBit(__isset_bitfield, __SYS_TEMPLATE_ID_ISSET_ID);
  }

  public void setSys_template_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SYS_TEMPLATE_ID_ISSET_ID, value);
  }

  public String getAccess_token() {
    return this.access_token;
  }

  public MessageTemplateNoticeStruct setAccess_token(String access_token) {
    this.access_token = access_token;
    return this;
  }

  public void unsetAccess_token() {
    this.access_token = null;
  }

  /** Returns true if field access_token is set (has been assigned a value) and false otherwise */
  public boolean isSetAccess_token() {
    return this.access_token != null;
  }

  public void setAccess_tokenIsSet(boolean value) {
    if (!value) {
      this.access_token = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public MessageTemplateNoticeStruct setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public int getWechat_id() {
    return this.wechat_id;
  }

  public MessageTemplateNoticeStruct setWechat_id(int wechat_id) {
    this.wechat_id = wechat_id;
    setWechat_idIsSet(true);
    return this;
  }

  public void unsetWechat_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WECHAT_ID_ISSET_ID);
  }

  /** Returns true if field wechat_id is set (has been assigned a value) and false otherwise */
  public boolean isSetWechat_id() {
    return EncodingUtils.testBit(__isset_bitfield, __WECHAT_ID_ISSET_ID);
  }

  public void setWechat_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WECHAT_ID_ISSET_ID, value);
  }

  public int getDataSize() {
    return (this.data == null) ? 0 : this.data.size();
  }

  public void putToData(String key, MessageTplDataCol val) {
    if (this.data == null) {
      this.data = new HashMap<String,MessageTplDataCol>();
    }
    this.data.put(key, val);
  }

  public Map<String,MessageTplDataCol> getData() {
    return this.data;
  }

  public MessageTemplateNoticeStruct setData(Map<String,MessageTplDataCol> data) {
    this.data = data;
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OPENID:
      if (value == null) {
        unsetOpenid();
      } else {
        setOpenid((String)value);
      }
      break;

    case SYS_TEMPLATE_ID:
      if (value == null) {
        unsetSys_template_id();
      } else {
        setSys_template_id((Integer)value);
      }
      break;

    case ACCESS_TOKEN:
      if (value == null) {
        unsetAccess_token();
      } else {
        setAccess_token((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case WECHAT_ID:
      if (value == null) {
        unsetWechat_id();
      } else {
        setWechat_id((Integer)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((Map<String,MessageTplDataCol>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OPENID:
      return getOpenid();

    case SYS_TEMPLATE_ID:
      return getSys_template_id();

    case ACCESS_TOKEN:
      return getAccess_token();

    case URL:
      return getUrl();

    case WECHAT_ID:
      return getWechat_id();

    case DATA:
      return getData();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OPENID:
      return isSetOpenid();
    case SYS_TEMPLATE_ID:
      return isSetSys_template_id();
    case ACCESS_TOKEN:
      return isSetAccess_token();
    case URL:
      return isSetUrl();
    case WECHAT_ID:
      return isSetWechat_id();
    case DATA:
      return isSetData();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MessageTemplateNoticeStruct)
      return this.equals((MessageTemplateNoticeStruct)that);
    return false;
  }

  public boolean equals(MessageTemplateNoticeStruct that) {
    if (that == null)
      return false;

    boolean this_present_openid = true && this.isSetOpenid();
    boolean that_present_openid = true && that.isSetOpenid();
    if (this_present_openid || that_present_openid) {
      if (!(this_present_openid && that_present_openid))
        return false;
      if (!this.openid.equals(that.openid))
        return false;
    }

    boolean this_present_sys_template_id = true && this.isSetSys_template_id();
    boolean that_present_sys_template_id = true && that.isSetSys_template_id();
    if (this_present_sys_template_id || that_present_sys_template_id) {
      if (!(this_present_sys_template_id && that_present_sys_template_id))
        return false;
      if (this.sys_template_id != that.sys_template_id)
        return false;
    }

    boolean this_present_access_token = true && this.isSetAccess_token();
    boolean that_present_access_token = true && that.isSetAccess_token();
    if (this_present_access_token || that_present_access_token) {
      if (!(this_present_access_token && that_present_access_token))
        return false;
      if (!this.access_token.equals(that.access_token))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_wechat_id = true && this.isSetWechat_id();
    boolean that_present_wechat_id = true && that.isSetWechat_id();
    if (this_present_wechat_id || that_present_wechat_id) {
      if (!(this_present_wechat_id && that_present_wechat_id))
        return false;
      if (this.wechat_id != that.wechat_id)
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_openid = true && (isSetOpenid());
    list.add(present_openid);
    if (present_openid)
      list.add(openid);

    boolean present_sys_template_id = true && (isSetSys_template_id());
    list.add(present_sys_template_id);
    if (present_sys_template_id)
      list.add(sys_template_id);

    boolean present_access_token = true && (isSetAccess_token());
    list.add(present_access_token);
    if (present_access_token)
      list.add(access_token);

    boolean present_url = true && (isSetUrl());
    list.add(present_url);
    if (present_url)
      list.add(url);

    boolean present_wechat_id = true && (isSetWechat_id());
    list.add(present_wechat_id);
    if (present_wechat_id)
      list.add(wechat_id);

    boolean present_data = true && (isSetData());
    list.add(present_data);
    if (present_data)
      list.add(data);

    return list.hashCode();
  }

  @Override
  public int compareTo(MessageTemplateNoticeStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOpenid()).compareTo(other.isSetOpenid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openid, other.openid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSys_template_id()).compareTo(other.isSetSys_template_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSys_template_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_template_id, other.sys_template_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccess_token()).compareTo(other.isSetAccess_token());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccess_token()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_token, other.access_token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWechat_id()).compareTo(other.isSetWechat_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWechat_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wechat_id, other.wechat_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MessageTemplateNoticeStruct(");
    boolean first = true;

    if (isSetOpenid()) {
      sb.append("openid:");
      if (this.openid == null) {
        sb.append("null");
      } else {
        sb.append(this.openid);
      }
      first = false;
    }
    if (isSetSys_template_id()) {
      if (!first) sb.append(", ");
      sb.append("sys_template_id:");
      sb.append(this.sys_template_id);
      first = false;
    }
    if (isSetAccess_token()) {
      if (!first) sb.append(", ");
      sb.append("access_token:");
      if (this.access_token == null) {
        sb.append("null");
      } else {
        sb.append(this.access_token);
      }
      first = false;
    }
    if (isSetUrl()) {
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
    }
    if (isSetWechat_id()) {
      if (!first) sb.append(", ");
      sb.append("wechat_id:");
      sb.append(this.wechat_id);
      first = false;
    }
    if (isSetData()) {
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MessageTemplateNoticeStructStandardSchemeFactory implements SchemeFactory {
    public MessageTemplateNoticeStructStandardScheme getScheme() {
      return new MessageTemplateNoticeStructStandardScheme();
    }
  }

  private static class MessageTemplateNoticeStructStandardScheme extends StandardScheme<MessageTemplateNoticeStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MessageTemplateNoticeStruct struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OPENID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.openid = iprot.readString();
              struct.setOpenidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SYS_TEMPLATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sys_template_id = iprot.readI32();
              struct.setSys_template_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACCESS_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.access_token = iprot.readString();
              struct.setAccess_tokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WECHAT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wechat_id = iprot.readI32();
              struct.setWechat_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.data = new HashMap<String,MessageTplDataCol>(2*_map0.size);
                String _key1;
                MessageTplDataCol _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = new MessageTplDataCol();
                  _val2.read(iprot);
                  struct.data.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MessageTemplateNoticeStruct struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.openid != null) {
        if (struct.isSetOpenid()) {
          oprot.writeFieldBegin(OPENID_FIELD_DESC);
          oprot.writeString(struct.openid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSys_template_id()) {
        oprot.writeFieldBegin(SYS_TEMPLATE_ID_FIELD_DESC);
        oprot.writeI32(struct.sys_template_id);
        oprot.writeFieldEnd();
      }
      if (struct.access_token != null) {
        if (struct.isSetAccess_token()) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.access_token);
          oprot.writeFieldEnd();
        }
      }
      if (struct.url != null) {
        if (struct.isSetUrl()) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetWechat_id()) {
        oprot.writeFieldBegin(WECHAT_ID_FIELD_DESC);
        oprot.writeI32(struct.wechat_id);
        oprot.writeFieldEnd();
      }
      if (struct.data != null) {
        if (struct.isSetData()) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.data.size()));
            for (Map.Entry<String, MessageTplDataCol> _iter4 : struct.data.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              _iter4.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MessageTemplateNoticeStructTupleSchemeFactory implements SchemeFactory {
    public MessageTemplateNoticeStructTupleScheme getScheme() {
      return new MessageTemplateNoticeStructTupleScheme();
    }
  }

  private static class MessageTemplateNoticeStructTupleScheme extends TupleScheme<MessageTemplateNoticeStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MessageTemplateNoticeStruct struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOpenid()) {
        optionals.set(0);
      }
      if (struct.isSetSys_template_id()) {
        optionals.set(1);
      }
      if (struct.isSetAccess_token()) {
        optionals.set(2);
      }
      if (struct.isSetUrl()) {
        optionals.set(3);
      }
      if (struct.isSetWechat_id()) {
        optionals.set(4);
      }
      if (struct.isSetData()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetOpenid()) {
        oprot.writeString(struct.openid);
      }
      if (struct.isSetSys_template_id()) {
        oprot.writeI32(struct.sys_template_id);
      }
      if (struct.isSetAccess_token()) {
        oprot.writeString(struct.access_token);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetWechat_id()) {
        oprot.writeI32(struct.wechat_id);
      }
      if (struct.isSetData()) {
        {
          oprot.writeI32(struct.data.size());
          for (Map.Entry<String, MessageTplDataCol> _iter5 : struct.data.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            _iter5.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MessageTemplateNoticeStruct struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.openid = iprot.readString();
        struct.setOpenidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sys_template_id = iprot.readI32();
        struct.setSys_template_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.access_token = iprot.readString();
        struct.setAccess_tokenIsSet(true);
      }
      if (incoming.get(3)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(4)) {
        struct.wechat_id = iprot.readI32();
        struct.setWechat_idIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.data = new HashMap<String,MessageTplDataCol>(2*_map6.size);
          String _key7;
          MessageTplDataCol _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readString();
            _val8 = new MessageTplDataCol();
            _val8.read(iprot);
            struct.data.put(_key7, _val8);
          }
        }
        struct.setDataIsSet(true);
      }
    }
  }

}

