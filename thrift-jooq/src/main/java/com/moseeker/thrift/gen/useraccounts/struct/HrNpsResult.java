/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.useraccounts.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-31")
public class HrNpsResult implements org.apache.thrift.TBase<HrNpsResult, HrNpsResult._Fields>, java.io.Serializable, Cloneable, Comparable<HrNpsResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HrNpsResult");

  private static final org.apache.thrift.protocol.TField HR_NPS_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_nps", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField HR_RECOMMEND_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_recommend", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HrNpsResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HrNpsResultTupleSchemeFactory();

  public java.util.List<HrNpsDO> hr_nps; // optional
  public java.util.List<HrRecommendDO> hr_recommend; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HR_NPS((short)1, "hr_nps"),
    HR_RECOMMEND((short)2, "hr_recommend");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HR_NPS
          return HR_NPS;
        case 2: // HR_RECOMMEND
          return HR_RECOMMEND;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.HR_NPS,_Fields.HR_RECOMMEND};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HR_NPS, new org.apache.thrift.meta_data.FieldMetaData("hr_nps", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HrNpsDO.class))));
    tmpMap.put(_Fields.HR_RECOMMEND, new org.apache.thrift.meta_data.FieldMetaData("hr_recommend", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HrRecommendDO.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HrNpsResult.class, metaDataMap);
  }

  public HrNpsResult() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HrNpsResult(HrNpsResult other) {
    if (other.isSetHr_nps()) {
      java.util.List<HrNpsDO> __this__hr_nps = new java.util.ArrayList<HrNpsDO>(other.hr_nps.size());
      for (HrNpsDO other_element : other.hr_nps) {
        __this__hr_nps.add(new HrNpsDO(other_element));
      }
      this.hr_nps = __this__hr_nps;
    }
    if (other.isSetHr_recommend()) {
      java.util.List<HrRecommendDO> __this__hr_recommend = new java.util.ArrayList<HrRecommendDO>(other.hr_recommend.size());
      for (HrRecommendDO other_element : other.hr_recommend) {
        __this__hr_recommend.add(new HrRecommendDO(other_element));
      }
      this.hr_recommend = __this__hr_recommend;
    }
  }

  public HrNpsResult deepCopy() {
    return new HrNpsResult(this);
  }

  @Override
  public void clear() {
    this.hr_nps = null;
    this.hr_recommend = null;
  }

  public int getHr_npsSize() {
    return (this.hr_nps == null) ? 0 : this.hr_nps.size();
  }

  public java.util.Iterator<HrNpsDO> getHr_npsIterator() {
    return (this.hr_nps == null) ? null : this.hr_nps.iterator();
  }

  public void addToHr_nps(HrNpsDO elem) {
    if (this.hr_nps == null) {
      this.hr_nps = new java.util.ArrayList<HrNpsDO>();
    }
    this.hr_nps.add(elem);
  }

  public java.util.List<HrNpsDO> getHr_nps() {
    return this.hr_nps;
  }

  public HrNpsResult setHr_nps(java.util.List<HrNpsDO> hr_nps) {
    this.hr_nps = hr_nps;
    return this;
  }

  public void unsetHr_nps() {
    this.hr_nps = null;
  }

  /** Returns true if field hr_nps is set (has been assigned a value) and false otherwise */
  public boolean isSetHr_nps() {
    return this.hr_nps != null;
  }

  public void setHr_npsIsSet(boolean value) {
    if (!value) {
      this.hr_nps = null;
    }
  }

  public int getHr_recommendSize() {
    return (this.hr_recommend == null) ? 0 : this.hr_recommend.size();
  }

  public java.util.Iterator<HrRecommendDO> getHr_recommendIterator() {
    return (this.hr_recommend == null) ? null : this.hr_recommend.iterator();
  }

  public void addToHr_recommend(HrRecommendDO elem) {
    if (this.hr_recommend == null) {
      this.hr_recommend = new java.util.ArrayList<HrRecommendDO>();
    }
    this.hr_recommend.add(elem);
  }

  public java.util.List<HrRecommendDO> getHr_recommend() {
    return this.hr_recommend;
  }

  public HrNpsResult setHr_recommend(java.util.List<HrRecommendDO> hr_recommend) {
    this.hr_recommend = hr_recommend;
    return this;
  }

  public void unsetHr_recommend() {
    this.hr_recommend = null;
  }

  /** Returns true if field hr_recommend is set (has been assigned a value) and false otherwise */
  public boolean isSetHr_recommend() {
    return this.hr_recommend != null;
  }

  public void setHr_recommendIsSet(boolean value) {
    if (!value) {
      this.hr_recommend = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HR_NPS:
      if (value == null) {
        unsetHr_nps();
      } else {
        setHr_nps((java.util.List<HrNpsDO>)value);
      }
      break;

    case HR_RECOMMEND:
      if (value == null) {
        unsetHr_recommend();
      } else {
        setHr_recommend((java.util.List<HrRecommendDO>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HR_NPS:
      return getHr_nps();

    case HR_RECOMMEND:
      return getHr_recommend();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HR_NPS:
      return isSetHr_nps();
    case HR_RECOMMEND:
      return isSetHr_recommend();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HrNpsResult)
      return this.equals((HrNpsResult)that);
    return false;
  }

  public boolean equals(HrNpsResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_hr_nps = true && this.isSetHr_nps();
    boolean that_present_hr_nps = true && that.isSetHr_nps();
    if (this_present_hr_nps || that_present_hr_nps) {
      if (!(this_present_hr_nps && that_present_hr_nps))
        return false;
      if (!this.hr_nps.equals(that.hr_nps))
        return false;
    }

    boolean this_present_hr_recommend = true && this.isSetHr_recommend();
    boolean that_present_hr_recommend = true && that.isSetHr_recommend();
    if (this_present_hr_recommend || that_present_hr_recommend) {
      if (!(this_present_hr_recommend && that_present_hr_recommend))
        return false;
      if (!this.hr_recommend.equals(that.hr_recommend))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetHr_nps()) ? 131071 : 524287);
    if (isSetHr_nps())
      hashCode = hashCode * 8191 + hr_nps.hashCode();

    hashCode = hashCode * 8191 + ((isSetHr_recommend()) ? 131071 : 524287);
    if (isSetHr_recommend())
      hashCode = hashCode * 8191 + hr_recommend.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(HrNpsResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHr_nps()).compareTo(other.isSetHr_nps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHr_nps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_nps, other.hr_nps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHr_recommend()).compareTo(other.isSetHr_recommend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHr_recommend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_recommend, other.hr_recommend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HrNpsResult(");
    boolean first = true;

    if (isSetHr_nps()) {
      sb.append("hr_nps:");
      if (this.hr_nps == null) {
        sb.append("null");
      } else {
        sb.append(this.hr_nps);
      }
      first = false;
    }
    if (isSetHr_recommend()) {
      if (!first) sb.append(", ");
      sb.append("hr_recommend:");
      if (this.hr_recommend == null) {
        sb.append("null");
      } else {
        sb.append(this.hr_recommend);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HrNpsResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrNpsResultStandardScheme getScheme() {
      return new HrNpsResultStandardScheme();
    }
  }

  private static class HrNpsResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<HrNpsResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HrNpsResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HR_NPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.hr_nps = new java.util.ArrayList<HrNpsDO>(_list16.size);
                HrNpsDO _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new HrNpsDO();
                  _elem17.read(iprot);
                  struct.hr_nps.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setHr_npsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HR_RECOMMEND
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.hr_recommend = new java.util.ArrayList<HrRecommendDO>(_list19.size);
                HrRecommendDO _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                {
                  _elem20 = new HrRecommendDO();
                  _elem20.read(iprot);
                  struct.hr_recommend.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setHr_recommendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HrNpsResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.hr_nps != null) {
        if (struct.isSetHr_nps()) {
          oprot.writeFieldBegin(HR_NPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.hr_nps.size()));
            for (HrNpsDO _iter22 : struct.hr_nps)
            {
              _iter22.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.hr_recommend != null) {
        if (struct.isSetHr_recommend()) {
          oprot.writeFieldBegin(HR_RECOMMEND_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.hr_recommend.size()));
            for (HrRecommendDO _iter23 : struct.hr_recommend)
            {
              _iter23.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HrNpsResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrNpsResultTupleScheme getScheme() {
      return new HrNpsResultTupleScheme();
    }
  }

  private static class HrNpsResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<HrNpsResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HrNpsResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetHr_nps()) {
        optionals.set(0);
      }
      if (struct.isSetHr_recommend()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetHr_nps()) {
        {
          oprot.writeI32(struct.hr_nps.size());
          for (HrNpsDO _iter24 : struct.hr_nps)
          {
            _iter24.write(oprot);
          }
        }
      }
      if (struct.isSetHr_recommend()) {
        {
          oprot.writeI32(struct.hr_recommend.size());
          for (HrRecommendDO _iter25 : struct.hr_recommend)
          {
            _iter25.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HrNpsResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.hr_nps = new java.util.ArrayList<HrNpsDO>(_list26.size);
          HrNpsDO _elem27;
          for (int _i28 = 0; _i28 < _list26.size; ++_i28)
          {
            _elem27 = new HrNpsDO();
            _elem27.read(iprot);
            struct.hr_nps.add(_elem27);
          }
        }
        struct.setHr_npsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.hr_recommend = new java.util.ArrayList<HrRecommendDO>(_list29.size);
          HrRecommendDO _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new HrRecommendDO();
            _elem30.read(iprot);
            struct.hr_recommend.add(_elem30);
          }
        }
        struct.setHr_recommendIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

