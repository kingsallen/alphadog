/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.useraccounts.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-09-06")
public class HrNpsResult implements org.apache.thrift.TBase<HrNpsResult, HrNpsResult._Fields>, java.io.Serializable, Cloneable, Comparable<HrNpsResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HrNpsResult");

  private static final org.apache.thrift.protocol.TField HR_NPS_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_nps", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField HR_NPS_RECOMMEND_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_nps_recommend", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HrNpsResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HrNpsResultTupleSchemeFactory();

  public HrNpsDO hr_nps; // optional
  public HrNpsRecommendDO hr_nps_recommend; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HR_NPS((short)1, "hr_nps"),
    HR_NPS_RECOMMEND((short)2, "hr_nps_recommend");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HR_NPS
          return HR_NPS;
        case 2: // HR_NPS_RECOMMEND
          return HR_NPS_RECOMMEND;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.HR_NPS,_Fields.HR_NPS_RECOMMEND};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HR_NPS, new org.apache.thrift.meta_data.FieldMetaData("hr_nps", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HrNpsDO.class)));
    tmpMap.put(_Fields.HR_NPS_RECOMMEND, new org.apache.thrift.meta_data.FieldMetaData("hr_nps_recommend", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HrNpsRecommendDO.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HrNpsResult.class, metaDataMap);
  }

  public HrNpsResult() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HrNpsResult(HrNpsResult other) {
    if (other.isSetHr_nps()) {
      this.hr_nps = new HrNpsDO(other.hr_nps);
    }
    if (other.isSetHr_nps_recommend()) {
      this.hr_nps_recommend = new HrNpsRecommendDO(other.hr_nps_recommend);
    }
  }

  public HrNpsResult deepCopy() {
    return new HrNpsResult(this);
  }

  @Override
  public void clear() {
    this.hr_nps = null;
    this.hr_nps_recommend = null;
  }

  public HrNpsDO getHr_nps() {
    return this.hr_nps;
  }

  public HrNpsResult setHr_nps(HrNpsDO hr_nps) {
    this.hr_nps = hr_nps;
    return this;
  }

  public void unsetHr_nps() {
    this.hr_nps = null;
  }

  /** Returns true if field hr_nps is set (has been assigned a value) and false otherwise */
  public boolean isSetHr_nps() {
    return this.hr_nps != null;
  }

  public void setHr_npsIsSet(boolean value) {
    if (!value) {
      this.hr_nps = null;
    }
  }

  public HrNpsRecommendDO getHr_nps_recommend() {
    return this.hr_nps_recommend;
  }

  public HrNpsResult setHr_nps_recommend(HrNpsRecommendDO hr_nps_recommend) {
    this.hr_nps_recommend = hr_nps_recommend;
    return this;
  }

  public void unsetHr_nps_recommend() {
    this.hr_nps_recommend = null;
  }

  /** Returns true if field hr_nps_recommend is set (has been assigned a value) and false otherwise */
  public boolean isSetHr_nps_recommend() {
    return this.hr_nps_recommend != null;
  }

  public void setHr_nps_recommendIsSet(boolean value) {
    if (!value) {
      this.hr_nps_recommend = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case HR_NPS:
      if (value == null) {
        unsetHr_nps();
      } else {
        setHr_nps((HrNpsDO)value);
      }
      break;

    case HR_NPS_RECOMMEND:
      if (value == null) {
        unsetHr_nps_recommend();
      } else {
        setHr_nps_recommend((HrNpsRecommendDO)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case HR_NPS:
      return getHr_nps();

    case HR_NPS_RECOMMEND:
      return getHr_nps_recommend();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case HR_NPS:
      return isSetHr_nps();
    case HR_NPS_RECOMMEND:
      return isSetHr_nps_recommend();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof HrNpsResult)
      return this.equals((HrNpsResult)that);
    return false;
  }

  public boolean equals(HrNpsResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_hr_nps = true && this.isSetHr_nps();
    boolean that_present_hr_nps = true && that.isSetHr_nps();
    if (this_present_hr_nps || that_present_hr_nps) {
      if (!(this_present_hr_nps && that_present_hr_nps))
        return false;
      if (!this.hr_nps.equals(that.hr_nps))
        return false;
    }

    boolean this_present_hr_nps_recommend = true && this.isSetHr_nps_recommend();
    boolean that_present_hr_nps_recommend = true && that.isSetHr_nps_recommend();
    if (this_present_hr_nps_recommend || that_present_hr_nps_recommend) {
      if (!(this_present_hr_nps_recommend && that_present_hr_nps_recommend))
        return false;
      if (!this.hr_nps_recommend.equals(that.hr_nps_recommend))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetHr_nps()) ? 131071 : 524287);
    if (isSetHr_nps())
      hashCode = hashCode * 8191 + hr_nps.hashCode();

    hashCode = hashCode * 8191 + ((isSetHr_nps_recommend()) ? 131071 : 524287);
    if (isSetHr_nps_recommend())
      hashCode = hashCode * 8191 + hr_nps_recommend.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(HrNpsResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetHr_nps()).compareTo(other.isSetHr_nps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHr_nps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_nps, other.hr_nps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHr_nps_recommend()).compareTo(other.isSetHr_nps_recommend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHr_nps_recommend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_nps_recommend, other.hr_nps_recommend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("HrNpsResult(");
    boolean first = true;

    if (isSetHr_nps()) {
      sb.append("hr_nps:");
      if (this.hr_nps == null) {
        sb.append("null");
      } else {
        sb.append(this.hr_nps);
      }
      first = false;
    }
    if (isSetHr_nps_recommend()) {
      if (!first) sb.append(", ");
      sb.append("hr_nps_recommend:");
      if (this.hr_nps_recommend == null) {
        sb.append("null");
      } else {
        sb.append(this.hr_nps_recommend);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (hr_nps != null) {
      hr_nps.validate();
    }
    if (hr_nps_recommend != null) {
      hr_nps_recommend.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HrNpsResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrNpsResultStandardScheme getScheme() {
      return new HrNpsResultStandardScheme();
    }
  }

  private static class HrNpsResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<HrNpsResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HrNpsResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HR_NPS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hr_nps = new HrNpsDO();
              struct.hr_nps.read(iprot);
              struct.setHr_npsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HR_NPS_RECOMMEND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hr_nps_recommend = new HrNpsRecommendDO();
              struct.hr_nps_recommend.read(iprot);
              struct.setHr_nps_recommendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HrNpsResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.hr_nps != null) {
        if (struct.isSetHr_nps()) {
          oprot.writeFieldBegin(HR_NPS_FIELD_DESC);
          struct.hr_nps.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hr_nps_recommend != null) {
        if (struct.isSetHr_nps_recommend()) {
          oprot.writeFieldBegin(HR_NPS_RECOMMEND_FIELD_DESC);
          struct.hr_nps_recommend.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HrNpsResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HrNpsResultTupleScheme getScheme() {
      return new HrNpsResultTupleScheme();
    }
  }

  private static class HrNpsResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<HrNpsResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HrNpsResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetHr_nps()) {
        optionals.set(0);
      }
      if (struct.isSetHr_nps_recommend()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetHr_nps()) {
        struct.hr_nps.write(oprot);
      }
      if (struct.isSetHr_nps_recommend()) {
        struct.hr_nps_recommend.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HrNpsResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.hr_nps = new HrNpsDO();
        struct.hr_nps.read(iprot);
        struct.setHr_npsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hr_nps_recommend = new HrNpsRecommendDO();
        struct.hr_nps_recommend.read(iprot);
        struct.setHr_nps_recommendIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

