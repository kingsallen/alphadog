/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.company.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-11")
public class CompanyCertConf implements org.apache.thrift.TBase<CompanyCertConf, CompanyCertConf._Fields>, java.io.Serializable, Cloneable, Comparable<CompanyCertConf> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CompanyCertConf");

  private static final org.apache.thrift.protocol.TField HR_EMPLOYEE_CERT_CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("hrEmployeeCertConf", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField HR_IMPORTER_MONITOR_FIELD_DESC = new org.apache.thrift.protocol.TField("hrImporterMonitor", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CompanyCertConfStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CompanyCertConfTupleSchemeFactory();

  public java.util.List<com.moseeker.thrift.gen.dao.struct.hrdb.HrEmployeeCertConfDO> hrEmployeeCertConf; // required
  public HrImporterMonitorVO hrImporterMonitor; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HR_EMPLOYEE_CERT_CONF((short)1, "hrEmployeeCertConf"),
    HR_IMPORTER_MONITOR((short)2, "hrImporterMonitor");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HR_EMPLOYEE_CERT_CONF
          return HR_EMPLOYEE_CERT_CONF;
        case 2: // HR_IMPORTER_MONITOR
          return HR_IMPORTER_MONITOR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HR_EMPLOYEE_CERT_CONF, new org.apache.thrift.meta_data.FieldMetaData("hrEmployeeCertConf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.dao.struct.hrdb.HrEmployeeCertConfDO.class))));
    tmpMap.put(_Fields.HR_IMPORTER_MONITOR, new org.apache.thrift.meta_data.FieldMetaData("hrImporterMonitor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "HrImporterMonitorVO")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CompanyCertConf.class, metaDataMap);
  }

  public CompanyCertConf() {
  }

  public CompanyCertConf(
    java.util.List<com.moseeker.thrift.gen.dao.struct.hrdb.HrEmployeeCertConfDO> hrEmployeeCertConf,
    HrImporterMonitorVO hrImporterMonitor)
  {
    this();
    this.hrEmployeeCertConf = hrEmployeeCertConf;
    this.hrImporterMonitor = hrImporterMonitor;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CompanyCertConf(CompanyCertConf other) {
    if (other.isSetHrEmployeeCertConf()) {
      java.util.List<com.moseeker.thrift.gen.dao.struct.hrdb.HrEmployeeCertConfDO> __this__hrEmployeeCertConf = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.hrdb.HrEmployeeCertConfDO>(other.hrEmployeeCertConf.size());
      for (com.moseeker.thrift.gen.dao.struct.hrdb.HrEmployeeCertConfDO other_element : other.hrEmployeeCertConf) {
        __this__hrEmployeeCertConf.add(new com.moseeker.thrift.gen.dao.struct.hrdb.HrEmployeeCertConfDO(other_element));
      }
      this.hrEmployeeCertConf = __this__hrEmployeeCertConf;
    }
    if (other.isSetHrImporterMonitor()) {
      this.hrImporterMonitor = new HrImporterMonitorVO(other.hrImporterMonitor);
    }
  }

  public CompanyCertConf deepCopy() {
    return new CompanyCertConf(this);
  }

  @Override
  public void clear() {
    this.hrEmployeeCertConf = null;
    this.hrImporterMonitor = null;
  }

  public int getHrEmployeeCertConfSize() {
    return (this.hrEmployeeCertConf == null) ? 0 : this.hrEmployeeCertConf.size();
  }

  public java.util.Iterator<com.moseeker.thrift.gen.dao.struct.hrdb.HrEmployeeCertConfDO> getHrEmployeeCertConfIterator() {
    return (this.hrEmployeeCertConf == null) ? null : this.hrEmployeeCertConf.iterator();
  }

  public void addToHrEmployeeCertConf(com.moseeker.thrift.gen.dao.struct.hrdb.HrEmployeeCertConfDO elem) {
    if (this.hrEmployeeCertConf == null) {
      this.hrEmployeeCertConf = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.hrdb.HrEmployeeCertConfDO>();
    }
    this.hrEmployeeCertConf.add(elem);
  }

  public java.util.List<com.moseeker.thrift.gen.dao.struct.hrdb.HrEmployeeCertConfDO> getHrEmployeeCertConf() {
    return this.hrEmployeeCertConf;
  }

  public CompanyCertConf setHrEmployeeCertConf(java.util.List<com.moseeker.thrift.gen.dao.struct.hrdb.HrEmployeeCertConfDO> hrEmployeeCertConf) {
    this.hrEmployeeCertConf = hrEmployeeCertConf;
    return this;
  }

  public void unsetHrEmployeeCertConf() {
    this.hrEmployeeCertConf = null;
  }

  /** Returns true if field hrEmployeeCertConf is set (has been assigned a value) and false otherwise */
  public boolean isSetHrEmployeeCertConf() {
    return this.hrEmployeeCertConf != null;
  }

  public void setHrEmployeeCertConfIsSet(boolean value) {
    if (!value) {
      this.hrEmployeeCertConf = null;
    }
  }

  public HrImporterMonitorVO getHrImporterMonitor() {
    return this.hrImporterMonitor;
  }

  public CompanyCertConf setHrImporterMonitor(HrImporterMonitorVO hrImporterMonitor) {
    this.hrImporterMonitor = hrImporterMonitor;
    return this;
  }

  public void unsetHrImporterMonitor() {
    this.hrImporterMonitor = null;
  }

  /** Returns true if field hrImporterMonitor is set (has been assigned a value) and false otherwise */
  public boolean isSetHrImporterMonitor() {
    return this.hrImporterMonitor != null;
  }

  public void setHrImporterMonitorIsSet(boolean value) {
    if (!value) {
      this.hrImporterMonitor = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case HR_EMPLOYEE_CERT_CONF:
      if (value == null) {
        unsetHrEmployeeCertConf();
      } else {
        setHrEmployeeCertConf((java.util.List<com.moseeker.thrift.gen.dao.struct.hrdb.HrEmployeeCertConfDO>)value);
      }
      break;

    case HR_IMPORTER_MONITOR:
      if (value == null) {
        unsetHrImporterMonitor();
      } else {
        setHrImporterMonitor((HrImporterMonitorVO)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case HR_EMPLOYEE_CERT_CONF:
      return getHrEmployeeCertConf();

    case HR_IMPORTER_MONITOR:
      return getHrImporterMonitor();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case HR_EMPLOYEE_CERT_CONF:
      return isSetHrEmployeeCertConf();
    case HR_IMPORTER_MONITOR:
      return isSetHrImporterMonitor();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof CompanyCertConf)
      return this.equals((CompanyCertConf)that);
    return false;
  }

  public boolean equals(CompanyCertConf that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_hrEmployeeCertConf = true && this.isSetHrEmployeeCertConf();
    boolean that_present_hrEmployeeCertConf = true && that.isSetHrEmployeeCertConf();
    if (this_present_hrEmployeeCertConf || that_present_hrEmployeeCertConf) {
      if (!(this_present_hrEmployeeCertConf && that_present_hrEmployeeCertConf))
        return false;
      if (!this.hrEmployeeCertConf.equals(that.hrEmployeeCertConf))
        return false;
    }

    boolean this_present_hrImporterMonitor = true && this.isSetHrImporterMonitor();
    boolean that_present_hrImporterMonitor = true && that.isSetHrImporterMonitor();
    if (this_present_hrImporterMonitor || that_present_hrImporterMonitor) {
      if (!(this_present_hrImporterMonitor && that_present_hrImporterMonitor))
        return false;
      if (!this.hrImporterMonitor.equals(that.hrImporterMonitor))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetHrEmployeeCertConf()) ? 131071 : 524287);
    if (isSetHrEmployeeCertConf())
      hashCode = hashCode * 8191 + hrEmployeeCertConf.hashCode();

    hashCode = hashCode * 8191 + ((isSetHrImporterMonitor()) ? 131071 : 524287);
    if (isSetHrImporterMonitor())
      hashCode = hashCode * 8191 + hrImporterMonitor.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(CompanyCertConf other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetHrEmployeeCertConf()).compareTo(other.isSetHrEmployeeCertConf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHrEmployeeCertConf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrEmployeeCertConf, other.hrEmployeeCertConf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHrImporterMonitor()).compareTo(other.isSetHrImporterMonitor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHrImporterMonitor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrImporterMonitor, other.hrImporterMonitor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CompanyCertConf(");
    boolean first = true;

    sb.append("hrEmployeeCertConf:");
    if (this.hrEmployeeCertConf == null) {
      sb.append("null");
    } else {
      sb.append(this.hrEmployeeCertConf);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hrImporterMonitor:");
    if (this.hrImporterMonitor == null) {
      sb.append("null");
    } else {
      sb.append(this.hrImporterMonitor);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CompanyCertConfStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CompanyCertConfStandardScheme getScheme() {
      return new CompanyCertConfStandardScheme();
    }
  }

  private static class CompanyCertConfStandardScheme extends org.apache.thrift.scheme.StandardScheme<CompanyCertConf> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CompanyCertConf struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HR_EMPLOYEE_CERT_CONF
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.hrEmployeeCertConf = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.hrdb.HrEmployeeCertConfDO>(_list16.size);
                com.moseeker.thrift.gen.dao.struct.hrdb.HrEmployeeCertConfDO _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new com.moseeker.thrift.gen.dao.struct.hrdb.HrEmployeeCertConfDO();
                  _elem17.read(iprot);
                  struct.hrEmployeeCertConf.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setHrEmployeeCertConfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HR_IMPORTER_MONITOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hrImporterMonitor = new HrImporterMonitorVO();
              struct.hrImporterMonitor.read(iprot);
              struct.setHrImporterMonitorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CompanyCertConf struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.hrEmployeeCertConf != null) {
        oprot.writeFieldBegin(HR_EMPLOYEE_CERT_CONF_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.hrEmployeeCertConf.size()));
          for (com.moseeker.thrift.gen.dao.struct.hrdb.HrEmployeeCertConfDO _iter19 : struct.hrEmployeeCertConf)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.hrImporterMonitor != null) {
        oprot.writeFieldBegin(HR_IMPORTER_MONITOR_FIELD_DESC);
        struct.hrImporterMonitor.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CompanyCertConfTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CompanyCertConfTupleScheme getScheme() {
      return new CompanyCertConfTupleScheme();
    }
  }

  private static class CompanyCertConfTupleScheme extends org.apache.thrift.scheme.TupleScheme<CompanyCertConf> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CompanyCertConf struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetHrEmployeeCertConf()) {
        optionals.set(0);
      }
      if (struct.isSetHrImporterMonitor()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetHrEmployeeCertConf()) {
        {
          oprot.writeI32(struct.hrEmployeeCertConf.size());
          for (com.moseeker.thrift.gen.dao.struct.hrdb.HrEmployeeCertConfDO _iter20 : struct.hrEmployeeCertConf)
          {
            _iter20.write(oprot);
          }
        }
      }
      if (struct.isSetHrImporterMonitor()) {
        struct.hrImporterMonitor.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CompanyCertConf struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.hrEmployeeCertConf = new java.util.ArrayList<com.moseeker.thrift.gen.dao.struct.hrdb.HrEmployeeCertConfDO>(_list21.size);
          com.moseeker.thrift.gen.dao.struct.hrdb.HrEmployeeCertConfDO _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new com.moseeker.thrift.gen.dao.struct.hrdb.HrEmployeeCertConfDO();
            _elem22.read(iprot);
            struct.hrEmployeeCertConf.add(_elem22);
          }
        }
        struct.setHrEmployeeCertConfIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hrImporterMonitor = new HrImporterMonitorVO();
        struct.hrImporterMonitor.read(iprot);
        struct.setHrImporterMonitorIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

