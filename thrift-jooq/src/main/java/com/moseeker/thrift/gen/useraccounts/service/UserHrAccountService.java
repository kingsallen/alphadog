/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.useraccounts.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-03-09")
public class UserHrAccountService {

  /**
   * HR账户服务
   * 
   */
  public interface Iface {

    public com.moseeker.thrift.gen.common.struct.Response sendMobileVerifiyCode(String mobile, String code, int source) throws TException;

    public com.moseeker.thrift.gen.common.struct.Response postResource(com.moseeker.thrift.gen.useraccounts.struct.DownloadReport downloadReport) throws TException;

    public com.moseeker.thrift.gen.common.struct.Response putResource(com.moseeker.thrift.gen.useraccounts.struct.UserHrAccount userHrAccount) throws TException;

    public com.moseeker.thrift.gen.common.struct.Response bind(com.moseeker.thrift.gen.useraccounts.struct.BindAccountStruct account) throws TException;

    public com.moseeker.thrift.gen.common.struct.Response getSearchCondition(int hrAccountId, int type) throws TException;

    public com.moseeker.thrift.gen.common.struct.Response postSearchCondition(com.moseeker.thrift.gen.useraccounts.struct.SearchCondition searchCondition) throws TException;

    public com.moseeker.thrift.gen.common.struct.Response delSearchCondition(int hrAccountId, int id) throws TException;

    public com.moseeker.thrift.gen.common.struct.Response joinTalentpool(int hrAccountId, List<Integer> applierIds) throws TException;

    public com.moseeker.thrift.gen.common.struct.Response shiftOutTalentpool(int hrAccountId, List<Integer> applierIds) throws TException;

    public com.moseeker.thrift.gen.common.struct.Response userHrAccount(int company_id, int disable, int page, int per_age) throws TException;

  }

  public interface AsyncIface {

    public void sendMobileVerifiyCode(String mobile, String code, int source, AsyncMethodCallback resultHandler) throws TException;

    public void postResource(com.moseeker.thrift.gen.useraccounts.struct.DownloadReport downloadReport, AsyncMethodCallback resultHandler) throws TException;

    public void putResource(com.moseeker.thrift.gen.useraccounts.struct.UserHrAccount userHrAccount, AsyncMethodCallback resultHandler) throws TException;

    public void bind(com.moseeker.thrift.gen.useraccounts.struct.BindAccountStruct account, AsyncMethodCallback resultHandler) throws TException;

    public void getSearchCondition(int hrAccountId, int type, AsyncMethodCallback resultHandler) throws TException;

    public void postSearchCondition(com.moseeker.thrift.gen.useraccounts.struct.SearchCondition searchCondition, AsyncMethodCallback resultHandler) throws TException;

    public void delSearchCondition(int hrAccountId, int id, AsyncMethodCallback resultHandler) throws TException;

    public void joinTalentpool(int hrAccountId, List<Integer> applierIds, AsyncMethodCallback resultHandler) throws TException;

    public void shiftOutTalentpool(int hrAccountId, List<Integer> applierIds, AsyncMethodCallback resultHandler) throws TException;

    public void userHrAccount(int company_id, int disable, int page, int per_age, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.moseeker.thrift.gen.common.struct.Response sendMobileVerifiyCode(String mobile, String code, int source) throws TException
    {
      send_sendMobileVerifiyCode(mobile, code, source);
      return recv_sendMobileVerifiyCode();
    }

    public void send_sendMobileVerifiyCode(String mobile, String code, int source) throws TException
    {
      sendMobileVerifiyCode_args args = new sendMobileVerifiyCode_args();
      args.setMobile(mobile);
      args.setCode(code);
      args.setSource(source);
      sendBase("sendMobileVerifiyCode", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_sendMobileVerifiyCode() throws TException
    {
      sendMobileVerifiyCode_result result = new sendMobileVerifiyCode_result();
      receiveBase(result, "sendMobileVerifiyCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendMobileVerifiyCode failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response postResource(com.moseeker.thrift.gen.useraccounts.struct.DownloadReport downloadReport) throws TException
    {
      send_postResource(downloadReport);
      return recv_postResource();
    }

    public void send_postResource(com.moseeker.thrift.gen.useraccounts.struct.DownloadReport downloadReport) throws TException
    {
      postResource_args args = new postResource_args();
      args.setDownloadReport(downloadReport);
      sendBase("postResource", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_postResource() throws TException
    {
      postResource_result result = new postResource_result();
      receiveBase(result, "postResource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postResource failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response putResource(com.moseeker.thrift.gen.useraccounts.struct.UserHrAccount userHrAccount) throws TException
    {
      send_putResource(userHrAccount);
      return recv_putResource();
    }

    public void send_putResource(com.moseeker.thrift.gen.useraccounts.struct.UserHrAccount userHrAccount) throws TException
    {
      putResource_args args = new putResource_args();
      args.setUserHrAccount(userHrAccount);
      sendBase("putResource", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_putResource() throws TException
    {
      putResource_result result = new putResource_result();
      receiveBase(result, "putResource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "putResource failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response bind(com.moseeker.thrift.gen.useraccounts.struct.BindAccountStruct account) throws TException
    {
      send_bind(account);
      return recv_bind();
    }

    public void send_bind(com.moseeker.thrift.gen.useraccounts.struct.BindAccountStruct account) throws TException
    {
      bind_args args = new bind_args();
      args.setAccount(account);
      sendBase("bind", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_bind() throws TException
    {
      bind_result result = new bind_result();
      receiveBase(result, "bind");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bind failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response getSearchCondition(int hrAccountId, int type) throws TException
    {
      send_getSearchCondition(hrAccountId, type);
      return recv_getSearchCondition();
    }

    public void send_getSearchCondition(int hrAccountId, int type) throws TException
    {
      getSearchCondition_args args = new getSearchCondition_args();
      args.setHrAccountId(hrAccountId);
      args.setType(type);
      sendBase("getSearchCondition", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_getSearchCondition() throws TException
    {
      getSearchCondition_result result = new getSearchCondition_result();
      receiveBase(result, "getSearchCondition");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSearchCondition failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response postSearchCondition(com.moseeker.thrift.gen.useraccounts.struct.SearchCondition searchCondition) throws TException
    {
      send_postSearchCondition(searchCondition);
      return recv_postSearchCondition();
    }

    public void send_postSearchCondition(com.moseeker.thrift.gen.useraccounts.struct.SearchCondition searchCondition) throws TException
    {
      postSearchCondition_args args = new postSearchCondition_args();
      args.setSearchCondition(searchCondition);
      sendBase("postSearchCondition", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_postSearchCondition() throws TException
    {
      postSearchCondition_result result = new postSearchCondition_result();
      receiveBase(result, "postSearchCondition");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postSearchCondition failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response delSearchCondition(int hrAccountId, int id) throws TException
    {
      send_delSearchCondition(hrAccountId, id);
      return recv_delSearchCondition();
    }

    public void send_delSearchCondition(int hrAccountId, int id) throws TException
    {
      delSearchCondition_args args = new delSearchCondition_args();
      args.setHrAccountId(hrAccountId);
      args.setId(id);
      sendBase("delSearchCondition", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_delSearchCondition() throws TException
    {
      delSearchCondition_result result = new delSearchCondition_result();
      receiveBase(result, "delSearchCondition");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delSearchCondition failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response joinTalentpool(int hrAccountId, List<Integer> applierIds) throws TException
    {
      send_joinTalentpool(hrAccountId, applierIds);
      return recv_joinTalentpool();
    }

    public void send_joinTalentpool(int hrAccountId, List<Integer> applierIds) throws TException
    {
      joinTalentpool_args args = new joinTalentpool_args();
      args.setHrAccountId(hrAccountId);
      args.setApplierIds(applierIds);
      sendBase("joinTalentpool", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_joinTalentpool() throws TException
    {
      joinTalentpool_result result = new joinTalentpool_result();
      receiveBase(result, "joinTalentpool");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "joinTalentpool failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response shiftOutTalentpool(int hrAccountId, List<Integer> applierIds) throws TException
    {
      send_shiftOutTalentpool(hrAccountId, applierIds);
      return recv_shiftOutTalentpool();
    }

    public void send_shiftOutTalentpool(int hrAccountId, List<Integer> applierIds) throws TException
    {
      shiftOutTalentpool_args args = new shiftOutTalentpool_args();
      args.setHrAccountId(hrAccountId);
      args.setApplierIds(applierIds);
      sendBase("shiftOutTalentpool", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_shiftOutTalentpool() throws TException
    {
      shiftOutTalentpool_result result = new shiftOutTalentpool_result();
      receiveBase(result, "shiftOutTalentpool");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "shiftOutTalentpool failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response userHrAccount(int company_id, int disable, int page, int per_age) throws TException
    {
      send_userHrAccount(company_id, disable, page, per_age);
      return recv_userHrAccount();
    }

    public void send_userHrAccount(int company_id, int disable, int page, int per_age) throws TException
    {
      userHrAccount_args args = new userHrAccount_args();
      args.setCompany_id(company_id);
      args.setDisable(disable);
      args.setPage(page);
      args.setPer_age(per_age);
      sendBase("userHrAccount", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_userHrAccount() throws TException
    {
      userHrAccount_result result = new userHrAccount_result();
      receiveBase(result, "userHrAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "userHrAccount failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void sendMobileVerifiyCode(String mobile, String code, int source, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      sendMobileVerifiyCode_call method_call = new sendMobileVerifiyCode_call(mobile, code, source, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendMobileVerifiyCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String mobile;
      private String code;
      private int source;
      public sendMobileVerifiyCode_call(String mobile, String code, int source, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mobile = mobile;
        this.code = code;
        this.source = source;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendMobileVerifiyCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendMobileVerifiyCode_args args = new sendMobileVerifiyCode_args();
        args.setMobile(mobile);
        args.setCode(code);
        args.setSource(source);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendMobileVerifiyCode();
      }
    }

    public void postResource(com.moseeker.thrift.gen.useraccounts.struct.DownloadReport downloadReport, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      postResource_call method_call = new postResource_call(downloadReport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postResource_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.useraccounts.struct.DownloadReport downloadReport;
      public postResource_call(com.moseeker.thrift.gen.useraccounts.struct.DownloadReport downloadReport, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.downloadReport = downloadReport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postResource_args args = new postResource_args();
        args.setDownloadReport(downloadReport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postResource();
      }
    }

    public void putResource(com.moseeker.thrift.gen.useraccounts.struct.UserHrAccount userHrAccount, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      putResource_call method_call = new putResource_call(userHrAccount, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class putResource_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.useraccounts.struct.UserHrAccount userHrAccount;
      public putResource_call(com.moseeker.thrift.gen.useraccounts.struct.UserHrAccount userHrAccount, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userHrAccount = userHrAccount;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("putResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        putResource_args args = new putResource_args();
        args.setUserHrAccount(userHrAccount);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_putResource();
      }
    }

    public void bind(com.moseeker.thrift.gen.useraccounts.struct.BindAccountStruct account, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      bind_call method_call = new bind_call(account, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bind_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.useraccounts.struct.BindAccountStruct account;
      public bind_call(com.moseeker.thrift.gen.useraccounts.struct.BindAccountStruct account, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.account = account;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bind", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bind_args args = new bind_args();
        args.setAccount(account);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bind();
      }
    }

    public void getSearchCondition(int hrAccountId, int type, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getSearchCondition_call method_call = new getSearchCondition_call(hrAccountId, type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSearchCondition_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int hrAccountId;
      private int type;
      public getSearchCondition_call(int hrAccountId, int type, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hrAccountId = hrAccountId;
        this.type = type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSearchCondition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSearchCondition_args args = new getSearchCondition_args();
        args.setHrAccountId(hrAccountId);
        args.setType(type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSearchCondition();
      }
    }

    public void postSearchCondition(com.moseeker.thrift.gen.useraccounts.struct.SearchCondition searchCondition, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      postSearchCondition_call method_call = new postSearchCondition_call(searchCondition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postSearchCondition_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.moseeker.thrift.gen.useraccounts.struct.SearchCondition searchCondition;
      public postSearchCondition_call(com.moseeker.thrift.gen.useraccounts.struct.SearchCondition searchCondition, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.searchCondition = searchCondition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postSearchCondition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postSearchCondition_args args = new postSearchCondition_args();
        args.setSearchCondition(searchCondition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postSearchCondition();
      }
    }

    public void delSearchCondition(int hrAccountId, int id, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      delSearchCondition_call method_call = new delSearchCondition_call(hrAccountId, id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delSearchCondition_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int hrAccountId;
      private int id;
      public delSearchCondition_call(int hrAccountId, int id, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hrAccountId = hrAccountId;
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delSearchCondition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delSearchCondition_args args = new delSearchCondition_args();
        args.setHrAccountId(hrAccountId);
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delSearchCondition();
      }
    }

    public void joinTalentpool(int hrAccountId, List<Integer> applierIds, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      joinTalentpool_call method_call = new joinTalentpool_call(hrAccountId, applierIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class joinTalentpool_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int hrAccountId;
      private List<Integer> applierIds;
      public joinTalentpool_call(int hrAccountId, List<Integer> applierIds, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hrAccountId = hrAccountId;
        this.applierIds = applierIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("joinTalentpool", org.apache.thrift.protocol.TMessageType.CALL, 0));
        joinTalentpool_args args = new joinTalentpool_args();
        args.setHrAccountId(hrAccountId);
        args.setApplierIds(applierIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_joinTalentpool();
      }
    }

    public void shiftOutTalentpool(int hrAccountId, List<Integer> applierIds, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      shiftOutTalentpool_call method_call = new shiftOutTalentpool_call(hrAccountId, applierIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class shiftOutTalentpool_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int hrAccountId;
      private List<Integer> applierIds;
      public shiftOutTalentpool_call(int hrAccountId, List<Integer> applierIds, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hrAccountId = hrAccountId;
        this.applierIds = applierIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("shiftOutTalentpool", org.apache.thrift.protocol.TMessageType.CALL, 0));
        shiftOutTalentpool_args args = new shiftOutTalentpool_args();
        args.setHrAccountId(hrAccountId);
        args.setApplierIds(applierIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_shiftOutTalentpool();
      }
    }

    public void userHrAccount(int company_id, int disable, int page, int per_age, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      userHrAccount_call method_call = new userHrAccount_call(company_id, disable, page, per_age, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class userHrAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int company_id;
      private int disable;
      private int page;
      private int per_age;
      public userHrAccount_call(int company_id, int disable, int page, int per_age, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.company_id = company_id;
        this.disable = disable;
        this.page = page;
        this.per_age = per_age;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("userHrAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        userHrAccount_args args = new userHrAccount_args();
        args.setCompany_id(company_id);
        args.setDisable(disable);
        args.setPage(page);
        args.setPer_age(per_age);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_userHrAccount();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("sendMobileVerifiyCode", new sendMobileVerifiyCode());
      processMap.put("postResource", new postResource());
      processMap.put("putResource", new putResource());
      processMap.put("bind", new bind());
      processMap.put("getSearchCondition", new getSearchCondition());
      processMap.put("postSearchCondition", new postSearchCondition());
      processMap.put("delSearchCondition", new delSearchCondition());
      processMap.put("joinTalentpool", new joinTalentpool());
      processMap.put("shiftOutTalentpool", new shiftOutTalentpool());
      processMap.put("userHrAccount", new userHrAccount());
      return processMap;
    }

    public static class sendMobileVerifiyCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendMobileVerifiyCode_args> {
      public sendMobileVerifiyCode() {
        super("sendMobileVerifiyCode");
      }

      public sendMobileVerifiyCode_args getEmptyArgsInstance() {
        return new sendMobileVerifiyCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendMobileVerifiyCode_result getResult(I iface, sendMobileVerifiyCode_args args) throws TException {
        sendMobileVerifiyCode_result result = new sendMobileVerifiyCode_result();
        result.success = iface.sendMobileVerifiyCode(args.mobile, args.code, args.source);
        return result;
      }
    }

    public static class postResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postResource_args> {
      public postResource() {
        super("postResource");
      }

      public postResource_args getEmptyArgsInstance() {
        return new postResource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postResource_result getResult(I iface, postResource_args args) throws TException {
        postResource_result result = new postResource_result();
        result.success = iface.postResource(args.downloadReport);
        return result;
      }
    }

    public static class putResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, putResource_args> {
      public putResource() {
        super("putResource");
      }

      public putResource_args getEmptyArgsInstance() {
        return new putResource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public putResource_result getResult(I iface, putResource_args args) throws TException {
        putResource_result result = new putResource_result();
        result.success = iface.putResource(args.userHrAccount);
        return result;
      }
    }

    public static class bind<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bind_args> {
      public bind() {
        super("bind");
      }

      public bind_args getEmptyArgsInstance() {
        return new bind_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bind_result getResult(I iface, bind_args args) throws TException {
        bind_result result = new bind_result();
        result.success = iface.bind(args.account);
        return result;
      }
    }

    public static class getSearchCondition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSearchCondition_args> {
      public getSearchCondition() {
        super("getSearchCondition");
      }

      public getSearchCondition_args getEmptyArgsInstance() {
        return new getSearchCondition_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSearchCondition_result getResult(I iface, getSearchCondition_args args) throws TException {
        getSearchCondition_result result = new getSearchCondition_result();
        result.success = iface.getSearchCondition(args.hrAccountId, args.type);
        return result;
      }
    }

    public static class postSearchCondition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postSearchCondition_args> {
      public postSearchCondition() {
        super("postSearchCondition");
      }

      public postSearchCondition_args getEmptyArgsInstance() {
        return new postSearchCondition_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postSearchCondition_result getResult(I iface, postSearchCondition_args args) throws TException {
        postSearchCondition_result result = new postSearchCondition_result();
        result.success = iface.postSearchCondition(args.searchCondition);
        return result;
      }
    }

    public static class delSearchCondition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delSearchCondition_args> {
      public delSearchCondition() {
        super("delSearchCondition");
      }

      public delSearchCondition_args getEmptyArgsInstance() {
        return new delSearchCondition_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delSearchCondition_result getResult(I iface, delSearchCondition_args args) throws TException {
        delSearchCondition_result result = new delSearchCondition_result();
        result.success = iface.delSearchCondition(args.hrAccountId, args.id);
        return result;
      }
    }

    public static class joinTalentpool<I extends Iface> extends org.apache.thrift.ProcessFunction<I, joinTalentpool_args> {
      public joinTalentpool() {
        super("joinTalentpool");
      }

      public joinTalentpool_args getEmptyArgsInstance() {
        return new joinTalentpool_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public joinTalentpool_result getResult(I iface, joinTalentpool_args args) throws TException {
        joinTalentpool_result result = new joinTalentpool_result();
        result.success = iface.joinTalentpool(args.hrAccountId, args.applierIds);
        return result;
      }
    }

    public static class shiftOutTalentpool<I extends Iface> extends org.apache.thrift.ProcessFunction<I, shiftOutTalentpool_args> {
      public shiftOutTalentpool() {
        super("shiftOutTalentpool");
      }

      public shiftOutTalentpool_args getEmptyArgsInstance() {
        return new shiftOutTalentpool_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public shiftOutTalentpool_result getResult(I iface, shiftOutTalentpool_args args) throws TException {
        shiftOutTalentpool_result result = new shiftOutTalentpool_result();
        result.success = iface.shiftOutTalentpool(args.hrAccountId, args.applierIds);
        return result;
      }
    }

    public static class userHrAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, userHrAccount_args> {
      public userHrAccount() {
        super("userHrAccount");
      }

      public userHrAccount_args getEmptyArgsInstance() {
        return new userHrAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public userHrAccount_result getResult(I iface, userHrAccount_args args) throws TException {
        userHrAccount_result result = new userHrAccount_result();
        result.success = iface.userHrAccount(args.company_id, args.disable, args.page, args.per_age);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("sendMobileVerifiyCode", new sendMobileVerifiyCode());
      processMap.put("postResource", new postResource());
      processMap.put("putResource", new putResource());
      processMap.put("bind", new bind());
      processMap.put("getSearchCondition", new getSearchCondition());
      processMap.put("postSearchCondition", new postSearchCondition());
      processMap.put("delSearchCondition", new delSearchCondition());
      processMap.put("joinTalentpool", new joinTalentpool());
      processMap.put("shiftOutTalentpool", new shiftOutTalentpool());
      processMap.put("userHrAccount", new userHrAccount());
      return processMap;
    }

    public static class sendMobileVerifiyCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendMobileVerifiyCode_args, com.moseeker.thrift.gen.common.struct.Response> {
      public sendMobileVerifiyCode() {
        super("sendMobileVerifiyCode");
      }

      public sendMobileVerifiyCode_args getEmptyArgsInstance() {
        return new sendMobileVerifiyCode_args();
      }

      public AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() { 
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            sendMobileVerifiyCode_result result = new sendMobileVerifiyCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendMobileVerifiyCode_result result = new sendMobileVerifiyCode_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendMobileVerifiyCode_args args, AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws TException {
        iface.sendMobileVerifiyCode(args.mobile, args.code, args.source,resultHandler);
      }
    }

    public static class postResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postResource_args, com.moseeker.thrift.gen.common.struct.Response> {
      public postResource() {
        super("postResource");
      }

      public postResource_args getEmptyArgsInstance() {
        return new postResource_args();
      }

      public AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() { 
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            postResource_result result = new postResource_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postResource_result result = new postResource_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postResource_args args, AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws TException {
        iface.postResource(args.downloadReport,resultHandler);
      }
    }

    public static class putResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, putResource_args, com.moseeker.thrift.gen.common.struct.Response> {
      public putResource() {
        super("putResource");
      }

      public putResource_args getEmptyArgsInstance() {
        return new putResource_args();
      }

      public AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() { 
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            putResource_result result = new putResource_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            putResource_result result = new putResource_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, putResource_args args, AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws TException {
        iface.putResource(args.userHrAccount,resultHandler);
      }
    }

    public static class bind<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bind_args, com.moseeker.thrift.gen.common.struct.Response> {
      public bind() {
        super("bind");
      }

      public bind_args getEmptyArgsInstance() {
        return new bind_args();
      }

      public AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() { 
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            bind_result result = new bind_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bind_result result = new bind_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bind_args args, AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws TException {
        iface.bind(args.account,resultHandler);
      }
    }

    public static class getSearchCondition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSearchCondition_args, com.moseeker.thrift.gen.common.struct.Response> {
      public getSearchCondition() {
        super("getSearchCondition");
      }

      public getSearchCondition_args getEmptyArgsInstance() {
        return new getSearchCondition_args();
      }

      public AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() { 
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            getSearchCondition_result result = new getSearchCondition_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSearchCondition_result result = new getSearchCondition_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSearchCondition_args args, AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws TException {
        iface.getSearchCondition(args.hrAccountId, args.type,resultHandler);
      }
    }

    public static class postSearchCondition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postSearchCondition_args, com.moseeker.thrift.gen.common.struct.Response> {
      public postSearchCondition() {
        super("postSearchCondition");
      }

      public postSearchCondition_args getEmptyArgsInstance() {
        return new postSearchCondition_args();
      }

      public AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() { 
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            postSearchCondition_result result = new postSearchCondition_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postSearchCondition_result result = new postSearchCondition_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postSearchCondition_args args, AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws TException {
        iface.postSearchCondition(args.searchCondition,resultHandler);
      }
    }

    public static class delSearchCondition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delSearchCondition_args, com.moseeker.thrift.gen.common.struct.Response> {
      public delSearchCondition() {
        super("delSearchCondition");
      }

      public delSearchCondition_args getEmptyArgsInstance() {
        return new delSearchCondition_args();
      }

      public AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() { 
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            delSearchCondition_result result = new delSearchCondition_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delSearchCondition_result result = new delSearchCondition_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delSearchCondition_args args, AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws TException {
        iface.delSearchCondition(args.hrAccountId, args.id,resultHandler);
      }
    }

    public static class joinTalentpool<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, joinTalentpool_args, com.moseeker.thrift.gen.common.struct.Response> {
      public joinTalentpool() {
        super("joinTalentpool");
      }

      public joinTalentpool_args getEmptyArgsInstance() {
        return new joinTalentpool_args();
      }

      public AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() { 
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            joinTalentpool_result result = new joinTalentpool_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            joinTalentpool_result result = new joinTalentpool_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, joinTalentpool_args args, AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws TException {
        iface.joinTalentpool(args.hrAccountId, args.applierIds,resultHandler);
      }
    }

    public static class shiftOutTalentpool<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, shiftOutTalentpool_args, com.moseeker.thrift.gen.common.struct.Response> {
      public shiftOutTalentpool() {
        super("shiftOutTalentpool");
      }

      public shiftOutTalentpool_args getEmptyArgsInstance() {
        return new shiftOutTalentpool_args();
      }

      public AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() { 
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            shiftOutTalentpool_result result = new shiftOutTalentpool_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            shiftOutTalentpool_result result = new shiftOutTalentpool_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, shiftOutTalentpool_args args, AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws TException {
        iface.shiftOutTalentpool(args.hrAccountId, args.applierIds,resultHandler);
      }
    }

    public static class userHrAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, userHrAccount_args, com.moseeker.thrift.gen.common.struct.Response> {
      public userHrAccount() {
        super("userHrAccount");
      }

      public userHrAccount_args getEmptyArgsInstance() {
        return new userHrAccount_args();
      }

      public AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() { 
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            userHrAccount_result result = new userHrAccount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            userHrAccount_result result = new userHrAccount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, userHrAccount_args args, AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws TException {
        iface.userHrAccount(args.company_id, args.disable, args.page, args.per_age,resultHandler);
      }
    }

  }

  public static class sendMobileVerifiyCode_args implements org.apache.thrift.TBase<sendMobileVerifiyCode_args, sendMobileVerifiyCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendMobileVerifiyCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendMobileVerifiyCode_args");

    private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendMobileVerifiyCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendMobileVerifiyCode_argsTupleSchemeFactory());
    }

    public String mobile; // required
    public String code; // required
    public int source; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MOBILE((short)1, "mobile"),
      CODE((short)2, "code"),
      SOURCE((short)3, "source");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MOBILE
            return MOBILE;
          case 2: // CODE
            return CODE;
          case 3: // SOURCE
            return SOURCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SOURCE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendMobileVerifiyCode_args.class, metaDataMap);
    }

    public sendMobileVerifiyCode_args() {
    }

    public sendMobileVerifiyCode_args(
      String mobile,
      String code,
      int source)
    {
      this();
      this.mobile = mobile;
      this.code = code;
      this.source = source;
      setSourceIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMobileVerifiyCode_args(sendMobileVerifiyCode_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMobile()) {
        this.mobile = other.mobile;
      }
      if (other.isSetCode()) {
        this.code = other.code;
      }
      this.source = other.source;
    }

    public sendMobileVerifiyCode_args deepCopy() {
      return new sendMobileVerifiyCode_args(this);
    }

    @Override
    public void clear() {
      this.mobile = null;
      this.code = null;
      setSourceIsSet(false);
      this.source = 0;
    }

    public String getMobile() {
      return this.mobile;
    }

    public sendMobileVerifiyCode_args setMobile(String mobile) {
      this.mobile = mobile;
      return this;
    }

    public void unsetMobile() {
      this.mobile = null;
    }

    /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
    public boolean isSetMobile() {
      return this.mobile != null;
    }

    public void setMobileIsSet(boolean value) {
      if (!value) {
        this.mobile = null;
      }
    }

    public String getCode() {
      return this.code;
    }

    public sendMobileVerifiyCode_args setCode(String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public int getSource() {
      return this.source;
    }

    public sendMobileVerifiyCode_args setSource(int source) {
      this.source = source;
      setSourceIsSet(true);
      return this;
    }

    public void unsetSource() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOURCE_ISSET_ID);
    }

    /** Returns true if field source is set (has been assigned a value) and false otherwise */
    public boolean isSetSource() {
      return EncodingUtils.testBit(__isset_bitfield, __SOURCE_ISSET_ID);
    }

    public void setSourceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOURCE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MOBILE:
        if (value == null) {
          unsetMobile();
        } else {
          setMobile((String)value);
        }
        break;

      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((String)value);
        }
        break;

      case SOURCE:
        if (value == null) {
          unsetSource();
        } else {
          setSource((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MOBILE:
        return getMobile();

      case CODE:
        return getCode();

      case SOURCE:
        return getSource();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MOBILE:
        return isSetMobile();
      case CODE:
        return isSetCode();
      case SOURCE:
        return isSetSource();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMobileVerifiyCode_args)
        return this.equals((sendMobileVerifiyCode_args)that);
      return false;
    }

    public boolean equals(sendMobileVerifiyCode_args that) {
      if (that == null)
        return false;

      boolean this_present_mobile = true && this.isSetMobile();
      boolean that_present_mobile = true && that.isSetMobile();
      if (this_present_mobile || that_present_mobile) {
        if (!(this_present_mobile && that_present_mobile))
          return false;
        if (!this.mobile.equals(that.mobile))
          return false;
      }

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      boolean this_present_source = true;
      boolean that_present_source = true;
      if (this_present_source || that_present_source) {
        if (!(this_present_source && that_present_source))
          return false;
        if (this.source != that.source)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_mobile = true && (isSetMobile());
      list.add(present_mobile);
      if (present_mobile)
        list.add(mobile);

      boolean present_code = true && (isSetCode());
      list.add(present_code);
      if (present_code)
        list.add(code);

      boolean present_source = true;
      list.add(present_source);
      if (present_source)
        list.add(source);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendMobileVerifiyCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSource()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendMobileVerifiyCode_args(");
      boolean first = true;

      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("source:");
      sb.append(this.source);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendMobileVerifiyCode_argsStandardSchemeFactory implements SchemeFactory {
      public sendMobileVerifiyCode_argsStandardScheme getScheme() {
        return new sendMobileVerifiyCode_argsStandardScheme();
      }
    }

    private static class sendMobileVerifiyCode_argsStandardScheme extends StandardScheme<sendMobileVerifiyCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendMobileVerifiyCode_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MOBILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobile = iprot.readString();
                struct.setMobileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SOURCE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.source = iprot.readI32();
                struct.setSourceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendMobileVerifiyCode_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mobile != null) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        oprot.writeI32(struct.source);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendMobileVerifiyCode_argsTupleSchemeFactory implements SchemeFactory {
      public sendMobileVerifiyCode_argsTupleScheme getScheme() {
        return new sendMobileVerifiyCode_argsTupleScheme();
      }
    }

    private static class sendMobileVerifiyCode_argsTupleScheme extends TupleScheme<sendMobileVerifiyCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendMobileVerifiyCode_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMobile()) {
          optionals.set(0);
        }
        if (struct.isSetCode()) {
          optionals.set(1);
        }
        if (struct.isSetSource()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMobile()) {
          oprot.writeString(struct.mobile);
        }
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
        if (struct.isSetSource()) {
          oprot.writeI32(struct.source);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendMobileVerifiyCode_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.mobile = iprot.readString();
          struct.setMobileIsSet(true);
        }
        if (incoming.get(1)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.source = iprot.readI32();
          struct.setSourceIsSet(true);
        }
      }
    }

  }

  public static class sendMobileVerifiyCode_result implements org.apache.thrift.TBase<sendMobileVerifiyCode_result, sendMobileVerifiyCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendMobileVerifiyCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendMobileVerifiyCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendMobileVerifiyCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendMobileVerifiyCode_resultTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.common.struct.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendMobileVerifiyCode_result.class, metaDataMap);
    }

    public sendMobileVerifiyCode_result() {
    }

    public sendMobileVerifiyCode_result(
      com.moseeker.thrift.gen.common.struct.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMobileVerifiyCode_result(sendMobileVerifiyCode_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
    }

    public sendMobileVerifiyCode_result deepCopy() {
      return new sendMobileVerifiyCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public sendMobileVerifiyCode_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMobileVerifiyCode_result)
        return this.equals((sendMobileVerifiyCode_result)that);
      return false;
    }

    public boolean equals(sendMobileVerifiyCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendMobileVerifiyCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendMobileVerifiyCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendMobileVerifiyCode_resultStandardSchemeFactory implements SchemeFactory {
      public sendMobileVerifiyCode_resultStandardScheme getScheme() {
        return new sendMobileVerifiyCode_resultStandardScheme();
      }
    }

    private static class sendMobileVerifiyCode_resultStandardScheme extends StandardScheme<sendMobileVerifiyCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendMobileVerifiyCode_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendMobileVerifiyCode_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendMobileVerifiyCode_resultTupleSchemeFactory implements SchemeFactory {
      public sendMobileVerifiyCode_resultTupleScheme getScheme() {
        return new sendMobileVerifiyCode_resultTupleScheme();
      }
    }

    private static class sendMobileVerifiyCode_resultTupleScheme extends TupleScheme<sendMobileVerifiyCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendMobileVerifiyCode_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendMobileVerifiyCode_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class postResource_args implements org.apache.thrift.TBase<postResource_args, postResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<postResource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postResource_args");

    private static final org.apache.thrift.protocol.TField DOWNLOAD_REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("downloadReport", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postResource_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postResource_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.useraccounts.struct.DownloadReport downloadReport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DOWNLOAD_REPORT((short)1, "downloadReport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOWNLOAD_REPORT
            return DOWNLOAD_REPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOWNLOAD_REPORT, new org.apache.thrift.meta_data.FieldMetaData("downloadReport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.useraccounts.struct.DownloadReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postResource_args.class, metaDataMap);
    }

    public postResource_args() {
    }

    public postResource_args(
      com.moseeker.thrift.gen.useraccounts.struct.DownloadReport downloadReport)
    {
      this();
      this.downloadReport = downloadReport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postResource_args(postResource_args other) {
      if (other.isSetDownloadReport()) {
        this.downloadReport = new com.moseeker.thrift.gen.useraccounts.struct.DownloadReport(other.downloadReport);
      }
    }

    public postResource_args deepCopy() {
      return new postResource_args(this);
    }

    @Override
    public void clear() {
      this.downloadReport = null;
    }

    public com.moseeker.thrift.gen.useraccounts.struct.DownloadReport getDownloadReport() {
      return this.downloadReport;
    }

    public postResource_args setDownloadReport(com.moseeker.thrift.gen.useraccounts.struct.DownloadReport downloadReport) {
      this.downloadReport = downloadReport;
      return this;
    }

    public void unsetDownloadReport() {
      this.downloadReport = null;
    }

    /** Returns true if field downloadReport is set (has been assigned a value) and false otherwise */
    public boolean isSetDownloadReport() {
      return this.downloadReport != null;
    }

    public void setDownloadReportIsSet(boolean value) {
      if (!value) {
        this.downloadReport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOWNLOAD_REPORT:
        if (value == null) {
          unsetDownloadReport();
        } else {
          setDownloadReport((com.moseeker.thrift.gen.useraccounts.struct.DownloadReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOWNLOAD_REPORT:
        return getDownloadReport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOWNLOAD_REPORT:
        return isSetDownloadReport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postResource_args)
        return this.equals((postResource_args)that);
      return false;
    }

    public boolean equals(postResource_args that) {
      if (that == null)
        return false;

      boolean this_present_downloadReport = true && this.isSetDownloadReport();
      boolean that_present_downloadReport = true && that.isSetDownloadReport();
      if (this_present_downloadReport || that_present_downloadReport) {
        if (!(this_present_downloadReport && that_present_downloadReport))
          return false;
        if (!this.downloadReport.equals(that.downloadReport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_downloadReport = true && (isSetDownloadReport());
      list.add(present_downloadReport);
      if (present_downloadReport)
        list.add(downloadReport);

      return list.hashCode();
    }

    @Override
    public int compareTo(postResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDownloadReport()).compareTo(other.isSetDownloadReport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDownloadReport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downloadReport, other.downloadReport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postResource_args(");
      boolean first = true;

      sb.append("downloadReport:");
      if (this.downloadReport == null) {
        sb.append("null");
      } else {
        sb.append(this.downloadReport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (downloadReport != null) {
        downloadReport.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postResource_argsStandardSchemeFactory implements SchemeFactory {
      public postResource_argsStandardScheme getScheme() {
        return new postResource_argsStandardScheme();
      }
    }

    private static class postResource_argsStandardScheme extends StandardScheme<postResource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postResource_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DOWNLOAD_REPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.downloadReport = new com.moseeker.thrift.gen.useraccounts.struct.DownloadReport();
                struct.downloadReport.read(iprot);
                struct.setDownloadReportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postResource_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.downloadReport != null) {
          oprot.writeFieldBegin(DOWNLOAD_REPORT_FIELD_DESC);
          struct.downloadReport.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postResource_argsTupleSchemeFactory implements SchemeFactory {
      public postResource_argsTupleScheme getScheme() {
        return new postResource_argsTupleScheme();
      }
    }

    private static class postResource_argsTupleScheme extends TupleScheme<postResource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postResource_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDownloadReport()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDownloadReport()) {
          struct.downloadReport.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postResource_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.downloadReport = new com.moseeker.thrift.gen.useraccounts.struct.DownloadReport();
          struct.downloadReport.read(iprot);
          struct.setDownloadReportIsSet(true);
        }
      }
    }

  }

  public static class postResource_result implements org.apache.thrift.TBase<postResource_result, postResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<postResource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postResource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postResource_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postResource_resultTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.common.struct.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postResource_result.class, metaDataMap);
    }

    public postResource_result() {
    }

    public postResource_result(
      com.moseeker.thrift.gen.common.struct.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postResource_result(postResource_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
    }

    public postResource_result deepCopy() {
      return new postResource_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public postResource_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postResource_result)
        return this.equals((postResource_result)that);
      return false;
    }

    public boolean equals(postResource_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(postResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postResource_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postResource_resultStandardSchemeFactory implements SchemeFactory {
      public postResource_resultStandardScheme getScheme() {
        return new postResource_resultStandardScheme();
      }
    }

    private static class postResource_resultStandardScheme extends StandardScheme<postResource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postResource_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postResource_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postResource_resultTupleSchemeFactory implements SchemeFactory {
      public postResource_resultTupleScheme getScheme() {
        return new postResource_resultTupleScheme();
      }
    }

    private static class postResource_resultTupleScheme extends TupleScheme<postResource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postResource_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postResource_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class putResource_args implements org.apache.thrift.TBase<putResource_args, putResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<putResource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putResource_args");

    private static final org.apache.thrift.protocol.TField USER_HR_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("userHrAccount", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putResource_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putResource_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.useraccounts.struct.UserHrAccount userHrAccount; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_HR_ACCOUNT((short)1, "userHrAccount");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_HR_ACCOUNT
            return USER_HR_ACCOUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_HR_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("userHrAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.useraccounts.struct.UserHrAccount.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putResource_args.class, metaDataMap);
    }

    public putResource_args() {
    }

    public putResource_args(
      com.moseeker.thrift.gen.useraccounts.struct.UserHrAccount userHrAccount)
    {
      this();
      this.userHrAccount = userHrAccount;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putResource_args(putResource_args other) {
      if (other.isSetUserHrAccount()) {
        this.userHrAccount = new com.moseeker.thrift.gen.useraccounts.struct.UserHrAccount(other.userHrAccount);
      }
    }

    public putResource_args deepCopy() {
      return new putResource_args(this);
    }

    @Override
    public void clear() {
      this.userHrAccount = null;
    }

    public com.moseeker.thrift.gen.useraccounts.struct.UserHrAccount getUserHrAccount() {
      return this.userHrAccount;
    }

    public putResource_args setUserHrAccount(com.moseeker.thrift.gen.useraccounts.struct.UserHrAccount userHrAccount) {
      this.userHrAccount = userHrAccount;
      return this;
    }

    public void unsetUserHrAccount() {
      this.userHrAccount = null;
    }

    /** Returns true if field userHrAccount is set (has been assigned a value) and false otherwise */
    public boolean isSetUserHrAccount() {
      return this.userHrAccount != null;
    }

    public void setUserHrAccountIsSet(boolean value) {
      if (!value) {
        this.userHrAccount = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_HR_ACCOUNT:
        if (value == null) {
          unsetUserHrAccount();
        } else {
          setUserHrAccount((com.moseeker.thrift.gen.useraccounts.struct.UserHrAccount)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_HR_ACCOUNT:
        return getUserHrAccount();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_HR_ACCOUNT:
        return isSetUserHrAccount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putResource_args)
        return this.equals((putResource_args)that);
      return false;
    }

    public boolean equals(putResource_args that) {
      if (that == null)
        return false;

      boolean this_present_userHrAccount = true && this.isSetUserHrAccount();
      boolean that_present_userHrAccount = true && that.isSetUserHrAccount();
      if (this_present_userHrAccount || that_present_userHrAccount) {
        if (!(this_present_userHrAccount && that_present_userHrAccount))
          return false;
        if (!this.userHrAccount.equals(that.userHrAccount))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userHrAccount = true && (isSetUserHrAccount());
      list.add(present_userHrAccount);
      if (present_userHrAccount)
        list.add(userHrAccount);

      return list.hashCode();
    }

    @Override
    public int compareTo(putResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserHrAccount()).compareTo(other.isSetUserHrAccount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserHrAccount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userHrAccount, other.userHrAccount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putResource_args(");
      boolean first = true;

      sb.append("userHrAccount:");
      if (this.userHrAccount == null) {
        sb.append("null");
      } else {
        sb.append(this.userHrAccount);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (userHrAccount != null) {
        userHrAccount.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putResource_argsStandardSchemeFactory implements SchemeFactory {
      public putResource_argsStandardScheme getScheme() {
        return new putResource_argsStandardScheme();
      }
    }

    private static class putResource_argsStandardScheme extends StandardScheme<putResource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putResource_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_HR_ACCOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userHrAccount = new com.moseeker.thrift.gen.useraccounts.struct.UserHrAccount();
                struct.userHrAccount.read(iprot);
                struct.setUserHrAccountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putResource_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userHrAccount != null) {
          oprot.writeFieldBegin(USER_HR_ACCOUNT_FIELD_DESC);
          struct.userHrAccount.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putResource_argsTupleSchemeFactory implements SchemeFactory {
      public putResource_argsTupleScheme getScheme() {
        return new putResource_argsTupleScheme();
      }
    }

    private static class putResource_argsTupleScheme extends TupleScheme<putResource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putResource_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserHrAccount()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserHrAccount()) {
          struct.userHrAccount.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putResource_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userHrAccount = new com.moseeker.thrift.gen.useraccounts.struct.UserHrAccount();
          struct.userHrAccount.read(iprot);
          struct.setUserHrAccountIsSet(true);
        }
      }
    }

  }

  public static class putResource_result implements org.apache.thrift.TBase<putResource_result, putResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<putResource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putResource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putResource_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putResource_resultTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.common.struct.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putResource_result.class, metaDataMap);
    }

    public putResource_result() {
    }

    public putResource_result(
      com.moseeker.thrift.gen.common.struct.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putResource_result(putResource_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
    }

    public putResource_result deepCopy() {
      return new putResource_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public putResource_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putResource_result)
        return this.equals((putResource_result)that);
      return false;
    }

    public boolean equals(putResource_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(putResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putResource_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putResource_resultStandardSchemeFactory implements SchemeFactory {
      public putResource_resultStandardScheme getScheme() {
        return new putResource_resultStandardScheme();
      }
    }

    private static class putResource_resultStandardScheme extends StandardScheme<putResource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putResource_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putResource_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putResource_resultTupleSchemeFactory implements SchemeFactory {
      public putResource_resultTupleScheme getScheme() {
        return new putResource_resultTupleScheme();
      }
    }

    private static class putResource_resultTupleScheme extends TupleScheme<putResource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putResource_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putResource_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class bind_args implements org.apache.thrift.TBase<bind_args, bind_args._Fields>, java.io.Serializable, Cloneable, Comparable<bind_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bind_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("account", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bind_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bind_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.useraccounts.struct.BindAccountStruct account; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT((short)1, "account");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT
            return ACCOUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("account", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.useraccounts.struct.BindAccountStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bind_args.class, metaDataMap);
    }

    public bind_args() {
    }

    public bind_args(
      com.moseeker.thrift.gen.useraccounts.struct.BindAccountStruct account)
    {
      this();
      this.account = account;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bind_args(bind_args other) {
      if (other.isSetAccount()) {
        this.account = new com.moseeker.thrift.gen.useraccounts.struct.BindAccountStruct(other.account);
      }
    }

    public bind_args deepCopy() {
      return new bind_args(this);
    }

    @Override
    public void clear() {
      this.account = null;
    }

    public com.moseeker.thrift.gen.useraccounts.struct.BindAccountStruct getAccount() {
      return this.account;
    }

    public bind_args setAccount(com.moseeker.thrift.gen.useraccounts.struct.BindAccountStruct account) {
      this.account = account;
      return this;
    }

    public void unsetAccount() {
      this.account = null;
    }

    /** Returns true if field account is set (has been assigned a value) and false otherwise */
    public boolean isSetAccount() {
      return this.account != null;
    }

    public void setAccountIsSet(boolean value) {
      if (!value) {
        this.account = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCOUNT:
        if (value == null) {
          unsetAccount();
        } else {
          setAccount((com.moseeker.thrift.gen.useraccounts.struct.BindAccountStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT:
        return getAccount();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT:
        return isSetAccount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bind_args)
        return this.equals((bind_args)that);
      return false;
    }

    public boolean equals(bind_args that) {
      if (that == null)
        return false;

      boolean this_present_account = true && this.isSetAccount();
      boolean that_present_account = true && that.isSetAccount();
      if (this_present_account || that_present_account) {
        if (!(this_present_account && that_present_account))
          return false;
        if (!this.account.equals(that.account))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_account = true && (isSetAccount());
      list.add(present_account);
      if (present_account)
        list.add(account);

      return list.hashCode();
    }

    @Override
    public int compareTo(bind_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccount()).compareTo(other.isSetAccount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.account, other.account);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bind_args(");
      boolean first = true;

      sb.append("account:");
      if (this.account == null) {
        sb.append("null");
      } else {
        sb.append(this.account);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (account != null) {
        account.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bind_argsStandardSchemeFactory implements SchemeFactory {
      public bind_argsStandardScheme getScheme() {
        return new bind_argsStandardScheme();
      }
    }

    private static class bind_argsStandardScheme extends StandardScheme<bind_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bind_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.account = new com.moseeker.thrift.gen.useraccounts.struct.BindAccountStruct();
                struct.account.read(iprot);
                struct.setAccountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bind_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.account != null) {
          oprot.writeFieldBegin(ACCOUNT_FIELD_DESC);
          struct.account.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bind_argsTupleSchemeFactory implements SchemeFactory {
      public bind_argsTupleScheme getScheme() {
        return new bind_argsTupleScheme();
      }
    }

    private static class bind_argsTupleScheme extends TupleScheme<bind_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bind_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccount()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAccount()) {
          struct.account.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bind_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.account = new com.moseeker.thrift.gen.useraccounts.struct.BindAccountStruct();
          struct.account.read(iprot);
          struct.setAccountIsSet(true);
        }
      }
    }

  }

  public static class bind_result implements org.apache.thrift.TBase<bind_result, bind_result._Fields>, java.io.Serializable, Cloneable, Comparable<bind_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bind_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bind_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bind_resultTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.common.struct.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bind_result.class, metaDataMap);
    }

    public bind_result() {
    }

    public bind_result(
      com.moseeker.thrift.gen.common.struct.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bind_result(bind_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
    }

    public bind_result deepCopy() {
      return new bind_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public bind_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bind_result)
        return this.equals((bind_result)that);
      return false;
    }

    public boolean equals(bind_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(bind_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bind_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bind_resultStandardSchemeFactory implements SchemeFactory {
      public bind_resultStandardScheme getScheme() {
        return new bind_resultStandardScheme();
      }
    }

    private static class bind_resultStandardScheme extends StandardScheme<bind_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bind_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bind_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bind_resultTupleSchemeFactory implements SchemeFactory {
      public bind_resultTupleScheme getScheme() {
        return new bind_resultTupleScheme();
      }
    }

    private static class bind_resultTupleScheme extends TupleScheme<bind_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bind_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bind_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSearchCondition_args implements org.apache.thrift.TBase<getSearchCondition_args, getSearchCondition_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSearchCondition_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSearchCondition_args");

    private static final org.apache.thrift.protocol.TField HR_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hrAccountId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSearchCondition_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSearchCondition_argsTupleSchemeFactory());
    }

    public int hrAccountId; // required
    public int type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HR_ACCOUNT_ID((short)1, "hrAccountId"),
      TYPE((short)2, "type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HR_ACCOUNT_ID
            return HR_ACCOUNT_ID;
          case 2: // TYPE
            return TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HRACCOUNTID_ISSET_ID = 0;
    private static final int __TYPE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HR_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("hrAccountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSearchCondition_args.class, metaDataMap);
    }

    public getSearchCondition_args() {
    }

    public getSearchCondition_args(
      int hrAccountId,
      int type)
    {
      this();
      this.hrAccountId = hrAccountId;
      setHrAccountIdIsSet(true);
      this.type = type;
      setTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSearchCondition_args(getSearchCondition_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.hrAccountId = other.hrAccountId;
      this.type = other.type;
    }

    public getSearchCondition_args deepCopy() {
      return new getSearchCondition_args(this);
    }

    @Override
    public void clear() {
      setHrAccountIdIsSet(false);
      this.hrAccountId = 0;
      setTypeIsSet(false);
      this.type = 0;
    }

    public int getHrAccountId() {
      return this.hrAccountId;
    }

    public getSearchCondition_args setHrAccountId(int hrAccountId) {
      this.hrAccountId = hrAccountId;
      setHrAccountIdIsSet(true);
      return this;
    }

    public void unsetHrAccountId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HRACCOUNTID_ISSET_ID);
    }

    /** Returns true if field hrAccountId is set (has been assigned a value) and false otherwise */
    public boolean isSetHrAccountId() {
      return EncodingUtils.testBit(__isset_bitfield, __HRACCOUNTID_ISSET_ID);
    }

    public void setHrAccountIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HRACCOUNTID_ISSET_ID, value);
    }

    public int getType() {
      return this.type;
    }

    public getSearchCondition_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HR_ACCOUNT_ID:
        if (value == null) {
          unsetHrAccountId();
        } else {
          setHrAccountId((Integer)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HR_ACCOUNT_ID:
        return getHrAccountId();

      case TYPE:
        return getType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HR_ACCOUNT_ID:
        return isSetHrAccountId();
      case TYPE:
        return isSetType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSearchCondition_args)
        return this.equals((getSearchCondition_args)that);
      return false;
    }

    public boolean equals(getSearchCondition_args that) {
      if (that == null)
        return false;

      boolean this_present_hrAccountId = true;
      boolean that_present_hrAccountId = true;
      if (this_present_hrAccountId || that_present_hrAccountId) {
        if (!(this_present_hrAccountId && that_present_hrAccountId))
          return false;
        if (this.hrAccountId != that.hrAccountId)
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_hrAccountId = true;
      list.add(present_hrAccountId);
      if (present_hrAccountId)
        list.add(hrAccountId);

      boolean present_type = true;
      list.add(present_type);
      if (present_type)
        list.add(type);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSearchCondition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHrAccountId()).compareTo(other.isSetHrAccountId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHrAccountId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrAccountId, other.hrAccountId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSearchCondition_args(");
      boolean first = true;

      sb.append("hrAccountId:");
      sb.append(this.hrAccountId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSearchCondition_argsStandardSchemeFactory implements SchemeFactory {
      public getSearchCondition_argsStandardScheme getScheme() {
        return new getSearchCondition_argsStandardScheme();
      }
    }

    private static class getSearchCondition_argsStandardScheme extends StandardScheme<getSearchCondition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSearchCondition_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HR_ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hrAccountId = iprot.readI32();
                struct.setHrAccountIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSearchCondition_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HR_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.hrAccountId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSearchCondition_argsTupleSchemeFactory implements SchemeFactory {
      public getSearchCondition_argsTupleScheme getScheme() {
        return new getSearchCondition_argsTupleScheme();
      }
    }

    private static class getSearchCondition_argsTupleScheme extends TupleScheme<getSearchCondition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSearchCondition_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHrAccountId()) {
          optionals.set(0);
        }
        if (struct.isSetType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetHrAccountId()) {
          oprot.writeI32(struct.hrAccountId);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSearchCondition_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.hrAccountId = iprot.readI32();
          struct.setHrAccountIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
      }
    }

  }

  public static class getSearchCondition_result implements org.apache.thrift.TBase<getSearchCondition_result, getSearchCondition_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSearchCondition_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSearchCondition_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSearchCondition_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSearchCondition_resultTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.common.struct.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSearchCondition_result.class, metaDataMap);
    }

    public getSearchCondition_result() {
    }

    public getSearchCondition_result(
      com.moseeker.thrift.gen.common.struct.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSearchCondition_result(getSearchCondition_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
    }

    public getSearchCondition_result deepCopy() {
      return new getSearchCondition_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public getSearchCondition_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSearchCondition_result)
        return this.equals((getSearchCondition_result)that);
      return false;
    }

    public boolean equals(getSearchCondition_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSearchCondition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSearchCondition_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSearchCondition_resultStandardSchemeFactory implements SchemeFactory {
      public getSearchCondition_resultStandardScheme getScheme() {
        return new getSearchCondition_resultStandardScheme();
      }
    }

    private static class getSearchCondition_resultStandardScheme extends StandardScheme<getSearchCondition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSearchCondition_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSearchCondition_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSearchCondition_resultTupleSchemeFactory implements SchemeFactory {
      public getSearchCondition_resultTupleScheme getScheme() {
        return new getSearchCondition_resultTupleScheme();
      }
    }

    private static class getSearchCondition_resultTupleScheme extends TupleScheme<getSearchCondition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSearchCondition_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSearchCondition_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class postSearchCondition_args implements org.apache.thrift.TBase<postSearchCondition_args, postSearchCondition_args._Fields>, java.io.Serializable, Cloneable, Comparable<postSearchCondition_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postSearchCondition_args");

    private static final org.apache.thrift.protocol.TField SEARCH_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("searchCondition", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postSearchCondition_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postSearchCondition_argsTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.useraccounts.struct.SearchCondition searchCondition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SEARCH_CONDITION((short)1, "searchCondition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SEARCH_CONDITION
            return SEARCH_CONDITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEARCH_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("searchCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.useraccounts.struct.SearchCondition.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postSearchCondition_args.class, metaDataMap);
    }

    public postSearchCondition_args() {
    }

    public postSearchCondition_args(
      com.moseeker.thrift.gen.useraccounts.struct.SearchCondition searchCondition)
    {
      this();
      this.searchCondition = searchCondition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postSearchCondition_args(postSearchCondition_args other) {
      if (other.isSetSearchCondition()) {
        this.searchCondition = new com.moseeker.thrift.gen.useraccounts.struct.SearchCondition(other.searchCondition);
      }
    }

    public postSearchCondition_args deepCopy() {
      return new postSearchCondition_args(this);
    }

    @Override
    public void clear() {
      this.searchCondition = null;
    }

    public com.moseeker.thrift.gen.useraccounts.struct.SearchCondition getSearchCondition() {
      return this.searchCondition;
    }

    public postSearchCondition_args setSearchCondition(com.moseeker.thrift.gen.useraccounts.struct.SearchCondition searchCondition) {
      this.searchCondition = searchCondition;
      return this;
    }

    public void unsetSearchCondition() {
      this.searchCondition = null;
    }

    /** Returns true if field searchCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchCondition() {
      return this.searchCondition != null;
    }

    public void setSearchConditionIsSet(boolean value) {
      if (!value) {
        this.searchCondition = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SEARCH_CONDITION:
        if (value == null) {
          unsetSearchCondition();
        } else {
          setSearchCondition((com.moseeker.thrift.gen.useraccounts.struct.SearchCondition)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SEARCH_CONDITION:
        return getSearchCondition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SEARCH_CONDITION:
        return isSetSearchCondition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postSearchCondition_args)
        return this.equals((postSearchCondition_args)that);
      return false;
    }

    public boolean equals(postSearchCondition_args that) {
      if (that == null)
        return false;

      boolean this_present_searchCondition = true && this.isSetSearchCondition();
      boolean that_present_searchCondition = true && that.isSetSearchCondition();
      if (this_present_searchCondition || that_present_searchCondition) {
        if (!(this_present_searchCondition && that_present_searchCondition))
          return false;
        if (!this.searchCondition.equals(that.searchCondition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_searchCondition = true && (isSetSearchCondition());
      list.add(present_searchCondition);
      if (present_searchCondition)
        list.add(searchCondition);

      return list.hashCode();
    }

    @Override
    public int compareTo(postSearchCondition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSearchCondition()).compareTo(other.isSetSearchCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchCondition, other.searchCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postSearchCondition_args(");
      boolean first = true;

      sb.append("searchCondition:");
      if (this.searchCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.searchCondition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (searchCondition != null) {
        searchCondition.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postSearchCondition_argsStandardSchemeFactory implements SchemeFactory {
      public postSearchCondition_argsStandardScheme getScheme() {
        return new postSearchCondition_argsStandardScheme();
      }
    }

    private static class postSearchCondition_argsStandardScheme extends StandardScheme<postSearchCondition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postSearchCondition_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SEARCH_CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.searchCondition = new com.moseeker.thrift.gen.useraccounts.struct.SearchCondition();
                struct.searchCondition.read(iprot);
                struct.setSearchConditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postSearchCondition_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.searchCondition != null) {
          oprot.writeFieldBegin(SEARCH_CONDITION_FIELD_DESC);
          struct.searchCondition.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postSearchCondition_argsTupleSchemeFactory implements SchemeFactory {
      public postSearchCondition_argsTupleScheme getScheme() {
        return new postSearchCondition_argsTupleScheme();
      }
    }

    private static class postSearchCondition_argsTupleScheme extends TupleScheme<postSearchCondition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postSearchCondition_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSearchCondition()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSearchCondition()) {
          struct.searchCondition.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postSearchCondition_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.searchCondition = new com.moseeker.thrift.gen.useraccounts.struct.SearchCondition();
          struct.searchCondition.read(iprot);
          struct.setSearchConditionIsSet(true);
        }
      }
    }

  }

  public static class postSearchCondition_result implements org.apache.thrift.TBase<postSearchCondition_result, postSearchCondition_result._Fields>, java.io.Serializable, Cloneable, Comparable<postSearchCondition_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postSearchCondition_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postSearchCondition_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postSearchCondition_resultTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.common.struct.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postSearchCondition_result.class, metaDataMap);
    }

    public postSearchCondition_result() {
    }

    public postSearchCondition_result(
      com.moseeker.thrift.gen.common.struct.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postSearchCondition_result(postSearchCondition_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
    }

    public postSearchCondition_result deepCopy() {
      return new postSearchCondition_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public postSearchCondition_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postSearchCondition_result)
        return this.equals((postSearchCondition_result)that);
      return false;
    }

    public boolean equals(postSearchCondition_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(postSearchCondition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postSearchCondition_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postSearchCondition_resultStandardSchemeFactory implements SchemeFactory {
      public postSearchCondition_resultStandardScheme getScheme() {
        return new postSearchCondition_resultStandardScheme();
      }
    }

    private static class postSearchCondition_resultStandardScheme extends StandardScheme<postSearchCondition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postSearchCondition_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postSearchCondition_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postSearchCondition_resultTupleSchemeFactory implements SchemeFactory {
      public postSearchCondition_resultTupleScheme getScheme() {
        return new postSearchCondition_resultTupleScheme();
      }
    }

    private static class postSearchCondition_resultTupleScheme extends TupleScheme<postSearchCondition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postSearchCondition_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postSearchCondition_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delSearchCondition_args implements org.apache.thrift.TBase<delSearchCondition_args, delSearchCondition_args._Fields>, java.io.Serializable, Cloneable, Comparable<delSearchCondition_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delSearchCondition_args");

    private static final org.apache.thrift.protocol.TField HR_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hrAccountId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delSearchCondition_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delSearchCondition_argsTupleSchemeFactory());
    }

    public int hrAccountId; // required
    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HR_ACCOUNT_ID((short)1, "hrAccountId"),
      ID((short)2, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HR_ACCOUNT_ID
            return HR_ACCOUNT_ID;
          case 2: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HRACCOUNTID_ISSET_ID = 0;
    private static final int __ID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HR_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("hrAccountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delSearchCondition_args.class, metaDataMap);
    }

    public delSearchCondition_args() {
    }

    public delSearchCondition_args(
      int hrAccountId,
      int id)
    {
      this();
      this.hrAccountId = hrAccountId;
      setHrAccountIdIsSet(true);
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delSearchCondition_args(delSearchCondition_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.hrAccountId = other.hrAccountId;
      this.id = other.id;
    }

    public delSearchCondition_args deepCopy() {
      return new delSearchCondition_args(this);
    }

    @Override
    public void clear() {
      setHrAccountIdIsSet(false);
      this.hrAccountId = 0;
      setIdIsSet(false);
      this.id = 0;
    }

    public int getHrAccountId() {
      return this.hrAccountId;
    }

    public delSearchCondition_args setHrAccountId(int hrAccountId) {
      this.hrAccountId = hrAccountId;
      setHrAccountIdIsSet(true);
      return this;
    }

    public void unsetHrAccountId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HRACCOUNTID_ISSET_ID);
    }

    /** Returns true if field hrAccountId is set (has been assigned a value) and false otherwise */
    public boolean isSetHrAccountId() {
      return EncodingUtils.testBit(__isset_bitfield, __HRACCOUNTID_ISSET_ID);
    }

    public void setHrAccountIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HRACCOUNTID_ISSET_ID, value);
    }

    public int getId() {
      return this.id;
    }

    public delSearchCondition_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HR_ACCOUNT_ID:
        if (value == null) {
          unsetHrAccountId();
        } else {
          setHrAccountId((Integer)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HR_ACCOUNT_ID:
        return getHrAccountId();

      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HR_ACCOUNT_ID:
        return isSetHrAccountId();
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delSearchCondition_args)
        return this.equals((delSearchCondition_args)that);
      return false;
    }

    public boolean equals(delSearchCondition_args that) {
      if (that == null)
        return false;

      boolean this_present_hrAccountId = true;
      boolean that_present_hrAccountId = true;
      if (this_present_hrAccountId || that_present_hrAccountId) {
        if (!(this_present_hrAccountId && that_present_hrAccountId))
          return false;
        if (this.hrAccountId != that.hrAccountId)
          return false;
      }

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_hrAccountId = true;
      list.add(present_hrAccountId);
      if (present_hrAccountId)
        list.add(hrAccountId);

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(delSearchCondition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHrAccountId()).compareTo(other.isSetHrAccountId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHrAccountId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrAccountId, other.hrAccountId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delSearchCondition_args(");
      boolean first = true;

      sb.append("hrAccountId:");
      sb.append(this.hrAccountId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delSearchCondition_argsStandardSchemeFactory implements SchemeFactory {
      public delSearchCondition_argsStandardScheme getScheme() {
        return new delSearchCondition_argsStandardScheme();
      }
    }

    private static class delSearchCondition_argsStandardScheme extends StandardScheme<delSearchCondition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delSearchCondition_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HR_ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hrAccountId = iprot.readI32();
                struct.setHrAccountIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delSearchCondition_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HR_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.hrAccountId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delSearchCondition_argsTupleSchemeFactory implements SchemeFactory {
      public delSearchCondition_argsTupleScheme getScheme() {
        return new delSearchCondition_argsTupleScheme();
      }
    }

    private static class delSearchCondition_argsTupleScheme extends TupleScheme<delSearchCondition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delSearchCondition_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHrAccountId()) {
          optionals.set(0);
        }
        if (struct.isSetId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetHrAccountId()) {
          oprot.writeI32(struct.hrAccountId);
        }
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delSearchCondition_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.hrAccountId = iprot.readI32();
          struct.setHrAccountIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class delSearchCondition_result implements org.apache.thrift.TBase<delSearchCondition_result, delSearchCondition_result._Fields>, java.io.Serializable, Cloneable, Comparable<delSearchCondition_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delSearchCondition_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delSearchCondition_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delSearchCondition_resultTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.common.struct.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delSearchCondition_result.class, metaDataMap);
    }

    public delSearchCondition_result() {
    }

    public delSearchCondition_result(
      com.moseeker.thrift.gen.common.struct.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delSearchCondition_result(delSearchCondition_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
    }

    public delSearchCondition_result deepCopy() {
      return new delSearchCondition_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public delSearchCondition_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delSearchCondition_result)
        return this.equals((delSearchCondition_result)that);
      return false;
    }

    public boolean equals(delSearchCondition_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delSearchCondition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delSearchCondition_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delSearchCondition_resultStandardSchemeFactory implements SchemeFactory {
      public delSearchCondition_resultStandardScheme getScheme() {
        return new delSearchCondition_resultStandardScheme();
      }
    }

    private static class delSearchCondition_resultStandardScheme extends StandardScheme<delSearchCondition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delSearchCondition_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delSearchCondition_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delSearchCondition_resultTupleSchemeFactory implements SchemeFactory {
      public delSearchCondition_resultTupleScheme getScheme() {
        return new delSearchCondition_resultTupleScheme();
      }
    }

    private static class delSearchCondition_resultTupleScheme extends TupleScheme<delSearchCondition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delSearchCondition_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delSearchCondition_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class joinTalentpool_args implements org.apache.thrift.TBase<joinTalentpool_args, joinTalentpool_args._Fields>, java.io.Serializable, Cloneable, Comparable<joinTalentpool_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("joinTalentpool_args");

    private static final org.apache.thrift.protocol.TField HR_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hrAccountId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField APPLIER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("applierIds", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new joinTalentpool_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new joinTalentpool_argsTupleSchemeFactory());
    }

    public int hrAccountId; // required
    public List<Integer> applierIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HR_ACCOUNT_ID((short)1, "hrAccountId"),
      APPLIER_IDS((short)2, "applierIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HR_ACCOUNT_ID
            return HR_ACCOUNT_ID;
          case 2: // APPLIER_IDS
            return APPLIER_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HRACCOUNTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HR_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("hrAccountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.APPLIER_IDS, new org.apache.thrift.meta_data.FieldMetaData("applierIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(joinTalentpool_args.class, metaDataMap);
    }

    public joinTalentpool_args() {
    }

    public joinTalentpool_args(
      int hrAccountId,
      List<Integer> applierIds)
    {
      this();
      this.hrAccountId = hrAccountId;
      setHrAccountIdIsSet(true);
      this.applierIds = applierIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public joinTalentpool_args(joinTalentpool_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.hrAccountId = other.hrAccountId;
      if (other.isSetApplierIds()) {
        List<Integer> __this__applierIds = new ArrayList<Integer>(other.applierIds);
        this.applierIds = __this__applierIds;
      }
    }

    public joinTalentpool_args deepCopy() {
      return new joinTalentpool_args(this);
    }

    @Override
    public void clear() {
      setHrAccountIdIsSet(false);
      this.hrAccountId = 0;
      this.applierIds = null;
    }

    public int getHrAccountId() {
      return this.hrAccountId;
    }

    public joinTalentpool_args setHrAccountId(int hrAccountId) {
      this.hrAccountId = hrAccountId;
      setHrAccountIdIsSet(true);
      return this;
    }

    public void unsetHrAccountId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HRACCOUNTID_ISSET_ID);
    }

    /** Returns true if field hrAccountId is set (has been assigned a value) and false otherwise */
    public boolean isSetHrAccountId() {
      return EncodingUtils.testBit(__isset_bitfield, __HRACCOUNTID_ISSET_ID);
    }

    public void setHrAccountIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HRACCOUNTID_ISSET_ID, value);
    }

    public int getApplierIdsSize() {
      return (this.applierIds == null) ? 0 : this.applierIds.size();
    }

    public java.util.Iterator<Integer> getApplierIdsIterator() {
      return (this.applierIds == null) ? null : this.applierIds.iterator();
    }

    public void addToApplierIds(int elem) {
      if (this.applierIds == null) {
        this.applierIds = new ArrayList<Integer>();
      }
      this.applierIds.add(elem);
    }

    public List<Integer> getApplierIds() {
      return this.applierIds;
    }

    public joinTalentpool_args setApplierIds(List<Integer> applierIds) {
      this.applierIds = applierIds;
      return this;
    }

    public void unsetApplierIds() {
      this.applierIds = null;
    }

    /** Returns true if field applierIds is set (has been assigned a value) and false otherwise */
    public boolean isSetApplierIds() {
      return this.applierIds != null;
    }

    public void setApplierIdsIsSet(boolean value) {
      if (!value) {
        this.applierIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HR_ACCOUNT_ID:
        if (value == null) {
          unsetHrAccountId();
        } else {
          setHrAccountId((Integer)value);
        }
        break;

      case APPLIER_IDS:
        if (value == null) {
          unsetApplierIds();
        } else {
          setApplierIds((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HR_ACCOUNT_ID:
        return getHrAccountId();

      case APPLIER_IDS:
        return getApplierIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HR_ACCOUNT_ID:
        return isSetHrAccountId();
      case APPLIER_IDS:
        return isSetApplierIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof joinTalentpool_args)
        return this.equals((joinTalentpool_args)that);
      return false;
    }

    public boolean equals(joinTalentpool_args that) {
      if (that == null)
        return false;

      boolean this_present_hrAccountId = true;
      boolean that_present_hrAccountId = true;
      if (this_present_hrAccountId || that_present_hrAccountId) {
        if (!(this_present_hrAccountId && that_present_hrAccountId))
          return false;
        if (this.hrAccountId != that.hrAccountId)
          return false;
      }

      boolean this_present_applierIds = true && this.isSetApplierIds();
      boolean that_present_applierIds = true && that.isSetApplierIds();
      if (this_present_applierIds || that_present_applierIds) {
        if (!(this_present_applierIds && that_present_applierIds))
          return false;
        if (!this.applierIds.equals(that.applierIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_hrAccountId = true;
      list.add(present_hrAccountId);
      if (present_hrAccountId)
        list.add(hrAccountId);

      boolean present_applierIds = true && (isSetApplierIds());
      list.add(present_applierIds);
      if (present_applierIds)
        list.add(applierIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(joinTalentpool_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHrAccountId()).compareTo(other.isSetHrAccountId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHrAccountId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrAccountId, other.hrAccountId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplierIds()).compareTo(other.isSetApplierIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplierIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applierIds, other.applierIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("joinTalentpool_args(");
      boolean first = true;

      sb.append("hrAccountId:");
      sb.append(this.hrAccountId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("applierIds:");
      if (this.applierIds == null) {
        sb.append("null");
      } else {
        sb.append(this.applierIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class joinTalentpool_argsStandardSchemeFactory implements SchemeFactory {
      public joinTalentpool_argsStandardScheme getScheme() {
        return new joinTalentpool_argsStandardScheme();
      }
    }

    private static class joinTalentpool_argsStandardScheme extends StandardScheme<joinTalentpool_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, joinTalentpool_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HR_ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hrAccountId = iprot.readI32();
                struct.setHrAccountIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APPLIER_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.applierIds = new ArrayList<Integer>(_list0.size);
                  int _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readI32();
                    struct.applierIds.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setApplierIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, joinTalentpool_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HR_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.hrAccountId);
        oprot.writeFieldEnd();
        if (struct.applierIds != null) {
          oprot.writeFieldBegin(APPLIER_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.applierIds.size()));
            for (int _iter3 : struct.applierIds)
            {
              oprot.writeI32(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class joinTalentpool_argsTupleSchemeFactory implements SchemeFactory {
      public joinTalentpool_argsTupleScheme getScheme() {
        return new joinTalentpool_argsTupleScheme();
      }
    }

    private static class joinTalentpool_argsTupleScheme extends TupleScheme<joinTalentpool_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, joinTalentpool_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHrAccountId()) {
          optionals.set(0);
        }
        if (struct.isSetApplierIds()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetHrAccountId()) {
          oprot.writeI32(struct.hrAccountId);
        }
        if (struct.isSetApplierIds()) {
          {
            oprot.writeI32(struct.applierIds.size());
            for (int _iter4 : struct.applierIds)
            {
              oprot.writeI32(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, joinTalentpool_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.hrAccountId = iprot.readI32();
          struct.setHrAccountIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.applierIds = new ArrayList<Integer>(_list5.size);
            int _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readI32();
              struct.applierIds.add(_elem6);
            }
          }
          struct.setApplierIdsIsSet(true);
        }
      }
    }

  }

  public static class joinTalentpool_result implements org.apache.thrift.TBase<joinTalentpool_result, joinTalentpool_result._Fields>, java.io.Serializable, Cloneable, Comparable<joinTalentpool_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("joinTalentpool_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new joinTalentpool_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new joinTalentpool_resultTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.common.struct.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(joinTalentpool_result.class, metaDataMap);
    }

    public joinTalentpool_result() {
    }

    public joinTalentpool_result(
      com.moseeker.thrift.gen.common.struct.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public joinTalentpool_result(joinTalentpool_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
    }

    public joinTalentpool_result deepCopy() {
      return new joinTalentpool_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public joinTalentpool_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof joinTalentpool_result)
        return this.equals((joinTalentpool_result)that);
      return false;
    }

    public boolean equals(joinTalentpool_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(joinTalentpool_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("joinTalentpool_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class joinTalentpool_resultStandardSchemeFactory implements SchemeFactory {
      public joinTalentpool_resultStandardScheme getScheme() {
        return new joinTalentpool_resultStandardScheme();
      }
    }

    private static class joinTalentpool_resultStandardScheme extends StandardScheme<joinTalentpool_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, joinTalentpool_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, joinTalentpool_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class joinTalentpool_resultTupleSchemeFactory implements SchemeFactory {
      public joinTalentpool_resultTupleScheme getScheme() {
        return new joinTalentpool_resultTupleScheme();
      }
    }

    private static class joinTalentpool_resultTupleScheme extends TupleScheme<joinTalentpool_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, joinTalentpool_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, joinTalentpool_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class shiftOutTalentpool_args implements org.apache.thrift.TBase<shiftOutTalentpool_args, shiftOutTalentpool_args._Fields>, java.io.Serializable, Cloneable, Comparable<shiftOutTalentpool_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shiftOutTalentpool_args");

    private static final org.apache.thrift.protocol.TField HR_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hrAccountId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField APPLIER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("applierIds", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new shiftOutTalentpool_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new shiftOutTalentpool_argsTupleSchemeFactory());
    }

    public int hrAccountId; // required
    public List<Integer> applierIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HR_ACCOUNT_ID((short)1, "hrAccountId"),
      APPLIER_IDS((short)2, "applierIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HR_ACCOUNT_ID
            return HR_ACCOUNT_ID;
          case 2: // APPLIER_IDS
            return APPLIER_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HRACCOUNTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HR_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("hrAccountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.APPLIER_IDS, new org.apache.thrift.meta_data.FieldMetaData("applierIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shiftOutTalentpool_args.class, metaDataMap);
    }

    public shiftOutTalentpool_args() {
    }

    public shiftOutTalentpool_args(
      int hrAccountId,
      List<Integer> applierIds)
    {
      this();
      this.hrAccountId = hrAccountId;
      setHrAccountIdIsSet(true);
      this.applierIds = applierIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shiftOutTalentpool_args(shiftOutTalentpool_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.hrAccountId = other.hrAccountId;
      if (other.isSetApplierIds()) {
        List<Integer> __this__applierIds = new ArrayList<Integer>(other.applierIds);
        this.applierIds = __this__applierIds;
      }
    }

    public shiftOutTalentpool_args deepCopy() {
      return new shiftOutTalentpool_args(this);
    }

    @Override
    public void clear() {
      setHrAccountIdIsSet(false);
      this.hrAccountId = 0;
      this.applierIds = null;
    }

    public int getHrAccountId() {
      return this.hrAccountId;
    }

    public shiftOutTalentpool_args setHrAccountId(int hrAccountId) {
      this.hrAccountId = hrAccountId;
      setHrAccountIdIsSet(true);
      return this;
    }

    public void unsetHrAccountId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HRACCOUNTID_ISSET_ID);
    }

    /** Returns true if field hrAccountId is set (has been assigned a value) and false otherwise */
    public boolean isSetHrAccountId() {
      return EncodingUtils.testBit(__isset_bitfield, __HRACCOUNTID_ISSET_ID);
    }

    public void setHrAccountIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HRACCOUNTID_ISSET_ID, value);
    }

    public int getApplierIdsSize() {
      return (this.applierIds == null) ? 0 : this.applierIds.size();
    }

    public java.util.Iterator<Integer> getApplierIdsIterator() {
      return (this.applierIds == null) ? null : this.applierIds.iterator();
    }

    public void addToApplierIds(int elem) {
      if (this.applierIds == null) {
        this.applierIds = new ArrayList<Integer>();
      }
      this.applierIds.add(elem);
    }

    public List<Integer> getApplierIds() {
      return this.applierIds;
    }

    public shiftOutTalentpool_args setApplierIds(List<Integer> applierIds) {
      this.applierIds = applierIds;
      return this;
    }

    public void unsetApplierIds() {
      this.applierIds = null;
    }

    /** Returns true if field applierIds is set (has been assigned a value) and false otherwise */
    public boolean isSetApplierIds() {
      return this.applierIds != null;
    }

    public void setApplierIdsIsSet(boolean value) {
      if (!value) {
        this.applierIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HR_ACCOUNT_ID:
        if (value == null) {
          unsetHrAccountId();
        } else {
          setHrAccountId((Integer)value);
        }
        break;

      case APPLIER_IDS:
        if (value == null) {
          unsetApplierIds();
        } else {
          setApplierIds((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HR_ACCOUNT_ID:
        return getHrAccountId();

      case APPLIER_IDS:
        return getApplierIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HR_ACCOUNT_ID:
        return isSetHrAccountId();
      case APPLIER_IDS:
        return isSetApplierIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shiftOutTalentpool_args)
        return this.equals((shiftOutTalentpool_args)that);
      return false;
    }

    public boolean equals(shiftOutTalentpool_args that) {
      if (that == null)
        return false;

      boolean this_present_hrAccountId = true;
      boolean that_present_hrAccountId = true;
      if (this_present_hrAccountId || that_present_hrAccountId) {
        if (!(this_present_hrAccountId && that_present_hrAccountId))
          return false;
        if (this.hrAccountId != that.hrAccountId)
          return false;
      }

      boolean this_present_applierIds = true && this.isSetApplierIds();
      boolean that_present_applierIds = true && that.isSetApplierIds();
      if (this_present_applierIds || that_present_applierIds) {
        if (!(this_present_applierIds && that_present_applierIds))
          return false;
        if (!this.applierIds.equals(that.applierIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_hrAccountId = true;
      list.add(present_hrAccountId);
      if (present_hrAccountId)
        list.add(hrAccountId);

      boolean present_applierIds = true && (isSetApplierIds());
      list.add(present_applierIds);
      if (present_applierIds)
        list.add(applierIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(shiftOutTalentpool_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHrAccountId()).compareTo(other.isSetHrAccountId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHrAccountId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrAccountId, other.hrAccountId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplierIds()).compareTo(other.isSetApplierIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplierIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applierIds, other.applierIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shiftOutTalentpool_args(");
      boolean first = true;

      sb.append("hrAccountId:");
      sb.append(this.hrAccountId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("applierIds:");
      if (this.applierIds == null) {
        sb.append("null");
      } else {
        sb.append(this.applierIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shiftOutTalentpool_argsStandardSchemeFactory implements SchemeFactory {
      public shiftOutTalentpool_argsStandardScheme getScheme() {
        return new shiftOutTalentpool_argsStandardScheme();
      }
    }

    private static class shiftOutTalentpool_argsStandardScheme extends StandardScheme<shiftOutTalentpool_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, shiftOutTalentpool_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HR_ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hrAccountId = iprot.readI32();
                struct.setHrAccountIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APPLIER_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.applierIds = new ArrayList<Integer>(_list8.size);
                  int _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = iprot.readI32();
                    struct.applierIds.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setApplierIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, shiftOutTalentpool_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HR_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.hrAccountId);
        oprot.writeFieldEnd();
        if (struct.applierIds != null) {
          oprot.writeFieldBegin(APPLIER_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.applierIds.size()));
            for (int _iter11 : struct.applierIds)
            {
              oprot.writeI32(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shiftOutTalentpool_argsTupleSchemeFactory implements SchemeFactory {
      public shiftOutTalentpool_argsTupleScheme getScheme() {
        return new shiftOutTalentpool_argsTupleScheme();
      }
    }

    private static class shiftOutTalentpool_argsTupleScheme extends TupleScheme<shiftOutTalentpool_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, shiftOutTalentpool_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHrAccountId()) {
          optionals.set(0);
        }
        if (struct.isSetApplierIds()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetHrAccountId()) {
          oprot.writeI32(struct.hrAccountId);
        }
        if (struct.isSetApplierIds()) {
          {
            oprot.writeI32(struct.applierIds.size());
            for (int _iter12 : struct.applierIds)
            {
              oprot.writeI32(_iter12);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, shiftOutTalentpool_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.hrAccountId = iprot.readI32();
          struct.setHrAccountIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.applierIds = new ArrayList<Integer>(_list13.size);
            int _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = iprot.readI32();
              struct.applierIds.add(_elem14);
            }
          }
          struct.setApplierIdsIsSet(true);
        }
      }
    }

  }

  public static class shiftOutTalentpool_result implements org.apache.thrift.TBase<shiftOutTalentpool_result, shiftOutTalentpool_result._Fields>, java.io.Serializable, Cloneable, Comparable<shiftOutTalentpool_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shiftOutTalentpool_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new shiftOutTalentpool_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new shiftOutTalentpool_resultTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.common.struct.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shiftOutTalentpool_result.class, metaDataMap);
    }

    public shiftOutTalentpool_result() {
    }

    public shiftOutTalentpool_result(
      com.moseeker.thrift.gen.common.struct.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shiftOutTalentpool_result(shiftOutTalentpool_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
    }

    public shiftOutTalentpool_result deepCopy() {
      return new shiftOutTalentpool_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public shiftOutTalentpool_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shiftOutTalentpool_result)
        return this.equals((shiftOutTalentpool_result)that);
      return false;
    }

    public boolean equals(shiftOutTalentpool_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(shiftOutTalentpool_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shiftOutTalentpool_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shiftOutTalentpool_resultStandardSchemeFactory implements SchemeFactory {
      public shiftOutTalentpool_resultStandardScheme getScheme() {
        return new shiftOutTalentpool_resultStandardScheme();
      }
    }

    private static class shiftOutTalentpool_resultStandardScheme extends StandardScheme<shiftOutTalentpool_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, shiftOutTalentpool_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, shiftOutTalentpool_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shiftOutTalentpool_resultTupleSchemeFactory implements SchemeFactory {
      public shiftOutTalentpool_resultTupleScheme getScheme() {
        return new shiftOutTalentpool_resultTupleScheme();
      }
    }

    private static class shiftOutTalentpool_resultTupleScheme extends TupleScheme<shiftOutTalentpool_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, shiftOutTalentpool_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, shiftOutTalentpool_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class userHrAccount_args implements org.apache.thrift.TBase<userHrAccount_args, userHrAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<userHrAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userHrAccount_args");

    private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField DISABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("disable", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PER_AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("per_age", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userHrAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userHrAccount_argsTupleSchemeFactory());
    }

    public int company_id; // required
    public int disable; // required
    public int page; // required
    public int per_age; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPANY_ID((short)1, "company_id"),
      DISABLE((short)2, "disable"),
      PAGE((short)3, "page"),
      PER_AGE((short)4, "per_age");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPANY_ID
            return COMPANY_ID;
          case 2: // DISABLE
            return DISABLE;
          case 3: // PAGE
            return PAGE;
          case 4: // PER_AGE
            return PER_AGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COMPANY_ID_ISSET_ID = 0;
    private static final int __DISABLE_ISSET_ID = 1;
    private static final int __PAGE_ISSET_ID = 2;
    private static final int __PER_AGE_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DISABLE, new org.apache.thrift.meta_data.FieldMetaData("disable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PER_AGE, new org.apache.thrift.meta_data.FieldMetaData("per_age", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userHrAccount_args.class, metaDataMap);
    }

    public userHrAccount_args() {
    }

    public userHrAccount_args(
      int company_id,
      int disable,
      int page,
      int per_age)
    {
      this();
      this.company_id = company_id;
      setCompany_idIsSet(true);
      this.disable = disable;
      setDisableIsSet(true);
      this.page = page;
      setPageIsSet(true);
      this.per_age = per_age;
      setPer_ageIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userHrAccount_args(userHrAccount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.company_id = other.company_id;
      this.disable = other.disable;
      this.page = other.page;
      this.per_age = other.per_age;
    }

    public userHrAccount_args deepCopy() {
      return new userHrAccount_args(this);
    }

    @Override
    public void clear() {
      setCompany_idIsSet(false);
      this.company_id = 0;
      setDisableIsSet(false);
      this.disable = 0;
      setPageIsSet(false);
      this.page = 0;
      setPer_ageIsSet(false);
      this.per_age = 0;
    }

    public int getCompany_id() {
      return this.company_id;
    }

    public userHrAccount_args setCompany_id(int company_id) {
      this.company_id = company_id;
      setCompany_idIsSet(true);
      return this;
    }

    public void unsetCompany_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCompany_id() {
      return EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    public void setCompany_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
    }

    public int getDisable() {
      return this.disable;
    }

    public userHrAccount_args setDisable(int disable) {
      this.disable = disable;
      setDisableIsSet(true);
      return this;
    }

    public void unsetDisable() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISABLE_ISSET_ID);
    }

    /** Returns true if field disable is set (has been assigned a value) and false otherwise */
    public boolean isSetDisable() {
      return EncodingUtils.testBit(__isset_bitfield, __DISABLE_ISSET_ID);
    }

    public void setDisableIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISABLE_ISSET_ID, value);
    }

    public int getPage() {
      return this.page;
    }

    public userHrAccount_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
    }

    public int getPer_age() {
      return this.per_age;
    }

    public userHrAccount_args setPer_age(int per_age) {
      this.per_age = per_age;
      setPer_ageIsSet(true);
      return this;
    }

    public void unsetPer_age() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PER_AGE_ISSET_ID);
    }

    /** Returns true if field per_age is set (has been assigned a value) and false otherwise */
    public boolean isSetPer_age() {
      return EncodingUtils.testBit(__isset_bitfield, __PER_AGE_ISSET_ID);
    }

    public void setPer_ageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PER_AGE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMPANY_ID:
        if (value == null) {
          unsetCompany_id();
        } else {
          setCompany_id((Integer)value);
        }
        break;

      case DISABLE:
        if (value == null) {
          unsetDisable();
        } else {
          setDisable((Integer)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case PER_AGE:
        if (value == null) {
          unsetPer_age();
        } else {
          setPer_age((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPANY_ID:
        return getCompany_id();

      case DISABLE:
        return getDisable();

      case PAGE:
        return getPage();

      case PER_AGE:
        return getPer_age();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMPANY_ID:
        return isSetCompany_id();
      case DISABLE:
        return isSetDisable();
      case PAGE:
        return isSetPage();
      case PER_AGE:
        return isSetPer_age();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userHrAccount_args)
        return this.equals((userHrAccount_args)that);
      return false;
    }

    public boolean equals(userHrAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_company_id = true;
      boolean that_present_company_id = true;
      if (this_present_company_id || that_present_company_id) {
        if (!(this_present_company_id && that_present_company_id))
          return false;
        if (this.company_id != that.company_id)
          return false;
      }

      boolean this_present_disable = true;
      boolean that_present_disable = true;
      if (this_present_disable || that_present_disable) {
        if (!(this_present_disable && that_present_disable))
          return false;
        if (this.disable != that.disable)
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_per_age = true;
      boolean that_present_per_age = true;
      if (this_present_per_age || that_present_per_age) {
        if (!(this_present_per_age && that_present_per_age))
          return false;
        if (this.per_age != that.per_age)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_company_id = true;
      list.add(present_company_id);
      if (present_company_id)
        list.add(company_id);

      boolean present_disable = true;
      list.add(present_disable);
      if (present_disable)
        list.add(disable);

      boolean present_page = true;
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_per_age = true;
      list.add(present_per_age);
      if (present_per_age)
        list.add(per_age);

      return list.hashCode();
    }

    @Override
    public int compareTo(userHrAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompany_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDisable()).compareTo(other.isSetDisable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDisable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable, other.disable);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPer_age()).compareTo(other.isSetPer_age());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPer_age()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.per_age, other.per_age);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userHrAccount_args(");
      boolean first = true;

      sb.append("company_id:");
      sb.append(this.company_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("disable:");
      sb.append(this.disable);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("per_age:");
      sb.append(this.per_age);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userHrAccount_argsStandardSchemeFactory implements SchemeFactory {
      public userHrAccount_argsStandardScheme getScheme() {
        return new userHrAccount_argsStandardScheme();
      }
    }

    private static class userHrAccount_argsStandardScheme extends StandardScheme<userHrAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userHrAccount_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPANY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.company_id = iprot.readI32();
                struct.setCompany_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DISABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.disable = iprot.readI32();
                struct.setDisableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PER_AGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.per_age = iprot.readI32();
                struct.setPer_ageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userHrAccount_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.company_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DISABLE_FIELD_DESC);
        oprot.writeI32(struct.disable);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PER_AGE_FIELD_DESC);
        oprot.writeI32(struct.per_age);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userHrAccount_argsTupleSchemeFactory implements SchemeFactory {
      public userHrAccount_argsTupleScheme getScheme() {
        return new userHrAccount_argsTupleScheme();
      }
    }

    private static class userHrAccount_argsTupleScheme extends TupleScheme<userHrAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userHrAccount_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCompany_id()) {
          optionals.set(0);
        }
        if (struct.isSetDisable()) {
          optionals.set(1);
        }
        if (struct.isSetPage()) {
          optionals.set(2);
        }
        if (struct.isSetPer_age()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCompany_id()) {
          oprot.writeI32(struct.company_id);
        }
        if (struct.isSetDisable()) {
          oprot.writeI32(struct.disable);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetPer_age()) {
          oprot.writeI32(struct.per_age);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userHrAccount_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.company_id = iprot.readI32();
          struct.setCompany_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.disable = iprot.readI32();
          struct.setDisableIsSet(true);
        }
        if (incoming.get(2)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(3)) {
          struct.per_age = iprot.readI32();
          struct.setPer_ageIsSet(true);
        }
      }
    }

  }

  public static class userHrAccount_result implements org.apache.thrift.TBase<userHrAccount_result, userHrAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<userHrAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userHrAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userHrAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userHrAccount_resultTupleSchemeFactory());
    }

    public com.moseeker.thrift.gen.common.struct.Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userHrAccount_result.class, metaDataMap);
    }

    public userHrAccount_result() {
    }

    public userHrAccount_result(
      com.moseeker.thrift.gen.common.struct.Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userHrAccount_result(userHrAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
    }

    public userHrAccount_result deepCopy() {
      return new userHrAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public userHrAccount_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userHrAccount_result)
        return this.equals((userHrAccount_result)that);
      return false;
    }

    public boolean equals(userHrAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(userHrAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userHrAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userHrAccount_resultStandardSchemeFactory implements SchemeFactory {
      public userHrAccount_resultStandardScheme getScheme() {
        return new userHrAccount_resultStandardScheme();
      }
    }

    private static class userHrAccount_resultStandardScheme extends StandardScheme<userHrAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userHrAccount_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userHrAccount_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userHrAccount_resultTupleSchemeFactory implements SchemeFactory {
      public userHrAccount_resultTupleScheme getScheme() {
        return new userHrAccount_resultTupleScheme();
      }
    }

    private static class userHrAccount_resultTupleScheme extends TupleScheme<userHrAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userHrAccount_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userHrAccount_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
