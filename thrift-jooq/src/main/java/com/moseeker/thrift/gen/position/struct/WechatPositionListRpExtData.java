/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.position.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-01-23")
public class WechatPositionListRpExtData implements org.apache.thrift.TBase<WechatPositionListRpExtData, WechatPositionListRpExtData._Fields>, java.io.Serializable, Cloneable, Comparable<WechatPositionListRpExtData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WechatPositionListRpExtData");

  private static final org.apache.thrift.protocol.TField RP_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("rp_info", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WechatPositionListRpExtDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WechatPositionListRpExtDataTupleSchemeFactory();

  public java.util.List<RpExtInfo> rp_info; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RP_INFO((short)1, "rp_info");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RP_INFO
          return RP_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RP_INFO, new org.apache.thrift.meta_data.FieldMetaData("rp_info", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RpExtInfo.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WechatPositionListRpExtData.class, metaDataMap);
  }

  public WechatPositionListRpExtData() {
  }

  public WechatPositionListRpExtData(
    java.util.List<RpExtInfo> rp_info)
  {
    this();
    this.rp_info = rp_info;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WechatPositionListRpExtData(WechatPositionListRpExtData other) {
    if (other.isSetRp_info()) {
      java.util.List<RpExtInfo> __this__rp_info = new java.util.ArrayList<RpExtInfo>(other.rp_info.size());
      for (RpExtInfo other_element : other.rp_info) {
        __this__rp_info.add(new RpExtInfo(other_element));
      }
      this.rp_info = __this__rp_info;
    }
  }

  public WechatPositionListRpExtData deepCopy() {
    return new WechatPositionListRpExtData(this);
  }

  @Override
  public void clear() {
    this.rp_info = null;
  }

  public int getRp_infoSize() {
    return (this.rp_info == null) ? 0 : this.rp_info.size();
  }

  public java.util.Iterator<RpExtInfo> getRp_infoIterator() {
    return (this.rp_info == null) ? null : this.rp_info.iterator();
  }

  public void addToRp_info(RpExtInfo elem) {
    if (this.rp_info == null) {
      this.rp_info = new java.util.ArrayList<RpExtInfo>();
    }
    this.rp_info.add(elem);
  }

  public java.util.List<RpExtInfo> getRp_info() {
    return this.rp_info;
  }

  public WechatPositionListRpExtData setRp_info(java.util.List<RpExtInfo> rp_info) {
    this.rp_info = rp_info;
    return this;
  }

  public void unsetRp_info() {
    this.rp_info = null;
  }

  /** Returns true if field rp_info is set (has been assigned a value) and false otherwise */
  public boolean isSetRp_info() {
    return this.rp_info != null;
  }

  public void setRp_infoIsSet(boolean value) {
    if (!value) {
      this.rp_info = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case RP_INFO:
      if (value == null) {
        unsetRp_info();
      } else {
        setRp_info((java.util.List<RpExtInfo>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case RP_INFO:
      return getRp_info();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case RP_INFO:
      return isSetRp_info();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof WechatPositionListRpExtData)
      return this.equals((WechatPositionListRpExtData)that);
    return false;
  }

  public boolean equals(WechatPositionListRpExtData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_rp_info = true && this.isSetRp_info();
    boolean that_present_rp_info = true && that.isSetRp_info();
    if (this_present_rp_info || that_present_rp_info) {
      if (!(this_present_rp_info && that_present_rp_info))
        return false;
      if (!this.rp_info.equals(that.rp_info))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetRp_info()) ? 131071 : 524287);
    if (isSetRp_info())
      hashCode = hashCode * 8191 + rp_info.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(WechatPositionListRpExtData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetRp_info()).compareTo(other.isSetRp_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRp_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rp_info, other.rp_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("WechatPositionListRpExtData(");
    boolean first = true;

    sb.append("rp_info:");
    if (this.rp_info == null) {
      sb.append("null");
    } else {
      sb.append(this.rp_info);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (rp_info == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'rp_info' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WechatPositionListRpExtDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WechatPositionListRpExtDataStandardScheme getScheme() {
      return new WechatPositionListRpExtDataStandardScheme();
    }
  }

  private static class WechatPositionListRpExtDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<WechatPositionListRpExtData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WechatPositionListRpExtData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RP_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.rp_info = new java.util.ArrayList<RpExtInfo>(_list10.size);
                RpExtInfo _elem11;
                for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                {
                  _elem11 = new RpExtInfo();
                  _elem11.read(iprot);
                  struct.rp_info.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setRp_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WechatPositionListRpExtData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.rp_info != null) {
        oprot.writeFieldBegin(RP_INFO_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.rp_info.size()));
          for (RpExtInfo _iter13 : struct.rp_info)
          {
            _iter13.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WechatPositionListRpExtDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WechatPositionListRpExtDataTupleScheme getScheme() {
      return new WechatPositionListRpExtDataTupleScheme();
    }
  }

  private static class WechatPositionListRpExtDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<WechatPositionListRpExtData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WechatPositionListRpExtData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.rp_info.size());
        for (RpExtInfo _iter14 : struct.rp_info)
        {
          _iter14.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WechatPositionListRpExtData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.rp_info = new java.util.ArrayList<RpExtInfo>(_list15.size);
        RpExtInfo _elem16;
        for (int _i17 = 0; _i17 < _list15.size; ++_i17)
        {
          _elem16 = new RpExtInfo();
          _elem16.read(iprot);
          struct.rp_info.add(_elem16);
        }
      }
      struct.setRp_infoIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

