/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.useraccounts.struct;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-02-24")
public class ApplicationOperationRecordVO implements org.apache.thrift.TBase<ApplicationOperationRecordVO, ApplicationOperationRecordVO._Fields>, java.io.Serializable, Cloneable, Comparable<ApplicationOperationRecordVO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ApplicationOperationRecordVO");

  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("event", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField HIDE_FIELD_DESC = new org.apache.thrift.protocol.TField("hide", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField STEP_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("step_status", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ApplicationOperationRecordVOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ApplicationOperationRecordVOTupleSchemeFactory();

  public java.lang.String date; // optional
  public java.lang.String event; // optional
  public int hide; // optional
  public int step_status; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DATE((short)1, "date"),
    EVENT((short)2, "event"),
    HIDE((short)3, "hide"),
    STEP_STATUS((short)4, "step_status");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATE
          return DATE;
        case 2: // EVENT
          return EVENT;
        case 3: // HIDE
          return HIDE;
        case 4: // STEP_STATUS
          return STEP_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HIDE_ISSET_ID = 0;
  private static final int __STEP_STATUS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DATE,_Fields.EVENT,_Fields.HIDE,_Fields.STEP_STATUS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVENT, new org.apache.thrift.meta_data.FieldMetaData("event", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HIDE, new org.apache.thrift.meta_data.FieldMetaData("hide", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STEP_STATUS, new org.apache.thrift.meta_data.FieldMetaData("step_status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ApplicationOperationRecordVO.class, metaDataMap);
  }

  public ApplicationOperationRecordVO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ApplicationOperationRecordVO(ApplicationOperationRecordVO other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDate()) {
      this.date = other.date;
    }
    if (other.isSetEvent()) {
      this.event = other.event;
    }
    this.hide = other.hide;
    this.step_status = other.step_status;
  }

  public ApplicationOperationRecordVO deepCopy() {
    return new ApplicationOperationRecordVO(this);
  }

  @Override
  public void clear() {
    this.date = null;
    this.event = null;
    setHideIsSet(false);
    this.hide = 0;
    setStep_statusIsSet(false);
    this.step_status = 0;
  }

  public java.lang.String getDate() {
    return this.date;
  }

  public ApplicationOperationRecordVO setDate(java.lang.String date) {
    this.date = date;
    return this;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public java.lang.String getEvent() {
    return this.event;
  }

  public ApplicationOperationRecordVO setEvent(java.lang.String event) {
    this.event = event;
    return this;
  }

  public void unsetEvent() {
    this.event = null;
  }

  /** Returns true if field event is set (has been assigned a value) and false otherwise */
  public boolean isSetEvent() {
    return this.event != null;
  }

  public void setEventIsSet(boolean value) {
    if (!value) {
      this.event = null;
    }
  }

  public int getHide() {
    return this.hide;
  }

  public ApplicationOperationRecordVO setHide(int hide) {
    this.hide = hide;
    setHideIsSet(true);
    return this;
  }

  public void unsetHide() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HIDE_ISSET_ID);
  }

  /** Returns true if field hide is set (has been assigned a value) and false otherwise */
  public boolean isSetHide() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HIDE_ISSET_ID);
  }

  public void setHideIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HIDE_ISSET_ID, value);
  }

  public int getStep_status() {
    return this.step_status;
  }

  public ApplicationOperationRecordVO setStep_status(int step_status) {
    this.step_status = step_status;
    setStep_statusIsSet(true);
    return this;
  }

  public void unsetStep_status() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STEP_STATUS_ISSET_ID);
  }

  /** Returns true if field step_status is set (has been assigned a value) and false otherwise */
  public boolean isSetStep_status() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STEP_STATUS_ISSET_ID);
  }

  public void setStep_statusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STEP_STATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((java.lang.String)value);
      }
      break;

    case EVENT:
      if (value == null) {
        unsetEvent();
      } else {
        setEvent((java.lang.String)value);
      }
      break;

    case HIDE:
      if (value == null) {
        unsetHide();
      } else {
        setHide((java.lang.Integer)value);
      }
      break;

    case STEP_STATUS:
      if (value == null) {
        unsetStep_status();
      } else {
        setStep_status((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DATE:
      return getDate();

    case EVENT:
      return getEvent();

    case HIDE:
      return getHide();

    case STEP_STATUS:
      return getStep_status();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DATE:
      return isSetDate();
    case EVENT:
      return isSetEvent();
    case HIDE:
      return isSetHide();
    case STEP_STATUS:
      return isSetStep_status();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ApplicationOperationRecordVO)
      return this.equals((ApplicationOperationRecordVO)that);
    return false;
  }

  public boolean equals(ApplicationOperationRecordVO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    boolean this_present_event = true && this.isSetEvent();
    boolean that_present_event = true && that.isSetEvent();
    if (this_present_event || that_present_event) {
      if (!(this_present_event && that_present_event))
        return false;
      if (!this.event.equals(that.event))
        return false;
    }

    boolean this_present_hide = true && this.isSetHide();
    boolean that_present_hide = true && that.isSetHide();
    if (this_present_hide || that_present_hide) {
      if (!(this_present_hide && that_present_hide))
        return false;
      if (this.hide != that.hide)
        return false;
    }

    boolean this_present_step_status = true && this.isSetStep_status();
    boolean that_present_step_status = true && that.isSetStep_status();
    if (this_present_step_status || that_present_step_status) {
      if (!(this_present_step_status && that_present_step_status))
        return false;
      if (this.step_status != that.step_status)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDate()) ? 131071 : 524287);
    if (isSetDate())
      hashCode = hashCode * 8191 + date.hashCode();

    hashCode = hashCode * 8191 + ((isSetEvent()) ? 131071 : 524287);
    if (isSetEvent())
      hashCode = hashCode * 8191 + event.hashCode();

    hashCode = hashCode * 8191 + ((isSetHide()) ? 131071 : 524287);
    if (isSetHide())
      hashCode = hashCode * 8191 + hide;

    hashCode = hashCode * 8191 + ((isSetStep_status()) ? 131071 : 524287);
    if (isSetStep_status())
      hashCode = hashCode * 8191 + step_status;

    return hashCode;
  }

  @Override
  public int compareTo(ApplicationOperationRecordVO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEvent()).compareTo(other.isSetEvent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event, other.event);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHide()).compareTo(other.isSetHide());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHide()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hide, other.hide);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStep_status()).compareTo(other.isSetStep_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStep_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.step_status, other.step_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ApplicationOperationRecordVO(");
    boolean first = true;

    if (isSetDate()) {
      sb.append("date:");
      if (this.date == null) {
        sb.append("null");
      } else {
        sb.append(this.date);
      }
      first = false;
    }
    if (isSetEvent()) {
      if (!first) sb.append(", ");
      sb.append("event:");
      if (this.event == null) {
        sb.append("null");
      } else {
        sb.append(this.event);
      }
      first = false;
    }
    if (isSetHide()) {
      if (!first) sb.append(", ");
      sb.append("hide:");
      sb.append(this.hide);
      first = false;
    }
    if (isSetStep_status()) {
      if (!first) sb.append(", ");
      sb.append("step_status:");
      sb.append(this.step_status);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ApplicationOperationRecordVOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ApplicationOperationRecordVOStandardScheme getScheme() {
      return new ApplicationOperationRecordVOStandardScheme();
    }
  }

  private static class ApplicationOperationRecordVOStandardScheme extends org.apache.thrift.scheme.StandardScheme<ApplicationOperationRecordVO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ApplicationOperationRecordVO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EVENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.event = iprot.readString();
              struct.setEventIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HIDE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hide = iprot.readI32();
              struct.setHideIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STEP_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.step_status = iprot.readI32();
              struct.setStep_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ApplicationOperationRecordVO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.date != null) {
        if (struct.isSetDate()) {
          oprot.writeFieldBegin(DATE_FIELD_DESC);
          oprot.writeString(struct.date);
          oprot.writeFieldEnd();
        }
      }
      if (struct.event != null) {
        if (struct.isSetEvent()) {
          oprot.writeFieldBegin(EVENT_FIELD_DESC);
          oprot.writeString(struct.event);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetHide()) {
        oprot.writeFieldBegin(HIDE_FIELD_DESC);
        oprot.writeI32(struct.hide);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStep_status()) {
        oprot.writeFieldBegin(STEP_STATUS_FIELD_DESC);
        oprot.writeI32(struct.step_status);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ApplicationOperationRecordVOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ApplicationOperationRecordVOTupleScheme getScheme() {
      return new ApplicationOperationRecordVOTupleScheme();
    }
  }

  private static class ApplicationOperationRecordVOTupleScheme extends org.apache.thrift.scheme.TupleScheme<ApplicationOperationRecordVO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ApplicationOperationRecordVO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDate()) {
        optionals.set(0);
      }
      if (struct.isSetEvent()) {
        optionals.set(1);
      }
      if (struct.isSetHide()) {
        optionals.set(2);
      }
      if (struct.isSetStep_status()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetDate()) {
        oprot.writeString(struct.date);
      }
      if (struct.isSetEvent()) {
        oprot.writeString(struct.event);
      }
      if (struct.isSetHide()) {
        oprot.writeI32(struct.hide);
      }
      if (struct.isSetStep_status()) {
        oprot.writeI32(struct.step_status);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ApplicationOperationRecordVO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.date = iprot.readString();
        struct.setDateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.event = iprot.readString();
        struct.setEventIsSet(true);
      }
      if (incoming.get(2)) {
        struct.hide = iprot.readI32();
        struct.setHideIsSet(true);
      }
      if (incoming.get(3)) {
        struct.step_status = iprot.readI32();
        struct.setStep_statusIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

