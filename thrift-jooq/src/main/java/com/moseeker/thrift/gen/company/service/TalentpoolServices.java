/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.company.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-12-11")
public class TalentpoolServices {

  public interface Iface {

    public com.moseeker.thrift.gen.common.struct.Response getTalentAllComment(int hr_id, int company_id, int user_id, int page_number, int page_size) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response getHrTag(int hr_id, int company_id, int page_number, int page_size) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response batchAddTalent(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response batchCancelTalent(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response hrAddTag(int hr_id, int company_id, java.lang.String name) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response hrDelTag(int hr_id, int company_id, int tag_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response hrUpdateTag(int hr_id, int company_id, int tag_id, java.lang.String name) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response batchCancleTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response batchAddTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response hrAddComment(int hr_id, int company_id, int user_id, java.lang.String content) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response hrDelComment(int hr_id, int company_id, int comment_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response batchAddPublicTalent(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response batchCancelPublicTalent(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response getCompanyPulicTalent(int hr_id, int company_id, int page_number, int page_size) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response batchNewAddTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response getTalentStat(int hr_id, int company_id, int type) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response getCompanyUserPublic(int hr_id, int company_id, int user_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response getCompanyTalent(int hr_id, int company_id, int user_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    public com.moseeker.thrift.gen.common.struct.Response getHrUserTag(int hr_id, int company_id, int user_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getTalentAllComment(int hr_id, int company_id, int user_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void getHrTag(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void batchAddTalent(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void batchCancelTalent(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void hrAddTag(int hr_id, int company_id, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void hrDelTag(int hr_id, int company_id, int tag_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void hrUpdateTag(int hr_id, int company_id, int tag_id, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void batchCancleTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void batchAddTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void hrAddComment(int hr_id, int company_id, int user_id, java.lang.String content, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void hrDelComment(int hr_id, int company_id, int comment_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void batchAddPublicTalent(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void batchCancelPublicTalent(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void getCompanyPulicTalent(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void batchNewAddTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void getTalentStat(int hr_id, int company_id, int type, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void getCompanyUserPublic(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void getCompanyTalent(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    public void getHrUserTag(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.moseeker.thrift.gen.common.struct.Response getTalentAllComment(int hr_id, int company_id, int user_id, int page_number, int page_size) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_getTalentAllComment(hr_id, company_id, user_id, page_number, page_size);
      return recv_getTalentAllComment();
    }

    public void send_getTalentAllComment(int hr_id, int company_id, int user_id, int page_number, int page_size) throws org.apache.thrift.TException
    {
      getTalentAllComment_args args = new getTalentAllComment_args();
      args.setHr_id(hr_id);
      args.setCompany_id(company_id);
      args.setUser_id(user_id);
      args.setPage_number(page_number);
      args.setPage_size(page_size);
      sendBase("getTalentAllComment", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_getTalentAllComment() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      getTalentAllComment_result result = new getTalentAllComment_result();
      receiveBase(result, "getTalentAllComment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTalentAllComment failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response getHrTag(int hr_id, int company_id, int page_number, int page_size) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_getHrTag(hr_id, company_id, page_number, page_size);
      return recv_getHrTag();
    }

    public void send_getHrTag(int hr_id, int company_id, int page_number, int page_size) throws org.apache.thrift.TException
    {
      getHrTag_args args = new getHrTag_args();
      args.setHr_id(hr_id);
      args.setCompany_id(company_id);
      args.setPage_number(page_number);
      args.setPage_size(page_size);
      sendBase("getHrTag", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_getHrTag() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      getHrTag_result result = new getHrTag_result();
      receiveBase(result, "getHrTag");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHrTag failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response batchAddTalent(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_batchAddTalent(hr_id, user_ids, company_id);
      return recv_batchAddTalent();
    }

    public void send_batchAddTalent(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id) throws org.apache.thrift.TException
    {
      batchAddTalent_args args = new batchAddTalent_args();
      args.setHr_id(hr_id);
      args.setUser_ids(user_ids);
      args.setCompany_id(company_id);
      sendBase("batchAddTalent", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_batchAddTalent() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      batchAddTalent_result result = new batchAddTalent_result();
      receiveBase(result, "batchAddTalent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchAddTalent failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response batchCancelTalent(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_batchCancelTalent(hr_id, user_ids, company_id);
      return recv_batchCancelTalent();
    }

    public void send_batchCancelTalent(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id) throws org.apache.thrift.TException
    {
      batchCancelTalent_args args = new batchCancelTalent_args();
      args.setHr_id(hr_id);
      args.setUser_ids(user_ids);
      args.setCompany_id(company_id);
      sendBase("batchCancelTalent", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_batchCancelTalent() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      batchCancelTalent_result result = new batchCancelTalent_result();
      receiveBase(result, "batchCancelTalent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchCancelTalent failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response hrAddTag(int hr_id, int company_id, java.lang.String name) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_hrAddTag(hr_id, company_id, name);
      return recv_hrAddTag();
    }

    public void send_hrAddTag(int hr_id, int company_id, java.lang.String name) throws org.apache.thrift.TException
    {
      hrAddTag_args args = new hrAddTag_args();
      args.setHr_id(hr_id);
      args.setCompany_id(company_id);
      args.setName(name);
      sendBase("hrAddTag", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_hrAddTag() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      hrAddTag_result result = new hrAddTag_result();
      receiveBase(result, "hrAddTag");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hrAddTag failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response hrDelTag(int hr_id, int company_id, int tag_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_hrDelTag(hr_id, company_id, tag_id);
      return recv_hrDelTag();
    }

    public void send_hrDelTag(int hr_id, int company_id, int tag_id) throws org.apache.thrift.TException
    {
      hrDelTag_args args = new hrDelTag_args();
      args.setHr_id(hr_id);
      args.setCompany_id(company_id);
      args.setTag_id(tag_id);
      sendBase("hrDelTag", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_hrDelTag() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      hrDelTag_result result = new hrDelTag_result();
      receiveBase(result, "hrDelTag");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hrDelTag failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response hrUpdateTag(int hr_id, int company_id, int tag_id, java.lang.String name) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_hrUpdateTag(hr_id, company_id, tag_id, name);
      return recv_hrUpdateTag();
    }

    public void send_hrUpdateTag(int hr_id, int company_id, int tag_id, java.lang.String name) throws org.apache.thrift.TException
    {
      hrUpdateTag_args args = new hrUpdateTag_args();
      args.setHr_id(hr_id);
      args.setCompany_id(company_id);
      args.setTag_id(tag_id);
      args.setName(name);
      sendBase("hrUpdateTag", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_hrUpdateTag() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      hrUpdateTag_result result = new hrUpdateTag_result();
      receiveBase(result, "hrUpdateTag");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hrUpdateTag failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response batchCancleTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_batchCancleTalentTag(hr_id, user_ids, tag_ids, company_id);
      return recv_batchCancleTalentTag();
    }

    public void send_batchCancleTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id) throws org.apache.thrift.TException
    {
      batchCancleTalentTag_args args = new batchCancleTalentTag_args();
      args.setHr_id(hr_id);
      args.setUser_ids(user_ids);
      args.setTag_ids(tag_ids);
      args.setCompany_id(company_id);
      sendBase("batchCancleTalentTag", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_batchCancleTalentTag() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      batchCancleTalentTag_result result = new batchCancleTalentTag_result();
      receiveBase(result, "batchCancleTalentTag");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchCancleTalentTag failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response batchAddTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_batchAddTalentTag(hr_id, user_ids, tag_ids, company_id);
      return recv_batchAddTalentTag();
    }

    public void send_batchAddTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id) throws org.apache.thrift.TException
    {
      batchAddTalentTag_args args = new batchAddTalentTag_args();
      args.setHr_id(hr_id);
      args.setUser_ids(user_ids);
      args.setTag_ids(tag_ids);
      args.setCompany_id(company_id);
      sendBase("batchAddTalentTag", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_batchAddTalentTag() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      batchAddTalentTag_result result = new batchAddTalentTag_result();
      receiveBase(result, "batchAddTalentTag");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchAddTalentTag failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response hrAddComment(int hr_id, int company_id, int user_id, java.lang.String content) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_hrAddComment(hr_id, company_id, user_id, content);
      return recv_hrAddComment();
    }

    public void send_hrAddComment(int hr_id, int company_id, int user_id, java.lang.String content) throws org.apache.thrift.TException
    {
      hrAddComment_args args = new hrAddComment_args();
      args.setHr_id(hr_id);
      args.setCompany_id(company_id);
      args.setUser_id(user_id);
      args.setContent(content);
      sendBase("hrAddComment", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_hrAddComment() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      hrAddComment_result result = new hrAddComment_result();
      receiveBase(result, "hrAddComment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hrAddComment failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response hrDelComment(int hr_id, int company_id, int comment_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_hrDelComment(hr_id, company_id, comment_id);
      return recv_hrDelComment();
    }

    public void send_hrDelComment(int hr_id, int company_id, int comment_id) throws org.apache.thrift.TException
    {
      hrDelComment_args args = new hrDelComment_args();
      args.setHr_id(hr_id);
      args.setCompany_id(company_id);
      args.setComment_id(comment_id);
      sendBase("hrDelComment", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_hrDelComment() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      hrDelComment_result result = new hrDelComment_result();
      receiveBase(result, "hrDelComment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hrDelComment failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response batchAddPublicTalent(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_batchAddPublicTalent(hr_id, company_id, user_ids);
      return recv_batchAddPublicTalent();
    }

    public void send_batchAddPublicTalent(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids) throws org.apache.thrift.TException
    {
      batchAddPublicTalent_args args = new batchAddPublicTalent_args();
      args.setHr_id(hr_id);
      args.setCompany_id(company_id);
      args.setUser_ids(user_ids);
      sendBase("batchAddPublicTalent", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_batchAddPublicTalent() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      batchAddPublicTalent_result result = new batchAddPublicTalent_result();
      receiveBase(result, "batchAddPublicTalent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchAddPublicTalent failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response batchCancelPublicTalent(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_batchCancelPublicTalent(hr_id, company_id, user_ids);
      return recv_batchCancelPublicTalent();
    }

    public void send_batchCancelPublicTalent(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids) throws org.apache.thrift.TException
    {
      batchCancelPublicTalent_args args = new batchCancelPublicTalent_args();
      args.setHr_id(hr_id);
      args.setCompany_id(company_id);
      args.setUser_ids(user_ids);
      sendBase("batchCancelPublicTalent", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_batchCancelPublicTalent() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      batchCancelPublicTalent_result result = new batchCancelPublicTalent_result();
      receiveBase(result, "batchCancelPublicTalent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchCancelPublicTalent failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response getCompanyPulicTalent(int hr_id, int company_id, int page_number, int page_size) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_getCompanyPulicTalent(hr_id, company_id, page_number, page_size);
      return recv_getCompanyPulicTalent();
    }

    public void send_getCompanyPulicTalent(int hr_id, int company_id, int page_number, int page_size) throws org.apache.thrift.TException
    {
      getCompanyPulicTalent_args args = new getCompanyPulicTalent_args();
      args.setHr_id(hr_id);
      args.setCompany_id(company_id);
      args.setPage_number(page_number);
      args.setPage_size(page_size);
      sendBase("getCompanyPulicTalent", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_getCompanyPulicTalent() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      getCompanyPulicTalent_result result = new getCompanyPulicTalent_result();
      receiveBase(result, "getCompanyPulicTalent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCompanyPulicTalent failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response batchNewAddTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_batchNewAddTalentTag(hr_id, user_ids, tag_ids, company_id);
      return recv_batchNewAddTalentTag();
    }

    public void send_batchNewAddTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id) throws org.apache.thrift.TException
    {
      batchNewAddTalentTag_args args = new batchNewAddTalentTag_args();
      args.setHr_id(hr_id);
      args.setUser_ids(user_ids);
      args.setTag_ids(tag_ids);
      args.setCompany_id(company_id);
      sendBase("batchNewAddTalentTag", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_batchNewAddTalentTag() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      batchNewAddTalentTag_result result = new batchNewAddTalentTag_result();
      receiveBase(result, "batchNewAddTalentTag");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchNewAddTalentTag failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response getTalentStat(int hr_id, int company_id, int type) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_getTalentStat(hr_id, company_id, type);
      return recv_getTalentStat();
    }

    public void send_getTalentStat(int hr_id, int company_id, int type) throws org.apache.thrift.TException
    {
      getTalentStat_args args = new getTalentStat_args();
      args.setHr_id(hr_id);
      args.setCompany_id(company_id);
      args.setType(type);
      sendBase("getTalentStat", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_getTalentStat() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      getTalentStat_result result = new getTalentStat_result();
      receiveBase(result, "getTalentStat");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTalentStat failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response getCompanyUserPublic(int hr_id, int company_id, int user_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_getCompanyUserPublic(hr_id, company_id, user_id);
      return recv_getCompanyUserPublic();
    }

    public void send_getCompanyUserPublic(int hr_id, int company_id, int user_id) throws org.apache.thrift.TException
    {
      getCompanyUserPublic_args args = new getCompanyUserPublic_args();
      args.setHr_id(hr_id);
      args.setCompany_id(company_id);
      args.setUser_id(user_id);
      sendBase("getCompanyUserPublic", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_getCompanyUserPublic() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      getCompanyUserPublic_result result = new getCompanyUserPublic_result();
      receiveBase(result, "getCompanyUserPublic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCompanyUserPublic failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response getCompanyTalent(int hr_id, int company_id, int user_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_getCompanyTalent(hr_id, company_id, user_id);
      return recv_getCompanyTalent();
    }

    public void send_getCompanyTalent(int hr_id, int company_id, int user_id) throws org.apache.thrift.TException
    {
      getCompanyTalent_args args = new getCompanyTalent_args();
      args.setHr_id(hr_id);
      args.setCompany_id(company_id);
      args.setUser_id(user_id);
      sendBase("getCompanyTalent", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_getCompanyTalent() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      getCompanyTalent_result result = new getCompanyTalent_result();
      receiveBase(result, "getCompanyTalent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCompanyTalent failed: unknown result");
    }

    public com.moseeker.thrift.gen.common.struct.Response getHrUserTag(int hr_id, int company_id, int user_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      send_getHrUserTag(hr_id, company_id, user_id);
      return recv_getHrUserTag();
    }

    public void send_getHrUserTag(int hr_id, int company_id, int user_id) throws org.apache.thrift.TException
    {
      getHrUserTag_args args = new getHrUserTag_args();
      args.setHr_id(hr_id);
      args.setCompany_id(company_id);
      args.setUser_id(user_id);
      sendBase("getHrUserTag", args);
    }

    public com.moseeker.thrift.gen.common.struct.Response recv_getHrUserTag() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
    {
      getHrUserTag_result result = new getHrUserTag_result();
      receiveBase(result, "getHrUserTag");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHrUserTag failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getTalentAllComment(int hr_id, int company_id, int user_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTalentAllComment_call method_call = new getTalentAllComment_call(hr_id, company_id, user_id, page_number, page_size, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTalentAllComment_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private int hr_id;
      private int company_id;
      private int user_id;
      private int page_number;
      private int page_size;
      public getTalentAllComment_call(int hr_id, int company_id, int user_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hr_id = hr_id;
        this.company_id = company_id;
        this.user_id = user_id;
        this.page_number = page_number;
        this.page_size = page_size;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTalentAllComment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTalentAllComment_args args = new getTalentAllComment_args();
        args.setHr_id(hr_id);
        args.setCompany_id(company_id);
        args.setUser_id(user_id);
        args.setPage_number(page_number);
        args.setPage_size(page_size);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTalentAllComment();
      }
    }

    public void getHrTag(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHrTag_call method_call = new getHrTag_call(hr_id, company_id, page_number, page_size, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHrTag_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private int hr_id;
      private int company_id;
      private int page_number;
      private int page_size;
      public getHrTag_call(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hr_id = hr_id;
        this.company_id = company_id;
        this.page_number = page_number;
        this.page_size = page_size;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHrTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHrTag_args args = new getHrTag_args();
        args.setHr_id(hr_id);
        args.setCompany_id(company_id);
        args.setPage_number(page_number);
        args.setPage_size(page_size);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHrTag();
      }
    }

    public void batchAddTalent(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batchAddTalent_call method_call = new batchAddTalent_call(hr_id, user_ids, company_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchAddTalent_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private int hr_id;
      private java.util.List<java.lang.Integer> user_ids;
      private int company_id;
      public batchAddTalent_call(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hr_id = hr_id;
        this.user_ids = user_ids;
        this.company_id = company_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchAddTalent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batchAddTalent_args args = new batchAddTalent_args();
        args.setHr_id(hr_id);
        args.setUser_ids(user_ids);
        args.setCompany_id(company_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batchAddTalent();
      }
    }

    public void batchCancelTalent(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batchCancelTalent_call method_call = new batchCancelTalent_call(hr_id, user_ids, company_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchCancelTalent_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private int hr_id;
      private java.util.List<java.lang.Integer> user_ids;
      private int company_id;
      public batchCancelTalent_call(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hr_id = hr_id;
        this.user_ids = user_ids;
        this.company_id = company_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchCancelTalent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batchCancelTalent_args args = new batchCancelTalent_args();
        args.setHr_id(hr_id);
        args.setUser_ids(user_ids);
        args.setCompany_id(company_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batchCancelTalent();
      }
    }

    public void hrAddTag(int hr_id, int company_id, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      hrAddTag_call method_call = new hrAddTag_call(hr_id, company_id, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class hrAddTag_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private int hr_id;
      private int company_id;
      private java.lang.String name;
      public hrAddTag_call(int hr_id, int company_id, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hr_id = hr_id;
        this.company_id = company_id;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hrAddTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        hrAddTag_args args = new hrAddTag_args();
        args.setHr_id(hr_id);
        args.setCompany_id(company_id);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_hrAddTag();
      }
    }

    public void hrDelTag(int hr_id, int company_id, int tag_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      hrDelTag_call method_call = new hrDelTag_call(hr_id, company_id, tag_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class hrDelTag_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private int hr_id;
      private int company_id;
      private int tag_id;
      public hrDelTag_call(int hr_id, int company_id, int tag_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hr_id = hr_id;
        this.company_id = company_id;
        this.tag_id = tag_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hrDelTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        hrDelTag_args args = new hrDelTag_args();
        args.setHr_id(hr_id);
        args.setCompany_id(company_id);
        args.setTag_id(tag_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_hrDelTag();
      }
    }

    public void hrUpdateTag(int hr_id, int company_id, int tag_id, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      hrUpdateTag_call method_call = new hrUpdateTag_call(hr_id, company_id, tag_id, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class hrUpdateTag_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private int hr_id;
      private int company_id;
      private int tag_id;
      private java.lang.String name;
      public hrUpdateTag_call(int hr_id, int company_id, int tag_id, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hr_id = hr_id;
        this.company_id = company_id;
        this.tag_id = tag_id;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hrUpdateTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        hrUpdateTag_args args = new hrUpdateTag_args();
        args.setHr_id(hr_id);
        args.setCompany_id(company_id);
        args.setTag_id(tag_id);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_hrUpdateTag();
      }
    }

    public void batchCancleTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batchCancleTalentTag_call method_call = new batchCancleTalentTag_call(hr_id, user_ids, tag_ids, company_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchCancleTalentTag_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private int hr_id;
      private java.util.List<java.lang.Integer> user_ids;
      private java.util.List<java.lang.Integer> tag_ids;
      private int company_id;
      public batchCancleTalentTag_call(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hr_id = hr_id;
        this.user_ids = user_ids;
        this.tag_ids = tag_ids;
        this.company_id = company_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchCancleTalentTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batchCancleTalentTag_args args = new batchCancleTalentTag_args();
        args.setHr_id(hr_id);
        args.setUser_ids(user_ids);
        args.setTag_ids(tag_ids);
        args.setCompany_id(company_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batchCancleTalentTag();
      }
    }

    public void batchAddTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batchAddTalentTag_call method_call = new batchAddTalentTag_call(hr_id, user_ids, tag_ids, company_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchAddTalentTag_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private int hr_id;
      private java.util.List<java.lang.Integer> user_ids;
      private java.util.List<java.lang.Integer> tag_ids;
      private int company_id;
      public batchAddTalentTag_call(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hr_id = hr_id;
        this.user_ids = user_ids;
        this.tag_ids = tag_ids;
        this.company_id = company_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchAddTalentTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batchAddTalentTag_args args = new batchAddTalentTag_args();
        args.setHr_id(hr_id);
        args.setUser_ids(user_ids);
        args.setTag_ids(tag_ids);
        args.setCompany_id(company_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batchAddTalentTag();
      }
    }

    public void hrAddComment(int hr_id, int company_id, int user_id, java.lang.String content, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      hrAddComment_call method_call = new hrAddComment_call(hr_id, company_id, user_id, content, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class hrAddComment_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private int hr_id;
      private int company_id;
      private int user_id;
      private java.lang.String content;
      public hrAddComment_call(int hr_id, int company_id, int user_id, java.lang.String content, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hr_id = hr_id;
        this.company_id = company_id;
        this.user_id = user_id;
        this.content = content;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hrAddComment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        hrAddComment_args args = new hrAddComment_args();
        args.setHr_id(hr_id);
        args.setCompany_id(company_id);
        args.setUser_id(user_id);
        args.setContent(content);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_hrAddComment();
      }
    }

    public void hrDelComment(int hr_id, int company_id, int comment_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      hrDelComment_call method_call = new hrDelComment_call(hr_id, company_id, comment_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class hrDelComment_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private int hr_id;
      private int company_id;
      private int comment_id;
      public hrDelComment_call(int hr_id, int company_id, int comment_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hr_id = hr_id;
        this.company_id = company_id;
        this.comment_id = comment_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hrDelComment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        hrDelComment_args args = new hrDelComment_args();
        args.setHr_id(hr_id);
        args.setCompany_id(company_id);
        args.setComment_id(comment_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_hrDelComment();
      }
    }

    public void batchAddPublicTalent(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batchAddPublicTalent_call method_call = new batchAddPublicTalent_call(hr_id, company_id, user_ids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchAddPublicTalent_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private int hr_id;
      private int company_id;
      private java.util.List<java.lang.Integer> user_ids;
      public batchAddPublicTalent_call(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hr_id = hr_id;
        this.company_id = company_id;
        this.user_ids = user_ids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchAddPublicTalent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batchAddPublicTalent_args args = new batchAddPublicTalent_args();
        args.setHr_id(hr_id);
        args.setCompany_id(company_id);
        args.setUser_ids(user_ids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batchAddPublicTalent();
      }
    }

    public void batchCancelPublicTalent(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batchCancelPublicTalent_call method_call = new batchCancelPublicTalent_call(hr_id, company_id, user_ids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchCancelPublicTalent_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private int hr_id;
      private int company_id;
      private java.util.List<java.lang.Integer> user_ids;
      public batchCancelPublicTalent_call(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hr_id = hr_id;
        this.company_id = company_id;
        this.user_ids = user_ids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchCancelPublicTalent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batchCancelPublicTalent_args args = new batchCancelPublicTalent_args();
        args.setHr_id(hr_id);
        args.setCompany_id(company_id);
        args.setUser_ids(user_ids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batchCancelPublicTalent();
      }
    }

    public void getCompanyPulicTalent(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCompanyPulicTalent_call method_call = new getCompanyPulicTalent_call(hr_id, company_id, page_number, page_size, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCompanyPulicTalent_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private int hr_id;
      private int company_id;
      private int page_number;
      private int page_size;
      public getCompanyPulicTalent_call(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hr_id = hr_id;
        this.company_id = company_id;
        this.page_number = page_number;
        this.page_size = page_size;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCompanyPulicTalent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCompanyPulicTalent_args args = new getCompanyPulicTalent_args();
        args.setHr_id(hr_id);
        args.setCompany_id(company_id);
        args.setPage_number(page_number);
        args.setPage_size(page_size);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCompanyPulicTalent();
      }
    }

    public void batchNewAddTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batchNewAddTalentTag_call method_call = new batchNewAddTalentTag_call(hr_id, user_ids, tag_ids, company_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchNewAddTalentTag_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private int hr_id;
      private java.util.List<java.lang.Integer> user_ids;
      private java.util.List<java.lang.Integer> tag_ids;
      private int company_id;
      public batchNewAddTalentTag_call(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hr_id = hr_id;
        this.user_ids = user_ids;
        this.tag_ids = tag_ids;
        this.company_id = company_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchNewAddTalentTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batchNewAddTalentTag_args args = new batchNewAddTalentTag_args();
        args.setHr_id(hr_id);
        args.setUser_ids(user_ids);
        args.setTag_ids(tag_ids);
        args.setCompany_id(company_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batchNewAddTalentTag();
      }
    }

    public void getTalentStat(int hr_id, int company_id, int type, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTalentStat_call method_call = new getTalentStat_call(hr_id, company_id, type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTalentStat_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private int hr_id;
      private int company_id;
      private int type;
      public getTalentStat_call(int hr_id, int company_id, int type, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hr_id = hr_id;
        this.company_id = company_id;
        this.type = type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTalentStat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTalentStat_args args = new getTalentStat_args();
        args.setHr_id(hr_id);
        args.setCompany_id(company_id);
        args.setType(type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTalentStat();
      }
    }

    public void getCompanyUserPublic(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCompanyUserPublic_call method_call = new getCompanyUserPublic_call(hr_id, company_id, user_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCompanyUserPublic_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private int hr_id;
      private int company_id;
      private int user_id;
      public getCompanyUserPublic_call(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hr_id = hr_id;
        this.company_id = company_id;
        this.user_id = user_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCompanyUserPublic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCompanyUserPublic_args args = new getCompanyUserPublic_args();
        args.setHr_id(hr_id);
        args.setCompany_id(company_id);
        args.setUser_id(user_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCompanyUserPublic();
      }
    }

    public void getCompanyTalent(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCompanyTalent_call method_call = new getCompanyTalent_call(hr_id, company_id, user_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCompanyTalent_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private int hr_id;
      private int company_id;
      private int user_id;
      public getCompanyTalent_call(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hr_id = hr_id;
        this.company_id = company_id;
        this.user_id = user_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCompanyTalent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCompanyTalent_args args = new getCompanyTalent_args();
        args.setHr_id(hr_id);
        args.setCompany_id(company_id);
        args.setUser_id(user_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCompanyTalent();
      }
    }

    public void getHrUserTag(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHrUserTag_call method_call = new getHrUserTag_call(hr_id, company_id, user_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHrUserTag_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
      private int hr_id;
      private int company_id;
      private int user_id;
      public getHrUserTag_call(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hr_id = hr_id;
        this.company_id = company_id;
        this.user_id = user_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHrUserTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHrUserTag_args args = new getHrUserTag_args();
        args.setHr_id(hr_id);
        args.setCompany_id(company_id);
        args.setUser_id(user_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHrUserTag();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getTalentAllComment", new getTalentAllComment());
      processMap.put("getHrTag", new getHrTag());
      processMap.put("batchAddTalent", new batchAddTalent());
      processMap.put("batchCancelTalent", new batchCancelTalent());
      processMap.put("hrAddTag", new hrAddTag());
      processMap.put("hrDelTag", new hrDelTag());
      processMap.put("hrUpdateTag", new hrUpdateTag());
      processMap.put("batchCancleTalentTag", new batchCancleTalentTag());
      processMap.put("batchAddTalentTag", new batchAddTalentTag());
      processMap.put("hrAddComment", new hrAddComment());
      processMap.put("hrDelComment", new hrDelComment());
      processMap.put("batchAddPublicTalent", new batchAddPublicTalent());
      processMap.put("batchCancelPublicTalent", new batchCancelPublicTalent());
      processMap.put("getCompanyPulicTalent", new getCompanyPulicTalent());
      processMap.put("batchNewAddTalentTag", new batchNewAddTalentTag());
      processMap.put("getTalentStat", new getTalentStat());
      processMap.put("getCompanyUserPublic", new getCompanyUserPublic());
      processMap.put("getCompanyTalent", new getCompanyTalent());
      processMap.put("getHrUserTag", new getHrUserTag());
      return processMap;
    }

    public static class getTalentAllComment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTalentAllComment_args> {
      public getTalentAllComment() {
        super("getTalentAllComment");
      }

      public getTalentAllComment_args getEmptyArgsInstance() {
        return new getTalentAllComment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTalentAllComment_result getResult(I iface, getTalentAllComment_args args) throws org.apache.thrift.TException {
        getTalentAllComment_result result = new getTalentAllComment_result();
        try {
          result.success = iface.getTalentAllComment(args.hr_id, args.company_id, args.user_id, args.page_number, args.page_size);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getHrTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHrTag_args> {
      public getHrTag() {
        super("getHrTag");
      }

      public getHrTag_args getEmptyArgsInstance() {
        return new getHrTag_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHrTag_result getResult(I iface, getHrTag_args args) throws org.apache.thrift.TException {
        getHrTag_result result = new getHrTag_result();
        try {
          result.success = iface.getHrTag(args.hr_id, args.company_id, args.page_number, args.page_size);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class batchAddTalent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchAddTalent_args> {
      public batchAddTalent() {
        super("batchAddTalent");
      }

      public batchAddTalent_args getEmptyArgsInstance() {
        return new batchAddTalent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public batchAddTalent_result getResult(I iface, batchAddTalent_args args) throws org.apache.thrift.TException {
        batchAddTalent_result result = new batchAddTalent_result();
        try {
          result.success = iface.batchAddTalent(args.hr_id, args.user_ids, args.company_id);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class batchCancelTalent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchCancelTalent_args> {
      public batchCancelTalent() {
        super("batchCancelTalent");
      }

      public batchCancelTalent_args getEmptyArgsInstance() {
        return new batchCancelTalent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public batchCancelTalent_result getResult(I iface, batchCancelTalent_args args) throws org.apache.thrift.TException {
        batchCancelTalent_result result = new batchCancelTalent_result();
        try {
          result.success = iface.batchCancelTalent(args.hr_id, args.user_ids, args.company_id);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class hrAddTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hrAddTag_args> {
      public hrAddTag() {
        super("hrAddTag");
      }

      public hrAddTag_args getEmptyArgsInstance() {
        return new hrAddTag_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public hrAddTag_result getResult(I iface, hrAddTag_args args) throws org.apache.thrift.TException {
        hrAddTag_result result = new hrAddTag_result();
        try {
          result.success = iface.hrAddTag(args.hr_id, args.company_id, args.name);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class hrDelTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hrDelTag_args> {
      public hrDelTag() {
        super("hrDelTag");
      }

      public hrDelTag_args getEmptyArgsInstance() {
        return new hrDelTag_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public hrDelTag_result getResult(I iface, hrDelTag_args args) throws org.apache.thrift.TException {
        hrDelTag_result result = new hrDelTag_result();
        try {
          result.success = iface.hrDelTag(args.hr_id, args.company_id, args.tag_id);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class hrUpdateTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hrUpdateTag_args> {
      public hrUpdateTag() {
        super("hrUpdateTag");
      }

      public hrUpdateTag_args getEmptyArgsInstance() {
        return new hrUpdateTag_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public hrUpdateTag_result getResult(I iface, hrUpdateTag_args args) throws org.apache.thrift.TException {
        hrUpdateTag_result result = new hrUpdateTag_result();
        try {
          result.success = iface.hrUpdateTag(args.hr_id, args.company_id, args.tag_id, args.name);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class batchCancleTalentTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchCancleTalentTag_args> {
      public batchCancleTalentTag() {
        super("batchCancleTalentTag");
      }

      public batchCancleTalentTag_args getEmptyArgsInstance() {
        return new batchCancleTalentTag_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public batchCancleTalentTag_result getResult(I iface, batchCancleTalentTag_args args) throws org.apache.thrift.TException {
        batchCancleTalentTag_result result = new batchCancleTalentTag_result();
        try {
          result.success = iface.batchCancleTalentTag(args.hr_id, args.user_ids, args.tag_ids, args.company_id);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class batchAddTalentTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchAddTalentTag_args> {
      public batchAddTalentTag() {
        super("batchAddTalentTag");
      }

      public batchAddTalentTag_args getEmptyArgsInstance() {
        return new batchAddTalentTag_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public batchAddTalentTag_result getResult(I iface, batchAddTalentTag_args args) throws org.apache.thrift.TException {
        batchAddTalentTag_result result = new batchAddTalentTag_result();
        try {
          result.success = iface.batchAddTalentTag(args.hr_id, args.user_ids, args.tag_ids, args.company_id);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class hrAddComment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hrAddComment_args> {
      public hrAddComment() {
        super("hrAddComment");
      }

      public hrAddComment_args getEmptyArgsInstance() {
        return new hrAddComment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public hrAddComment_result getResult(I iface, hrAddComment_args args) throws org.apache.thrift.TException {
        hrAddComment_result result = new hrAddComment_result();
        try {
          result.success = iface.hrAddComment(args.hr_id, args.company_id, args.user_id, args.content);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class hrDelComment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hrDelComment_args> {
      public hrDelComment() {
        super("hrDelComment");
      }

      public hrDelComment_args getEmptyArgsInstance() {
        return new hrDelComment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public hrDelComment_result getResult(I iface, hrDelComment_args args) throws org.apache.thrift.TException {
        hrDelComment_result result = new hrDelComment_result();
        try {
          result.success = iface.hrDelComment(args.hr_id, args.company_id, args.comment_id);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class batchAddPublicTalent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchAddPublicTalent_args> {
      public batchAddPublicTalent() {
        super("batchAddPublicTalent");
      }

      public batchAddPublicTalent_args getEmptyArgsInstance() {
        return new batchAddPublicTalent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public batchAddPublicTalent_result getResult(I iface, batchAddPublicTalent_args args) throws org.apache.thrift.TException {
        batchAddPublicTalent_result result = new batchAddPublicTalent_result();
        try {
          result.success = iface.batchAddPublicTalent(args.hr_id, args.company_id, args.user_ids);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class batchCancelPublicTalent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchCancelPublicTalent_args> {
      public batchCancelPublicTalent() {
        super("batchCancelPublicTalent");
      }

      public batchCancelPublicTalent_args getEmptyArgsInstance() {
        return new batchCancelPublicTalent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public batchCancelPublicTalent_result getResult(I iface, batchCancelPublicTalent_args args) throws org.apache.thrift.TException {
        batchCancelPublicTalent_result result = new batchCancelPublicTalent_result();
        try {
          result.success = iface.batchCancelPublicTalent(args.hr_id, args.company_id, args.user_ids);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getCompanyPulicTalent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCompanyPulicTalent_args> {
      public getCompanyPulicTalent() {
        super("getCompanyPulicTalent");
      }

      public getCompanyPulicTalent_args getEmptyArgsInstance() {
        return new getCompanyPulicTalent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCompanyPulicTalent_result getResult(I iface, getCompanyPulicTalent_args args) throws org.apache.thrift.TException {
        getCompanyPulicTalent_result result = new getCompanyPulicTalent_result();
        try {
          result.success = iface.getCompanyPulicTalent(args.hr_id, args.company_id, args.page_number, args.page_size);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class batchNewAddTalentTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchNewAddTalentTag_args> {
      public batchNewAddTalentTag() {
        super("batchNewAddTalentTag");
      }

      public batchNewAddTalentTag_args getEmptyArgsInstance() {
        return new batchNewAddTalentTag_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public batchNewAddTalentTag_result getResult(I iface, batchNewAddTalentTag_args args) throws org.apache.thrift.TException {
        batchNewAddTalentTag_result result = new batchNewAddTalentTag_result();
        try {
          result.success = iface.batchNewAddTalentTag(args.hr_id, args.user_ids, args.tag_ids, args.company_id);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getTalentStat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTalentStat_args> {
      public getTalentStat() {
        super("getTalentStat");
      }

      public getTalentStat_args getEmptyArgsInstance() {
        return new getTalentStat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTalentStat_result getResult(I iface, getTalentStat_args args) throws org.apache.thrift.TException {
        getTalentStat_result result = new getTalentStat_result();
        try {
          result.success = iface.getTalentStat(args.hr_id, args.company_id, args.type);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getCompanyUserPublic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCompanyUserPublic_args> {
      public getCompanyUserPublic() {
        super("getCompanyUserPublic");
      }

      public getCompanyUserPublic_args getEmptyArgsInstance() {
        return new getCompanyUserPublic_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCompanyUserPublic_result getResult(I iface, getCompanyUserPublic_args args) throws org.apache.thrift.TException {
        getCompanyUserPublic_result result = new getCompanyUserPublic_result();
        try {
          result.success = iface.getCompanyUserPublic(args.hr_id, args.company_id, args.user_id);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getCompanyTalent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCompanyTalent_args> {
      public getCompanyTalent() {
        super("getCompanyTalent");
      }

      public getCompanyTalent_args getEmptyArgsInstance() {
        return new getCompanyTalent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCompanyTalent_result getResult(I iface, getCompanyTalent_args args) throws org.apache.thrift.TException {
        getCompanyTalent_result result = new getCompanyTalent_result();
        try {
          result.success = iface.getCompanyTalent(args.hr_id, args.company_id, args.user_id);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getHrUserTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHrUserTag_args> {
      public getHrUserTag() {
        super("getHrUserTag");
      }

      public getHrUserTag_args getEmptyArgsInstance() {
        return new getHrUserTag_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHrUserTag_result getResult(I iface, getHrUserTag_args args) throws org.apache.thrift.TException {
        getHrUserTag_result result = new getHrUserTag_result();
        try {
          result.success = iface.getHrUserTag(args.hr_id, args.company_id, args.user_id);
        } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getTalentAllComment", new getTalentAllComment());
      processMap.put("getHrTag", new getHrTag());
      processMap.put("batchAddTalent", new batchAddTalent());
      processMap.put("batchCancelTalent", new batchCancelTalent());
      processMap.put("hrAddTag", new hrAddTag());
      processMap.put("hrDelTag", new hrDelTag());
      processMap.put("hrUpdateTag", new hrUpdateTag());
      processMap.put("batchCancleTalentTag", new batchCancleTalentTag());
      processMap.put("batchAddTalentTag", new batchAddTalentTag());
      processMap.put("hrAddComment", new hrAddComment());
      processMap.put("hrDelComment", new hrDelComment());
      processMap.put("batchAddPublicTalent", new batchAddPublicTalent());
      processMap.put("batchCancelPublicTalent", new batchCancelPublicTalent());
      processMap.put("getCompanyPulicTalent", new getCompanyPulicTalent());
      processMap.put("batchNewAddTalentTag", new batchNewAddTalentTag());
      processMap.put("getTalentStat", new getTalentStat());
      processMap.put("getCompanyUserPublic", new getCompanyUserPublic());
      processMap.put("getCompanyTalent", new getCompanyTalent());
      processMap.put("getHrUserTag", new getHrUserTag());
      return processMap;
    }

    public static class getTalentAllComment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTalentAllComment_args, com.moseeker.thrift.gen.common.struct.Response> {
      public getTalentAllComment() {
        super("getTalentAllComment");
      }

      public getTalentAllComment_args getEmptyArgsInstance() {
        return new getTalentAllComment_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            getTalentAllComment_result result = new getTalentAllComment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getTalentAllComment_result result = new getTalentAllComment_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTalentAllComment_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.getTalentAllComment(args.hr_id, args.company_id, args.user_id, args.page_number, args.page_size,resultHandler);
      }
    }

    public static class getHrTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHrTag_args, com.moseeker.thrift.gen.common.struct.Response> {
      public getHrTag() {
        super("getHrTag");
      }

      public getHrTag_args getEmptyArgsInstance() {
        return new getHrTag_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            getHrTag_result result = new getHrTag_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getHrTag_result result = new getHrTag_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHrTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.getHrTag(args.hr_id, args.company_id, args.page_number, args.page_size,resultHandler);
      }
    }

    public static class batchAddTalent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchAddTalent_args, com.moseeker.thrift.gen.common.struct.Response> {
      public batchAddTalent() {
        super("batchAddTalent");
      }

      public batchAddTalent_args getEmptyArgsInstance() {
        return new batchAddTalent_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            batchAddTalent_result result = new batchAddTalent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            batchAddTalent_result result = new batchAddTalent_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, batchAddTalent_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.batchAddTalent(args.hr_id, args.user_ids, args.company_id,resultHandler);
      }
    }

    public static class batchCancelTalent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchCancelTalent_args, com.moseeker.thrift.gen.common.struct.Response> {
      public batchCancelTalent() {
        super("batchCancelTalent");
      }

      public batchCancelTalent_args getEmptyArgsInstance() {
        return new batchCancelTalent_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            batchCancelTalent_result result = new batchCancelTalent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            batchCancelTalent_result result = new batchCancelTalent_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, batchCancelTalent_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.batchCancelTalent(args.hr_id, args.user_ids, args.company_id,resultHandler);
      }
    }

    public static class hrAddTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hrAddTag_args, com.moseeker.thrift.gen.common.struct.Response> {
      public hrAddTag() {
        super("hrAddTag");
      }

      public hrAddTag_args getEmptyArgsInstance() {
        return new hrAddTag_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            hrAddTag_result result = new hrAddTag_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            hrAddTag_result result = new hrAddTag_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, hrAddTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.hrAddTag(args.hr_id, args.company_id, args.name,resultHandler);
      }
    }

    public static class hrDelTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hrDelTag_args, com.moseeker.thrift.gen.common.struct.Response> {
      public hrDelTag() {
        super("hrDelTag");
      }

      public hrDelTag_args getEmptyArgsInstance() {
        return new hrDelTag_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            hrDelTag_result result = new hrDelTag_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            hrDelTag_result result = new hrDelTag_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, hrDelTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.hrDelTag(args.hr_id, args.company_id, args.tag_id,resultHandler);
      }
    }

    public static class hrUpdateTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hrUpdateTag_args, com.moseeker.thrift.gen.common.struct.Response> {
      public hrUpdateTag() {
        super("hrUpdateTag");
      }

      public hrUpdateTag_args getEmptyArgsInstance() {
        return new hrUpdateTag_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            hrUpdateTag_result result = new hrUpdateTag_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            hrUpdateTag_result result = new hrUpdateTag_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, hrUpdateTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.hrUpdateTag(args.hr_id, args.company_id, args.tag_id, args.name,resultHandler);
      }
    }

    public static class batchCancleTalentTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchCancleTalentTag_args, com.moseeker.thrift.gen.common.struct.Response> {
      public batchCancleTalentTag() {
        super("batchCancleTalentTag");
      }

      public batchCancleTalentTag_args getEmptyArgsInstance() {
        return new batchCancleTalentTag_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            batchCancleTalentTag_result result = new batchCancleTalentTag_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            batchCancleTalentTag_result result = new batchCancleTalentTag_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, batchCancleTalentTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.batchCancleTalentTag(args.hr_id, args.user_ids, args.tag_ids, args.company_id,resultHandler);
      }
    }

    public static class batchAddTalentTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchAddTalentTag_args, com.moseeker.thrift.gen.common.struct.Response> {
      public batchAddTalentTag() {
        super("batchAddTalentTag");
      }

      public batchAddTalentTag_args getEmptyArgsInstance() {
        return new batchAddTalentTag_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            batchAddTalentTag_result result = new batchAddTalentTag_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            batchAddTalentTag_result result = new batchAddTalentTag_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, batchAddTalentTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.batchAddTalentTag(args.hr_id, args.user_ids, args.tag_ids, args.company_id,resultHandler);
      }
    }

    public static class hrAddComment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hrAddComment_args, com.moseeker.thrift.gen.common.struct.Response> {
      public hrAddComment() {
        super("hrAddComment");
      }

      public hrAddComment_args getEmptyArgsInstance() {
        return new hrAddComment_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            hrAddComment_result result = new hrAddComment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            hrAddComment_result result = new hrAddComment_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, hrAddComment_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.hrAddComment(args.hr_id, args.company_id, args.user_id, args.content,resultHandler);
      }
    }

    public static class hrDelComment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hrDelComment_args, com.moseeker.thrift.gen.common.struct.Response> {
      public hrDelComment() {
        super("hrDelComment");
      }

      public hrDelComment_args getEmptyArgsInstance() {
        return new hrDelComment_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            hrDelComment_result result = new hrDelComment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            hrDelComment_result result = new hrDelComment_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, hrDelComment_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.hrDelComment(args.hr_id, args.company_id, args.comment_id,resultHandler);
      }
    }

    public static class batchAddPublicTalent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchAddPublicTalent_args, com.moseeker.thrift.gen.common.struct.Response> {
      public batchAddPublicTalent() {
        super("batchAddPublicTalent");
      }

      public batchAddPublicTalent_args getEmptyArgsInstance() {
        return new batchAddPublicTalent_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            batchAddPublicTalent_result result = new batchAddPublicTalent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            batchAddPublicTalent_result result = new batchAddPublicTalent_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, batchAddPublicTalent_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.batchAddPublicTalent(args.hr_id, args.company_id, args.user_ids,resultHandler);
      }
    }

    public static class batchCancelPublicTalent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchCancelPublicTalent_args, com.moseeker.thrift.gen.common.struct.Response> {
      public batchCancelPublicTalent() {
        super("batchCancelPublicTalent");
      }

      public batchCancelPublicTalent_args getEmptyArgsInstance() {
        return new batchCancelPublicTalent_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            batchCancelPublicTalent_result result = new batchCancelPublicTalent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            batchCancelPublicTalent_result result = new batchCancelPublicTalent_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, batchCancelPublicTalent_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.batchCancelPublicTalent(args.hr_id, args.company_id, args.user_ids,resultHandler);
      }
    }

    public static class getCompanyPulicTalent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCompanyPulicTalent_args, com.moseeker.thrift.gen.common.struct.Response> {
      public getCompanyPulicTalent() {
        super("getCompanyPulicTalent");
      }

      public getCompanyPulicTalent_args getEmptyArgsInstance() {
        return new getCompanyPulicTalent_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            getCompanyPulicTalent_result result = new getCompanyPulicTalent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getCompanyPulicTalent_result result = new getCompanyPulicTalent_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCompanyPulicTalent_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.getCompanyPulicTalent(args.hr_id, args.company_id, args.page_number, args.page_size,resultHandler);
      }
    }

    public static class batchNewAddTalentTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchNewAddTalentTag_args, com.moseeker.thrift.gen.common.struct.Response> {
      public batchNewAddTalentTag() {
        super("batchNewAddTalentTag");
      }

      public batchNewAddTalentTag_args getEmptyArgsInstance() {
        return new batchNewAddTalentTag_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            batchNewAddTalentTag_result result = new batchNewAddTalentTag_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            batchNewAddTalentTag_result result = new batchNewAddTalentTag_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, batchNewAddTalentTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.batchNewAddTalentTag(args.hr_id, args.user_ids, args.tag_ids, args.company_id,resultHandler);
      }
    }

    public static class getTalentStat<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTalentStat_args, com.moseeker.thrift.gen.common.struct.Response> {
      public getTalentStat() {
        super("getTalentStat");
      }

      public getTalentStat_args getEmptyArgsInstance() {
        return new getTalentStat_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            getTalentStat_result result = new getTalentStat_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getTalentStat_result result = new getTalentStat_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTalentStat_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.getTalentStat(args.hr_id, args.company_id, args.type,resultHandler);
      }
    }

    public static class getCompanyUserPublic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCompanyUserPublic_args, com.moseeker.thrift.gen.common.struct.Response> {
      public getCompanyUserPublic() {
        super("getCompanyUserPublic");
      }

      public getCompanyUserPublic_args getEmptyArgsInstance() {
        return new getCompanyUserPublic_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            getCompanyUserPublic_result result = new getCompanyUserPublic_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getCompanyUserPublic_result result = new getCompanyUserPublic_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCompanyUserPublic_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.getCompanyUserPublic(args.hr_id, args.company_id, args.user_id,resultHandler);
      }
    }

    public static class getCompanyTalent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCompanyTalent_args, com.moseeker.thrift.gen.common.struct.Response> {
      public getCompanyTalent() {
        super("getCompanyTalent");
      }

      public getCompanyTalent_args getEmptyArgsInstance() {
        return new getCompanyTalent_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            getCompanyTalent_result result = new getCompanyTalent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getCompanyTalent_result result = new getCompanyTalent_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCompanyTalent_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.getCompanyTalent(args.hr_id, args.company_id, args.user_id,resultHandler);
      }
    }

    public static class getHrUserTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHrUserTag_args, com.moseeker.thrift.gen.common.struct.Response> {
      public getHrUserTag() {
        super("getHrUserTag");
      }

      public getHrUserTag_args getEmptyArgsInstance() {
        return new getHrUserTag_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
          public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
            getHrUserTag_result result = new getHrUserTag_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getHrUserTag_result result = new getHrUserTag_result();
            if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
              result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHrUserTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
        iface.getHrUserTag(args.hr_id, args.company_id, args.user_id,resultHandler);
      }
    }

  }

  public static class getTalentAllComment_args implements org.apache.thrift.TBase<getTalentAllComment_args, getTalentAllComment_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTalentAllComment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTalentAllComment_args");

    private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("page_number", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("page_size", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTalentAllComment_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTalentAllComment_argsTupleSchemeFactory();

    public int hr_id; // required
    public int company_id; // required
    public int user_id; // required
    public int page_number; // required
    public int page_size; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HR_ID((short)1, "hr_id"),
      COMPANY_ID((short)2, "company_id"),
      USER_ID((short)3, "user_id"),
      PAGE_NUMBER((short)4, "page_number"),
      PAGE_SIZE((short)5, "page_size");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HR_ID
            return HR_ID;
          case 2: // COMPANY_ID
            return COMPANY_ID;
          case 3: // USER_ID
            return USER_ID;
          case 4: // PAGE_NUMBER
            return PAGE_NUMBER;
          case 5: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HR_ID_ISSET_ID = 0;
    private static final int __COMPANY_ID_ISSET_ID = 1;
    private static final int __USER_ID_ISSET_ID = 2;
    private static final int __PAGE_NUMBER_ISSET_ID = 3;
    private static final int __PAGE_SIZE_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("page_number", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("page_size", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTalentAllComment_args.class, metaDataMap);
    }

    public getTalentAllComment_args() {
    }

    public getTalentAllComment_args(
            int hr_id,
            int company_id,
            int user_id,
            int page_number,
            int page_size)
    {
      this();
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      this.company_id = company_id;
      setCompany_idIsSet(true);
      this.user_id = user_id;
      setUser_idIsSet(true);
      this.page_number = page_number;
      setPage_numberIsSet(true);
      this.page_size = page_size;
      setPage_sizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTalentAllComment_args(getTalentAllComment_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.hr_id = other.hr_id;
      this.company_id = other.company_id;
      this.user_id = other.user_id;
      this.page_number = other.page_number;
      this.page_size = other.page_size;
    }

    public getTalentAllComment_args deepCopy() {
      return new getTalentAllComment_args(this);
    }

    @Override
    public void clear() {
      setHr_idIsSet(false);
      this.hr_id = 0;
      setCompany_idIsSet(false);
      this.company_id = 0;
      setUser_idIsSet(false);
      this.user_id = 0;
      setPage_numberIsSet(false);
      this.page_number = 0;
      setPage_sizeIsSet(false);
      this.page_size = 0;
    }

    public int getHr_id() {
      return this.hr_id;
    }

    public getTalentAllComment_args setHr_id(int hr_id) {
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      return this;
    }

    public void unsetHr_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
    public boolean isSetHr_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    public void setHr_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
    }

    public int getCompany_id() {
      return this.company_id;
    }

    public getTalentAllComment_args setCompany_id(int company_id) {
      this.company_id = company_id;
      setCompany_idIsSet(true);
      return this;
    }

    public void unsetCompany_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCompany_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    public void setCompany_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
    }

    public int getUser_id() {
      return this.user_id;
    }

    public getTalentAllComment_args setUser_id(int user_id) {
      this.user_id = user_id;
      setUser_idIsSet(true);
      return this;
    }

    public void unsetUser_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USER_ID_ISSET_ID);
    }

    /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USER_ID_ISSET_ID);
    }

    public void setUser_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USER_ID_ISSET_ID, value);
    }

    public int getPage_number() {
      return this.page_number;
    }

    public getTalentAllComment_args setPage_number(int page_number) {
      this.page_number = page_number;
      setPage_numberIsSet(true);
      return this;
    }

    public void unsetPage_number() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID);
    }

    /** Returns true if field page_number is set (has been assigned a value) and false otherwise */
    public boolean isSetPage_number() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID);
    }

    public void setPage_numberIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID, value);
    }

    public int getPage_size() {
      return this.page_size;
    }

    public getTalentAllComment_args setPage_size(int page_size) {
      this.page_size = page_size;
      setPage_sizeIsSet(true);
      return this;
    }

    public void unsetPage_size() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
    }

    /** Returns true if field page_size is set (has been assigned a value) and false otherwise */
    public boolean isSetPage_size() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
    }

    public void setPage_sizeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case HR_ID:
          if (value == null) {
            unsetHr_id();
          } else {
            setHr_id((java.lang.Integer)value);
          }
          break;

        case COMPANY_ID:
          if (value == null) {
            unsetCompany_id();
          } else {
            setCompany_id((java.lang.Integer)value);
          }
          break;

        case USER_ID:
          if (value == null) {
            unsetUser_id();
          } else {
            setUser_id((java.lang.Integer)value);
          }
          break;

        case PAGE_NUMBER:
          if (value == null) {
            unsetPage_number();
          } else {
            setPage_number((java.lang.Integer)value);
          }
          break;

        case PAGE_SIZE:
          if (value == null) {
            unsetPage_size();
          } else {
            setPage_size((java.lang.Integer)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case HR_ID:
          return getHr_id();

        case COMPANY_ID:
          return getCompany_id();

        case USER_ID:
          return getUser_id();

        case PAGE_NUMBER:
          return getPage_number();

        case PAGE_SIZE:
          return getPage_size();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case HR_ID:
          return isSetHr_id();
        case COMPANY_ID:
          return isSetCompany_id();
        case USER_ID:
          return isSetUser_id();
        case PAGE_NUMBER:
          return isSetPage_number();
        case PAGE_SIZE:
          return isSetPage_size();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getTalentAllComment_args)
        return this.equals((getTalentAllComment_args)that);
      return false;
    }

    public boolean equals(getTalentAllComment_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hr_id = true;
      boolean that_present_hr_id = true;
      if (this_present_hr_id || that_present_hr_id) {
        if (!(this_present_hr_id && that_present_hr_id))
          return false;
        if (this.hr_id != that.hr_id)
          return false;
      }

      boolean this_present_company_id = true;
      boolean that_present_company_id = true;
      if (this_present_company_id || that_present_company_id) {
        if (!(this_present_company_id && that_present_company_id))
          return false;
        if (this.company_id != that.company_id)
          return false;
      }

      boolean this_present_user_id = true;
      boolean that_present_user_id = true;
      if (this_present_user_id || that_present_user_id) {
        if (!(this_present_user_id && that_present_user_id))
          return false;
        if (this.user_id != that.user_id)
          return false;
      }

      boolean this_present_page_number = true;
      boolean that_present_page_number = true;
      if (this_present_page_number || that_present_page_number) {
        if (!(this_present_page_number && that_present_page_number))
          return false;
        if (this.page_number != that.page_number)
          return false;
      }

      boolean this_present_page_size = true;
      boolean that_present_page_size = true;
      if (this_present_page_size || that_present_page_size) {
        if (!(this_present_page_size && that_present_page_size))
          return false;
        if (this.page_size != that.page_size)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + hr_id;

      hashCode = hashCode * 8191 + company_id;

      hashCode = hashCode * 8191 + user_id;

      hashCode = hashCode * 8191 + page_number;

      hashCode = hashCode * 8191 + page_size;

      return hashCode;
    }

    @Override
    public int compareTo(getTalentAllComment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHr_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompany_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUser_id()).compareTo(other.isSetUser_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, other.user_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPage_number()).compareTo(other.isSetPage_number());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage_number()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_number, other.page_number);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPage_size()).compareTo(other.isSetPage_size());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage_size()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_size, other.page_size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getTalentAllComment_args(");
      boolean first = true;

      sb.append("hr_id:");
      sb.append(this.hr_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("company_id:");
      sb.append(this.company_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_id:");
      sb.append(this.user_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page_number:");
      sb.append(this.page_number);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page_size:");
      sb.append(this.page_size);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTalentAllComment_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTalentAllComment_argsStandardScheme getScheme() {
        return new getTalentAllComment_argsStandardScheme();
      }
    }

    private static class getTalentAllComment_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTalentAllComment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTalentAllComment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // HR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hr_id = iprot.readI32();
                struct.setHr_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMPANY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.company_id = iprot.readI32();
                struct.setCompany_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.user_id = iprot.readI32();
                struct.setUser_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page_number = iprot.readI32();
                struct.setPage_numberIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page_size = iprot.readI32();
                struct.setPage_sizeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTalentAllComment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HR_ID_FIELD_DESC);
        oprot.writeI32(struct.hr_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.company_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.user_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.page_number);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.page_size);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTalentAllComment_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTalentAllComment_argsTupleScheme getScheme() {
        return new getTalentAllComment_argsTupleScheme();
      }
    }

    private static class getTalentAllComment_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTalentAllComment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTalentAllComment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHr_id()) {
          optionals.set(0);
        }
        if (struct.isSetCompany_id()) {
          optionals.set(1);
        }
        if (struct.isSetUser_id()) {
          optionals.set(2);
        }
        if (struct.isSetPage_number()) {
          optionals.set(3);
        }
        if (struct.isSetPage_size()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetHr_id()) {
          oprot.writeI32(struct.hr_id);
        }
        if (struct.isSetCompany_id()) {
          oprot.writeI32(struct.company_id);
        }
        if (struct.isSetUser_id()) {
          oprot.writeI32(struct.user_id);
        }
        if (struct.isSetPage_number()) {
          oprot.writeI32(struct.page_number);
        }
        if (struct.isSetPage_size()) {
          oprot.writeI32(struct.page_size);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTalentAllComment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.hr_id = iprot.readI32();
          struct.setHr_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.company_id = iprot.readI32();
          struct.setCompany_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.user_id = iprot.readI32();
          struct.setUser_idIsSet(true);
        }
        if (incoming.get(3)) {
          struct.page_number = iprot.readI32();
          struct.setPage_numberIsSet(true);
        }
        if (incoming.get(4)) {
          struct.page_size = iprot.readI32();
          struct.setPage_sizeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getTalentAllComment_result implements org.apache.thrift.TBase<getTalentAllComment_result, getTalentAllComment_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTalentAllComment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTalentAllComment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTalentAllComment_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTalentAllComment_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.Response success; // required
    public com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTalentAllComment_result.class, metaDataMap);
    }

    public getTalentAllComment_result() {
    }

    public getTalentAllComment_result(
            com.moseeker.thrift.gen.common.struct.Response success,
            com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTalentAllComment_result(getTalentAllComment_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public getTalentAllComment_result deepCopy() {
      return new getTalentAllComment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public getTalentAllComment_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public getTalentAllComment_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
          }
          break;

        case E:
          if (value == null) {
            unsetE();
          } else {
            setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

        case E:
          return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
        case E:
          return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getTalentAllComment_result)
        return this.equals((getTalentAllComment_result)that);
      return false;
    }

    public boolean equals(getTalentAllComment_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getTalentAllComment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getTalentAllComment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTalentAllComment_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTalentAllComment_resultStandardScheme getScheme() {
        return new getTalentAllComment_resultStandardScheme();
      }
    }

    private static class getTalentAllComment_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTalentAllComment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTalentAllComment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTalentAllComment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTalentAllComment_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTalentAllComment_resultTupleScheme getScheme() {
        return new getTalentAllComment_resultTupleScheme();
      }
    }

    private static class getTalentAllComment_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTalentAllComment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTalentAllComment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTalentAllComment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getHrTag_args implements org.apache.thrift.TBase<getHrTag_args, getHrTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHrTag_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHrTag_args");

    private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("page_number", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("page_size", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getHrTag_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getHrTag_argsTupleSchemeFactory();

    public int hr_id; // required
    public int company_id; // required
    public int page_number; // required
    public int page_size; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HR_ID((short)1, "hr_id"),
      COMPANY_ID((short)2, "company_id"),
      PAGE_NUMBER((short)3, "page_number"),
      PAGE_SIZE((short)4, "page_size");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HR_ID
            return HR_ID;
          case 2: // COMPANY_ID
            return COMPANY_ID;
          case 3: // PAGE_NUMBER
            return PAGE_NUMBER;
          case 4: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HR_ID_ISSET_ID = 0;
    private static final int __COMPANY_ID_ISSET_ID = 1;
    private static final int __PAGE_NUMBER_ISSET_ID = 2;
    private static final int __PAGE_SIZE_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("page_number", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("page_size", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHrTag_args.class, metaDataMap);
    }

    public getHrTag_args() {
    }

    public getHrTag_args(
            int hr_id,
            int company_id,
            int page_number,
            int page_size)
    {
      this();
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      this.company_id = company_id;
      setCompany_idIsSet(true);
      this.page_number = page_number;
      setPage_numberIsSet(true);
      this.page_size = page_size;
      setPage_sizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHrTag_args(getHrTag_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.hr_id = other.hr_id;
      this.company_id = other.company_id;
      this.page_number = other.page_number;
      this.page_size = other.page_size;
    }

    public getHrTag_args deepCopy() {
      return new getHrTag_args(this);
    }

    @Override
    public void clear() {
      setHr_idIsSet(false);
      this.hr_id = 0;
      setCompany_idIsSet(false);
      this.company_id = 0;
      setPage_numberIsSet(false);
      this.page_number = 0;
      setPage_sizeIsSet(false);
      this.page_size = 0;
    }

    public int getHr_id() {
      return this.hr_id;
    }

    public getHrTag_args setHr_id(int hr_id) {
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      return this;
    }

    public void unsetHr_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
    public boolean isSetHr_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    public void setHr_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
    }

    public int getCompany_id() {
      return this.company_id;
    }

    public getHrTag_args setCompany_id(int company_id) {
      this.company_id = company_id;
      setCompany_idIsSet(true);
      return this;
    }

    public void unsetCompany_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCompany_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    public void setCompany_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
    }

    public int getPage_number() {
      return this.page_number;
    }

    public getHrTag_args setPage_number(int page_number) {
      this.page_number = page_number;
      setPage_numberIsSet(true);
      return this;
    }

    public void unsetPage_number() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID);
    }

    /** Returns true if field page_number is set (has been assigned a value) and false otherwise */
    public boolean isSetPage_number() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID);
    }

    public void setPage_numberIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID, value);
    }

    public int getPage_size() {
      return this.page_size;
    }

    public getHrTag_args setPage_size(int page_size) {
      this.page_size = page_size;
      setPage_sizeIsSet(true);
      return this;
    }

    public void unsetPage_size() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
    }

    /** Returns true if field page_size is set (has been assigned a value) and false otherwise */
    public boolean isSetPage_size() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
    }

    public void setPage_sizeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case HR_ID:
          if (value == null) {
            unsetHr_id();
          } else {
            setHr_id((java.lang.Integer)value);
          }
          break;

        case COMPANY_ID:
          if (value == null) {
            unsetCompany_id();
          } else {
            setCompany_id((java.lang.Integer)value);
          }
          break;

        case PAGE_NUMBER:
          if (value == null) {
            unsetPage_number();
          } else {
            setPage_number((java.lang.Integer)value);
          }
          break;

        case PAGE_SIZE:
          if (value == null) {
            unsetPage_size();
          } else {
            setPage_size((java.lang.Integer)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case HR_ID:
          return getHr_id();

        case COMPANY_ID:
          return getCompany_id();

        case PAGE_NUMBER:
          return getPage_number();

        case PAGE_SIZE:
          return getPage_size();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case HR_ID:
          return isSetHr_id();
        case COMPANY_ID:
          return isSetCompany_id();
        case PAGE_NUMBER:
          return isSetPage_number();
        case PAGE_SIZE:
          return isSetPage_size();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getHrTag_args)
        return this.equals((getHrTag_args)that);
      return false;
    }

    public boolean equals(getHrTag_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hr_id = true;
      boolean that_present_hr_id = true;
      if (this_present_hr_id || that_present_hr_id) {
        if (!(this_present_hr_id && that_present_hr_id))
          return false;
        if (this.hr_id != that.hr_id)
          return false;
      }

      boolean this_present_company_id = true;
      boolean that_present_company_id = true;
      if (this_present_company_id || that_present_company_id) {
        if (!(this_present_company_id && that_present_company_id))
          return false;
        if (this.company_id != that.company_id)
          return false;
      }

      boolean this_present_page_number = true;
      boolean that_present_page_number = true;
      if (this_present_page_number || that_present_page_number) {
        if (!(this_present_page_number && that_present_page_number))
          return false;
        if (this.page_number != that.page_number)
          return false;
      }

      boolean this_present_page_size = true;
      boolean that_present_page_size = true;
      if (this_present_page_size || that_present_page_size) {
        if (!(this_present_page_size && that_present_page_size))
          return false;
        if (this.page_size != that.page_size)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + hr_id;

      hashCode = hashCode * 8191 + company_id;

      hashCode = hashCode * 8191 + page_number;

      hashCode = hashCode * 8191 + page_size;

      return hashCode;
    }

    @Override
    public int compareTo(getHrTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHr_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompany_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPage_number()).compareTo(other.isSetPage_number());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage_number()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_number, other.page_number);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPage_size()).compareTo(other.isSetPage_size());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage_size()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_size, other.page_size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getHrTag_args(");
      boolean first = true;

      sb.append("hr_id:");
      sb.append(this.hr_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("company_id:");
      sb.append(this.company_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page_number:");
      sb.append(this.page_number);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page_size:");
      sb.append(this.page_size);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHrTag_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getHrTag_argsStandardScheme getScheme() {
        return new getHrTag_argsStandardScheme();
      }
    }

    private static class getHrTag_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getHrTag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHrTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // HR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hr_id = iprot.readI32();
                struct.setHr_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMPANY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.company_id = iprot.readI32();
                struct.setCompany_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page_number = iprot.readI32();
                struct.setPage_numberIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page_size = iprot.readI32();
                struct.setPage_sizeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHrTag_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HR_ID_FIELD_DESC);
        oprot.writeI32(struct.hr_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.company_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.page_number);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.page_size);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHrTag_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getHrTag_argsTupleScheme getScheme() {
        return new getHrTag_argsTupleScheme();
      }
    }

    private static class getHrTag_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getHrTag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHrTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHr_id()) {
          optionals.set(0);
        }
        if (struct.isSetCompany_id()) {
          optionals.set(1);
        }
        if (struct.isSetPage_number()) {
          optionals.set(2);
        }
        if (struct.isSetPage_size()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetHr_id()) {
          oprot.writeI32(struct.hr_id);
        }
        if (struct.isSetCompany_id()) {
          oprot.writeI32(struct.company_id);
        }
        if (struct.isSetPage_number()) {
          oprot.writeI32(struct.page_number);
        }
        if (struct.isSetPage_size()) {
          oprot.writeI32(struct.page_size);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHrTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.hr_id = iprot.readI32();
          struct.setHr_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.company_id = iprot.readI32();
          struct.setCompany_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.page_number = iprot.readI32();
          struct.setPage_numberIsSet(true);
        }
        if (incoming.get(3)) {
          struct.page_size = iprot.readI32();
          struct.setPage_sizeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getHrTag_result implements org.apache.thrift.TBase<getHrTag_result, getHrTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHrTag_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHrTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getHrTag_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getHrTag_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.Response success; // required
    public com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHrTag_result.class, metaDataMap);
    }

    public getHrTag_result() {
    }

    public getHrTag_result(
            com.moseeker.thrift.gen.common.struct.Response success,
            com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHrTag_result(getHrTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public getHrTag_result deepCopy() {
      return new getHrTag_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public getHrTag_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public getHrTag_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
          }
          break;

        case E:
          if (value == null) {
            unsetE();
          } else {
            setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

        case E:
          return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
        case E:
          return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getHrTag_result)
        return this.equals((getHrTag_result)that);
      return false;
    }

    public boolean equals(getHrTag_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getHrTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getHrTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHrTag_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getHrTag_resultStandardScheme getScheme() {
        return new getHrTag_resultStandardScheme();
      }
    }

    private static class getHrTag_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getHrTag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHrTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHrTag_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHrTag_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getHrTag_resultTupleScheme getScheme() {
        return new getHrTag_resultTupleScheme();
      }
    }

    private static class getHrTag_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getHrTag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHrTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHrTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class batchAddTalent_args implements org.apache.thrift.TBase<batchAddTalent_args, batchAddTalent_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchAddTalent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchAddTalent_args");

    private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ids", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchAddTalent_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchAddTalent_argsTupleSchemeFactory();

    public int hr_id; // required
    public java.util.List<java.lang.Integer> user_ids; // required
    public int company_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HR_ID((short)1, "hr_id"),
      USER_IDS((short)2, "user_ids"),
      COMPANY_ID((short)3, "company_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HR_ID
            return HR_ID;
          case 2: // USER_IDS
            return USER_IDS;
          case 3: // COMPANY_ID
            return COMPANY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HR_ID_ISSET_ID = 0;
    private static final int __COMPANY_ID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("user_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchAddTalent_args.class, metaDataMap);
    }

    public batchAddTalent_args() {
    }

    public batchAddTalent_args(
            int hr_id,
            java.util.List<java.lang.Integer> user_ids,
            int company_id)
    {
      this();
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      this.user_ids = user_ids;
      this.company_id = company_id;
      setCompany_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchAddTalent_args(batchAddTalent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.hr_id = other.hr_id;
      if (other.isSetUser_ids()) {
        java.util.List<java.lang.Integer> __this__user_ids = new java.util.ArrayList<java.lang.Integer>(other.user_ids);
        this.user_ids = __this__user_ids;
      }
      this.company_id = other.company_id;
    }

    public batchAddTalent_args deepCopy() {
      return new batchAddTalent_args(this);
    }

    @Override
    public void clear() {
      setHr_idIsSet(false);
      this.hr_id = 0;
      this.user_ids = null;
      setCompany_idIsSet(false);
      this.company_id = 0;
    }

    public int getHr_id() {
      return this.hr_id;
    }

    public batchAddTalent_args setHr_id(int hr_id) {
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      return this;
    }

    public void unsetHr_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
    public boolean isSetHr_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    public void setHr_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
    }

    public int getUser_idsSize() {
      return (this.user_ids == null) ? 0 : this.user_ids.size();
    }

    public java.util.Iterator<java.lang.Integer> getUser_idsIterator() {
      return (this.user_ids == null) ? null : this.user_ids.iterator();
    }

    public void addToUser_ids(int elem) {
      if (this.user_ids == null) {
        this.user_ids = new java.util.ArrayList<java.lang.Integer>();
      }
      this.user_ids.add(elem);
    }

    public java.util.List<java.lang.Integer> getUser_ids() {
      return this.user_ids;
    }

    public batchAddTalent_args setUser_ids(java.util.List<java.lang.Integer> user_ids) {
      this.user_ids = user_ids;
      return this;
    }

    public void unsetUser_ids() {
      this.user_ids = null;
    }

    /** Returns true if field user_ids is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_ids() {
      return this.user_ids != null;
    }

    public void setUser_idsIsSet(boolean value) {
      if (!value) {
        this.user_ids = null;
      }
    }

    public int getCompany_id() {
      return this.company_id;
    }

    public batchAddTalent_args setCompany_id(int company_id) {
      this.company_id = company_id;
      setCompany_idIsSet(true);
      return this;
    }

    public void unsetCompany_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCompany_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    public void setCompany_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case HR_ID:
          if (value == null) {
            unsetHr_id();
          } else {
            setHr_id((java.lang.Integer)value);
          }
          break;

        case USER_IDS:
          if (value == null) {
            unsetUser_ids();
          } else {
            setUser_ids((java.util.List<java.lang.Integer>)value);
          }
          break;

        case COMPANY_ID:
          if (value == null) {
            unsetCompany_id();
          } else {
            setCompany_id((java.lang.Integer)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case HR_ID:
          return getHr_id();

        case USER_IDS:
          return getUser_ids();

        case COMPANY_ID:
          return getCompany_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case HR_ID:
          return isSetHr_id();
        case USER_IDS:
          return isSetUser_ids();
        case COMPANY_ID:
          return isSetCompany_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof batchAddTalent_args)
        return this.equals((batchAddTalent_args)that);
      return false;
    }

    public boolean equals(batchAddTalent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hr_id = true;
      boolean that_present_hr_id = true;
      if (this_present_hr_id || that_present_hr_id) {
        if (!(this_present_hr_id && that_present_hr_id))
          return false;
        if (this.hr_id != that.hr_id)
          return false;
      }

      boolean this_present_user_ids = true && this.isSetUser_ids();
      boolean that_present_user_ids = true && that.isSetUser_ids();
      if (this_present_user_ids || that_present_user_ids) {
        if (!(this_present_user_ids && that_present_user_ids))
          return false;
        if (!this.user_ids.equals(that.user_ids))
          return false;
      }

      boolean this_present_company_id = true;
      boolean that_present_company_id = true;
      if (this_present_company_id || that_present_company_id) {
        if (!(this_present_company_id && that_present_company_id))
          return false;
        if (this.company_id != that.company_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + hr_id;

      hashCode = hashCode * 8191 + ((isSetUser_ids()) ? 131071 : 524287);
      if (isSetUser_ids())
        hashCode = hashCode * 8191 + user_ids.hashCode();

      hashCode = hashCode * 8191 + company_id;

      return hashCode;
    }

    @Override
    public int compareTo(batchAddTalent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHr_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUser_ids()).compareTo(other.isSetUser_ids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_ids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ids, other.user_ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompany_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("batchAddTalent_args(");
      boolean first = true;

      sb.append("hr_id:");
      sb.append(this.hr_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_ids:");
      if (this.user_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.user_ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("company_id:");
      sb.append(this.company_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchAddTalent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public batchAddTalent_argsStandardScheme getScheme() {
        return new batchAddTalent_argsStandardScheme();
      }
    }

    private static class batchAddTalent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchAddTalent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchAddTalent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // HR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hr_id = iprot.readI32();
                struct.setHr_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list40.size);
                  int _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = iprot.readI32();
                    struct.user_ids.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setUser_idsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COMPANY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.company_id = iprot.readI32();
                struct.setCompany_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchAddTalent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HR_ID_FIELD_DESC);
        oprot.writeI32(struct.hr_id);
        oprot.writeFieldEnd();
        if (struct.user_ids != null) {
          oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.user_ids.size()));
            for (int _iter43 : struct.user_ids)
            {
              oprot.writeI32(_iter43);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.company_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchAddTalent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public batchAddTalent_argsTupleScheme getScheme() {
        return new batchAddTalent_argsTupleScheme();
      }
    }

    private static class batchAddTalent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchAddTalent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchAddTalent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHr_id()) {
          optionals.set(0);
        }
        if (struct.isSetUser_ids()) {
          optionals.set(1);
        }
        if (struct.isSetCompany_id()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetHr_id()) {
          oprot.writeI32(struct.hr_id);
        }
        if (struct.isSetUser_ids()) {
          {
            oprot.writeI32(struct.user_ids.size());
            for (int _iter44 : struct.user_ids)
            {
              oprot.writeI32(_iter44);
            }
          }
        }
        if (struct.isSetCompany_id()) {
          oprot.writeI32(struct.company_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchAddTalent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.hr_id = iprot.readI32();
          struct.setHr_idIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list45.size);
            int _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = iprot.readI32();
              struct.user_ids.add(_elem46);
            }
          }
          struct.setUser_idsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.company_id = iprot.readI32();
          struct.setCompany_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class batchAddTalent_result implements org.apache.thrift.TBase<batchAddTalent_result, batchAddTalent_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchAddTalent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchAddTalent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchAddTalent_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchAddTalent_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.Response success; // required
    public com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchAddTalent_result.class, metaDataMap);
    }

    public batchAddTalent_result() {
    }

    public batchAddTalent_result(
            com.moseeker.thrift.gen.common.struct.Response success,
            com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchAddTalent_result(batchAddTalent_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public batchAddTalent_result deepCopy() {
      return new batchAddTalent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public batchAddTalent_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public batchAddTalent_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
          }
          break;

        case E:
          if (value == null) {
            unsetE();
          } else {
            setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

        case E:
          return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
        case E:
          return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof batchAddTalent_result)
        return this.equals((batchAddTalent_result)that);
      return false;
    }

    public boolean equals(batchAddTalent_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(batchAddTalent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("batchAddTalent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchAddTalent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public batchAddTalent_resultStandardScheme getScheme() {
        return new batchAddTalent_resultStandardScheme();
      }
    }

    private static class batchAddTalent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchAddTalent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchAddTalent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchAddTalent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchAddTalent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public batchAddTalent_resultTupleScheme getScheme() {
        return new batchAddTalent_resultTupleScheme();
      }
    }

    private static class batchAddTalent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchAddTalent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchAddTalent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchAddTalent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class batchCancelTalent_args implements org.apache.thrift.TBase<batchCancelTalent_args, batchCancelTalent_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchCancelTalent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchCancelTalent_args");

    private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ids", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchCancelTalent_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchCancelTalent_argsTupleSchemeFactory();

    public int hr_id; // required
    public java.util.List<java.lang.Integer> user_ids; // required
    public int company_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HR_ID((short)1, "hr_id"),
      USER_IDS((short)2, "user_ids"),
      COMPANY_ID((short)3, "company_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HR_ID
            return HR_ID;
          case 2: // USER_IDS
            return USER_IDS;
          case 3: // COMPANY_ID
            return COMPANY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HR_ID_ISSET_ID = 0;
    private static final int __COMPANY_ID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("user_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchCancelTalent_args.class, metaDataMap);
    }

    public batchCancelTalent_args() {
    }

    public batchCancelTalent_args(
            int hr_id,
            java.util.List<java.lang.Integer> user_ids,
            int company_id)
    {
      this();
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      this.user_ids = user_ids;
      this.company_id = company_id;
      setCompany_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchCancelTalent_args(batchCancelTalent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.hr_id = other.hr_id;
      if (other.isSetUser_ids()) {
        java.util.List<java.lang.Integer> __this__user_ids = new java.util.ArrayList<java.lang.Integer>(other.user_ids);
        this.user_ids = __this__user_ids;
      }
      this.company_id = other.company_id;
    }

    public batchCancelTalent_args deepCopy() {
      return new batchCancelTalent_args(this);
    }

    @Override
    public void clear() {
      setHr_idIsSet(false);
      this.hr_id = 0;
      this.user_ids = null;
      setCompany_idIsSet(false);
      this.company_id = 0;
    }

    public int getHr_id() {
      return this.hr_id;
    }

    public batchCancelTalent_args setHr_id(int hr_id) {
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      return this;
    }

    public void unsetHr_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
    public boolean isSetHr_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    public void setHr_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
    }

    public int getUser_idsSize() {
      return (this.user_ids == null) ? 0 : this.user_ids.size();
    }

    public java.util.Iterator<java.lang.Integer> getUser_idsIterator() {
      return (this.user_ids == null) ? null : this.user_ids.iterator();
    }

    public void addToUser_ids(int elem) {
      if (this.user_ids == null) {
        this.user_ids = new java.util.ArrayList<java.lang.Integer>();
      }
      this.user_ids.add(elem);
    }

    public java.util.List<java.lang.Integer> getUser_ids() {
      return this.user_ids;
    }

    public batchCancelTalent_args setUser_ids(java.util.List<java.lang.Integer> user_ids) {
      this.user_ids = user_ids;
      return this;
    }

    public void unsetUser_ids() {
      this.user_ids = null;
    }

    /** Returns true if field user_ids is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_ids() {
      return this.user_ids != null;
    }

    public void setUser_idsIsSet(boolean value) {
      if (!value) {
        this.user_ids = null;
      }
    }

    public int getCompany_id() {
      return this.company_id;
    }

    public batchCancelTalent_args setCompany_id(int company_id) {
      this.company_id = company_id;
      setCompany_idIsSet(true);
      return this;
    }

    public void unsetCompany_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCompany_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    public void setCompany_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case HR_ID:
          if (value == null) {
            unsetHr_id();
          } else {
            setHr_id((java.lang.Integer)value);
          }
          break;

        case USER_IDS:
          if (value == null) {
            unsetUser_ids();
          } else {
            setUser_ids((java.util.List<java.lang.Integer>)value);
          }
          break;

        case COMPANY_ID:
          if (value == null) {
            unsetCompany_id();
          } else {
            setCompany_id((java.lang.Integer)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case HR_ID:
          return getHr_id();

        case USER_IDS:
          return getUser_ids();

        case COMPANY_ID:
          return getCompany_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case HR_ID:
          return isSetHr_id();
        case USER_IDS:
          return isSetUser_ids();
        case COMPANY_ID:
          return isSetCompany_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof batchCancelTalent_args)
        return this.equals((batchCancelTalent_args)that);
      return false;
    }

    public boolean equals(batchCancelTalent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hr_id = true;
      boolean that_present_hr_id = true;
      if (this_present_hr_id || that_present_hr_id) {
        if (!(this_present_hr_id && that_present_hr_id))
          return false;
        if (this.hr_id != that.hr_id)
          return false;
      }

      boolean this_present_user_ids = true && this.isSetUser_ids();
      boolean that_present_user_ids = true && that.isSetUser_ids();
      if (this_present_user_ids || that_present_user_ids) {
        if (!(this_present_user_ids && that_present_user_ids))
          return false;
        if (!this.user_ids.equals(that.user_ids))
          return false;
      }

      boolean this_present_company_id = true;
      boolean that_present_company_id = true;
      if (this_present_company_id || that_present_company_id) {
        if (!(this_present_company_id && that_present_company_id))
          return false;
        if (this.company_id != that.company_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + hr_id;

      hashCode = hashCode * 8191 + ((isSetUser_ids()) ? 131071 : 524287);
      if (isSetUser_ids())
        hashCode = hashCode * 8191 + user_ids.hashCode();

      hashCode = hashCode * 8191 + company_id;

      return hashCode;
    }

    @Override
    public int compareTo(batchCancelTalent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHr_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUser_ids()).compareTo(other.isSetUser_ids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_ids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ids, other.user_ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompany_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("batchCancelTalent_args(");
      boolean first = true;

      sb.append("hr_id:");
      sb.append(this.hr_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_ids:");
      if (this.user_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.user_ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("company_id:");
      sb.append(this.company_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchCancelTalent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public batchCancelTalent_argsStandardScheme getScheme() {
        return new batchCancelTalent_argsStandardScheme();
      }
    }

    private static class batchCancelTalent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchCancelTalent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchCancelTalent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // HR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hr_id = iprot.readI32();
                struct.setHr_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list48.size);
                  int _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = iprot.readI32();
                    struct.user_ids.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setUser_idsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COMPANY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.company_id = iprot.readI32();
                struct.setCompany_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchCancelTalent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HR_ID_FIELD_DESC);
        oprot.writeI32(struct.hr_id);
        oprot.writeFieldEnd();
        if (struct.user_ids != null) {
          oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.user_ids.size()));
            for (int _iter51 : struct.user_ids)
            {
              oprot.writeI32(_iter51);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.company_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchCancelTalent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public batchCancelTalent_argsTupleScheme getScheme() {
        return new batchCancelTalent_argsTupleScheme();
      }
    }

    private static class batchCancelTalent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchCancelTalent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchCancelTalent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHr_id()) {
          optionals.set(0);
        }
        if (struct.isSetUser_ids()) {
          optionals.set(1);
        }
        if (struct.isSetCompany_id()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetHr_id()) {
          oprot.writeI32(struct.hr_id);
        }
        if (struct.isSetUser_ids()) {
          {
            oprot.writeI32(struct.user_ids.size());
            for (int _iter52 : struct.user_ids)
            {
              oprot.writeI32(_iter52);
            }
          }
        }
        if (struct.isSetCompany_id()) {
          oprot.writeI32(struct.company_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchCancelTalent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.hr_id = iprot.readI32();
          struct.setHr_idIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list53.size);
            int _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = iprot.readI32();
              struct.user_ids.add(_elem54);
            }
          }
          struct.setUser_idsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.company_id = iprot.readI32();
          struct.setCompany_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class batchCancelTalent_result implements org.apache.thrift.TBase<batchCancelTalent_result, batchCancelTalent_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchCancelTalent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchCancelTalent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchCancelTalent_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchCancelTalent_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.Response success; // required
    public com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchCancelTalent_result.class, metaDataMap);
    }

    public batchCancelTalent_result() {
    }

    public batchCancelTalent_result(
            com.moseeker.thrift.gen.common.struct.Response success,
            com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchCancelTalent_result(batchCancelTalent_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public batchCancelTalent_result deepCopy() {
      return new batchCancelTalent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public batchCancelTalent_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public batchCancelTalent_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
          }
          break;

        case E:
          if (value == null) {
            unsetE();
          } else {
            setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

        case E:
          return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
        case E:
          return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof batchCancelTalent_result)
        return this.equals((batchCancelTalent_result)that);
      return false;
    }

    public boolean equals(batchCancelTalent_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(batchCancelTalent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("batchCancelTalent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchCancelTalent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public batchCancelTalent_resultStandardScheme getScheme() {
        return new batchCancelTalent_resultStandardScheme();
      }
    }

    private static class batchCancelTalent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchCancelTalent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchCancelTalent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchCancelTalent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchCancelTalent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public batchCancelTalent_resultTupleScheme getScheme() {
        return new batchCancelTalent_resultTupleScheme();
      }
    }

    private static class batchCancelTalent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchCancelTalent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchCancelTalent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchCancelTalent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class hrAddTag_args implements org.apache.thrift.TBase<hrAddTag_args, hrAddTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<hrAddTag_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hrAddTag_args");

    private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hrAddTag_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hrAddTag_argsTupleSchemeFactory();

    public int hr_id; // required
    public int company_id; // required
    public java.lang.String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HR_ID((short)1, "hr_id"),
      COMPANY_ID((short)2, "company_id"),
      NAME((short)3, "name");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HR_ID
            return HR_ID;
          case 2: // COMPANY_ID
            return COMPANY_ID;
          case 3: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HR_ID_ISSET_ID = 0;
    private static final int __COMPANY_ID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hrAddTag_args.class, metaDataMap);
    }

    public hrAddTag_args() {
    }

    public hrAddTag_args(
            int hr_id,
            int company_id,
            java.lang.String name)
    {
      this();
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      this.company_id = company_id;
      setCompany_idIsSet(true);
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hrAddTag_args(hrAddTag_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.hr_id = other.hr_id;
      this.company_id = other.company_id;
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public hrAddTag_args deepCopy() {
      return new hrAddTag_args(this);
    }

    @Override
    public void clear() {
      setHr_idIsSet(false);
      this.hr_id = 0;
      setCompany_idIsSet(false);
      this.company_id = 0;
      this.name = null;
    }

    public int getHr_id() {
      return this.hr_id;
    }

    public hrAddTag_args setHr_id(int hr_id) {
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      return this;
    }

    public void unsetHr_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
    public boolean isSetHr_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    public void setHr_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
    }

    public int getCompany_id() {
      return this.company_id;
    }

    public hrAddTag_args setCompany_id(int company_id) {
      this.company_id = company_id;
      setCompany_idIsSet(true);
      return this;
    }

    public void unsetCompany_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCompany_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    public void setCompany_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
    }

    public java.lang.String getName() {
      return this.name;
    }

    public hrAddTag_args setName(java.lang.String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case HR_ID:
          if (value == null) {
            unsetHr_id();
          } else {
            setHr_id((java.lang.Integer)value);
          }
          break;

        case COMPANY_ID:
          if (value == null) {
            unsetCompany_id();
          } else {
            setCompany_id((java.lang.Integer)value);
          }
          break;

        case NAME:
          if (value == null) {
            unsetName();
          } else {
            setName((java.lang.String)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case HR_ID:
          return getHr_id();

        case COMPANY_ID:
          return getCompany_id();

        case NAME:
          return getName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case HR_ID:
          return isSetHr_id();
        case COMPANY_ID:
          return isSetCompany_id();
        case NAME:
          return isSetName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof hrAddTag_args)
        return this.equals((hrAddTag_args)that);
      return false;
    }

    public boolean equals(hrAddTag_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hr_id = true;
      boolean that_present_hr_id = true;
      if (this_present_hr_id || that_present_hr_id) {
        if (!(this_present_hr_id && that_present_hr_id))
          return false;
        if (this.hr_id != that.hr_id)
          return false;
      }

      boolean this_present_company_id = true;
      boolean that_present_company_id = true;
      if (this_present_company_id || that_present_company_id) {
        if (!(this_present_company_id && that_present_company_id))
          return false;
        if (this.company_id != that.company_id)
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + hr_id;

      hashCode = hashCode * 8191 + company_id;

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(hrAddTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHr_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompany_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("hrAddTag_args(");
      boolean first = true;

      sb.append("hr_id:");
      sb.append(this.hr_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("company_id:");
      sb.append(this.company_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hrAddTag_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public hrAddTag_argsStandardScheme getScheme() {
        return new hrAddTag_argsStandardScheme();
      }
    }

    private static class hrAddTag_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<hrAddTag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hrAddTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // HR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hr_id = iprot.readI32();
                struct.setHr_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMPANY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.company_id = iprot.readI32();
                struct.setCompany_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hrAddTag_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HR_ID_FIELD_DESC);
        oprot.writeI32(struct.hr_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.company_id);
        oprot.writeFieldEnd();
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hrAddTag_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public hrAddTag_argsTupleScheme getScheme() {
        return new hrAddTag_argsTupleScheme();
      }
    }

    private static class hrAddTag_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<hrAddTag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hrAddTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHr_id()) {
          optionals.set(0);
        }
        if (struct.isSetCompany_id()) {
          optionals.set(1);
        }
        if (struct.isSetName()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetHr_id()) {
          oprot.writeI32(struct.hr_id);
        }
        if (struct.isSetCompany_id()) {
          oprot.writeI32(struct.company_id);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hrAddTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.hr_id = iprot.readI32();
          struct.setHr_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.company_id = iprot.readI32();
          struct.setCompany_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class hrAddTag_result implements org.apache.thrift.TBase<hrAddTag_result, hrAddTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<hrAddTag_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hrAddTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hrAddTag_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hrAddTag_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.Response success; // required
    public com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hrAddTag_result.class, metaDataMap);
    }

    public hrAddTag_result() {
    }

    public hrAddTag_result(
            com.moseeker.thrift.gen.common.struct.Response success,
            com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hrAddTag_result(hrAddTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public hrAddTag_result deepCopy() {
      return new hrAddTag_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public hrAddTag_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public hrAddTag_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
          }
          break;

        case E:
          if (value == null) {
            unsetE();
          } else {
            setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

        case E:
          return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
        case E:
          return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof hrAddTag_result)
        return this.equals((hrAddTag_result)that);
      return false;
    }

    public boolean equals(hrAddTag_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(hrAddTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("hrAddTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hrAddTag_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public hrAddTag_resultStandardScheme getScheme() {
        return new hrAddTag_resultStandardScheme();
      }
    }

    private static class hrAddTag_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<hrAddTag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hrAddTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hrAddTag_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hrAddTag_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public hrAddTag_resultTupleScheme getScheme() {
        return new hrAddTag_resultTupleScheme();
      }
    }

    private static class hrAddTag_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<hrAddTag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hrAddTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hrAddTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class hrDelTag_args implements org.apache.thrift.TBase<hrDelTag_args, hrDelTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<hrDelTag_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hrDelTag_args");

    private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tag_id", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hrDelTag_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hrDelTag_argsTupleSchemeFactory();

    public int hr_id; // required
    public int company_id; // required
    public int tag_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HR_ID((short)1, "hr_id"),
      COMPANY_ID((short)2, "company_id"),
      TAG_ID((short)3, "tag_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HR_ID
            return HR_ID;
          case 2: // COMPANY_ID
            return COMPANY_ID;
          case 3: // TAG_ID
            return TAG_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HR_ID_ISSET_ID = 0;
    private static final int __COMPANY_ID_ISSET_ID = 1;
    private static final int __TAG_ID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("tag_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hrDelTag_args.class, metaDataMap);
    }

    public hrDelTag_args() {
    }

    public hrDelTag_args(
            int hr_id,
            int company_id,
            int tag_id)
    {
      this();
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      this.company_id = company_id;
      setCompany_idIsSet(true);
      this.tag_id = tag_id;
      setTag_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hrDelTag_args(hrDelTag_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.hr_id = other.hr_id;
      this.company_id = other.company_id;
      this.tag_id = other.tag_id;
    }

    public hrDelTag_args deepCopy() {
      return new hrDelTag_args(this);
    }

    @Override
    public void clear() {
      setHr_idIsSet(false);
      this.hr_id = 0;
      setCompany_idIsSet(false);
      this.company_id = 0;
      setTag_idIsSet(false);
      this.tag_id = 0;
    }

    public int getHr_id() {
      return this.hr_id;
    }

    public hrDelTag_args setHr_id(int hr_id) {
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      return this;
    }

    public void unsetHr_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
    public boolean isSetHr_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    public void setHr_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
    }

    public int getCompany_id() {
      return this.company_id;
    }

    public hrDelTag_args setCompany_id(int company_id) {
      this.company_id = company_id;
      setCompany_idIsSet(true);
      return this;
    }

    public void unsetCompany_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCompany_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    public void setCompany_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
    }

    public int getTag_id() {
      return this.tag_id;
    }

    public hrDelTag_args setTag_id(int tag_id) {
      this.tag_id = tag_id;
      setTag_idIsSet(true);
      return this;
    }

    public void unsetTag_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TAG_ID_ISSET_ID);
    }

    /** Returns true if field tag_id is set (has been assigned a value) and false otherwise */
    public boolean isSetTag_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TAG_ID_ISSET_ID);
    }

    public void setTag_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TAG_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case HR_ID:
          if (value == null) {
            unsetHr_id();
          } else {
            setHr_id((java.lang.Integer)value);
          }
          break;

        case COMPANY_ID:
          if (value == null) {
            unsetCompany_id();
          } else {
            setCompany_id((java.lang.Integer)value);
          }
          break;

        case TAG_ID:
          if (value == null) {
            unsetTag_id();
          } else {
            setTag_id((java.lang.Integer)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case HR_ID:
          return getHr_id();

        case COMPANY_ID:
          return getCompany_id();

        case TAG_ID:
          return getTag_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case HR_ID:
          return isSetHr_id();
        case COMPANY_ID:
          return isSetCompany_id();
        case TAG_ID:
          return isSetTag_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof hrDelTag_args)
        return this.equals((hrDelTag_args)that);
      return false;
    }

    public boolean equals(hrDelTag_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hr_id = true;
      boolean that_present_hr_id = true;
      if (this_present_hr_id || that_present_hr_id) {
        if (!(this_present_hr_id && that_present_hr_id))
          return false;
        if (this.hr_id != that.hr_id)
          return false;
      }

      boolean this_present_company_id = true;
      boolean that_present_company_id = true;
      if (this_present_company_id || that_present_company_id) {
        if (!(this_present_company_id && that_present_company_id))
          return false;
        if (this.company_id != that.company_id)
          return false;
      }

      boolean this_present_tag_id = true;
      boolean that_present_tag_id = true;
      if (this_present_tag_id || that_present_tag_id) {
        if (!(this_present_tag_id && that_present_tag_id))
          return false;
        if (this.tag_id != that.tag_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + hr_id;

      hashCode = hashCode * 8191 + company_id;

      hashCode = hashCode * 8191 + tag_id;

      return hashCode;
    }

    @Override
    public int compareTo(hrDelTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHr_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompany_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTag_id()).compareTo(other.isSetTag_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTag_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag_id, other.tag_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("hrDelTag_args(");
      boolean first = true;

      sb.append("hr_id:");
      sb.append(this.hr_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("company_id:");
      sb.append(this.company_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tag_id:");
      sb.append(this.tag_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hrDelTag_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public hrDelTag_argsStandardScheme getScheme() {
        return new hrDelTag_argsStandardScheme();
      }
    }

    private static class hrDelTag_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<hrDelTag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hrDelTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // HR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hr_id = iprot.readI32();
                struct.setHr_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMPANY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.company_id = iprot.readI32();
                struct.setCompany_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TAG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.tag_id = iprot.readI32();
                struct.setTag_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hrDelTag_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HR_ID_FIELD_DESC);
        oprot.writeI32(struct.hr_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.company_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TAG_ID_FIELD_DESC);
        oprot.writeI32(struct.tag_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hrDelTag_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public hrDelTag_argsTupleScheme getScheme() {
        return new hrDelTag_argsTupleScheme();
      }
    }

    private static class hrDelTag_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<hrDelTag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hrDelTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHr_id()) {
          optionals.set(0);
        }
        if (struct.isSetCompany_id()) {
          optionals.set(1);
        }
        if (struct.isSetTag_id()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetHr_id()) {
          oprot.writeI32(struct.hr_id);
        }
        if (struct.isSetCompany_id()) {
          oprot.writeI32(struct.company_id);
        }
        if (struct.isSetTag_id()) {
          oprot.writeI32(struct.tag_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hrDelTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.hr_id = iprot.readI32();
          struct.setHr_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.company_id = iprot.readI32();
          struct.setCompany_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tag_id = iprot.readI32();
          struct.setTag_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class hrDelTag_result implements org.apache.thrift.TBase<hrDelTag_result, hrDelTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<hrDelTag_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hrDelTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hrDelTag_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hrDelTag_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.Response success; // required
    public com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hrDelTag_result.class, metaDataMap);
    }

    public hrDelTag_result() {
    }

    public hrDelTag_result(
            com.moseeker.thrift.gen.common.struct.Response success,
            com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hrDelTag_result(hrDelTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public hrDelTag_result deepCopy() {
      return new hrDelTag_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public hrDelTag_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public hrDelTag_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
          }
          break;

        case E:
          if (value == null) {
            unsetE();
          } else {
            setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

        case E:
          return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
        case E:
          return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof hrDelTag_result)
        return this.equals((hrDelTag_result)that);
      return false;
    }

    public boolean equals(hrDelTag_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(hrDelTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("hrDelTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hrDelTag_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public hrDelTag_resultStandardScheme getScheme() {
        return new hrDelTag_resultStandardScheme();
      }
    }

    private static class hrDelTag_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<hrDelTag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hrDelTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hrDelTag_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hrDelTag_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public hrDelTag_resultTupleScheme getScheme() {
        return new hrDelTag_resultTupleScheme();
      }
    }

    private static class hrDelTag_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<hrDelTag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hrDelTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hrDelTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class hrUpdateTag_args implements org.apache.thrift.TBase<hrUpdateTag_args, hrUpdateTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<hrUpdateTag_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hrUpdateTag_args");

    private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tag_id", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hrUpdateTag_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hrUpdateTag_argsTupleSchemeFactory();

    public int hr_id; // required
    public int company_id; // required
    public int tag_id; // required
    public java.lang.String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HR_ID((short)1, "hr_id"),
      COMPANY_ID((short)2, "company_id"),
      TAG_ID((short)3, "tag_id"),
      NAME((short)4, "name");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HR_ID
            return HR_ID;
          case 2: // COMPANY_ID
            return COMPANY_ID;
          case 3: // TAG_ID
            return TAG_ID;
          case 4: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HR_ID_ISSET_ID = 0;
    private static final int __COMPANY_ID_ISSET_ID = 1;
    private static final int __TAG_ID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("tag_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hrUpdateTag_args.class, metaDataMap);
    }

    public hrUpdateTag_args() {
    }

    public hrUpdateTag_args(
            int hr_id,
            int company_id,
            int tag_id,
            java.lang.String name)
    {
      this();
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      this.company_id = company_id;
      setCompany_idIsSet(true);
      this.tag_id = tag_id;
      setTag_idIsSet(true);
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hrUpdateTag_args(hrUpdateTag_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.hr_id = other.hr_id;
      this.company_id = other.company_id;
      this.tag_id = other.tag_id;
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public hrUpdateTag_args deepCopy() {
      return new hrUpdateTag_args(this);
    }

    @Override
    public void clear() {
      setHr_idIsSet(false);
      this.hr_id = 0;
      setCompany_idIsSet(false);
      this.company_id = 0;
      setTag_idIsSet(false);
      this.tag_id = 0;
      this.name = null;
    }

    public int getHr_id() {
      return this.hr_id;
    }

    public hrUpdateTag_args setHr_id(int hr_id) {
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      return this;
    }

    public void unsetHr_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
    public boolean isSetHr_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    public void setHr_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
    }

    public int getCompany_id() {
      return this.company_id;
    }

    public hrUpdateTag_args setCompany_id(int company_id) {
      this.company_id = company_id;
      setCompany_idIsSet(true);
      return this;
    }

    public void unsetCompany_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCompany_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    public void setCompany_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
    }

    public int getTag_id() {
      return this.tag_id;
    }

    public hrUpdateTag_args setTag_id(int tag_id) {
      this.tag_id = tag_id;
      setTag_idIsSet(true);
      return this;
    }

    public void unsetTag_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TAG_ID_ISSET_ID);
    }

    /** Returns true if field tag_id is set (has been assigned a value) and false otherwise */
    public boolean isSetTag_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TAG_ID_ISSET_ID);
    }

    public void setTag_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TAG_ID_ISSET_ID, value);
    }

    public java.lang.String getName() {
      return this.name;
    }

    public hrUpdateTag_args setName(java.lang.String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case HR_ID:
          if (value == null) {
            unsetHr_id();
          } else {
            setHr_id((java.lang.Integer)value);
          }
          break;

        case COMPANY_ID:
          if (value == null) {
            unsetCompany_id();
          } else {
            setCompany_id((java.lang.Integer)value);
          }
          break;

        case TAG_ID:
          if (value == null) {
            unsetTag_id();
          } else {
            setTag_id((java.lang.Integer)value);
          }
          break;

        case NAME:
          if (value == null) {
            unsetName();
          } else {
            setName((java.lang.String)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case HR_ID:
          return getHr_id();

        case COMPANY_ID:
          return getCompany_id();

        case TAG_ID:
          return getTag_id();

        case NAME:
          return getName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case HR_ID:
          return isSetHr_id();
        case COMPANY_ID:
          return isSetCompany_id();
        case TAG_ID:
          return isSetTag_id();
        case NAME:
          return isSetName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof hrUpdateTag_args)
        return this.equals((hrUpdateTag_args)that);
      return false;
    }

    public boolean equals(hrUpdateTag_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hr_id = true;
      boolean that_present_hr_id = true;
      if (this_present_hr_id || that_present_hr_id) {
        if (!(this_present_hr_id && that_present_hr_id))
          return false;
        if (this.hr_id != that.hr_id)
          return false;
      }

      boolean this_present_company_id = true;
      boolean that_present_company_id = true;
      if (this_present_company_id || that_present_company_id) {
        if (!(this_present_company_id && that_present_company_id))
          return false;
        if (this.company_id != that.company_id)
          return false;
      }

      boolean this_present_tag_id = true;
      boolean that_present_tag_id = true;
      if (this_present_tag_id || that_present_tag_id) {
        if (!(this_present_tag_id && that_present_tag_id))
          return false;
        if (this.tag_id != that.tag_id)
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + hr_id;

      hashCode = hashCode * 8191 + company_id;

      hashCode = hashCode * 8191 + tag_id;

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(hrUpdateTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHr_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompany_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTag_id()).compareTo(other.isSetTag_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTag_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag_id, other.tag_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("hrUpdateTag_args(");
      boolean first = true;

      sb.append("hr_id:");
      sb.append(this.hr_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("company_id:");
      sb.append(this.company_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tag_id:");
      sb.append(this.tag_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hrUpdateTag_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public hrUpdateTag_argsStandardScheme getScheme() {
        return new hrUpdateTag_argsStandardScheme();
      }
    }

    private static class hrUpdateTag_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<hrUpdateTag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hrUpdateTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // HR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hr_id = iprot.readI32();
                struct.setHr_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMPANY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.company_id = iprot.readI32();
                struct.setCompany_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TAG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.tag_id = iprot.readI32();
                struct.setTag_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hrUpdateTag_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HR_ID_FIELD_DESC);
        oprot.writeI32(struct.hr_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.company_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TAG_ID_FIELD_DESC);
        oprot.writeI32(struct.tag_id);
        oprot.writeFieldEnd();
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hrUpdateTag_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public hrUpdateTag_argsTupleScheme getScheme() {
        return new hrUpdateTag_argsTupleScheme();
      }
    }

    private static class hrUpdateTag_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<hrUpdateTag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hrUpdateTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHr_id()) {
          optionals.set(0);
        }
        if (struct.isSetCompany_id()) {
          optionals.set(1);
        }
        if (struct.isSetTag_id()) {
          optionals.set(2);
        }
        if (struct.isSetName()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetHr_id()) {
          oprot.writeI32(struct.hr_id);
        }
        if (struct.isSetCompany_id()) {
          oprot.writeI32(struct.company_id);
        }
        if (struct.isSetTag_id()) {
          oprot.writeI32(struct.tag_id);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hrUpdateTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.hr_id = iprot.readI32();
          struct.setHr_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.company_id = iprot.readI32();
          struct.setCompany_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tag_id = iprot.readI32();
          struct.setTag_idIsSet(true);
        }
        if (incoming.get(3)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class hrUpdateTag_result implements org.apache.thrift.TBase<hrUpdateTag_result, hrUpdateTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<hrUpdateTag_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hrUpdateTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hrUpdateTag_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hrUpdateTag_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.Response success; // required
    public com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hrUpdateTag_result.class, metaDataMap);
    }

    public hrUpdateTag_result() {
    }

    public hrUpdateTag_result(
            com.moseeker.thrift.gen.common.struct.Response success,
            com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hrUpdateTag_result(hrUpdateTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public hrUpdateTag_result deepCopy() {
      return new hrUpdateTag_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public hrUpdateTag_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public hrUpdateTag_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
          }
          break;

        case E:
          if (value == null) {
            unsetE();
          } else {
            setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

        case E:
          return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
        case E:
          return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof hrUpdateTag_result)
        return this.equals((hrUpdateTag_result)that);
      return false;
    }

    public boolean equals(hrUpdateTag_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(hrUpdateTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("hrUpdateTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hrUpdateTag_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public hrUpdateTag_resultStandardScheme getScheme() {
        return new hrUpdateTag_resultStandardScheme();
      }
    }

    private static class hrUpdateTag_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<hrUpdateTag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hrUpdateTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hrUpdateTag_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hrUpdateTag_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public hrUpdateTag_resultTupleScheme getScheme() {
        return new hrUpdateTag_resultTupleScheme();
      }
    }

    private static class hrUpdateTag_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<hrUpdateTag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hrUpdateTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hrUpdateTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class batchCancleTalentTag_args implements org.apache.thrift.TBase<batchCancleTalentTag_args, batchCancleTalentTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchCancleTalentTag_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchCancleTalentTag_args");

    private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ids", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField TAG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("tag_ids", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchCancleTalentTag_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchCancleTalentTag_argsTupleSchemeFactory();

    public int hr_id; // required
    public java.util.List<java.lang.Integer> user_ids; // required
    public java.util.List<java.lang.Integer> tag_ids; // required
    public int company_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HR_ID((short)1, "hr_id"),
      USER_IDS((short)2, "user_ids"),
      TAG_IDS((short)3, "tag_ids"),
      COMPANY_ID((short)4, "company_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HR_ID
            return HR_ID;
          case 2: // USER_IDS
            return USER_IDS;
          case 3: // TAG_IDS
            return TAG_IDS;
          case 4: // COMPANY_ID
            return COMPANY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HR_ID_ISSET_ID = 0;
    private static final int __COMPANY_ID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("user_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.TAG_IDS, new org.apache.thrift.meta_data.FieldMetaData("tag_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchCancleTalentTag_args.class, metaDataMap);
    }

    public batchCancleTalentTag_args() {
    }

    public batchCancleTalentTag_args(
            int hr_id,
            java.util.List<java.lang.Integer> user_ids,
            java.util.List<java.lang.Integer> tag_ids,
            int company_id)
    {
      this();
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      this.user_ids = user_ids;
      this.tag_ids = tag_ids;
      this.company_id = company_id;
      setCompany_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchCancleTalentTag_args(batchCancleTalentTag_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.hr_id = other.hr_id;
      if (other.isSetUser_ids()) {
        java.util.List<java.lang.Integer> __this__user_ids = new java.util.ArrayList<java.lang.Integer>(other.user_ids);
        this.user_ids = __this__user_ids;
      }
      if (other.isSetTag_ids()) {
        java.util.List<java.lang.Integer> __this__tag_ids = new java.util.ArrayList<java.lang.Integer>(other.tag_ids);
        this.tag_ids = __this__tag_ids;
      }
      this.company_id = other.company_id;
    }

    public batchCancleTalentTag_args deepCopy() {
      return new batchCancleTalentTag_args(this);
    }

    @Override
    public void clear() {
      setHr_idIsSet(false);
      this.hr_id = 0;
      this.user_ids = null;
      this.tag_ids = null;
      setCompany_idIsSet(false);
      this.company_id = 0;
    }

    public int getHr_id() {
      return this.hr_id;
    }

    public batchCancleTalentTag_args setHr_id(int hr_id) {
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      return this;
    }

    public void unsetHr_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
    public boolean isSetHr_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    public void setHr_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
    }

    public int getUser_idsSize() {
      return (this.user_ids == null) ? 0 : this.user_ids.size();
    }

    public java.util.Iterator<java.lang.Integer> getUser_idsIterator() {
      return (this.user_ids == null) ? null : this.user_ids.iterator();
    }

    public void addToUser_ids(int elem) {
      if (this.user_ids == null) {
        this.user_ids = new java.util.ArrayList<java.lang.Integer>();
      }
      this.user_ids.add(elem);
    }

    public java.util.List<java.lang.Integer> getUser_ids() {
      return this.user_ids;
    }

    public batchCancleTalentTag_args setUser_ids(java.util.List<java.lang.Integer> user_ids) {
      this.user_ids = user_ids;
      return this;
    }

    public void unsetUser_ids() {
      this.user_ids = null;
    }

    /** Returns true if field user_ids is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_ids() {
      return this.user_ids != null;
    }

    public void setUser_idsIsSet(boolean value) {
      if (!value) {
        this.user_ids = null;
      }
    }

    public int getTag_idsSize() {
      return (this.tag_ids == null) ? 0 : this.tag_ids.size();
    }

    public java.util.Iterator<java.lang.Integer> getTag_idsIterator() {
      return (this.tag_ids == null) ? null : this.tag_ids.iterator();
    }

    public void addToTag_ids(int elem) {
      if (this.tag_ids == null) {
        this.tag_ids = new java.util.ArrayList<java.lang.Integer>();
      }
      this.tag_ids.add(elem);
    }

    public java.util.List<java.lang.Integer> getTag_ids() {
      return this.tag_ids;
    }

    public batchCancleTalentTag_args setTag_ids(java.util.List<java.lang.Integer> tag_ids) {
      this.tag_ids = tag_ids;
      return this;
    }

    public void unsetTag_ids() {
      this.tag_ids = null;
    }

    /** Returns true if field tag_ids is set (has been assigned a value) and false otherwise */
    public boolean isSetTag_ids() {
      return this.tag_ids != null;
    }

    public void setTag_idsIsSet(boolean value) {
      if (!value) {
        this.tag_ids = null;
      }
    }

    public int getCompany_id() {
      return this.company_id;
    }

    public batchCancleTalentTag_args setCompany_id(int company_id) {
      this.company_id = company_id;
      setCompany_idIsSet(true);
      return this;
    }

    public void unsetCompany_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCompany_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    public void setCompany_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case HR_ID:
          if (value == null) {
            unsetHr_id();
          } else {
            setHr_id((java.lang.Integer)value);
          }
          break;

        case USER_IDS:
          if (value == null) {
            unsetUser_ids();
          } else {
            setUser_ids((java.util.List<java.lang.Integer>)value);
          }
          break;

        case TAG_IDS:
          if (value == null) {
            unsetTag_ids();
          } else {
            setTag_ids((java.util.List<java.lang.Integer>)value);
          }
          break;

        case COMPANY_ID:
          if (value == null) {
            unsetCompany_id();
          } else {
            setCompany_id((java.lang.Integer)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case HR_ID:
          return getHr_id();

        case USER_IDS:
          return getUser_ids();

        case TAG_IDS:
          return getTag_ids();

        case COMPANY_ID:
          return getCompany_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case HR_ID:
          return isSetHr_id();
        case USER_IDS:
          return isSetUser_ids();
        case TAG_IDS:
          return isSetTag_ids();
        case COMPANY_ID:
          return isSetCompany_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof batchCancleTalentTag_args)
        return this.equals((batchCancleTalentTag_args)that);
      return false;
    }

    public boolean equals(batchCancleTalentTag_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hr_id = true;
      boolean that_present_hr_id = true;
      if (this_present_hr_id || that_present_hr_id) {
        if (!(this_present_hr_id && that_present_hr_id))
          return false;
        if (this.hr_id != that.hr_id)
          return false;
      }

      boolean this_present_user_ids = true && this.isSetUser_ids();
      boolean that_present_user_ids = true && that.isSetUser_ids();
      if (this_present_user_ids || that_present_user_ids) {
        if (!(this_present_user_ids && that_present_user_ids))
          return false;
        if (!this.user_ids.equals(that.user_ids))
          return false;
      }

      boolean this_present_tag_ids = true && this.isSetTag_ids();
      boolean that_present_tag_ids = true && that.isSetTag_ids();
      if (this_present_tag_ids || that_present_tag_ids) {
        if (!(this_present_tag_ids && that_present_tag_ids))
          return false;
        if (!this.tag_ids.equals(that.tag_ids))
          return false;
      }

      boolean this_present_company_id = true;
      boolean that_present_company_id = true;
      if (this_present_company_id || that_present_company_id) {
        if (!(this_present_company_id && that_present_company_id))
          return false;
        if (this.company_id != that.company_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + hr_id;

      hashCode = hashCode * 8191 + ((isSetUser_ids()) ? 131071 : 524287);
      if (isSetUser_ids())
        hashCode = hashCode * 8191 + user_ids.hashCode();

      hashCode = hashCode * 8191 + ((isSetTag_ids()) ? 131071 : 524287);
      if (isSetTag_ids())
        hashCode = hashCode * 8191 + tag_ids.hashCode();

      hashCode = hashCode * 8191 + company_id;

      return hashCode;
    }

    @Override
    public int compareTo(batchCancleTalentTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHr_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUser_ids()).compareTo(other.isSetUser_ids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_ids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ids, other.user_ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTag_ids()).compareTo(other.isSetTag_ids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTag_ids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag_ids, other.tag_ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompany_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("batchCancleTalentTag_args(");
      boolean first = true;

      sb.append("hr_id:");
      sb.append(this.hr_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_ids:");
      if (this.user_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.user_ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tag_ids:");
      if (this.tag_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.tag_ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("company_id:");
      sb.append(this.company_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchCancleTalentTag_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public batchCancleTalentTag_argsStandardScheme getScheme() {
        return new batchCancleTalentTag_argsStandardScheme();
      }
    }

    private static class batchCancleTalentTag_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchCancleTalentTag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchCancleTalentTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // HR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hr_id = iprot.readI32();
                struct.setHr_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list56.size);
                  int _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = iprot.readI32();
                    struct.user_ids.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setUser_idsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TAG_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list59 = iprot.readListBegin();
                  struct.tag_ids = new java.util.ArrayList<java.lang.Integer>(_list59.size);
                  int _elem60;
                  for (int _i61 = 0; _i61 < _list59.size; ++_i61)
                  {
                    _elem60 = iprot.readI32();
                    struct.tag_ids.add(_elem60);
                  }
                  iprot.readListEnd();
                }
                struct.setTag_idsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COMPANY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.company_id = iprot.readI32();
                struct.setCompany_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchCancleTalentTag_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HR_ID_FIELD_DESC);
        oprot.writeI32(struct.hr_id);
        oprot.writeFieldEnd();
        if (struct.user_ids != null) {
          oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.user_ids.size()));
            for (int _iter62 : struct.user_ids)
            {
              oprot.writeI32(_iter62);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.tag_ids != null) {
          oprot.writeFieldBegin(TAG_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.tag_ids.size()));
            for (int _iter63 : struct.tag_ids)
            {
              oprot.writeI32(_iter63);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.company_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchCancleTalentTag_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public batchCancleTalentTag_argsTupleScheme getScheme() {
        return new batchCancleTalentTag_argsTupleScheme();
      }
    }

    private static class batchCancleTalentTag_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchCancleTalentTag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchCancleTalentTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHr_id()) {
          optionals.set(0);
        }
        if (struct.isSetUser_ids()) {
          optionals.set(1);
        }
        if (struct.isSetTag_ids()) {
          optionals.set(2);
        }
        if (struct.isSetCompany_id()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetHr_id()) {
          oprot.writeI32(struct.hr_id);
        }
        if (struct.isSetUser_ids()) {
          {
            oprot.writeI32(struct.user_ids.size());
            for (int _iter64 : struct.user_ids)
            {
              oprot.writeI32(_iter64);
            }
          }
        }
        if (struct.isSetTag_ids()) {
          {
            oprot.writeI32(struct.tag_ids.size());
            for (int _iter65 : struct.tag_ids)
            {
              oprot.writeI32(_iter65);
            }
          }
        }
        if (struct.isSetCompany_id()) {
          oprot.writeI32(struct.company_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchCancleTalentTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.hr_id = iprot.readI32();
          struct.setHr_idIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list66 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list66.size);
            int _elem67;
            for (int _i68 = 0; _i68 < _list66.size; ++_i68)
            {
              _elem67 = iprot.readI32();
              struct.user_ids.add(_elem67);
            }
          }
          struct.setUser_idsIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.tag_ids = new java.util.ArrayList<java.lang.Integer>(_list69.size);
            int _elem70;
            for (int _i71 = 0; _i71 < _list69.size; ++_i71)
            {
              _elem70 = iprot.readI32();
              struct.tag_ids.add(_elem70);
            }
          }
          struct.setTag_idsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.company_id = iprot.readI32();
          struct.setCompany_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class batchCancleTalentTag_result implements org.apache.thrift.TBase<batchCancleTalentTag_result, batchCancleTalentTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchCancleTalentTag_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchCancleTalentTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchCancleTalentTag_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchCancleTalentTag_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.Response success; // required
    public com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchCancleTalentTag_result.class, metaDataMap);
    }

    public batchCancleTalentTag_result() {
    }

    public batchCancleTalentTag_result(
            com.moseeker.thrift.gen.common.struct.Response success,
            com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchCancleTalentTag_result(batchCancleTalentTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public batchCancleTalentTag_result deepCopy() {
      return new batchCancleTalentTag_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public batchCancleTalentTag_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public batchCancleTalentTag_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
          }
          break;

        case E:
          if (value == null) {
            unsetE();
          } else {
            setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

        case E:
          return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
        case E:
          return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof batchCancleTalentTag_result)
        return this.equals((batchCancleTalentTag_result)that);
      return false;
    }

    public boolean equals(batchCancleTalentTag_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(batchCancleTalentTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("batchCancleTalentTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchCancleTalentTag_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public batchCancleTalentTag_resultStandardScheme getScheme() {
        return new batchCancleTalentTag_resultStandardScheme();
      }
    }

    private static class batchCancleTalentTag_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchCancleTalentTag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchCancleTalentTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchCancleTalentTag_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchCancleTalentTag_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public batchCancleTalentTag_resultTupleScheme getScheme() {
        return new batchCancleTalentTag_resultTupleScheme();
      }
    }

    private static class batchCancleTalentTag_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchCancleTalentTag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchCancleTalentTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchCancleTalentTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class batchAddTalentTag_args implements org.apache.thrift.TBase<batchAddTalentTag_args, batchAddTalentTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchAddTalentTag_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchAddTalentTag_args");

    private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ids", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField TAG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("tag_ids", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchAddTalentTag_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchAddTalentTag_argsTupleSchemeFactory();

    public int hr_id; // required
    public java.util.List<java.lang.Integer> user_ids; // required
    public java.util.List<java.lang.Integer> tag_ids; // required
    public int company_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HR_ID((short)1, "hr_id"),
      USER_IDS((short)2, "user_ids"),
      TAG_IDS((short)3, "tag_ids"),
      COMPANY_ID((short)4, "company_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HR_ID
            return HR_ID;
          case 2: // USER_IDS
            return USER_IDS;
          case 3: // TAG_IDS
            return TAG_IDS;
          case 4: // COMPANY_ID
            return COMPANY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HR_ID_ISSET_ID = 0;
    private static final int __COMPANY_ID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("user_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.TAG_IDS, new org.apache.thrift.meta_data.FieldMetaData("tag_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchAddTalentTag_args.class, metaDataMap);
    }

    public batchAddTalentTag_args() {
    }

    public batchAddTalentTag_args(
            int hr_id,
            java.util.List<java.lang.Integer> user_ids,
            java.util.List<java.lang.Integer> tag_ids,
            int company_id)
    {
      this();
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      this.user_ids = user_ids;
      this.tag_ids = tag_ids;
      this.company_id = company_id;
      setCompany_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchAddTalentTag_args(batchAddTalentTag_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.hr_id = other.hr_id;
      if (other.isSetUser_ids()) {
        java.util.List<java.lang.Integer> __this__user_ids = new java.util.ArrayList<java.lang.Integer>(other.user_ids);
        this.user_ids = __this__user_ids;
      }
      if (other.isSetTag_ids()) {
        java.util.List<java.lang.Integer> __this__tag_ids = new java.util.ArrayList<java.lang.Integer>(other.tag_ids);
        this.tag_ids = __this__tag_ids;
      }
      this.company_id = other.company_id;
    }

    public batchAddTalentTag_args deepCopy() {
      return new batchAddTalentTag_args(this);
    }

    @Override
    public void clear() {
      setHr_idIsSet(false);
      this.hr_id = 0;
      this.user_ids = null;
      this.tag_ids = null;
      setCompany_idIsSet(false);
      this.company_id = 0;
    }

    public int getHr_id() {
      return this.hr_id;
    }

    public batchAddTalentTag_args setHr_id(int hr_id) {
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      return this;
    }

    public void unsetHr_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
    public boolean isSetHr_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    public void setHr_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
    }

    public int getUser_idsSize() {
      return (this.user_ids == null) ? 0 : this.user_ids.size();
    }

    public java.util.Iterator<java.lang.Integer> getUser_idsIterator() {
      return (this.user_ids == null) ? null : this.user_ids.iterator();
    }

    public void addToUser_ids(int elem) {
      if (this.user_ids == null) {
        this.user_ids = new java.util.ArrayList<java.lang.Integer>();
      }
      this.user_ids.add(elem);
    }

    public java.util.List<java.lang.Integer> getUser_ids() {
      return this.user_ids;
    }

    public batchAddTalentTag_args setUser_ids(java.util.List<java.lang.Integer> user_ids) {
      this.user_ids = user_ids;
      return this;
    }

    public void unsetUser_ids() {
      this.user_ids = null;
    }

    /** Returns true if field user_ids is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_ids() {
      return this.user_ids != null;
    }

    public void setUser_idsIsSet(boolean value) {
      if (!value) {
        this.user_ids = null;
      }
    }

    public int getTag_idsSize() {
      return (this.tag_ids == null) ? 0 : this.tag_ids.size();
    }

    public java.util.Iterator<java.lang.Integer> getTag_idsIterator() {
      return (this.tag_ids == null) ? null : this.tag_ids.iterator();
    }

    public void addToTag_ids(int elem) {
      if (this.tag_ids == null) {
        this.tag_ids = new java.util.ArrayList<java.lang.Integer>();
      }
      this.tag_ids.add(elem);
    }

    public java.util.List<java.lang.Integer> getTag_ids() {
      return this.tag_ids;
    }

    public batchAddTalentTag_args setTag_ids(java.util.List<java.lang.Integer> tag_ids) {
      this.tag_ids = tag_ids;
      return this;
    }

    public void unsetTag_ids() {
      this.tag_ids = null;
    }

    /** Returns true if field tag_ids is set (has been assigned a value) and false otherwise */
    public boolean isSetTag_ids() {
      return this.tag_ids != null;
    }

    public void setTag_idsIsSet(boolean value) {
      if (!value) {
        this.tag_ids = null;
      }
    }

    public int getCompany_id() {
      return this.company_id;
    }

    public batchAddTalentTag_args setCompany_id(int company_id) {
      this.company_id = company_id;
      setCompany_idIsSet(true);
      return this;
    }

    public void unsetCompany_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCompany_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    public void setCompany_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case HR_ID:
          if (value == null) {
            unsetHr_id();
          } else {
            setHr_id((java.lang.Integer)value);
          }
          break;

        case USER_IDS:
          if (value == null) {
            unsetUser_ids();
          } else {
            setUser_ids((java.util.List<java.lang.Integer>)value);
          }
          break;

        case TAG_IDS:
          if (value == null) {
            unsetTag_ids();
          } else {
            setTag_ids((java.util.List<java.lang.Integer>)value);
          }
          break;

        case COMPANY_ID:
          if (value == null) {
            unsetCompany_id();
          } else {
            setCompany_id((java.lang.Integer)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case HR_ID:
          return getHr_id();

        case USER_IDS:
          return getUser_ids();

        case TAG_IDS:
          return getTag_ids();

        case COMPANY_ID:
          return getCompany_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case HR_ID:
          return isSetHr_id();
        case USER_IDS:
          return isSetUser_ids();
        case TAG_IDS:
          return isSetTag_ids();
        case COMPANY_ID:
          return isSetCompany_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof batchAddTalentTag_args)
        return this.equals((batchAddTalentTag_args)that);
      return false;
    }

    public boolean equals(batchAddTalentTag_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hr_id = true;
      boolean that_present_hr_id = true;
      if (this_present_hr_id || that_present_hr_id) {
        if (!(this_present_hr_id && that_present_hr_id))
          return false;
        if (this.hr_id != that.hr_id)
          return false;
      }

      boolean this_present_user_ids = true && this.isSetUser_ids();
      boolean that_present_user_ids = true && that.isSetUser_ids();
      if (this_present_user_ids || that_present_user_ids) {
        if (!(this_present_user_ids && that_present_user_ids))
          return false;
        if (!this.user_ids.equals(that.user_ids))
          return false;
      }

      boolean this_present_tag_ids = true && this.isSetTag_ids();
      boolean that_present_tag_ids = true && that.isSetTag_ids();
      if (this_present_tag_ids || that_present_tag_ids) {
        if (!(this_present_tag_ids && that_present_tag_ids))
          return false;
        if (!this.tag_ids.equals(that.tag_ids))
          return false;
      }

      boolean this_present_company_id = true;
      boolean that_present_company_id = true;
      if (this_present_company_id || that_present_company_id) {
        if (!(this_present_company_id && that_present_company_id))
          return false;
        if (this.company_id != that.company_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + hr_id;

      hashCode = hashCode * 8191 + ((isSetUser_ids()) ? 131071 : 524287);
      if (isSetUser_ids())
        hashCode = hashCode * 8191 + user_ids.hashCode();

      hashCode = hashCode * 8191 + ((isSetTag_ids()) ? 131071 : 524287);
      if (isSetTag_ids())
        hashCode = hashCode * 8191 + tag_ids.hashCode();

      hashCode = hashCode * 8191 + company_id;

      return hashCode;
    }

    @Override
    public int compareTo(batchAddTalentTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHr_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUser_ids()).compareTo(other.isSetUser_ids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_ids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ids, other.user_ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTag_ids()).compareTo(other.isSetTag_ids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTag_ids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag_ids, other.tag_ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompany_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("batchAddTalentTag_args(");
      boolean first = true;

      sb.append("hr_id:");
      sb.append(this.hr_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_ids:");
      if (this.user_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.user_ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tag_ids:");
      if (this.tag_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.tag_ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("company_id:");
      sb.append(this.company_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchAddTalentTag_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public batchAddTalentTag_argsStandardScheme getScheme() {
        return new batchAddTalentTag_argsStandardScheme();
      }
    }

    private static class batchAddTalentTag_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchAddTalentTag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchAddTalentTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // HR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hr_id = iprot.readI32();
                struct.setHr_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list72.size);
                  int _elem73;
                  for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                  {
                    _elem73 = iprot.readI32();
                    struct.user_ids.add(_elem73);
                  }
                  iprot.readListEnd();
                }
                struct.setUser_idsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TAG_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list75 = iprot.readListBegin();
                  struct.tag_ids = new java.util.ArrayList<java.lang.Integer>(_list75.size);
                  int _elem76;
                  for (int _i77 = 0; _i77 < _list75.size; ++_i77)
                  {
                    _elem76 = iprot.readI32();
                    struct.tag_ids.add(_elem76);
                  }
                  iprot.readListEnd();
                }
                struct.setTag_idsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COMPANY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.company_id = iprot.readI32();
                struct.setCompany_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchAddTalentTag_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HR_ID_FIELD_DESC);
        oprot.writeI32(struct.hr_id);
        oprot.writeFieldEnd();
        if (struct.user_ids != null) {
          oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.user_ids.size()));
            for (int _iter78 : struct.user_ids)
            {
              oprot.writeI32(_iter78);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.tag_ids != null) {
          oprot.writeFieldBegin(TAG_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.tag_ids.size()));
            for (int _iter79 : struct.tag_ids)
            {
              oprot.writeI32(_iter79);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.company_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchAddTalentTag_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public batchAddTalentTag_argsTupleScheme getScheme() {
        return new batchAddTalentTag_argsTupleScheme();
      }
    }

    private static class batchAddTalentTag_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchAddTalentTag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchAddTalentTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHr_id()) {
          optionals.set(0);
        }
        if (struct.isSetUser_ids()) {
          optionals.set(1);
        }
        if (struct.isSetTag_ids()) {
          optionals.set(2);
        }
        if (struct.isSetCompany_id()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetHr_id()) {
          oprot.writeI32(struct.hr_id);
        }
        if (struct.isSetUser_ids()) {
          {
            oprot.writeI32(struct.user_ids.size());
            for (int _iter80 : struct.user_ids)
            {
              oprot.writeI32(_iter80);
            }
          }
        }
        if (struct.isSetTag_ids()) {
          {
            oprot.writeI32(struct.tag_ids.size());
            for (int _iter81 : struct.tag_ids)
            {
              oprot.writeI32(_iter81);
            }
          }
        }
        if (struct.isSetCompany_id()) {
          oprot.writeI32(struct.company_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchAddTalentTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.hr_id = iprot.readI32();
          struct.setHr_idIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list82 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list82.size);
            int _elem83;
            for (int _i84 = 0; _i84 < _list82.size; ++_i84)
            {
              _elem83 = iprot.readI32();
              struct.user_ids.add(_elem83);
            }
          }
          struct.setUser_idsIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.tag_ids = new java.util.ArrayList<java.lang.Integer>(_list85.size);
            int _elem86;
            for (int _i87 = 0; _i87 < _list85.size; ++_i87)
            {
              _elem86 = iprot.readI32();
              struct.tag_ids.add(_elem86);
            }
          }
          struct.setTag_idsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.company_id = iprot.readI32();
          struct.setCompany_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class batchAddTalentTag_result implements org.apache.thrift.TBase<batchAddTalentTag_result, batchAddTalentTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchAddTalentTag_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchAddTalentTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchAddTalentTag_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchAddTalentTag_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.Response success; // required
    public com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchAddTalentTag_result.class, metaDataMap);
    }

    public batchAddTalentTag_result() {
    }

    public batchAddTalentTag_result(
            com.moseeker.thrift.gen.common.struct.Response success,
            com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchAddTalentTag_result(batchAddTalentTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public batchAddTalentTag_result deepCopy() {
      return new batchAddTalentTag_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public batchAddTalentTag_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public batchAddTalentTag_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
          }
          break;

        case E:
          if (value == null) {
            unsetE();
          } else {
            setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

        case E:
          return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
        case E:
          return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof batchAddTalentTag_result)
        return this.equals((batchAddTalentTag_result)that);
      return false;
    }

    public boolean equals(batchAddTalentTag_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(batchAddTalentTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("batchAddTalentTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchAddTalentTag_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public batchAddTalentTag_resultStandardScheme getScheme() {
        return new batchAddTalentTag_resultStandardScheme();
      }
    }

    private static class batchAddTalentTag_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchAddTalentTag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchAddTalentTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchAddTalentTag_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchAddTalentTag_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public batchAddTalentTag_resultTupleScheme getScheme() {
        return new batchAddTalentTag_resultTupleScheme();
      }
    }

    private static class batchAddTalentTag_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchAddTalentTag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchAddTalentTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchAddTalentTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class hrAddComment_args implements org.apache.thrift.TBase<hrAddComment_args, hrAddComment_args._Fields>, java.io.Serializable, Cloneable, Comparable<hrAddComment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hrAddComment_args");

    private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hrAddComment_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hrAddComment_argsTupleSchemeFactory();

    public int hr_id; // required
    public int company_id; // required
    public int user_id; // required
    public java.lang.String content; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HR_ID((short)1, "hr_id"),
      COMPANY_ID((short)2, "company_id"),
      USER_ID((short)3, "user_id"),
      CONTENT((short)4, "content");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HR_ID
            return HR_ID;
          case 2: // COMPANY_ID
            return COMPANY_ID;
          case 3: // USER_ID
            return USER_ID;
          case 4: // CONTENT
            return CONTENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HR_ID_ISSET_ID = 0;
    private static final int __COMPANY_ID_ISSET_ID = 1;
    private static final int __USER_ID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hrAddComment_args.class, metaDataMap);
    }

    public hrAddComment_args() {
    }

    public hrAddComment_args(
            int hr_id,
            int company_id,
            int user_id,
            java.lang.String content)
    {
      this();
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      this.company_id = company_id;
      setCompany_idIsSet(true);
      this.user_id = user_id;
      setUser_idIsSet(true);
      this.content = content;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hrAddComment_args(hrAddComment_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.hr_id = other.hr_id;
      this.company_id = other.company_id;
      this.user_id = other.user_id;
      if (other.isSetContent()) {
        this.content = other.content;
      }
    }

    public hrAddComment_args deepCopy() {
      return new hrAddComment_args(this);
    }

    @Override
    public void clear() {
      setHr_idIsSet(false);
      this.hr_id = 0;
      setCompany_idIsSet(false);
      this.company_id = 0;
      setUser_idIsSet(false);
      this.user_id = 0;
      this.content = null;
    }

    public int getHr_id() {
      return this.hr_id;
    }

    public hrAddComment_args setHr_id(int hr_id) {
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      return this;
    }

    public void unsetHr_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
    public boolean isSetHr_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    public void setHr_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
    }

    public int getCompany_id() {
      return this.company_id;
    }

    public hrAddComment_args setCompany_id(int company_id) {
      this.company_id = company_id;
      setCompany_idIsSet(true);
      return this;
    }

    public void unsetCompany_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCompany_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    public void setCompany_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
    }

    public int getUser_id() {
      return this.user_id;
    }

    public hrAddComment_args setUser_id(int user_id) {
      this.user_id = user_id;
      setUser_idIsSet(true);
      return this;
    }

    public void unsetUser_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USER_ID_ISSET_ID);
    }

    /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USER_ID_ISSET_ID);
    }

    public void setUser_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USER_ID_ISSET_ID, value);
    }

    public java.lang.String getContent() {
      return this.content;
    }

    public hrAddComment_args setContent(java.lang.String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case HR_ID:
          if (value == null) {
            unsetHr_id();
          } else {
            setHr_id((java.lang.Integer)value);
          }
          break;

        case COMPANY_ID:
          if (value == null) {
            unsetCompany_id();
          } else {
            setCompany_id((java.lang.Integer)value);
          }
          break;

        case USER_ID:
          if (value == null) {
            unsetUser_id();
          } else {
            setUser_id((java.lang.Integer)value);
          }
          break;

        case CONTENT:
          if (value == null) {
            unsetContent();
          } else {
            setContent((java.lang.String)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case HR_ID:
          return getHr_id();

        case COMPANY_ID:
          return getCompany_id();

        case USER_ID:
          return getUser_id();

        case CONTENT:
          return getContent();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case HR_ID:
          return isSetHr_id();
        case COMPANY_ID:
          return isSetCompany_id();
        case USER_ID:
          return isSetUser_id();
        case CONTENT:
          return isSetContent();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof hrAddComment_args)
        return this.equals((hrAddComment_args)that);
      return false;
    }

    public boolean equals(hrAddComment_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hr_id = true;
      boolean that_present_hr_id = true;
      if (this_present_hr_id || that_present_hr_id) {
        if (!(this_present_hr_id && that_present_hr_id))
          return false;
        if (this.hr_id != that.hr_id)
          return false;
      }

      boolean this_present_company_id = true;
      boolean that_present_company_id = true;
      if (this_present_company_id || that_present_company_id) {
        if (!(this_present_company_id && that_present_company_id))
          return false;
        if (this.company_id != that.company_id)
          return false;
      }

      boolean this_present_user_id = true;
      boolean that_present_user_id = true;
      if (this_present_user_id || that_present_user_id) {
        if (!(this_present_user_id && that_present_user_id))
          return false;
        if (this.user_id != that.user_id)
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + hr_id;

      hashCode = hashCode * 8191 + company_id;

      hashCode = hashCode * 8191 + user_id;

      hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
      if (isSetContent())
        hashCode = hashCode * 8191 + content.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(hrAddComment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHr_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompany_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUser_id()).compareTo(other.isSetUser_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, other.user_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("hrAddComment_args(");
      boolean first = true;

      sb.append("hr_id:");
      sb.append(this.hr_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("company_id:");
      sb.append(this.company_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_id:");
      sb.append(this.user_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hrAddComment_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public hrAddComment_argsStandardScheme getScheme() {
        return new hrAddComment_argsStandardScheme();
      }
    }

    private static class hrAddComment_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<hrAddComment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hrAddComment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // HR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hr_id = iprot.readI32();
                struct.setHr_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMPANY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.company_id = iprot.readI32();
                struct.setCompany_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.user_id = iprot.readI32();
                struct.setUser_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hrAddComment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HR_ID_FIELD_DESC);
        oprot.writeI32(struct.hr_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.company_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.user_id);
        oprot.writeFieldEnd();
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hrAddComment_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public hrAddComment_argsTupleScheme getScheme() {
        return new hrAddComment_argsTupleScheme();
      }
    }

    private static class hrAddComment_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<hrAddComment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hrAddComment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHr_id()) {
          optionals.set(0);
        }
        if (struct.isSetCompany_id()) {
          optionals.set(1);
        }
        if (struct.isSetUser_id()) {
          optionals.set(2);
        }
        if (struct.isSetContent()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetHr_id()) {
          oprot.writeI32(struct.hr_id);
        }
        if (struct.isSetCompany_id()) {
          oprot.writeI32(struct.company_id);
        }
        if (struct.isSetUser_id()) {
          oprot.writeI32(struct.user_id);
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hrAddComment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.hr_id = iprot.readI32();
          struct.setHr_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.company_id = iprot.readI32();
          struct.setCompany_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.user_id = iprot.readI32();
          struct.setUser_idIsSet(true);
        }
        if (incoming.get(3)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class hrAddComment_result implements org.apache.thrift.TBase<hrAddComment_result, hrAddComment_result._Fields>, java.io.Serializable, Cloneable, Comparable<hrAddComment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hrAddComment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hrAddComment_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hrAddComment_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.Response success; // required
    public com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hrAddComment_result.class, metaDataMap);
    }

    public hrAddComment_result() {
    }

    public hrAddComment_result(
            com.moseeker.thrift.gen.common.struct.Response success,
            com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hrAddComment_result(hrAddComment_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public hrAddComment_result deepCopy() {
      return new hrAddComment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public hrAddComment_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public hrAddComment_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
          }
          break;

        case E:
          if (value == null) {
            unsetE();
          } else {
            setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

        case E:
          return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
        case E:
          return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof hrAddComment_result)
        return this.equals((hrAddComment_result)that);
      return false;
    }

    public boolean equals(hrAddComment_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(hrAddComment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("hrAddComment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hrAddComment_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public hrAddComment_resultStandardScheme getScheme() {
        return new hrAddComment_resultStandardScheme();
      }
    }

    private static class hrAddComment_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<hrAddComment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hrAddComment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hrAddComment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hrAddComment_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public hrAddComment_resultTupleScheme getScheme() {
        return new hrAddComment_resultTupleScheme();
      }
    }

    private static class hrAddComment_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<hrAddComment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hrAddComment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hrAddComment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class hrDelComment_args implements org.apache.thrift.TBase<hrDelComment_args, hrDelComment_args._Fields>, java.io.Serializable, Cloneable, Comparable<hrDelComment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hrDelComment_args");

    private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField COMMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("comment_id", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hrDelComment_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hrDelComment_argsTupleSchemeFactory();

    public int hr_id; // required
    public int company_id; // required
    public int comment_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HR_ID((short)1, "hr_id"),
      COMPANY_ID((short)2, "company_id"),
      COMMENT_ID((short)3, "comment_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HR_ID
            return HR_ID;
          case 2: // COMPANY_ID
            return COMPANY_ID;
          case 3: // COMMENT_ID
            return COMMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HR_ID_ISSET_ID = 0;
    private static final int __COMPANY_ID_ISSET_ID = 1;
    private static final int __COMMENT_ID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COMMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("comment_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hrDelComment_args.class, metaDataMap);
    }

    public hrDelComment_args() {
    }

    public hrDelComment_args(
            int hr_id,
            int company_id,
            int comment_id)
    {
      this();
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      this.company_id = company_id;
      setCompany_idIsSet(true);
      this.comment_id = comment_id;
      setComment_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hrDelComment_args(hrDelComment_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.hr_id = other.hr_id;
      this.company_id = other.company_id;
      this.comment_id = other.comment_id;
    }

    public hrDelComment_args deepCopy() {
      return new hrDelComment_args(this);
    }

    @Override
    public void clear() {
      setHr_idIsSet(false);
      this.hr_id = 0;
      setCompany_idIsSet(false);
      this.company_id = 0;
      setComment_idIsSet(false);
      this.comment_id = 0;
    }

    public int getHr_id() {
      return this.hr_id;
    }

    public hrDelComment_args setHr_id(int hr_id) {
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      return this;
    }

    public void unsetHr_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
    public boolean isSetHr_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    public void setHr_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
    }

    public int getCompany_id() {
      return this.company_id;
    }

    public hrDelComment_args setCompany_id(int company_id) {
      this.company_id = company_id;
      setCompany_idIsSet(true);
      return this;
    }

    public void unsetCompany_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCompany_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    public void setCompany_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
    }

    public int getComment_id() {
      return this.comment_id;
    }

    public hrDelComment_args setComment_id(int comment_id) {
      this.comment_id = comment_id;
      setComment_idIsSet(true);
      return this;
    }

    public void unsetComment_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMMENT_ID_ISSET_ID);
    }

    /** Returns true if field comment_id is set (has been assigned a value) and false otherwise */
    public boolean isSetComment_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMMENT_ID_ISSET_ID);
    }

    public void setComment_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMMENT_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case HR_ID:
          if (value == null) {
            unsetHr_id();
          } else {
            setHr_id((java.lang.Integer)value);
          }
          break;

        case COMPANY_ID:
          if (value == null) {
            unsetCompany_id();
          } else {
            setCompany_id((java.lang.Integer)value);
          }
          break;

        case COMMENT_ID:
          if (value == null) {
            unsetComment_id();
          } else {
            setComment_id((java.lang.Integer)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case HR_ID:
          return getHr_id();

        case COMPANY_ID:
          return getCompany_id();

        case COMMENT_ID:
          return getComment_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case HR_ID:
          return isSetHr_id();
        case COMPANY_ID:
          return isSetCompany_id();
        case COMMENT_ID:
          return isSetComment_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof hrDelComment_args)
        return this.equals((hrDelComment_args)that);
      return false;
    }

    public boolean equals(hrDelComment_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hr_id = true;
      boolean that_present_hr_id = true;
      if (this_present_hr_id || that_present_hr_id) {
        if (!(this_present_hr_id && that_present_hr_id))
          return false;
        if (this.hr_id != that.hr_id)
          return false;
      }

      boolean this_present_company_id = true;
      boolean that_present_company_id = true;
      if (this_present_company_id || that_present_company_id) {
        if (!(this_present_company_id && that_present_company_id))
          return false;
        if (this.company_id != that.company_id)
          return false;
      }

      boolean this_present_comment_id = true;
      boolean that_present_comment_id = true;
      if (this_present_comment_id || that_present_comment_id) {
        if (!(this_present_comment_id && that_present_comment_id))
          return false;
        if (this.comment_id != that.comment_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + hr_id;

      hashCode = hashCode * 8191 + company_id;

      hashCode = hashCode * 8191 + comment_id;

      return hashCode;
    }

    @Override
    public int compareTo(hrDelComment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHr_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompany_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetComment_id()).compareTo(other.isSetComment_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetComment_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment_id, other.comment_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("hrDelComment_args(");
      boolean first = true;

      sb.append("hr_id:");
      sb.append(this.hr_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("company_id:");
      sb.append(this.company_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("comment_id:");
      sb.append(this.comment_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hrDelComment_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public hrDelComment_argsStandardScheme getScheme() {
        return new hrDelComment_argsStandardScheme();
      }
    }

    private static class hrDelComment_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<hrDelComment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hrDelComment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // HR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hr_id = iprot.readI32();
                struct.setHr_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMPANY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.company_id = iprot.readI32();
                struct.setCompany_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COMMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.comment_id = iprot.readI32();
                struct.setComment_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hrDelComment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HR_ID_FIELD_DESC);
        oprot.writeI32(struct.hr_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.company_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COMMENT_ID_FIELD_DESC);
        oprot.writeI32(struct.comment_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hrDelComment_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public hrDelComment_argsTupleScheme getScheme() {
        return new hrDelComment_argsTupleScheme();
      }
    }

    private static class hrDelComment_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<hrDelComment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hrDelComment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHr_id()) {
          optionals.set(0);
        }
        if (struct.isSetCompany_id()) {
          optionals.set(1);
        }
        if (struct.isSetComment_id()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetHr_id()) {
          oprot.writeI32(struct.hr_id);
        }
        if (struct.isSetCompany_id()) {
          oprot.writeI32(struct.company_id);
        }
        if (struct.isSetComment_id()) {
          oprot.writeI32(struct.comment_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hrDelComment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.hr_id = iprot.readI32();
          struct.setHr_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.company_id = iprot.readI32();
          struct.setCompany_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.comment_id = iprot.readI32();
          struct.setComment_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class hrDelComment_result implements org.apache.thrift.TBase<hrDelComment_result, hrDelComment_result._Fields>, java.io.Serializable, Cloneable, Comparable<hrDelComment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hrDelComment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hrDelComment_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hrDelComment_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.Response success; // required
    public com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hrDelComment_result.class, metaDataMap);
    }

    public hrDelComment_result() {
    }

    public hrDelComment_result(
            com.moseeker.thrift.gen.common.struct.Response success,
            com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hrDelComment_result(hrDelComment_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public hrDelComment_result deepCopy() {
      return new hrDelComment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public hrDelComment_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public hrDelComment_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
          }
          break;

        case E:
          if (value == null) {
            unsetE();
          } else {
            setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

        case E:
          return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
        case E:
          return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof hrDelComment_result)
        return this.equals((hrDelComment_result)that);
      return false;
    }

    public boolean equals(hrDelComment_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(hrDelComment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("hrDelComment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hrDelComment_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public hrDelComment_resultStandardScheme getScheme() {
        return new hrDelComment_resultStandardScheme();
      }
    }

    private static class hrDelComment_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<hrDelComment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hrDelComment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hrDelComment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hrDelComment_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public hrDelComment_resultTupleScheme getScheme() {
        return new hrDelComment_resultTupleScheme();
      }
    }

    private static class hrDelComment_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<hrDelComment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hrDelComment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hrDelComment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class batchAddPublicTalent_args implements org.apache.thrift.TBase<batchAddPublicTalent_args, batchAddPublicTalent_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchAddPublicTalent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchAddPublicTalent_args");

    private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ids", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchAddPublicTalent_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchAddPublicTalent_argsTupleSchemeFactory();

    public int hr_id; // required
    public int company_id; // required
    public java.util.List<java.lang.Integer> user_ids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HR_ID((short)1, "hr_id"),
      COMPANY_ID((short)2, "company_id"),
      USER_IDS((short)3, "user_ids");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HR_ID
            return HR_ID;
          case 2: // COMPANY_ID
            return COMPANY_ID;
          case 3: // USER_IDS
            return USER_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HR_ID_ISSET_ID = 0;
    private static final int __COMPANY_ID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("user_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchAddPublicTalent_args.class, metaDataMap);
    }

    public batchAddPublicTalent_args() {
    }

    public batchAddPublicTalent_args(
            int hr_id,
            int company_id,
            java.util.List<java.lang.Integer> user_ids)
    {
      this();
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      this.company_id = company_id;
      setCompany_idIsSet(true);
      this.user_ids = user_ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchAddPublicTalent_args(batchAddPublicTalent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.hr_id = other.hr_id;
      this.company_id = other.company_id;
      if (other.isSetUser_ids()) {
        java.util.List<java.lang.Integer> __this__user_ids = new java.util.ArrayList<java.lang.Integer>(other.user_ids);
        this.user_ids = __this__user_ids;
      }
    }

    public batchAddPublicTalent_args deepCopy() {
      return new batchAddPublicTalent_args(this);
    }

    @Override
    public void clear() {
      setHr_idIsSet(false);
      this.hr_id = 0;
      setCompany_idIsSet(false);
      this.company_id = 0;
      this.user_ids = null;
    }

    public int getHr_id() {
      return this.hr_id;
    }

    public batchAddPublicTalent_args setHr_id(int hr_id) {
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      return this;
    }

    public void unsetHr_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
    public boolean isSetHr_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    public void setHr_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
    }

    public int getCompany_id() {
      return this.company_id;
    }

    public batchAddPublicTalent_args setCompany_id(int company_id) {
      this.company_id = company_id;
      setCompany_idIsSet(true);
      return this;
    }

    public void unsetCompany_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCompany_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    public void setCompany_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
    }

    public int getUser_idsSize() {
      return (this.user_ids == null) ? 0 : this.user_ids.size();
    }

    public java.util.Iterator<java.lang.Integer> getUser_idsIterator() {
      return (this.user_ids == null) ? null : this.user_ids.iterator();
    }

    public void addToUser_ids(int elem) {
      if (this.user_ids == null) {
        this.user_ids = new java.util.ArrayList<java.lang.Integer>();
      }
      this.user_ids.add(elem);
    }

    public java.util.List<java.lang.Integer> getUser_ids() {
      return this.user_ids;
    }

    public batchAddPublicTalent_args setUser_ids(java.util.List<java.lang.Integer> user_ids) {
      this.user_ids = user_ids;
      return this;
    }

    public void unsetUser_ids() {
      this.user_ids = null;
    }

    /** Returns true if field user_ids is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_ids() {
      return this.user_ids != null;
    }

    public void setUser_idsIsSet(boolean value) {
      if (!value) {
        this.user_ids = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case HR_ID:
          if (value == null) {
            unsetHr_id();
          } else {
            setHr_id((java.lang.Integer)value);
          }
          break;

        case COMPANY_ID:
          if (value == null) {
            unsetCompany_id();
          } else {
            setCompany_id((java.lang.Integer)value);
          }
          break;

        case USER_IDS:
          if (value == null) {
            unsetUser_ids();
          } else {
            setUser_ids((java.util.List<java.lang.Integer>)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case HR_ID:
          return getHr_id();

        case COMPANY_ID:
          return getCompany_id();

        case USER_IDS:
          return getUser_ids();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case HR_ID:
          return isSetHr_id();
        case COMPANY_ID:
          return isSetCompany_id();
        case USER_IDS:
          return isSetUser_ids();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof batchAddPublicTalent_args)
        return this.equals((batchAddPublicTalent_args)that);
      return false;
    }

    public boolean equals(batchAddPublicTalent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hr_id = true;
      boolean that_present_hr_id = true;
      if (this_present_hr_id || that_present_hr_id) {
        if (!(this_present_hr_id && that_present_hr_id))
          return false;
        if (this.hr_id != that.hr_id)
          return false;
      }

      boolean this_present_company_id = true;
      boolean that_present_company_id = true;
      if (this_present_company_id || that_present_company_id) {
        if (!(this_present_company_id && that_present_company_id))
          return false;
        if (this.company_id != that.company_id)
          return false;
      }

      boolean this_present_user_ids = true && this.isSetUser_ids();
      boolean that_present_user_ids = true && that.isSetUser_ids();
      if (this_present_user_ids || that_present_user_ids) {
        if (!(this_present_user_ids && that_present_user_ids))
          return false;
        if (!this.user_ids.equals(that.user_ids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + hr_id;

      hashCode = hashCode * 8191 + company_id;

      hashCode = hashCode * 8191 + ((isSetUser_ids()) ? 131071 : 524287);
      if (isSetUser_ids())
        hashCode = hashCode * 8191 + user_ids.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(batchAddPublicTalent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHr_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompany_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUser_ids()).compareTo(other.isSetUser_ids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_ids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ids, other.user_ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("batchAddPublicTalent_args(");
      boolean first = true;

      sb.append("hr_id:");
      sb.append(this.hr_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("company_id:");
      sb.append(this.company_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_ids:");
      if (this.user_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.user_ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchAddPublicTalent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public batchAddPublicTalent_argsStandardScheme getScheme() {
        return new batchAddPublicTalent_argsStandardScheme();
      }
    }

    private static class batchAddPublicTalent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchAddPublicTalent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchAddPublicTalent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // HR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hr_id = iprot.readI32();
                struct.setHr_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMPANY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.company_id = iprot.readI32();
                struct.setCompany_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list88.size);
                  int _elem89;
                  for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                  {
                    _elem89 = iprot.readI32();
                    struct.user_ids.add(_elem89);
                  }
                  iprot.readListEnd();
                }
                struct.setUser_idsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchAddPublicTalent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HR_ID_FIELD_DESC);
        oprot.writeI32(struct.hr_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.company_id);
        oprot.writeFieldEnd();
        if (struct.user_ids != null) {
          oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.user_ids.size()));
            for (int _iter91 : struct.user_ids)
            {
              oprot.writeI32(_iter91);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchAddPublicTalent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public batchAddPublicTalent_argsTupleScheme getScheme() {
        return new batchAddPublicTalent_argsTupleScheme();
      }
    }

    private static class batchAddPublicTalent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchAddPublicTalent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchAddPublicTalent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHr_id()) {
          optionals.set(0);
        }
        if (struct.isSetCompany_id()) {
          optionals.set(1);
        }
        if (struct.isSetUser_ids()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetHr_id()) {
          oprot.writeI32(struct.hr_id);
        }
        if (struct.isSetCompany_id()) {
          oprot.writeI32(struct.company_id);
        }
        if (struct.isSetUser_ids()) {
          {
            oprot.writeI32(struct.user_ids.size());
            for (int _iter92 : struct.user_ids)
            {
              oprot.writeI32(_iter92);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchAddPublicTalent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.hr_id = iprot.readI32();
          struct.setHr_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.company_id = iprot.readI32();
          struct.setCompany_idIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list93.size);
            int _elem94;
            for (int _i95 = 0; _i95 < _list93.size; ++_i95)
            {
              _elem94 = iprot.readI32();
              struct.user_ids.add(_elem94);
            }
          }
          struct.setUser_idsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class batchAddPublicTalent_result implements org.apache.thrift.TBase<batchAddPublicTalent_result, batchAddPublicTalent_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchAddPublicTalent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchAddPublicTalent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchAddPublicTalent_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchAddPublicTalent_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.Response success; // required
    public com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchAddPublicTalent_result.class, metaDataMap);
    }

    public batchAddPublicTalent_result() {
    }

    public batchAddPublicTalent_result(
            com.moseeker.thrift.gen.common.struct.Response success,
            com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchAddPublicTalent_result(batchAddPublicTalent_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public batchAddPublicTalent_result deepCopy() {
      return new batchAddPublicTalent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public batchAddPublicTalent_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public batchAddPublicTalent_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
          }
          break;

        case E:
          if (value == null) {
            unsetE();
          } else {
            setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

        case E:
          return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
        case E:
          return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof batchAddPublicTalent_result)
        return this.equals((batchAddPublicTalent_result)that);
      return false;
    }

    public boolean equals(batchAddPublicTalent_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(batchAddPublicTalent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("batchAddPublicTalent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchAddPublicTalent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public batchAddPublicTalent_resultStandardScheme getScheme() {
        return new batchAddPublicTalent_resultStandardScheme();
      }
    }

    private static class batchAddPublicTalent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchAddPublicTalent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchAddPublicTalent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchAddPublicTalent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchAddPublicTalent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public batchAddPublicTalent_resultTupleScheme getScheme() {
        return new batchAddPublicTalent_resultTupleScheme();
      }
    }

    private static class batchAddPublicTalent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchAddPublicTalent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchAddPublicTalent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchAddPublicTalent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class batchCancelPublicTalent_args implements org.apache.thrift.TBase<batchCancelPublicTalent_args, batchCancelPublicTalent_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchCancelPublicTalent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchCancelPublicTalent_args");

    private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ids", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchCancelPublicTalent_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchCancelPublicTalent_argsTupleSchemeFactory();

    public int hr_id; // required
    public int company_id; // required
    public java.util.List<java.lang.Integer> user_ids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HR_ID((short)1, "hr_id"),
      COMPANY_ID((short)2, "company_id"),
      USER_IDS((short)3, "user_ids");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HR_ID
            return HR_ID;
          case 2: // COMPANY_ID
            return COMPANY_ID;
          case 3: // USER_IDS
            return USER_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HR_ID_ISSET_ID = 0;
    private static final int __COMPANY_ID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("user_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchCancelPublicTalent_args.class, metaDataMap);
    }

    public batchCancelPublicTalent_args() {
    }

    public batchCancelPublicTalent_args(
            int hr_id,
            int company_id,
            java.util.List<java.lang.Integer> user_ids)
    {
      this();
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      this.company_id = company_id;
      setCompany_idIsSet(true);
      this.user_ids = user_ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchCancelPublicTalent_args(batchCancelPublicTalent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.hr_id = other.hr_id;
      this.company_id = other.company_id;
      if (other.isSetUser_ids()) {
        java.util.List<java.lang.Integer> __this__user_ids = new java.util.ArrayList<java.lang.Integer>(other.user_ids);
        this.user_ids = __this__user_ids;
      }
    }

    public batchCancelPublicTalent_args deepCopy() {
      return new batchCancelPublicTalent_args(this);
    }

    @Override
    public void clear() {
      setHr_idIsSet(false);
      this.hr_id = 0;
      setCompany_idIsSet(false);
      this.company_id = 0;
      this.user_ids = null;
    }

    public int getHr_id() {
      return this.hr_id;
    }

    public batchCancelPublicTalent_args setHr_id(int hr_id) {
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      return this;
    }

    public void unsetHr_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
    public boolean isSetHr_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    public void setHr_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
    }

    public int getCompany_id() {
      return this.company_id;
    }

    public batchCancelPublicTalent_args setCompany_id(int company_id) {
      this.company_id = company_id;
      setCompany_idIsSet(true);
      return this;
    }

    public void unsetCompany_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCompany_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    public void setCompany_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
    }

    public int getUser_idsSize() {
      return (this.user_ids == null) ? 0 : this.user_ids.size();
    }

    public java.util.Iterator<java.lang.Integer> getUser_idsIterator() {
      return (this.user_ids == null) ? null : this.user_ids.iterator();
    }

    public void addToUser_ids(int elem) {
      if (this.user_ids == null) {
        this.user_ids = new java.util.ArrayList<java.lang.Integer>();
      }
      this.user_ids.add(elem);
    }

    public java.util.List<java.lang.Integer> getUser_ids() {
      return this.user_ids;
    }

    public batchCancelPublicTalent_args setUser_ids(java.util.List<java.lang.Integer> user_ids) {
      this.user_ids = user_ids;
      return this;
    }

    public void unsetUser_ids() {
      this.user_ids = null;
    }

    /** Returns true if field user_ids is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_ids() {
      return this.user_ids != null;
    }

    public void setUser_idsIsSet(boolean value) {
      if (!value) {
        this.user_ids = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case HR_ID:
          if (value == null) {
            unsetHr_id();
          } else {
            setHr_id((java.lang.Integer)value);
          }
          break;

        case COMPANY_ID:
          if (value == null) {
            unsetCompany_id();
          } else {
            setCompany_id((java.lang.Integer)value);
          }
          break;

        case USER_IDS:
          if (value == null) {
            unsetUser_ids();
          } else {
            setUser_ids((java.util.List<java.lang.Integer>)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case HR_ID:
          return getHr_id();

        case COMPANY_ID:
          return getCompany_id();

        case USER_IDS:
          return getUser_ids();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case HR_ID:
          return isSetHr_id();
        case COMPANY_ID:
          return isSetCompany_id();
        case USER_IDS:
          return isSetUser_ids();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof batchCancelPublicTalent_args)
        return this.equals((batchCancelPublicTalent_args)that);
      return false;
    }

    public boolean equals(batchCancelPublicTalent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hr_id = true;
      boolean that_present_hr_id = true;
      if (this_present_hr_id || that_present_hr_id) {
        if (!(this_present_hr_id && that_present_hr_id))
          return false;
        if (this.hr_id != that.hr_id)
          return false;
      }

      boolean this_present_company_id = true;
      boolean that_present_company_id = true;
      if (this_present_company_id || that_present_company_id) {
        if (!(this_present_company_id && that_present_company_id))
          return false;
        if (this.company_id != that.company_id)
          return false;
      }

      boolean this_present_user_ids = true && this.isSetUser_ids();
      boolean that_present_user_ids = true && that.isSetUser_ids();
      if (this_present_user_ids || that_present_user_ids) {
        if (!(this_present_user_ids && that_present_user_ids))
          return false;
        if (!this.user_ids.equals(that.user_ids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + hr_id;

      hashCode = hashCode * 8191 + company_id;

      hashCode = hashCode * 8191 + ((isSetUser_ids()) ? 131071 : 524287);
      if (isSetUser_ids())
        hashCode = hashCode * 8191 + user_ids.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(batchCancelPublicTalent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHr_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompany_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUser_ids()).compareTo(other.isSetUser_ids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_ids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ids, other.user_ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("batchCancelPublicTalent_args(");
      boolean first = true;

      sb.append("hr_id:");
      sb.append(this.hr_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("company_id:");
      sb.append(this.company_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_ids:");
      if (this.user_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.user_ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchCancelPublicTalent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public batchCancelPublicTalent_argsStandardScheme getScheme() {
        return new batchCancelPublicTalent_argsStandardScheme();
      }
    }

    private static class batchCancelPublicTalent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchCancelPublicTalent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchCancelPublicTalent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // HR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hr_id = iprot.readI32();
                struct.setHr_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMPANY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.company_id = iprot.readI32();
                struct.setCompany_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list96.size);
                  int _elem97;
                  for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                  {
                    _elem97 = iprot.readI32();
                    struct.user_ids.add(_elem97);
                  }
                  iprot.readListEnd();
                }
                struct.setUser_idsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchCancelPublicTalent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HR_ID_FIELD_DESC);
        oprot.writeI32(struct.hr_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.company_id);
        oprot.writeFieldEnd();
        if (struct.user_ids != null) {
          oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.user_ids.size()));
            for (int _iter99 : struct.user_ids)
            {
              oprot.writeI32(_iter99);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchCancelPublicTalent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public batchCancelPublicTalent_argsTupleScheme getScheme() {
        return new batchCancelPublicTalent_argsTupleScheme();
      }
    }

    private static class batchCancelPublicTalent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchCancelPublicTalent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchCancelPublicTalent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHr_id()) {
          optionals.set(0);
        }
        if (struct.isSetCompany_id()) {
          optionals.set(1);
        }
        if (struct.isSetUser_ids()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetHr_id()) {
          oprot.writeI32(struct.hr_id);
        }
        if (struct.isSetCompany_id()) {
          oprot.writeI32(struct.company_id);
        }
        if (struct.isSetUser_ids()) {
          {
            oprot.writeI32(struct.user_ids.size());
            for (int _iter100 : struct.user_ids)
            {
              oprot.writeI32(_iter100);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchCancelPublicTalent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.hr_id = iprot.readI32();
          struct.setHr_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.company_id = iprot.readI32();
          struct.setCompany_idIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list101.size);
            int _elem102;
            for (int _i103 = 0; _i103 < _list101.size; ++_i103)
            {
              _elem102 = iprot.readI32();
              struct.user_ids.add(_elem102);
            }
          }
          struct.setUser_idsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class batchCancelPublicTalent_result implements org.apache.thrift.TBase<batchCancelPublicTalent_result, batchCancelPublicTalent_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchCancelPublicTalent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchCancelPublicTalent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchCancelPublicTalent_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchCancelPublicTalent_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.Response success; // required
    public com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchCancelPublicTalent_result.class, metaDataMap);
    }

    public batchCancelPublicTalent_result() {
    }

    public batchCancelPublicTalent_result(
            com.moseeker.thrift.gen.common.struct.Response success,
            com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchCancelPublicTalent_result(batchCancelPublicTalent_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public batchCancelPublicTalent_result deepCopy() {
      return new batchCancelPublicTalent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public batchCancelPublicTalent_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public batchCancelPublicTalent_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
          }
          break;

        case E:
          if (value == null) {
            unsetE();
          } else {
            setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

        case E:
          return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
        case E:
          return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof batchCancelPublicTalent_result)
        return this.equals((batchCancelPublicTalent_result)that);
      return false;
    }

    public boolean equals(batchCancelPublicTalent_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(batchCancelPublicTalent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("batchCancelPublicTalent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchCancelPublicTalent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public batchCancelPublicTalent_resultStandardScheme getScheme() {
        return new batchCancelPublicTalent_resultStandardScheme();
      }
    }

    private static class batchCancelPublicTalent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchCancelPublicTalent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchCancelPublicTalent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchCancelPublicTalent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchCancelPublicTalent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public batchCancelPublicTalent_resultTupleScheme getScheme() {
        return new batchCancelPublicTalent_resultTupleScheme();
      }
    }

    private static class batchCancelPublicTalent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchCancelPublicTalent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchCancelPublicTalent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchCancelPublicTalent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCompanyPulicTalent_args implements org.apache.thrift.TBase<getCompanyPulicTalent_args, getCompanyPulicTalent_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCompanyPulicTalent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompanyPulicTalent_args");

    private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("page_number", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("page_size", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCompanyPulicTalent_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCompanyPulicTalent_argsTupleSchemeFactory();

    public int hr_id; // required
    public int company_id; // required
    public int page_number; // required
    public int page_size; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HR_ID((short)1, "hr_id"),
      COMPANY_ID((short)2, "company_id"),
      PAGE_NUMBER((short)3, "page_number"),
      PAGE_SIZE((short)4, "page_size");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HR_ID
            return HR_ID;
          case 2: // COMPANY_ID
            return COMPANY_ID;
          case 3: // PAGE_NUMBER
            return PAGE_NUMBER;
          case 4: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HR_ID_ISSET_ID = 0;
    private static final int __COMPANY_ID_ISSET_ID = 1;
    private static final int __PAGE_NUMBER_ISSET_ID = 2;
    private static final int __PAGE_SIZE_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("page_number", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("page_size", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompanyPulicTalent_args.class, metaDataMap);
    }

    public getCompanyPulicTalent_args() {
    }

    public getCompanyPulicTalent_args(
            int hr_id,
            int company_id,
            int page_number,
            int page_size)
    {
      this();
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      this.company_id = company_id;
      setCompany_idIsSet(true);
      this.page_number = page_number;
      setPage_numberIsSet(true);
      this.page_size = page_size;
      setPage_sizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompanyPulicTalent_args(getCompanyPulicTalent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.hr_id = other.hr_id;
      this.company_id = other.company_id;
      this.page_number = other.page_number;
      this.page_size = other.page_size;
    }

    public getCompanyPulicTalent_args deepCopy() {
      return new getCompanyPulicTalent_args(this);
    }

    @Override
    public void clear() {
      setHr_idIsSet(false);
      this.hr_id = 0;
      setCompany_idIsSet(false);
      this.company_id = 0;
      setPage_numberIsSet(false);
      this.page_number = 0;
      setPage_sizeIsSet(false);
      this.page_size = 0;
    }

    public int getHr_id() {
      return this.hr_id;
    }

    public getCompanyPulicTalent_args setHr_id(int hr_id) {
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      return this;
    }

    public void unsetHr_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
    public boolean isSetHr_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    public void setHr_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
    }

    public int getCompany_id() {
      return this.company_id;
    }

    public getCompanyPulicTalent_args setCompany_id(int company_id) {
      this.company_id = company_id;
      setCompany_idIsSet(true);
      return this;
    }

    public void unsetCompany_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCompany_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    public void setCompany_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
    }

    public int getPage_number() {
      return this.page_number;
    }

    public getCompanyPulicTalent_args setPage_number(int page_number) {
      this.page_number = page_number;
      setPage_numberIsSet(true);
      return this;
    }

    public void unsetPage_number() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID);
    }

    /** Returns true if field page_number is set (has been assigned a value) and false otherwise */
    public boolean isSetPage_number() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID);
    }

    public void setPage_numberIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID, value);
    }

    public int getPage_size() {
      return this.page_size;
    }

    public getCompanyPulicTalent_args setPage_size(int page_size) {
      this.page_size = page_size;
      setPage_sizeIsSet(true);
      return this;
    }

    public void unsetPage_size() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
    }

    /** Returns true if field page_size is set (has been assigned a value) and false otherwise */
    public boolean isSetPage_size() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
    }

    public void setPage_sizeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case HR_ID:
          if (value == null) {
            unsetHr_id();
          } else {
            setHr_id((java.lang.Integer)value);
          }
          break;

        case COMPANY_ID:
          if (value == null) {
            unsetCompany_id();
          } else {
            setCompany_id((java.lang.Integer)value);
          }
          break;

        case PAGE_NUMBER:
          if (value == null) {
            unsetPage_number();
          } else {
            setPage_number((java.lang.Integer)value);
          }
          break;

        case PAGE_SIZE:
          if (value == null) {
            unsetPage_size();
          } else {
            setPage_size((java.lang.Integer)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case HR_ID:
          return getHr_id();

        case COMPANY_ID:
          return getCompany_id();

        case PAGE_NUMBER:
          return getPage_number();

        case PAGE_SIZE:
          return getPage_size();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case HR_ID:
          return isSetHr_id();
        case COMPANY_ID:
          return isSetCompany_id();
        case PAGE_NUMBER:
          return isSetPage_number();
        case PAGE_SIZE:
          return isSetPage_size();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCompanyPulicTalent_args)
        return this.equals((getCompanyPulicTalent_args)that);
      return false;
    }

    public boolean equals(getCompanyPulicTalent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hr_id = true;
      boolean that_present_hr_id = true;
      if (this_present_hr_id || that_present_hr_id) {
        if (!(this_present_hr_id && that_present_hr_id))
          return false;
        if (this.hr_id != that.hr_id)
          return false;
      }

      boolean this_present_company_id = true;
      boolean that_present_company_id = true;
      if (this_present_company_id || that_present_company_id) {
        if (!(this_present_company_id && that_present_company_id))
          return false;
        if (this.company_id != that.company_id)
          return false;
      }

      boolean this_present_page_number = true;
      boolean that_present_page_number = true;
      if (this_present_page_number || that_present_page_number) {
        if (!(this_present_page_number && that_present_page_number))
          return false;
        if (this.page_number != that.page_number)
          return false;
      }

      boolean this_present_page_size = true;
      boolean that_present_page_size = true;
      if (this_present_page_size || that_present_page_size) {
        if (!(this_present_page_size && that_present_page_size))
          return false;
        if (this.page_size != that.page_size)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + hr_id;

      hashCode = hashCode * 8191 + company_id;

      hashCode = hashCode * 8191 + page_number;

      hashCode = hashCode * 8191 + page_size;

      return hashCode;
    }

    @Override
    public int compareTo(getCompanyPulicTalent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHr_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompany_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPage_number()).compareTo(other.isSetPage_number());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage_number()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_number, other.page_number);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPage_size()).compareTo(other.isSetPage_size());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage_size()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_size, other.page_size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCompanyPulicTalent_args(");
      boolean first = true;

      sb.append("hr_id:");
      sb.append(this.hr_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("company_id:");
      sb.append(this.company_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page_number:");
      sb.append(this.page_number);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page_size:");
      sb.append(this.page_size);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCompanyPulicTalent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCompanyPulicTalent_argsStandardScheme getScheme() {
        return new getCompanyPulicTalent_argsStandardScheme();
      }
    }

    private static class getCompanyPulicTalent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCompanyPulicTalent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCompanyPulicTalent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // HR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hr_id = iprot.readI32();
                struct.setHr_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMPANY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.company_id = iprot.readI32();
                struct.setCompany_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page_number = iprot.readI32();
                struct.setPage_numberIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page_size = iprot.readI32();
                struct.setPage_sizeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCompanyPulicTalent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HR_ID_FIELD_DESC);
        oprot.writeI32(struct.hr_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.company_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.page_number);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.page_size);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCompanyPulicTalent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCompanyPulicTalent_argsTupleScheme getScheme() {
        return new getCompanyPulicTalent_argsTupleScheme();
      }
    }

    private static class getCompanyPulicTalent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCompanyPulicTalent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCompanyPulicTalent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHr_id()) {
          optionals.set(0);
        }
        if (struct.isSetCompany_id()) {
          optionals.set(1);
        }
        if (struct.isSetPage_number()) {
          optionals.set(2);
        }
        if (struct.isSetPage_size()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetHr_id()) {
          oprot.writeI32(struct.hr_id);
        }
        if (struct.isSetCompany_id()) {
          oprot.writeI32(struct.company_id);
        }
        if (struct.isSetPage_number()) {
          oprot.writeI32(struct.page_number);
        }
        if (struct.isSetPage_size()) {
          oprot.writeI32(struct.page_size);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCompanyPulicTalent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.hr_id = iprot.readI32();
          struct.setHr_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.company_id = iprot.readI32();
          struct.setCompany_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.page_number = iprot.readI32();
          struct.setPage_numberIsSet(true);
        }
        if (incoming.get(3)) {
          struct.page_size = iprot.readI32();
          struct.setPage_sizeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCompanyPulicTalent_result implements org.apache.thrift.TBase<getCompanyPulicTalent_result, getCompanyPulicTalent_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCompanyPulicTalent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompanyPulicTalent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCompanyPulicTalent_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCompanyPulicTalent_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.Response success; // required
    public com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompanyPulicTalent_result.class, metaDataMap);
    }

    public getCompanyPulicTalent_result() {
    }

    public getCompanyPulicTalent_result(
            com.moseeker.thrift.gen.common.struct.Response success,
            com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompanyPulicTalent_result(getCompanyPulicTalent_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public getCompanyPulicTalent_result deepCopy() {
      return new getCompanyPulicTalent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public getCompanyPulicTalent_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public getCompanyPulicTalent_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
          }
          break;

        case E:
          if (value == null) {
            unsetE();
          } else {
            setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

        case E:
          return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
        case E:
          return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCompanyPulicTalent_result)
        return this.equals((getCompanyPulicTalent_result)that);
      return false;
    }

    public boolean equals(getCompanyPulicTalent_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCompanyPulicTalent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCompanyPulicTalent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCompanyPulicTalent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCompanyPulicTalent_resultStandardScheme getScheme() {
        return new getCompanyPulicTalent_resultStandardScheme();
      }
    }

    private static class getCompanyPulicTalent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCompanyPulicTalent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCompanyPulicTalent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCompanyPulicTalent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCompanyPulicTalent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCompanyPulicTalent_resultTupleScheme getScheme() {
        return new getCompanyPulicTalent_resultTupleScheme();
      }
    }

    private static class getCompanyPulicTalent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCompanyPulicTalent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCompanyPulicTalent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCompanyPulicTalent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class batchNewAddTalentTag_args implements org.apache.thrift.TBase<batchNewAddTalentTag_args, batchNewAddTalentTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchNewAddTalentTag_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchNewAddTalentTag_args");

    private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ids", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField TAG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("tag_ids", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchNewAddTalentTag_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchNewAddTalentTag_argsTupleSchemeFactory();

    public int hr_id; // required
    public java.util.List<java.lang.Integer> user_ids; // required
    public java.util.List<java.lang.Integer> tag_ids; // required
    public int company_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HR_ID((short)1, "hr_id"),
      USER_IDS((short)2, "user_ids"),
      TAG_IDS((short)3, "tag_ids"),
      COMPANY_ID((short)4, "company_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HR_ID
            return HR_ID;
          case 2: // USER_IDS
            return USER_IDS;
          case 3: // TAG_IDS
            return TAG_IDS;
          case 4: // COMPANY_ID
            return COMPANY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HR_ID_ISSET_ID = 0;
    private static final int __COMPANY_ID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("user_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.TAG_IDS, new org.apache.thrift.meta_data.FieldMetaData("tag_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchNewAddTalentTag_args.class, metaDataMap);
    }

    public batchNewAddTalentTag_args() {
    }

    public batchNewAddTalentTag_args(
            int hr_id,
            java.util.List<java.lang.Integer> user_ids,
            java.util.List<java.lang.Integer> tag_ids,
            int company_id)
    {
      this();
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      this.user_ids = user_ids;
      this.tag_ids = tag_ids;
      this.company_id = company_id;
      setCompany_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchNewAddTalentTag_args(batchNewAddTalentTag_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.hr_id = other.hr_id;
      if (other.isSetUser_ids()) {
        java.util.List<java.lang.Integer> __this__user_ids = new java.util.ArrayList<java.lang.Integer>(other.user_ids);
        this.user_ids = __this__user_ids;
      }
      if (other.isSetTag_ids()) {
        java.util.List<java.lang.Integer> __this__tag_ids = new java.util.ArrayList<java.lang.Integer>(other.tag_ids);
        this.tag_ids = __this__tag_ids;
      }
      this.company_id = other.company_id;
    }

    public batchNewAddTalentTag_args deepCopy() {
      return new batchNewAddTalentTag_args(this);
    }

    @Override
    public void clear() {
      setHr_idIsSet(false);
      this.hr_id = 0;
      this.user_ids = null;
      this.tag_ids = null;
      setCompany_idIsSet(false);
      this.company_id = 0;
    }

    public int getHr_id() {
      return this.hr_id;
    }

    public batchNewAddTalentTag_args setHr_id(int hr_id) {
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      return this;
    }

    public void unsetHr_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
    public boolean isSetHr_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    public void setHr_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
    }

    public int getUser_idsSize() {
      return (this.user_ids == null) ? 0 : this.user_ids.size();
    }

    public java.util.Iterator<java.lang.Integer> getUser_idsIterator() {
      return (this.user_ids == null) ? null : this.user_ids.iterator();
    }

    public void addToUser_ids(int elem) {
      if (this.user_ids == null) {
        this.user_ids = new java.util.ArrayList<java.lang.Integer>();
      }
      this.user_ids.add(elem);
    }

    public java.util.List<java.lang.Integer> getUser_ids() {
      return this.user_ids;
    }

    public batchNewAddTalentTag_args setUser_ids(java.util.List<java.lang.Integer> user_ids) {
      this.user_ids = user_ids;
      return this;
    }

    public void unsetUser_ids() {
      this.user_ids = null;
    }

    /** Returns true if field user_ids is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_ids() {
      return this.user_ids != null;
    }

    public void setUser_idsIsSet(boolean value) {
      if (!value) {
        this.user_ids = null;
      }
    }

    public int getTag_idsSize() {
      return (this.tag_ids == null) ? 0 : this.tag_ids.size();
    }

    public java.util.Iterator<java.lang.Integer> getTag_idsIterator() {
      return (this.tag_ids == null) ? null : this.tag_ids.iterator();
    }

    public void addToTag_ids(int elem) {
      if (this.tag_ids == null) {
        this.tag_ids = new java.util.ArrayList<java.lang.Integer>();
      }
      this.tag_ids.add(elem);
    }

    public java.util.List<java.lang.Integer> getTag_ids() {
      return this.tag_ids;
    }

    public batchNewAddTalentTag_args setTag_ids(java.util.List<java.lang.Integer> tag_ids) {
      this.tag_ids = tag_ids;
      return this;
    }

    public void unsetTag_ids() {
      this.tag_ids = null;
    }

    /** Returns true if field tag_ids is set (has been assigned a value) and false otherwise */
    public boolean isSetTag_ids() {
      return this.tag_ids != null;
    }

    public void setTag_idsIsSet(boolean value) {
      if (!value) {
        this.tag_ids = null;
      }
    }

    public int getCompany_id() {
      return this.company_id;
    }

    public batchNewAddTalentTag_args setCompany_id(int company_id) {
      this.company_id = company_id;
      setCompany_idIsSet(true);
      return this;
    }

    public void unsetCompany_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCompany_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    public void setCompany_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case HR_ID:
          if (value == null) {
            unsetHr_id();
          } else {
            setHr_id((java.lang.Integer)value);
          }
          break;

        case USER_IDS:
          if (value == null) {
            unsetUser_ids();
          } else {
            setUser_ids((java.util.List<java.lang.Integer>)value);
          }
          break;

        case TAG_IDS:
          if (value == null) {
            unsetTag_ids();
          } else {
            setTag_ids((java.util.List<java.lang.Integer>)value);
          }
          break;

        case COMPANY_ID:
          if (value == null) {
            unsetCompany_id();
          } else {
            setCompany_id((java.lang.Integer)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case HR_ID:
          return getHr_id();

        case USER_IDS:
          return getUser_ids();

        case TAG_IDS:
          return getTag_ids();

        case COMPANY_ID:
          return getCompany_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case HR_ID:
          return isSetHr_id();
        case USER_IDS:
          return isSetUser_ids();
        case TAG_IDS:
          return isSetTag_ids();
        case COMPANY_ID:
          return isSetCompany_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof batchNewAddTalentTag_args)
        return this.equals((batchNewAddTalentTag_args)that);
      return false;
    }

    public boolean equals(batchNewAddTalentTag_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hr_id = true;
      boolean that_present_hr_id = true;
      if (this_present_hr_id || that_present_hr_id) {
        if (!(this_present_hr_id && that_present_hr_id))
          return false;
        if (this.hr_id != that.hr_id)
          return false;
      }

      boolean this_present_user_ids = true && this.isSetUser_ids();
      boolean that_present_user_ids = true && that.isSetUser_ids();
      if (this_present_user_ids || that_present_user_ids) {
        if (!(this_present_user_ids && that_present_user_ids))
          return false;
        if (!this.user_ids.equals(that.user_ids))
          return false;
      }

      boolean this_present_tag_ids = true && this.isSetTag_ids();
      boolean that_present_tag_ids = true && that.isSetTag_ids();
      if (this_present_tag_ids || that_present_tag_ids) {
        if (!(this_present_tag_ids && that_present_tag_ids))
          return false;
        if (!this.tag_ids.equals(that.tag_ids))
          return false;
      }

      boolean this_present_company_id = true;
      boolean that_present_company_id = true;
      if (this_present_company_id || that_present_company_id) {
        if (!(this_present_company_id && that_present_company_id))
          return false;
        if (this.company_id != that.company_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + hr_id;

      hashCode = hashCode * 8191 + ((isSetUser_ids()) ? 131071 : 524287);
      if (isSetUser_ids())
        hashCode = hashCode * 8191 + user_ids.hashCode();

      hashCode = hashCode * 8191 + ((isSetTag_ids()) ? 131071 : 524287);
      if (isSetTag_ids())
        hashCode = hashCode * 8191 + tag_ids.hashCode();

      hashCode = hashCode * 8191 + company_id;

      return hashCode;
    }

    @Override
    public int compareTo(batchNewAddTalentTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHr_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUser_ids()).compareTo(other.isSetUser_ids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_ids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ids, other.user_ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTag_ids()).compareTo(other.isSetTag_ids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTag_ids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag_ids, other.tag_ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompany_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("batchNewAddTalentTag_args(");
      boolean first = true;

      sb.append("hr_id:");
      sb.append(this.hr_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_ids:");
      if (this.user_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.user_ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tag_ids:");
      if (this.tag_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.tag_ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("company_id:");
      sb.append(this.company_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchNewAddTalentTag_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public batchNewAddTalentTag_argsStandardScheme getScheme() {
        return new batchNewAddTalentTag_argsStandardScheme();
      }
    }

    private static class batchNewAddTalentTag_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchNewAddTalentTag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchNewAddTalentTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // HR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hr_id = iprot.readI32();
                struct.setHr_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list104.size);
                  int _elem105;
                  for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                  {
                    _elem105 = iprot.readI32();
                    struct.user_ids.add(_elem105);
                  }
                  iprot.readListEnd();
                }
                struct.setUser_idsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TAG_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list107 = iprot.readListBegin();
                  struct.tag_ids = new java.util.ArrayList<java.lang.Integer>(_list107.size);
                  int _elem108;
                  for (int _i109 = 0; _i109 < _list107.size; ++_i109)
                  {
                    _elem108 = iprot.readI32();
                    struct.tag_ids.add(_elem108);
                  }
                  iprot.readListEnd();
                }
                struct.setTag_idsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COMPANY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.company_id = iprot.readI32();
                struct.setCompany_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchNewAddTalentTag_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HR_ID_FIELD_DESC);
        oprot.writeI32(struct.hr_id);
        oprot.writeFieldEnd();
        if (struct.user_ids != null) {
          oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.user_ids.size()));
            for (int _iter110 : struct.user_ids)
            {
              oprot.writeI32(_iter110);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.tag_ids != null) {
          oprot.writeFieldBegin(TAG_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.tag_ids.size()));
            for (int _iter111 : struct.tag_ids)
            {
              oprot.writeI32(_iter111);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.company_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchNewAddTalentTag_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public batchNewAddTalentTag_argsTupleScheme getScheme() {
        return new batchNewAddTalentTag_argsTupleScheme();
      }
    }

    private static class batchNewAddTalentTag_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchNewAddTalentTag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchNewAddTalentTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHr_id()) {
          optionals.set(0);
        }
        if (struct.isSetUser_ids()) {
          optionals.set(1);
        }
        if (struct.isSetTag_ids()) {
          optionals.set(2);
        }
        if (struct.isSetCompany_id()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetHr_id()) {
          oprot.writeI32(struct.hr_id);
        }
        if (struct.isSetUser_ids()) {
          {
            oprot.writeI32(struct.user_ids.size());
            for (int _iter112 : struct.user_ids)
            {
              oprot.writeI32(_iter112);
            }
          }
        }
        if (struct.isSetTag_ids()) {
          {
            oprot.writeI32(struct.tag_ids.size());
            for (int _iter113 : struct.tag_ids)
            {
              oprot.writeI32(_iter113);
            }
          }
        }
        if (struct.isSetCompany_id()) {
          oprot.writeI32(struct.company_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchNewAddTalentTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.hr_id = iprot.readI32();
          struct.setHr_idIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list114 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list114.size);
            int _elem115;
            for (int _i116 = 0; _i116 < _list114.size; ++_i116)
            {
              _elem115 = iprot.readI32();
              struct.user_ids.add(_elem115);
            }
          }
          struct.setUser_idsIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.tag_ids = new java.util.ArrayList<java.lang.Integer>(_list117.size);
            int _elem118;
            for (int _i119 = 0; _i119 < _list117.size; ++_i119)
            {
              _elem118 = iprot.readI32();
              struct.tag_ids.add(_elem118);
            }
          }
          struct.setTag_idsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.company_id = iprot.readI32();
          struct.setCompany_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class batchNewAddTalentTag_result implements org.apache.thrift.TBase<batchNewAddTalentTag_result, batchNewAddTalentTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchNewAddTalentTag_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchNewAddTalentTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchNewAddTalentTag_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchNewAddTalentTag_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.Response success; // required
    public com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchNewAddTalentTag_result.class, metaDataMap);
    }

    public batchNewAddTalentTag_result() {
    }

    public batchNewAddTalentTag_result(
            com.moseeker.thrift.gen.common.struct.Response success,
            com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchNewAddTalentTag_result(batchNewAddTalentTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public batchNewAddTalentTag_result deepCopy() {
      return new batchNewAddTalentTag_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public batchNewAddTalentTag_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public batchNewAddTalentTag_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
          }
          break;

        case E:
          if (value == null) {
            unsetE();
          } else {
            setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

        case E:
          return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
        case E:
          return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof batchNewAddTalentTag_result)
        return this.equals((batchNewAddTalentTag_result)that);
      return false;
    }

    public boolean equals(batchNewAddTalentTag_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(batchNewAddTalentTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("batchNewAddTalentTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchNewAddTalentTag_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public batchNewAddTalentTag_resultStandardScheme getScheme() {
        return new batchNewAddTalentTag_resultStandardScheme();
      }
    }

    private static class batchNewAddTalentTag_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchNewAddTalentTag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchNewAddTalentTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchNewAddTalentTag_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchNewAddTalentTag_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public batchNewAddTalentTag_resultTupleScheme getScheme() {
        return new batchNewAddTalentTag_resultTupleScheme();
      }
    }

    private static class batchNewAddTalentTag_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchNewAddTalentTag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchNewAddTalentTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchNewAddTalentTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getTalentStat_args implements org.apache.thrift.TBase<getTalentStat_args, getTalentStat_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTalentStat_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTalentStat_args");

    private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTalentStat_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTalentStat_argsTupleSchemeFactory();

    public int hr_id; // required
    public int company_id; // required
    public int type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HR_ID((short)1, "hr_id"),
      COMPANY_ID((short)2, "company_id"),
      TYPE((short)3, "type");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HR_ID
            return HR_ID;
          case 2: // COMPANY_ID
            return COMPANY_ID;
          case 3: // TYPE
            return TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HR_ID_ISSET_ID = 0;
    private static final int __COMPANY_ID_ISSET_ID = 1;
    private static final int __TYPE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTalentStat_args.class, metaDataMap);
    }

    public getTalentStat_args() {
    }

    public getTalentStat_args(
            int hr_id,
            int company_id,
            int type)
    {
      this();
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      this.company_id = company_id;
      setCompany_idIsSet(true);
      this.type = type;
      setTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTalentStat_args(getTalentStat_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.hr_id = other.hr_id;
      this.company_id = other.company_id;
      this.type = other.type;
    }

    public getTalentStat_args deepCopy() {
      return new getTalentStat_args(this);
    }

    @Override
    public void clear() {
      setHr_idIsSet(false);
      this.hr_id = 0;
      setCompany_idIsSet(false);
      this.company_id = 0;
      setTypeIsSet(false);
      this.type = 0;
    }

    public int getHr_id() {
      return this.hr_id;
    }

    public getTalentStat_args setHr_id(int hr_id) {
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      return this;
    }

    public void unsetHr_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
    public boolean isSetHr_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    public void setHr_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
    }

    public int getCompany_id() {
      return this.company_id;
    }

    public getTalentStat_args setCompany_id(int company_id) {
      this.company_id = company_id;
      setCompany_idIsSet(true);
      return this;
    }

    public void unsetCompany_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCompany_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    public void setCompany_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
    }

    public int getType() {
      return this.type;
    }

    public getTalentStat_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case HR_ID:
          if (value == null) {
            unsetHr_id();
          } else {
            setHr_id((java.lang.Integer)value);
          }
          break;

        case COMPANY_ID:
          if (value == null) {
            unsetCompany_id();
          } else {
            setCompany_id((java.lang.Integer)value);
          }
          break;

        case TYPE:
          if (value == null) {
            unsetType();
          } else {
            setType((java.lang.Integer)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case HR_ID:
          return getHr_id();

        case COMPANY_ID:
          return getCompany_id();

        case TYPE:
          return getType();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case HR_ID:
          return isSetHr_id();
        case COMPANY_ID:
          return isSetCompany_id();
        case TYPE:
          return isSetType();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getTalentStat_args)
        return this.equals((getTalentStat_args)that);
      return false;
    }

    public boolean equals(getTalentStat_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hr_id = true;
      boolean that_present_hr_id = true;
      if (this_present_hr_id || that_present_hr_id) {
        if (!(this_present_hr_id && that_present_hr_id))
          return false;
        if (this.hr_id != that.hr_id)
          return false;
      }

      boolean this_present_company_id = true;
      boolean that_present_company_id = true;
      if (this_present_company_id || that_present_company_id) {
        if (!(this_present_company_id && that_present_company_id))
          return false;
        if (this.company_id != that.company_id)
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + hr_id;

      hashCode = hashCode * 8191 + company_id;

      hashCode = hashCode * 8191 + type;

      return hashCode;
    }

    @Override
    public int compareTo(getTalentStat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHr_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompany_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getTalentStat_args(");
      boolean first = true;

      sb.append("hr_id:");
      sb.append(this.hr_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("company_id:");
      sb.append(this.company_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTalentStat_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTalentStat_argsStandardScheme getScheme() {
        return new getTalentStat_argsStandardScheme();
      }
    }

    private static class getTalentStat_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTalentStat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTalentStat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // HR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hr_id = iprot.readI32();
                struct.setHr_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMPANY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.company_id = iprot.readI32();
                struct.setCompany_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTalentStat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HR_ID_FIELD_DESC);
        oprot.writeI32(struct.hr_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.company_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTalentStat_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTalentStat_argsTupleScheme getScheme() {
        return new getTalentStat_argsTupleScheme();
      }
    }

    private static class getTalentStat_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTalentStat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTalentStat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHr_id()) {
          optionals.set(0);
        }
        if (struct.isSetCompany_id()) {
          optionals.set(1);
        }
        if (struct.isSetType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetHr_id()) {
          oprot.writeI32(struct.hr_id);
        }
        if (struct.isSetCompany_id()) {
          oprot.writeI32(struct.company_id);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTalentStat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.hr_id = iprot.readI32();
          struct.setHr_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.company_id = iprot.readI32();
          struct.setCompany_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getTalentStat_result implements org.apache.thrift.TBase<getTalentStat_result, getTalentStat_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTalentStat_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTalentStat_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTalentStat_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTalentStat_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.Response success; // required
    public com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTalentStat_result.class, metaDataMap);
    }

    public getTalentStat_result() {
    }

    public getTalentStat_result(
            com.moseeker.thrift.gen.common.struct.Response success,
            com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTalentStat_result(getTalentStat_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public getTalentStat_result deepCopy() {
      return new getTalentStat_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public getTalentStat_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public getTalentStat_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
          }
          break;

        case E:
          if (value == null) {
            unsetE();
          } else {
            setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

        case E:
          return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
        case E:
          return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getTalentStat_result)
        return this.equals((getTalentStat_result)that);
      return false;
    }

    public boolean equals(getTalentStat_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getTalentStat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getTalentStat_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTalentStat_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTalentStat_resultStandardScheme getScheme() {
        return new getTalentStat_resultStandardScheme();
      }
    }

    private static class getTalentStat_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTalentStat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTalentStat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTalentStat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTalentStat_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTalentStat_resultTupleScheme getScheme() {
        return new getTalentStat_resultTupleScheme();
      }
    }

    private static class getTalentStat_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTalentStat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTalentStat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTalentStat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCompanyUserPublic_args implements org.apache.thrift.TBase<getCompanyUserPublic_args, getCompanyUserPublic_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCompanyUserPublic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompanyUserPublic_args");

    private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCompanyUserPublic_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCompanyUserPublic_argsTupleSchemeFactory();

    public int hr_id; // required
    public int company_id; // required
    public int user_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HR_ID((short)1, "hr_id"),
      COMPANY_ID((short)2, "company_id"),
      USER_ID((short)3, "user_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HR_ID
            return HR_ID;
          case 2: // COMPANY_ID
            return COMPANY_ID;
          case 3: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HR_ID_ISSET_ID = 0;
    private static final int __COMPANY_ID_ISSET_ID = 1;
    private static final int __USER_ID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompanyUserPublic_args.class, metaDataMap);
    }

    public getCompanyUserPublic_args() {
    }

    public getCompanyUserPublic_args(
            int hr_id,
            int company_id,
            int user_id)
    {
      this();
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      this.company_id = company_id;
      setCompany_idIsSet(true);
      this.user_id = user_id;
      setUser_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompanyUserPublic_args(getCompanyUserPublic_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.hr_id = other.hr_id;
      this.company_id = other.company_id;
      this.user_id = other.user_id;
    }

    public getCompanyUserPublic_args deepCopy() {
      return new getCompanyUserPublic_args(this);
    }

    @Override
    public void clear() {
      setHr_idIsSet(false);
      this.hr_id = 0;
      setCompany_idIsSet(false);
      this.company_id = 0;
      setUser_idIsSet(false);
      this.user_id = 0;
    }

    public int getHr_id() {
      return this.hr_id;
    }

    public getCompanyUserPublic_args setHr_id(int hr_id) {
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      return this;
    }

    public void unsetHr_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
    public boolean isSetHr_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    public void setHr_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
    }

    public int getCompany_id() {
      return this.company_id;
    }

    public getCompanyUserPublic_args setCompany_id(int company_id) {
      this.company_id = company_id;
      setCompany_idIsSet(true);
      return this;
    }

    public void unsetCompany_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCompany_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    public void setCompany_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
    }

    public int getUser_id() {
      return this.user_id;
    }

    public getCompanyUserPublic_args setUser_id(int user_id) {
      this.user_id = user_id;
      setUser_idIsSet(true);
      return this;
    }

    public void unsetUser_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USER_ID_ISSET_ID);
    }

    /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USER_ID_ISSET_ID);
    }

    public void setUser_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USER_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case HR_ID:
          if (value == null) {
            unsetHr_id();
          } else {
            setHr_id((java.lang.Integer)value);
          }
          break;

        case COMPANY_ID:
          if (value == null) {
            unsetCompany_id();
          } else {
            setCompany_id((java.lang.Integer)value);
          }
          break;

        case USER_ID:
          if (value == null) {
            unsetUser_id();
          } else {
            setUser_id((java.lang.Integer)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case HR_ID:
          return getHr_id();

        case COMPANY_ID:
          return getCompany_id();

        case USER_ID:
          return getUser_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case HR_ID:
          return isSetHr_id();
        case COMPANY_ID:
          return isSetCompany_id();
        case USER_ID:
          return isSetUser_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCompanyUserPublic_args)
        return this.equals((getCompanyUserPublic_args)that);
      return false;
    }

    public boolean equals(getCompanyUserPublic_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hr_id = true;
      boolean that_present_hr_id = true;
      if (this_present_hr_id || that_present_hr_id) {
        if (!(this_present_hr_id && that_present_hr_id))
          return false;
        if (this.hr_id != that.hr_id)
          return false;
      }

      boolean this_present_company_id = true;
      boolean that_present_company_id = true;
      if (this_present_company_id || that_present_company_id) {
        if (!(this_present_company_id && that_present_company_id))
          return false;
        if (this.company_id != that.company_id)
          return false;
      }

      boolean this_present_user_id = true;
      boolean that_present_user_id = true;
      if (this_present_user_id || that_present_user_id) {
        if (!(this_present_user_id && that_present_user_id))
          return false;
        if (this.user_id != that.user_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + hr_id;

      hashCode = hashCode * 8191 + company_id;

      hashCode = hashCode * 8191 + user_id;

      return hashCode;
    }

    @Override
    public int compareTo(getCompanyUserPublic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHr_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompany_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUser_id()).compareTo(other.isSetUser_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, other.user_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCompanyUserPublic_args(");
      boolean first = true;

      sb.append("hr_id:");
      sb.append(this.hr_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("company_id:");
      sb.append(this.company_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_id:");
      sb.append(this.user_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCompanyUserPublic_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCompanyUserPublic_argsStandardScheme getScheme() {
        return new getCompanyUserPublic_argsStandardScheme();
      }
    }

    private static class getCompanyUserPublic_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCompanyUserPublic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCompanyUserPublic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // HR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hr_id = iprot.readI32();
                struct.setHr_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMPANY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.company_id = iprot.readI32();
                struct.setCompany_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.user_id = iprot.readI32();
                struct.setUser_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCompanyUserPublic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HR_ID_FIELD_DESC);
        oprot.writeI32(struct.hr_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.company_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.user_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCompanyUserPublic_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCompanyUserPublic_argsTupleScheme getScheme() {
        return new getCompanyUserPublic_argsTupleScheme();
      }
    }

    private static class getCompanyUserPublic_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCompanyUserPublic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCompanyUserPublic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHr_id()) {
          optionals.set(0);
        }
        if (struct.isSetCompany_id()) {
          optionals.set(1);
        }
        if (struct.isSetUser_id()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetHr_id()) {
          oprot.writeI32(struct.hr_id);
        }
        if (struct.isSetCompany_id()) {
          oprot.writeI32(struct.company_id);
        }
        if (struct.isSetUser_id()) {
          oprot.writeI32(struct.user_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCompanyUserPublic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.hr_id = iprot.readI32();
          struct.setHr_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.company_id = iprot.readI32();
          struct.setCompany_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.user_id = iprot.readI32();
          struct.setUser_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCompanyUserPublic_result implements org.apache.thrift.TBase<getCompanyUserPublic_result, getCompanyUserPublic_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCompanyUserPublic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompanyUserPublic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCompanyUserPublic_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCompanyUserPublic_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.Response success; // required
    public com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompanyUserPublic_result.class, metaDataMap);
    }

    public getCompanyUserPublic_result() {
    }

    public getCompanyUserPublic_result(
            com.moseeker.thrift.gen.common.struct.Response success,
            com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompanyUserPublic_result(getCompanyUserPublic_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public getCompanyUserPublic_result deepCopy() {
      return new getCompanyUserPublic_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public getCompanyUserPublic_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public getCompanyUserPublic_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
          }
          break;

        case E:
          if (value == null) {
            unsetE();
          } else {
            setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

        case E:
          return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
        case E:
          return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCompanyUserPublic_result)
        return this.equals((getCompanyUserPublic_result)that);
      return false;
    }

    public boolean equals(getCompanyUserPublic_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCompanyUserPublic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCompanyUserPublic_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCompanyUserPublic_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCompanyUserPublic_resultStandardScheme getScheme() {
        return new getCompanyUserPublic_resultStandardScheme();
      }
    }

    private static class getCompanyUserPublic_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCompanyUserPublic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCompanyUserPublic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCompanyUserPublic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCompanyUserPublic_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCompanyUserPublic_resultTupleScheme getScheme() {
        return new getCompanyUserPublic_resultTupleScheme();
      }
    }

    private static class getCompanyUserPublic_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCompanyUserPublic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCompanyUserPublic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCompanyUserPublic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCompanyTalent_args implements org.apache.thrift.TBase<getCompanyTalent_args, getCompanyTalent_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCompanyTalent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompanyTalent_args");

    private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCompanyTalent_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCompanyTalent_argsTupleSchemeFactory();

    public int hr_id; // required
    public int company_id; // required
    public int user_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HR_ID((short)1, "hr_id"),
      COMPANY_ID((short)2, "company_id"),
      USER_ID((short)3, "user_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HR_ID
            return HR_ID;
          case 2: // COMPANY_ID
            return COMPANY_ID;
          case 3: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HR_ID_ISSET_ID = 0;
    private static final int __COMPANY_ID_ISSET_ID = 1;
    private static final int __USER_ID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompanyTalent_args.class, metaDataMap);
    }

    public getCompanyTalent_args() {
    }

    public getCompanyTalent_args(
            int hr_id,
            int company_id,
            int user_id)
    {
      this();
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      this.company_id = company_id;
      setCompany_idIsSet(true);
      this.user_id = user_id;
      setUser_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompanyTalent_args(getCompanyTalent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.hr_id = other.hr_id;
      this.company_id = other.company_id;
      this.user_id = other.user_id;
    }

    public getCompanyTalent_args deepCopy() {
      return new getCompanyTalent_args(this);
    }

    @Override
    public void clear() {
      setHr_idIsSet(false);
      this.hr_id = 0;
      setCompany_idIsSet(false);
      this.company_id = 0;
      setUser_idIsSet(false);
      this.user_id = 0;
    }

    public int getHr_id() {
      return this.hr_id;
    }

    public getCompanyTalent_args setHr_id(int hr_id) {
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      return this;
    }

    public void unsetHr_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
    public boolean isSetHr_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    public void setHr_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
    }

    public int getCompany_id() {
      return this.company_id;
    }

    public getCompanyTalent_args setCompany_id(int company_id) {
      this.company_id = company_id;
      setCompany_idIsSet(true);
      return this;
    }

    public void unsetCompany_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCompany_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    public void setCompany_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
    }

    public int getUser_id() {
      return this.user_id;
    }

    public getCompanyTalent_args setUser_id(int user_id) {
      this.user_id = user_id;
      setUser_idIsSet(true);
      return this;
    }

    public void unsetUser_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USER_ID_ISSET_ID);
    }

    /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USER_ID_ISSET_ID);
    }

    public void setUser_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USER_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case HR_ID:
          if (value == null) {
            unsetHr_id();
          } else {
            setHr_id((java.lang.Integer)value);
          }
          break;

        case COMPANY_ID:
          if (value == null) {
            unsetCompany_id();
          } else {
            setCompany_id((java.lang.Integer)value);
          }
          break;

        case USER_ID:
          if (value == null) {
            unsetUser_id();
          } else {
            setUser_id((java.lang.Integer)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case HR_ID:
          return getHr_id();

        case COMPANY_ID:
          return getCompany_id();

        case USER_ID:
          return getUser_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case HR_ID:
          return isSetHr_id();
        case COMPANY_ID:
          return isSetCompany_id();
        case USER_ID:
          return isSetUser_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCompanyTalent_args)
        return this.equals((getCompanyTalent_args)that);
      return false;
    }

    public boolean equals(getCompanyTalent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hr_id = true;
      boolean that_present_hr_id = true;
      if (this_present_hr_id || that_present_hr_id) {
        if (!(this_present_hr_id && that_present_hr_id))
          return false;
        if (this.hr_id != that.hr_id)
          return false;
      }

      boolean this_present_company_id = true;
      boolean that_present_company_id = true;
      if (this_present_company_id || that_present_company_id) {
        if (!(this_present_company_id && that_present_company_id))
          return false;
        if (this.company_id != that.company_id)
          return false;
      }

      boolean this_present_user_id = true;
      boolean that_present_user_id = true;
      if (this_present_user_id || that_present_user_id) {
        if (!(this_present_user_id && that_present_user_id))
          return false;
        if (this.user_id != that.user_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + hr_id;

      hashCode = hashCode * 8191 + company_id;

      hashCode = hashCode * 8191 + user_id;

      return hashCode;
    }

    @Override
    public int compareTo(getCompanyTalent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHr_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompany_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUser_id()).compareTo(other.isSetUser_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, other.user_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCompanyTalent_args(");
      boolean first = true;

      sb.append("hr_id:");
      sb.append(this.hr_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("company_id:");
      sb.append(this.company_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_id:");
      sb.append(this.user_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCompanyTalent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCompanyTalent_argsStandardScheme getScheme() {
        return new getCompanyTalent_argsStandardScheme();
      }
    }

    private static class getCompanyTalent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCompanyTalent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCompanyTalent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // HR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hr_id = iprot.readI32();
                struct.setHr_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMPANY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.company_id = iprot.readI32();
                struct.setCompany_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.user_id = iprot.readI32();
                struct.setUser_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCompanyTalent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HR_ID_FIELD_DESC);
        oprot.writeI32(struct.hr_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.company_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.user_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCompanyTalent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCompanyTalent_argsTupleScheme getScheme() {
        return new getCompanyTalent_argsTupleScheme();
      }
    }

    private static class getCompanyTalent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCompanyTalent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCompanyTalent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHr_id()) {
          optionals.set(0);
        }
        if (struct.isSetCompany_id()) {
          optionals.set(1);
        }
        if (struct.isSetUser_id()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetHr_id()) {
          oprot.writeI32(struct.hr_id);
        }
        if (struct.isSetCompany_id()) {
          oprot.writeI32(struct.company_id);
        }
        if (struct.isSetUser_id()) {
          oprot.writeI32(struct.user_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCompanyTalent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.hr_id = iprot.readI32();
          struct.setHr_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.company_id = iprot.readI32();
          struct.setCompany_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.user_id = iprot.readI32();
          struct.setUser_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCompanyTalent_result implements org.apache.thrift.TBase<getCompanyTalent_result, getCompanyTalent_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCompanyTalent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompanyTalent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCompanyTalent_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCompanyTalent_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.Response success; // required
    public com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompanyTalent_result.class, metaDataMap);
    }

    public getCompanyTalent_result() {
    }

    public getCompanyTalent_result(
            com.moseeker.thrift.gen.common.struct.Response success,
            com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompanyTalent_result(getCompanyTalent_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public getCompanyTalent_result deepCopy() {
      return new getCompanyTalent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public getCompanyTalent_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public getCompanyTalent_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
          }
          break;

        case E:
          if (value == null) {
            unsetE();
          } else {
            setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

        case E:
          return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
        case E:
          return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCompanyTalent_result)
        return this.equals((getCompanyTalent_result)that);
      return false;
    }

    public boolean equals(getCompanyTalent_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCompanyTalent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCompanyTalent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCompanyTalent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCompanyTalent_resultStandardScheme getScheme() {
        return new getCompanyTalent_resultStandardScheme();
      }
    }

    private static class getCompanyTalent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCompanyTalent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCompanyTalent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCompanyTalent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCompanyTalent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCompanyTalent_resultTupleScheme getScheme() {
        return new getCompanyTalent_resultTupleScheme();
      }
    }

    private static class getCompanyTalent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCompanyTalent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCompanyTalent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCompanyTalent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getHrUserTag_args implements org.apache.thrift.TBase<getHrUserTag_args, getHrUserTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHrUserTag_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHrUserTag_args");

    private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getHrUserTag_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getHrUserTag_argsTupleSchemeFactory();

    public int hr_id; // required
    public int company_id; // required
    public int user_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HR_ID((short)1, "hr_id"),
      COMPANY_ID((short)2, "company_id"),
      USER_ID((short)3, "user_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HR_ID
            return HR_ID;
          case 2: // COMPANY_ID
            return COMPANY_ID;
          case 3: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HR_ID_ISSET_ID = 0;
    private static final int __COMPANY_ID_ISSET_ID = 1;
    private static final int __USER_ID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHrUserTag_args.class, metaDataMap);
    }

    public getHrUserTag_args() {
    }

    public getHrUserTag_args(
            int hr_id,
            int company_id,
            int user_id)
    {
      this();
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      this.company_id = company_id;
      setCompany_idIsSet(true);
      this.user_id = user_id;
      setUser_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHrUserTag_args(getHrUserTag_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.hr_id = other.hr_id;
      this.company_id = other.company_id;
      this.user_id = other.user_id;
    }

    public getHrUserTag_args deepCopy() {
      return new getHrUserTag_args(this);
    }

    @Override
    public void clear() {
      setHr_idIsSet(false);
      this.hr_id = 0;
      setCompany_idIsSet(false);
      this.company_id = 0;
      setUser_idIsSet(false);
      this.user_id = 0;
    }

    public int getHr_id() {
      return this.hr_id;
    }

    public getHrUserTag_args setHr_id(int hr_id) {
      this.hr_id = hr_id;
      setHr_idIsSet(true);
      return this;
    }

    public void unsetHr_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
    public boolean isSetHr_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
    }

    public void setHr_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
    }

    public int getCompany_id() {
      return this.company_id;
    }

    public getHrUserTag_args setCompany_id(int company_id) {
      this.company_id = company_id;
      setCompany_idIsSet(true);
      return this;
    }

    public void unsetCompany_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCompany_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
    }

    public void setCompany_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
    }

    public int getUser_id() {
      return this.user_id;
    }

    public getHrUserTag_args setUser_id(int user_id) {
      this.user_id = user_id;
      setUser_idIsSet(true);
      return this;
    }

    public void unsetUser_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USER_ID_ISSET_ID);
    }

    /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USER_ID_ISSET_ID);
    }

    public void setUser_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USER_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case HR_ID:
          if (value == null) {
            unsetHr_id();
          } else {
            setHr_id((java.lang.Integer)value);
          }
          break;

        case COMPANY_ID:
          if (value == null) {
            unsetCompany_id();
          } else {
            setCompany_id((java.lang.Integer)value);
          }
          break;

        case USER_ID:
          if (value == null) {
            unsetUser_id();
          } else {
            setUser_id((java.lang.Integer)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case HR_ID:
          return getHr_id();

        case COMPANY_ID:
          return getCompany_id();

        case USER_ID:
          return getUser_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case HR_ID:
          return isSetHr_id();
        case COMPANY_ID:
          return isSetCompany_id();
        case USER_ID:
          return isSetUser_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getHrUserTag_args)
        return this.equals((getHrUserTag_args)that);
      return false;
    }

    public boolean equals(getHrUserTag_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hr_id = true;
      boolean that_present_hr_id = true;
      if (this_present_hr_id || that_present_hr_id) {
        if (!(this_present_hr_id && that_present_hr_id))
          return false;
        if (this.hr_id != that.hr_id)
          return false;
      }

      boolean this_present_company_id = true;
      boolean that_present_company_id = true;
      if (this_present_company_id || that_present_company_id) {
        if (!(this_present_company_id && that_present_company_id))
          return false;
        if (this.company_id != that.company_id)
          return false;
      }

      boolean this_present_user_id = true;
      boolean that_present_user_id = true;
      if (this_present_user_id || that_present_user_id) {
        if (!(this_present_user_id && that_present_user_id))
          return false;
        if (this.user_id != that.user_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + hr_id;

      hashCode = hashCode * 8191 + company_id;

      hashCode = hashCode * 8191 + user_id;

      return hashCode;
    }

    @Override
    public int compareTo(getHrUserTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHr_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompany_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUser_id()).compareTo(other.isSetUser_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, other.user_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getHrUserTag_args(");
      boolean first = true;

      sb.append("hr_id:");
      sb.append(this.hr_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("company_id:");
      sb.append(this.company_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_id:");
      sb.append(this.user_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHrUserTag_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getHrUserTag_argsStandardScheme getScheme() {
        return new getHrUserTag_argsStandardScheme();
      }
    }

    private static class getHrUserTag_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getHrUserTag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHrUserTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // HR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hr_id = iprot.readI32();
                struct.setHr_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMPANY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.company_id = iprot.readI32();
                struct.setCompany_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.user_id = iprot.readI32();
                struct.setUser_idIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHrUserTag_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HR_ID_FIELD_DESC);
        oprot.writeI32(struct.hr_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.company_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.user_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHrUserTag_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getHrUserTag_argsTupleScheme getScheme() {
        return new getHrUserTag_argsTupleScheme();
      }
    }

    private static class getHrUserTag_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getHrUserTag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHrUserTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHr_id()) {
          optionals.set(0);
        }
        if (struct.isSetCompany_id()) {
          optionals.set(1);
        }
        if (struct.isSetUser_id()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetHr_id()) {
          oprot.writeI32(struct.hr_id);
        }
        if (struct.isSetCompany_id()) {
          oprot.writeI32(struct.company_id);
        }
        if (struct.isSetUser_id()) {
          oprot.writeI32(struct.user_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHrUserTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.hr_id = iprot.readI32();
          struct.setHr_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.company_id = iprot.readI32();
          struct.setCompany_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.user_id = iprot.readI32();
          struct.setUser_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getHrUserTag_result implements org.apache.thrift.TBase<getHrUserTag_result, getHrUserTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHrUserTag_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHrUserTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getHrUserTag_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getHrUserTag_resultTupleSchemeFactory();

    public com.moseeker.thrift.gen.common.struct.Response success; // required
    public com.moseeker.thrift.gen.common.struct.BIZException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHrUserTag_result.class, metaDataMap);
    }

    public getHrUserTag_result() {
    }

    public getHrUserTag_result(
            com.moseeker.thrift.gen.common.struct.Response success,
            com.moseeker.thrift.gen.common.struct.BIZException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHrUserTag_result(getHrUserTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
      }
    }

    public getHrUserTag_result deepCopy() {
      return new getHrUserTag_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
      return this.success;
    }

    public getHrUserTag_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.moseeker.thrift.gen.common.struct.BIZException getE() {
      return this.e;
    }

    public getHrUserTag_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
          }
          break;

        case E:
          if (value == null) {
            unsetE();
          } else {
            setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

        case E:
          return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
        case E:
          return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getHrUserTag_result)
        return this.equals((getHrUserTag_result)that);
      return false;
    }

    public boolean equals(getHrUserTag_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getHrUserTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getHrUserTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHrUserTag_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getHrUserTag_resultStandardScheme getScheme() {
        return new getHrUserTag_resultStandardScheme();
      }
    }

    private static class getHrUserTag_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getHrUserTag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHrUserTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHrUserTag_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHrUserTag_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getHrUserTag_resultTupleScheme getScheme() {
        return new getHrUserTag_resultTupleScheme();
      }
    }

    private static class getHrUserTag_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getHrUserTag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHrUserTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHrUserTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.moseeker.thrift.gen.common.struct.Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
