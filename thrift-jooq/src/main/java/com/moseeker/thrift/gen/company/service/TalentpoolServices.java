/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.company.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-11-20")
public class TalentpoolServices {

    public interface Iface {

        public com.moseeker.thrift.gen.common.struct.Response upsertTalentPoolApp(int hrId, int companyId, int type) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getTalentAllComment(int hr_id, int company_id, int user_id, int page_number, int page_size) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getHrTag(int hr_id, int company_id, int page_number, int page_size) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response batchAddTalent(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id, int isGdpr) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response batchCancelTalent(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response hrAddTag(int hr_id, int company_id, java.lang.String name) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response hrDelTag(int hr_id, int company_id, int tag_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response hrUpdateTag(int hr_id, int company_id, int tag_id, java.lang.String name) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response batchCancleTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response batchAddTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response hrAddComment(int hr_id, int company_id, int user_id, java.lang.String content) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response hrDelComment(int hr_id, int company_id, int comment_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response batchAddPublicTalent(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids, int isGdpr) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response batchCancelPublicTalent(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getCompanyPulicTalent(int hr_id, int company_id, int page_number, int page_size) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response batchNewAddTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getTalentStat(int hr_id, int company_id, int type) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getCompanyUserPublic(int hr_id, int company_id, int user_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getCompanyTalent(int hr_id, int company_id, int user_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getHrUserTag(int hr_id, int company_id, int user_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getUserOrigin(int hr_id, int company_id, int user_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getTalentAndPublicHr(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getPositionOrCompanyPast(int company_id, int type, int flag) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response addPositionOrCompanyPast(int company_id, int type, int flag, java.lang.String name) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getTalentTagList(int hr_id, int company_id, int page_number, int page_size) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getProfileFilterList(int hr_id, int company_id, int page_number, int page_size) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response handerProfileFilterByIds(int hr_id, int company_id, int disable, java.util.List<java.lang.Integer> filter_ids) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getProfileFilterInfo(int hr_id, int company_id, int filter_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response addProfileFilter(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm, java.util.List<java.lang.Integer> positionIdList, int hr_id, int position_total) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response updateProfileFilter(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm, java.util.List<java.lang.Integer> positionIdList, int hr_id, int position_total) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public void handlerCompanyTagAndProfile(java.util.Set<java.lang.Integer> userid_list, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getTalentCountByPositionFilter(int hr_id, int company_id, int position_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getEmailBalance(int hr_id, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getEmailTemplateList(int hr_id, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getEmailInfo(int hr_id, int company_id, int type) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response updateCompanyEmailInfo(int hr_id, int company_id, int type, int disable, java.lang.String context, java.lang.String inscribe) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.company.struct.EmailAccountForm fetchEmailAccounts(int companyId, java.lang.String companyName, int pageNumber, int pageSize) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.company.struct.EmailAccountConsumptionForm fetchEmailAccountConsumption(int companyId, byte type, int pageNumber, int pageSize, java.lang.String startDate, java.lang.String endDate) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public int rechargeEmailAccount(int companyId, int lost) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public void updateEmailAccountRechargeValue(int id, int lost) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public void addAllTalent(int hrId, java.util.Map<java.lang.String,java.lang.String> params, int companyId, int isGdpr) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public void addAllTalentTag(java.util.Map<java.lang.String,java.lang.String> params, java.util.List<java.lang.Integer> tagList, int companyId, int hrId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public void addAllTalentPublic(int hrId, java.util.Map<java.lang.String,java.lang.String> params, int companyId, int isGdpr) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public void addAllTalentPrivate(int hrId, java.util.Map<java.lang.String,java.lang.String> params, int companyId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public void cancleAllTalent(int hrId, java.util.Map<java.lang.String,java.lang.String> params, int companyId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response updateCompanyEmailBalance(int company_id, int balance) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response sendInviteEmail(java.util.Map<java.lang.String,java.lang.String> params, java.util.List<java.lang.Integer> userIdList, java.util.List<java.lang.Integer> positionIdList, int companyId, int hrId, int flag, int positionFlag) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response sendResumeEmail(java.util.Map<java.lang.String,java.lang.String> params, java.util.List<java.lang.Integer> userIdList, java.util.List<java.lang.Integer> idList, int companyId, int hrId, int flag, java.util.List<java.lang.String> emailList) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response sendPositionInviteEmail(int hrId, int positionId, int companyId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

        public com.moseeker.thrift.gen.common.struct.Response getCompanyCommentByUserIdList(int companyId, java.util.List<java.lang.Integer> userIdList) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void upsertTalentPoolApp(int hrId, int companyId, int type, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getTalentAllComment(int hr_id, int company_id, int user_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getHrTag(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void batchAddTalent(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id, int isGdpr, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void batchCancelTalent(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void hrAddTag(int hr_id, int company_id, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void hrDelTag(int hr_id, int company_id, int tag_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void hrUpdateTag(int hr_id, int company_id, int tag_id, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void batchCancleTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void batchAddTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void hrAddComment(int hr_id, int company_id, int user_id, java.lang.String content, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void hrDelComment(int hr_id, int company_id, int comment_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void batchAddPublicTalent(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids, int isGdpr, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void batchCancelPublicTalent(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getCompanyPulicTalent(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void batchNewAddTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getTalentStat(int hr_id, int company_id, int type, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getCompanyUserPublic(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getCompanyTalent(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getHrUserTag(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getUserOrigin(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getTalentAndPublicHr(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getPositionOrCompanyPast(int company_id, int type, int flag, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void addPositionOrCompanyPast(int company_id, int type, int flag, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getTalentTagList(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getProfileFilterList(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void handerProfileFilterByIds(int hr_id, int company_id, int disable, java.util.List<java.lang.Integer> filter_ids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getProfileFilterInfo(int hr_id, int company_id, int filter_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void addProfileFilter(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm, java.util.List<java.lang.Integer> positionIdList, int hr_id, int position_total, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void updateProfileFilter(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm, java.util.List<java.lang.Integer> positionIdList, int hr_id, int position_total, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void handlerCompanyTagAndProfile(java.util.Set<java.lang.Integer> userid_list, int company_id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void getTalentCountByPositionFilter(int hr_id, int company_id, int position_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getEmailBalance(int hr_id, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getEmailTemplateList(int hr_id, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getEmailInfo(int hr_id, int company_id, int type, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void updateCompanyEmailInfo(int hr_id, int company_id, int type, int disable, java.lang.String context, java.lang.String inscribe, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void fetchEmailAccounts(int companyId, java.lang.String companyName, int pageNumber, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.company.struct.EmailAccountForm> resultHandler) throws org.apache.thrift.TException;

        public void fetchEmailAccountConsumption(int companyId, byte type, int pageNumber, int pageSize, java.lang.String startDate, java.lang.String endDate, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.company.struct.EmailAccountConsumptionForm> resultHandler) throws org.apache.thrift.TException;

        public void rechargeEmailAccount(int companyId, int lost, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

        public void updateEmailAccountRechargeValue(int id, int lost, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void addAllTalent(int hrId, java.util.Map<java.lang.String,java.lang.String> params, int companyId, int isGdpr, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void addAllTalentTag(java.util.Map<java.lang.String,java.lang.String> params, java.util.List<java.lang.Integer> tagList, int companyId, int hrId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void addAllTalentPublic(int hrId, java.util.Map<java.lang.String,java.lang.String> params, int companyId, int isGdpr, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void addAllTalentPrivate(int hrId, java.util.Map<java.lang.String,java.lang.String> params, int companyId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void cancleAllTalent(int hrId, java.util.Map<java.lang.String,java.lang.String> params, int companyId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void updateCompanyEmailBalance(int company_id, int balance, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void sendInviteEmail(java.util.Map<java.lang.String,java.lang.String> params, java.util.List<java.lang.Integer> userIdList, java.util.List<java.lang.Integer> positionIdList, int companyId, int hrId, int flag, int positionFlag, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void sendResumeEmail(java.util.Map<java.lang.String,java.lang.String> params, java.util.List<java.lang.Integer> userIdList, java.util.List<java.lang.Integer> idList, int companyId, int hrId, int flag, java.util.List<java.lang.String> emailList, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void sendPositionInviteEmail(int hrId, int positionId, int companyId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

        public void getCompanyCommentByUserIdList(int companyId, java.util.List<java.lang.Integer> userIdList, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {}
            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }
            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot)
        {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public com.moseeker.thrift.gen.common.struct.Response upsertTalentPoolApp(int hrId, int companyId, int type) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_upsertTalentPoolApp(hrId, companyId, type);
            return recv_upsertTalentPoolApp();
        }

        public void send_upsertTalentPoolApp(int hrId, int companyId, int type) throws org.apache.thrift.TException
        {
            upsertTalentPoolApp_args args = new upsertTalentPoolApp_args();
            args.setHrId(hrId);
            args.setCompanyId(companyId);
            args.setType(type);
            sendBase("upsertTalentPoolApp", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_upsertTalentPoolApp() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            upsertTalentPoolApp_result result = new upsertTalentPoolApp_result();
            receiveBase(result, "upsertTalentPoolApp");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "upsertTalentPoolApp failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getTalentAllComment(int hr_id, int company_id, int user_id, int page_number, int page_size) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getTalentAllComment(hr_id, company_id, user_id, page_number, page_size);
            return recv_getTalentAllComment();
        }

        public void send_getTalentAllComment(int hr_id, int company_id, int user_id, int page_number, int page_size) throws org.apache.thrift.TException
        {
            getTalentAllComment_args args = new getTalentAllComment_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setUser_id(user_id);
            args.setPage_number(page_number);
            args.setPage_size(page_size);
            sendBase("getTalentAllComment", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getTalentAllComment() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getTalentAllComment_result result = new getTalentAllComment_result();
            receiveBase(result, "getTalentAllComment");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTalentAllComment failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getHrTag(int hr_id, int company_id, int page_number, int page_size) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getHrTag(hr_id, company_id, page_number, page_size);
            return recv_getHrTag();
        }

        public void send_getHrTag(int hr_id, int company_id, int page_number, int page_size) throws org.apache.thrift.TException
        {
            getHrTag_args args = new getHrTag_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setPage_number(page_number);
            args.setPage_size(page_size);
            sendBase("getHrTag", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getHrTag() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getHrTag_result result = new getHrTag_result();
            receiveBase(result, "getHrTag");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHrTag failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response batchAddTalent(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id, int isGdpr) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_batchAddTalent(hr_id, user_ids, company_id, isGdpr);
            return recv_batchAddTalent();
        }

        public void send_batchAddTalent(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id, int isGdpr) throws org.apache.thrift.TException
        {
            batchAddTalent_args args = new batchAddTalent_args();
            args.setHr_id(hr_id);
            args.setUser_ids(user_ids);
            args.setCompany_id(company_id);
            args.setIsGdpr(isGdpr);
            sendBase("batchAddTalent", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_batchAddTalent() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            batchAddTalent_result result = new batchAddTalent_result();
            receiveBase(result, "batchAddTalent");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchAddTalent failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response batchCancelTalent(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_batchCancelTalent(hr_id, user_ids, company_id);
            return recv_batchCancelTalent();
        }

        public void send_batchCancelTalent(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id) throws org.apache.thrift.TException
        {
            batchCancelTalent_args args = new batchCancelTalent_args();
            args.setHr_id(hr_id);
            args.setUser_ids(user_ids);
            args.setCompany_id(company_id);
            sendBase("batchCancelTalent", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_batchCancelTalent() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            batchCancelTalent_result result = new batchCancelTalent_result();
            receiveBase(result, "batchCancelTalent");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchCancelTalent failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response hrAddTag(int hr_id, int company_id, java.lang.String name) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_hrAddTag(hr_id, company_id, name);
            return recv_hrAddTag();
        }

        public void send_hrAddTag(int hr_id, int company_id, java.lang.String name) throws org.apache.thrift.TException
        {
            hrAddTag_args args = new hrAddTag_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setName(name);
            sendBase("hrAddTag", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_hrAddTag() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            hrAddTag_result result = new hrAddTag_result();
            receiveBase(result, "hrAddTag");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hrAddTag failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response hrDelTag(int hr_id, int company_id, int tag_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_hrDelTag(hr_id, company_id, tag_id);
            return recv_hrDelTag();
        }

        public void send_hrDelTag(int hr_id, int company_id, int tag_id) throws org.apache.thrift.TException
        {
            hrDelTag_args args = new hrDelTag_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setTag_id(tag_id);
            sendBase("hrDelTag", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_hrDelTag() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            hrDelTag_result result = new hrDelTag_result();
            receiveBase(result, "hrDelTag");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hrDelTag failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response hrUpdateTag(int hr_id, int company_id, int tag_id, java.lang.String name) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_hrUpdateTag(hr_id, company_id, tag_id, name);
            return recv_hrUpdateTag();
        }

        public void send_hrUpdateTag(int hr_id, int company_id, int tag_id, java.lang.String name) throws org.apache.thrift.TException
        {
            hrUpdateTag_args args = new hrUpdateTag_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setTag_id(tag_id);
            args.setName(name);
            sendBase("hrUpdateTag", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_hrUpdateTag() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            hrUpdateTag_result result = new hrUpdateTag_result();
            receiveBase(result, "hrUpdateTag");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hrUpdateTag failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response batchCancleTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_batchCancleTalentTag(hr_id, user_ids, tag_ids, company_id);
            return recv_batchCancleTalentTag();
        }

        public void send_batchCancleTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id) throws org.apache.thrift.TException
        {
            batchCancleTalentTag_args args = new batchCancleTalentTag_args();
            args.setHr_id(hr_id);
            args.setUser_ids(user_ids);
            args.setTag_ids(tag_ids);
            args.setCompany_id(company_id);
            sendBase("batchCancleTalentTag", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_batchCancleTalentTag() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            batchCancleTalentTag_result result = new batchCancleTalentTag_result();
            receiveBase(result, "batchCancleTalentTag");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchCancleTalentTag failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response batchAddTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_batchAddTalentTag(hr_id, user_ids, tag_ids, company_id);
            return recv_batchAddTalentTag();
        }

        public void send_batchAddTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id) throws org.apache.thrift.TException
        {
            batchAddTalentTag_args args = new batchAddTalentTag_args();
            args.setHr_id(hr_id);
            args.setUser_ids(user_ids);
            args.setTag_ids(tag_ids);
            args.setCompany_id(company_id);
            sendBase("batchAddTalentTag", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_batchAddTalentTag() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            batchAddTalentTag_result result = new batchAddTalentTag_result();
            receiveBase(result, "batchAddTalentTag");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchAddTalentTag failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response hrAddComment(int hr_id, int company_id, int user_id, java.lang.String content) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_hrAddComment(hr_id, company_id, user_id, content);
            return recv_hrAddComment();
        }

        public void send_hrAddComment(int hr_id, int company_id, int user_id, java.lang.String content) throws org.apache.thrift.TException
        {
            hrAddComment_args args = new hrAddComment_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setUser_id(user_id);
            args.setContent(content);
            sendBase("hrAddComment", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_hrAddComment() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            hrAddComment_result result = new hrAddComment_result();
            receiveBase(result, "hrAddComment");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hrAddComment failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response hrDelComment(int hr_id, int company_id, int comment_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_hrDelComment(hr_id, company_id, comment_id);
            return recv_hrDelComment();
        }

        public void send_hrDelComment(int hr_id, int company_id, int comment_id) throws org.apache.thrift.TException
        {
            hrDelComment_args args = new hrDelComment_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setComment_id(comment_id);
            sendBase("hrDelComment", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_hrDelComment() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            hrDelComment_result result = new hrDelComment_result();
            receiveBase(result, "hrDelComment");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hrDelComment failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response batchAddPublicTalent(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids, int isGdpr) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_batchAddPublicTalent(hr_id, company_id, user_ids, isGdpr);
            return recv_batchAddPublicTalent();
        }

        public void send_batchAddPublicTalent(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids, int isGdpr) throws org.apache.thrift.TException
        {
            batchAddPublicTalent_args args = new batchAddPublicTalent_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setUser_ids(user_ids);
            args.setIsGdpr(isGdpr);
            sendBase("batchAddPublicTalent", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_batchAddPublicTalent() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            batchAddPublicTalent_result result = new batchAddPublicTalent_result();
            receiveBase(result, "batchAddPublicTalent");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchAddPublicTalent failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response batchCancelPublicTalent(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_batchCancelPublicTalent(hr_id, company_id, user_ids);
            return recv_batchCancelPublicTalent();
        }

        public void send_batchCancelPublicTalent(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids) throws org.apache.thrift.TException
        {
            batchCancelPublicTalent_args args = new batchCancelPublicTalent_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setUser_ids(user_ids);
            sendBase("batchCancelPublicTalent", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_batchCancelPublicTalent() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            batchCancelPublicTalent_result result = new batchCancelPublicTalent_result();
            receiveBase(result, "batchCancelPublicTalent");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchCancelPublicTalent failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getCompanyPulicTalent(int hr_id, int company_id, int page_number, int page_size) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getCompanyPulicTalent(hr_id, company_id, page_number, page_size);
            return recv_getCompanyPulicTalent();
        }

        public void send_getCompanyPulicTalent(int hr_id, int company_id, int page_number, int page_size) throws org.apache.thrift.TException
        {
            getCompanyPulicTalent_args args = new getCompanyPulicTalent_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setPage_number(page_number);
            args.setPage_size(page_size);
            sendBase("getCompanyPulicTalent", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getCompanyPulicTalent() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getCompanyPulicTalent_result result = new getCompanyPulicTalent_result();
            receiveBase(result, "getCompanyPulicTalent");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCompanyPulicTalent failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response batchNewAddTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_batchNewAddTalentTag(hr_id, user_ids, tag_ids, company_id);
            return recv_batchNewAddTalentTag();
        }

        public void send_batchNewAddTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id) throws org.apache.thrift.TException
        {
            batchNewAddTalentTag_args args = new batchNewAddTalentTag_args();
            args.setHr_id(hr_id);
            args.setUser_ids(user_ids);
            args.setTag_ids(tag_ids);
            args.setCompany_id(company_id);
            sendBase("batchNewAddTalentTag", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_batchNewAddTalentTag() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            batchNewAddTalentTag_result result = new batchNewAddTalentTag_result();
            receiveBase(result, "batchNewAddTalentTag");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchNewAddTalentTag failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getTalentStat(int hr_id, int company_id, int type) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getTalentStat(hr_id, company_id, type);
            return recv_getTalentStat();
        }

        public void send_getTalentStat(int hr_id, int company_id, int type) throws org.apache.thrift.TException
        {
            getTalentStat_args args = new getTalentStat_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setType(type);
            sendBase("getTalentStat", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getTalentStat() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getTalentStat_result result = new getTalentStat_result();
            receiveBase(result, "getTalentStat");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTalentStat failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getCompanyUserPublic(int hr_id, int company_id, int user_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getCompanyUserPublic(hr_id, company_id, user_id);
            return recv_getCompanyUserPublic();
        }

        public void send_getCompanyUserPublic(int hr_id, int company_id, int user_id) throws org.apache.thrift.TException
        {
            getCompanyUserPublic_args args = new getCompanyUserPublic_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setUser_id(user_id);
            sendBase("getCompanyUserPublic", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getCompanyUserPublic() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getCompanyUserPublic_result result = new getCompanyUserPublic_result();
            receiveBase(result, "getCompanyUserPublic");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCompanyUserPublic failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getCompanyTalent(int hr_id, int company_id, int user_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getCompanyTalent(hr_id, company_id, user_id);
            return recv_getCompanyTalent();
        }

        public void send_getCompanyTalent(int hr_id, int company_id, int user_id) throws org.apache.thrift.TException
        {
            getCompanyTalent_args args = new getCompanyTalent_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setUser_id(user_id);
            sendBase("getCompanyTalent", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getCompanyTalent() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getCompanyTalent_result result = new getCompanyTalent_result();
            receiveBase(result, "getCompanyTalent");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCompanyTalent failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getHrUserTag(int hr_id, int company_id, int user_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getHrUserTag(hr_id, company_id, user_id);
            return recv_getHrUserTag();
        }

        public void send_getHrUserTag(int hr_id, int company_id, int user_id) throws org.apache.thrift.TException
        {
            getHrUserTag_args args = new getHrUserTag_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setUser_id(user_id);
            sendBase("getHrUserTag", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getHrUserTag() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getHrUserTag_result result = new getHrUserTag_result();
            receiveBase(result, "getHrUserTag");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHrUserTag failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getUserOrigin(int hr_id, int company_id, int user_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getUserOrigin(hr_id, company_id, user_id);
            return recv_getUserOrigin();
        }

        public void send_getUserOrigin(int hr_id, int company_id, int user_id) throws org.apache.thrift.TException
        {
            getUserOrigin_args args = new getUserOrigin_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setUser_id(user_id);
            sendBase("getUserOrigin", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getUserOrigin() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getUserOrigin_result result = new getUserOrigin_result();
            receiveBase(result, "getUserOrigin");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserOrigin failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getTalentAndPublicHr(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getTalentAndPublicHr(hr_id, company_id, user_ids);
            return recv_getTalentAndPublicHr();
        }

        public void send_getTalentAndPublicHr(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids) throws org.apache.thrift.TException
        {
            getTalentAndPublicHr_args args = new getTalentAndPublicHr_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setUser_ids(user_ids);
            sendBase("getTalentAndPublicHr", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getTalentAndPublicHr() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getTalentAndPublicHr_result result = new getTalentAndPublicHr_result();
            receiveBase(result, "getTalentAndPublicHr");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTalentAndPublicHr failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getPositionOrCompanyPast(int company_id, int type, int flag) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getPositionOrCompanyPast(company_id, type, flag);
            return recv_getPositionOrCompanyPast();
        }

        public void send_getPositionOrCompanyPast(int company_id, int type, int flag) throws org.apache.thrift.TException
        {
            getPositionOrCompanyPast_args args = new getPositionOrCompanyPast_args();
            args.setCompany_id(company_id);
            args.setType(type);
            args.setFlag(flag);
            sendBase("getPositionOrCompanyPast", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getPositionOrCompanyPast() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getPositionOrCompanyPast_result result = new getPositionOrCompanyPast_result();
            receiveBase(result, "getPositionOrCompanyPast");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPositionOrCompanyPast failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response addPositionOrCompanyPast(int company_id, int type, int flag, java.lang.String name) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_addPositionOrCompanyPast(company_id, type, flag, name);
            return recv_addPositionOrCompanyPast();
        }

        public void send_addPositionOrCompanyPast(int company_id, int type, int flag, java.lang.String name) throws org.apache.thrift.TException
        {
            addPositionOrCompanyPast_args args = new addPositionOrCompanyPast_args();
            args.setCompany_id(company_id);
            args.setType(type);
            args.setFlag(flag);
            args.setName(name);
            sendBase("addPositionOrCompanyPast", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_addPositionOrCompanyPast() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            addPositionOrCompanyPast_result result = new addPositionOrCompanyPast_result();
            receiveBase(result, "addPositionOrCompanyPast");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addPositionOrCompanyPast failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getTalentTagList(int hr_id, int company_id, int page_number, int page_size) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getTalentTagList(hr_id, company_id, page_number, page_size);
            return recv_getTalentTagList();
        }

        public void send_getTalentTagList(int hr_id, int company_id, int page_number, int page_size) throws org.apache.thrift.TException
        {
            getTalentTagList_args args = new getTalentTagList_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setPage_number(page_number);
            args.setPage_size(page_size);
            sendBase("getTalentTagList", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getTalentTagList() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getTalentTagList_result result = new getTalentTagList_result();
            receiveBase(result, "getTalentTagList");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTalentTagList failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getProfileFilterList(int hr_id, int company_id, int page_number, int page_size) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getProfileFilterList(hr_id, company_id, page_number, page_size);
            return recv_getProfileFilterList();
        }

        public void send_getProfileFilterList(int hr_id, int company_id, int page_number, int page_size) throws org.apache.thrift.TException
        {
            getProfileFilterList_args args = new getProfileFilterList_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setPage_number(page_number);
            args.setPage_size(page_size);
            sendBase("getProfileFilterList", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getProfileFilterList() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getProfileFilterList_result result = new getProfileFilterList_result();
            receiveBase(result, "getProfileFilterList");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProfileFilterList failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response handerProfileFilterByIds(int hr_id, int company_id, int disable, java.util.List<java.lang.Integer> filter_ids) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_handerProfileFilterByIds(hr_id, company_id, disable, filter_ids);
            return recv_handerProfileFilterByIds();
        }

        public void send_handerProfileFilterByIds(int hr_id, int company_id, int disable, java.util.List<java.lang.Integer> filter_ids) throws org.apache.thrift.TException
        {
            handerProfileFilterByIds_args args = new handerProfileFilterByIds_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setDisable(disable);
            args.setFilter_ids(filter_ids);
            sendBase("handerProfileFilterByIds", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_handerProfileFilterByIds() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            handerProfileFilterByIds_result result = new handerProfileFilterByIds_result();
            receiveBase(result, "handerProfileFilterByIds");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "handerProfileFilterByIds failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getProfileFilterInfo(int hr_id, int company_id, int filter_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getProfileFilterInfo(hr_id, company_id, filter_id);
            return recv_getProfileFilterInfo();
        }

        public void send_getProfileFilterInfo(int hr_id, int company_id, int filter_id) throws org.apache.thrift.TException
        {
            getProfileFilterInfo_args args = new getProfileFilterInfo_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setFilter_id(filter_id);
            sendBase("getProfileFilterInfo", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getProfileFilterInfo() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getProfileFilterInfo_result result = new getProfileFilterInfo_result();
            receiveBase(result, "getProfileFilterInfo");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProfileFilterInfo failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response addProfileFilter(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm, java.util.List<java.lang.Integer> positionIdList, int hr_id, int position_total) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_addProfileFilter(companyTagDO, actionForm, positionIdList, hr_id, position_total);
            return recv_addProfileFilter();
        }

        public void send_addProfileFilter(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm, java.util.List<java.lang.Integer> positionIdList, int hr_id, int position_total) throws org.apache.thrift.TException
        {
            addProfileFilter_args args = new addProfileFilter_args();
            args.setCompanyTagDO(companyTagDO);
            args.setActionForm(actionForm);
            args.setPositionIdList(positionIdList);
            args.setHr_id(hr_id);
            args.setPosition_total(position_total);
            sendBase("addProfileFilter", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_addProfileFilter() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            addProfileFilter_result result = new addProfileFilter_result();
            receiveBase(result, "addProfileFilter");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addProfileFilter failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response updateProfileFilter(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm, java.util.List<java.lang.Integer> positionIdList, int hr_id, int position_total) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_updateProfileFilter(companyTagDO, actionForm, positionIdList, hr_id, position_total);
            return recv_updateProfileFilter();
        }

        public void send_updateProfileFilter(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm, java.util.List<java.lang.Integer> positionIdList, int hr_id, int position_total) throws org.apache.thrift.TException
        {
            updateProfileFilter_args args = new updateProfileFilter_args();
            args.setCompanyTagDO(companyTagDO);
            args.setActionForm(actionForm);
            args.setPositionIdList(positionIdList);
            args.setHr_id(hr_id);
            args.setPosition_total(position_total);
            sendBase("updateProfileFilter", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_updateProfileFilter() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            updateProfileFilter_result result = new updateProfileFilter_result();
            receiveBase(result, "updateProfileFilter");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateProfileFilter failed: unknown result");
        }

        public void handlerCompanyTagAndProfile(java.util.Set<java.lang.Integer> userid_list, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_handlerCompanyTagAndProfile(userid_list, company_id);
            recv_handlerCompanyTagAndProfile();
        }

        public void send_handlerCompanyTagAndProfile(java.util.Set<java.lang.Integer> userid_list, int company_id) throws org.apache.thrift.TException
        {
            handlerCompanyTagAndProfile_args args = new handlerCompanyTagAndProfile_args();
            args.setUserid_list(userid_list);
            args.setCompany_id(company_id);
            sendBase("handlerCompanyTagAndProfile", args);
        }

        public void recv_handlerCompanyTagAndProfile() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            handlerCompanyTagAndProfile_result result = new handlerCompanyTagAndProfile_result();
            receiveBase(result, "handlerCompanyTagAndProfile");
            if (result.e != null) {
                throw result.e;
            }
            return;
        }

        public com.moseeker.thrift.gen.common.struct.Response getTalentCountByPositionFilter(int hr_id, int company_id, int position_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getTalentCountByPositionFilter(hr_id, company_id, position_id);
            return recv_getTalentCountByPositionFilter();
        }

        public void send_getTalentCountByPositionFilter(int hr_id, int company_id, int position_id) throws org.apache.thrift.TException
        {
            getTalentCountByPositionFilter_args args = new getTalentCountByPositionFilter_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setPosition_id(position_id);
            sendBase("getTalentCountByPositionFilter", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getTalentCountByPositionFilter() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getTalentCountByPositionFilter_result result = new getTalentCountByPositionFilter_result();
            receiveBase(result, "getTalentCountByPositionFilter");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTalentCountByPositionFilter failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getEmailBalance(int hr_id, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getEmailBalance(hr_id, company_id);
            return recv_getEmailBalance();
        }

        public void send_getEmailBalance(int hr_id, int company_id) throws org.apache.thrift.TException
        {
            getEmailBalance_args args = new getEmailBalance_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            sendBase("getEmailBalance", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getEmailBalance() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getEmailBalance_result result = new getEmailBalance_result();
            receiveBase(result, "getEmailBalance");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEmailBalance failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getEmailTemplateList(int hr_id, int company_id) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getEmailTemplateList(hr_id, company_id);
            return recv_getEmailTemplateList();
        }

        public void send_getEmailTemplateList(int hr_id, int company_id) throws org.apache.thrift.TException
        {
            getEmailTemplateList_args args = new getEmailTemplateList_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            sendBase("getEmailTemplateList", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getEmailTemplateList() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getEmailTemplateList_result result = new getEmailTemplateList_result();
            receiveBase(result, "getEmailTemplateList");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEmailTemplateList failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getEmailInfo(int hr_id, int company_id, int type) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getEmailInfo(hr_id, company_id, type);
            return recv_getEmailInfo();
        }

        public void send_getEmailInfo(int hr_id, int company_id, int type) throws org.apache.thrift.TException
        {
            getEmailInfo_args args = new getEmailInfo_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setType(type);
            sendBase("getEmailInfo", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getEmailInfo() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getEmailInfo_result result = new getEmailInfo_result();
            receiveBase(result, "getEmailInfo");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEmailInfo failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response updateCompanyEmailInfo(int hr_id, int company_id, int type, int disable, java.lang.String context, java.lang.String inscribe) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_updateCompanyEmailInfo(hr_id, company_id, type, disable, context, inscribe);
            return recv_updateCompanyEmailInfo();
        }

        public void send_updateCompanyEmailInfo(int hr_id, int company_id, int type, int disable, java.lang.String context, java.lang.String inscribe) throws org.apache.thrift.TException
        {
            updateCompanyEmailInfo_args args = new updateCompanyEmailInfo_args();
            args.setHr_id(hr_id);
            args.setCompany_id(company_id);
            args.setType(type);
            args.setDisable(disable);
            args.setContext(context);
            args.setInscribe(inscribe);
            sendBase("updateCompanyEmailInfo", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_updateCompanyEmailInfo() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            updateCompanyEmailInfo_result result = new updateCompanyEmailInfo_result();
            receiveBase(result, "updateCompanyEmailInfo");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateCompanyEmailInfo failed: unknown result");
        }

        public com.moseeker.thrift.gen.company.struct.EmailAccountForm fetchEmailAccounts(int companyId, java.lang.String companyName, int pageNumber, int pageSize) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_fetchEmailAccounts(companyId, companyName, pageNumber, pageSize);
            return recv_fetchEmailAccounts();
        }

        public void send_fetchEmailAccounts(int companyId, java.lang.String companyName, int pageNumber, int pageSize) throws org.apache.thrift.TException
        {
            fetchEmailAccounts_args args = new fetchEmailAccounts_args();
            args.setCompanyId(companyId);
            args.setCompanyName(companyName);
            args.setPageNumber(pageNumber);
            args.setPageSize(pageSize);
            sendBase("fetchEmailAccounts", args);
        }

        public com.moseeker.thrift.gen.company.struct.EmailAccountForm recv_fetchEmailAccounts() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            fetchEmailAccounts_result result = new fetchEmailAccounts_result();
            receiveBase(result, "fetchEmailAccounts");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchEmailAccounts failed: unknown result");
        }

        public com.moseeker.thrift.gen.company.struct.EmailAccountConsumptionForm fetchEmailAccountConsumption(int companyId, byte type, int pageNumber, int pageSize, java.lang.String startDate, java.lang.String endDate) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_fetchEmailAccountConsumption(companyId, type, pageNumber, pageSize, startDate, endDate);
            return recv_fetchEmailAccountConsumption();
        }

        public void send_fetchEmailAccountConsumption(int companyId, byte type, int pageNumber, int pageSize, java.lang.String startDate, java.lang.String endDate) throws org.apache.thrift.TException
        {
            fetchEmailAccountConsumption_args args = new fetchEmailAccountConsumption_args();
            args.setCompanyId(companyId);
            args.setType(type);
            args.setPageNumber(pageNumber);
            args.setPageSize(pageSize);
            args.setStartDate(startDate);
            args.setEndDate(endDate);
            sendBase("fetchEmailAccountConsumption", args);
        }

        public com.moseeker.thrift.gen.company.struct.EmailAccountConsumptionForm recv_fetchEmailAccountConsumption() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            fetchEmailAccountConsumption_result result = new fetchEmailAccountConsumption_result();
            receiveBase(result, "fetchEmailAccountConsumption");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchEmailAccountConsumption failed: unknown result");
        }

        public int rechargeEmailAccount(int companyId, int lost) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_rechargeEmailAccount(companyId, lost);
            return recv_rechargeEmailAccount();
        }

        public void send_rechargeEmailAccount(int companyId, int lost) throws org.apache.thrift.TException
        {
            rechargeEmailAccount_args args = new rechargeEmailAccount_args();
            args.setCompanyId(companyId);
            args.setLost(lost);
            sendBase("rechargeEmailAccount", args);
        }

        public int recv_rechargeEmailAccount() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            rechargeEmailAccount_result result = new rechargeEmailAccount_result();
            receiveBase(result, "rechargeEmailAccount");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rechargeEmailAccount failed: unknown result");
        }

        public void updateEmailAccountRechargeValue(int id, int lost) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_updateEmailAccountRechargeValue(id, lost);
            recv_updateEmailAccountRechargeValue();
        }

        public void send_updateEmailAccountRechargeValue(int id, int lost) throws org.apache.thrift.TException
        {
            updateEmailAccountRechargeValue_args args = new updateEmailAccountRechargeValue_args();
            args.setId(id);
            args.setLost(lost);
            sendBase("updateEmailAccountRechargeValue", args);
        }

        public void recv_updateEmailAccountRechargeValue() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            updateEmailAccountRechargeValue_result result = new updateEmailAccountRechargeValue_result();
            receiveBase(result, "updateEmailAccountRechargeValue");
            if (result.e != null) {
                throw result.e;
            }
            return;
        }

        public void addAllTalent(int hrId, java.util.Map<java.lang.String,java.lang.String> params, int companyId, int isGdpr) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_addAllTalent(hrId, params, companyId, isGdpr);
            recv_addAllTalent();
        }

        public void send_addAllTalent(int hrId, java.util.Map<java.lang.String,java.lang.String> params, int companyId, int isGdpr) throws org.apache.thrift.TException
        {
            addAllTalent_args args = new addAllTalent_args();
            args.setHrId(hrId);
            args.setParams(params);
            args.setCompanyId(companyId);
            args.setIsGdpr(isGdpr);
            sendBase("addAllTalent", args);
        }

        public void recv_addAllTalent() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            addAllTalent_result result = new addAllTalent_result();
            receiveBase(result, "addAllTalent");
            if (result.e != null) {
                throw result.e;
            }
            return;
        }

        public void addAllTalentTag(java.util.Map<java.lang.String,java.lang.String> params, java.util.List<java.lang.Integer> tagList, int companyId, int hrId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_addAllTalentTag(params, tagList, companyId, hrId);
            recv_addAllTalentTag();
        }

        public void send_addAllTalentTag(java.util.Map<java.lang.String,java.lang.String> params, java.util.List<java.lang.Integer> tagList, int companyId, int hrId) throws org.apache.thrift.TException
        {
            addAllTalentTag_args args = new addAllTalentTag_args();
            args.setParams(params);
            args.setTagList(tagList);
            args.setCompanyId(companyId);
            args.setHrId(hrId);
            sendBase("addAllTalentTag", args);
        }

        public void recv_addAllTalentTag() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            addAllTalentTag_result result = new addAllTalentTag_result();
            receiveBase(result, "addAllTalentTag");
            if (result.e != null) {
                throw result.e;
            }
            return;
        }

        public void addAllTalentPublic(int hrId, java.util.Map<java.lang.String,java.lang.String> params, int companyId, int isGdpr) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_addAllTalentPublic(hrId, params, companyId, isGdpr);
            recv_addAllTalentPublic();
        }

        public void send_addAllTalentPublic(int hrId, java.util.Map<java.lang.String,java.lang.String> params, int companyId, int isGdpr) throws org.apache.thrift.TException
        {
            addAllTalentPublic_args args = new addAllTalentPublic_args();
            args.setHrId(hrId);
            args.setParams(params);
            args.setCompanyId(companyId);
            args.setIsGdpr(isGdpr);
            sendBase("addAllTalentPublic", args);
        }

        public void recv_addAllTalentPublic() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            addAllTalentPublic_result result = new addAllTalentPublic_result();
            receiveBase(result, "addAllTalentPublic");
            if (result.e != null) {
                throw result.e;
            }
            return;
        }

        public void addAllTalentPrivate(int hrId, java.util.Map<java.lang.String,java.lang.String> params, int companyId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_addAllTalentPrivate(hrId, params, companyId);
            recv_addAllTalentPrivate();
        }

        public void send_addAllTalentPrivate(int hrId, java.util.Map<java.lang.String,java.lang.String> params, int companyId) throws org.apache.thrift.TException
        {
            addAllTalentPrivate_args args = new addAllTalentPrivate_args();
            args.setHrId(hrId);
            args.setParams(params);
            args.setCompanyId(companyId);
            sendBase("addAllTalentPrivate", args);
        }

        public void recv_addAllTalentPrivate() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            addAllTalentPrivate_result result = new addAllTalentPrivate_result();
            receiveBase(result, "addAllTalentPrivate");
            if (result.e != null) {
                throw result.e;
            }
            return;
        }

        public void cancleAllTalent(int hrId, java.util.Map<java.lang.String,java.lang.String> params, int companyId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_cancleAllTalent(hrId, params, companyId);
            recv_cancleAllTalent();
        }

        public void send_cancleAllTalent(int hrId, java.util.Map<java.lang.String,java.lang.String> params, int companyId) throws org.apache.thrift.TException
        {
            cancleAllTalent_args args = new cancleAllTalent_args();
            args.setHrId(hrId);
            args.setParams(params);
            args.setCompanyId(companyId);
            sendBase("cancleAllTalent", args);
        }

        public void recv_cancleAllTalent() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            cancleAllTalent_result result = new cancleAllTalent_result();
            receiveBase(result, "cancleAllTalent");
            if (result.e != null) {
                throw result.e;
            }
            return;
        }

        public com.moseeker.thrift.gen.common.struct.Response updateCompanyEmailBalance(int company_id, int balance) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_updateCompanyEmailBalance(company_id, balance);
            return recv_updateCompanyEmailBalance();
        }

        public void send_updateCompanyEmailBalance(int company_id, int balance) throws org.apache.thrift.TException
        {
            updateCompanyEmailBalance_args args = new updateCompanyEmailBalance_args();
            args.setCompany_id(company_id);
            args.setBalance(balance);
            sendBase("updateCompanyEmailBalance", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_updateCompanyEmailBalance() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            updateCompanyEmailBalance_result result = new updateCompanyEmailBalance_result();
            receiveBase(result, "updateCompanyEmailBalance");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateCompanyEmailBalance failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response sendInviteEmail(java.util.Map<java.lang.String,java.lang.String> params, java.util.List<java.lang.Integer> userIdList, java.util.List<java.lang.Integer> positionIdList, int companyId, int hrId, int flag, int positionFlag) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_sendInviteEmail(params, userIdList, positionIdList, companyId, hrId, flag, positionFlag);
            return recv_sendInviteEmail();
        }

        public void send_sendInviteEmail(java.util.Map<java.lang.String,java.lang.String> params, java.util.List<java.lang.Integer> userIdList, java.util.List<java.lang.Integer> positionIdList, int companyId, int hrId, int flag, int positionFlag) throws org.apache.thrift.TException
        {
            sendInviteEmail_args args = new sendInviteEmail_args();
            args.setParams(params);
            args.setUserIdList(userIdList);
            args.setPositionIdList(positionIdList);
            args.setCompanyId(companyId);
            args.setHrId(hrId);
            args.setFlag(flag);
            args.setPositionFlag(positionFlag);
            sendBase("sendInviteEmail", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_sendInviteEmail() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            sendInviteEmail_result result = new sendInviteEmail_result();
            receiveBase(result, "sendInviteEmail");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendInviteEmail failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response sendResumeEmail(java.util.Map<java.lang.String,java.lang.String> params, java.util.List<java.lang.Integer> userIdList, java.util.List<java.lang.Integer> idList, int companyId, int hrId, int flag, java.util.List<java.lang.String> emailList) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_sendResumeEmail(params, userIdList, idList, companyId, hrId, flag, emailList);
            return recv_sendResumeEmail();
        }

        public void send_sendResumeEmail(java.util.Map<java.lang.String,java.lang.String> params, java.util.List<java.lang.Integer> userIdList, java.util.List<java.lang.Integer> idList, int companyId, int hrId, int flag, java.util.List<java.lang.String> emailList) throws org.apache.thrift.TException
        {
            sendResumeEmail_args args = new sendResumeEmail_args();
            args.setParams(params);
            args.setUserIdList(userIdList);
            args.setIdList(idList);
            args.setCompanyId(companyId);
            args.setHrId(hrId);
            args.setFlag(flag);
            args.setEmailList(emailList);
            sendBase("sendResumeEmail", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_sendResumeEmail() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            sendResumeEmail_result result = new sendResumeEmail_result();
            receiveBase(result, "sendResumeEmail");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendResumeEmail failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response sendPositionInviteEmail(int hrId, int positionId, int companyId) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_sendPositionInviteEmail(hrId, positionId, companyId);
            return recv_sendPositionInviteEmail();
        }

        public void send_sendPositionInviteEmail(int hrId, int positionId, int companyId) throws org.apache.thrift.TException
        {
            sendPositionInviteEmail_args args = new sendPositionInviteEmail_args();
            args.setHrId(hrId);
            args.setPositionId(positionId);
            args.setCompanyId(companyId);
            sendBase("sendPositionInviteEmail", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_sendPositionInviteEmail() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            sendPositionInviteEmail_result result = new sendPositionInviteEmail_result();
            receiveBase(result, "sendPositionInviteEmail");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendPositionInviteEmail failed: unknown result");
        }

        public com.moseeker.thrift.gen.common.struct.Response getCompanyCommentByUserIdList(int companyId, java.util.List<java.lang.Integer> userIdList) throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            send_getCompanyCommentByUserIdList(companyId, userIdList);
            return recv_getCompanyCommentByUserIdList();
        }

        public void send_getCompanyCommentByUserIdList(int companyId, java.util.List<java.lang.Integer> userIdList) throws org.apache.thrift.TException
        {
            getCompanyCommentByUserIdList_args args = new getCompanyCommentByUserIdList_args();
            args.setCompanyId(companyId);
            args.setUserIdList(userIdList);
            sendBase("getCompanyCommentByUserIdList", args);
        }

        public com.moseeker.thrift.gen.common.struct.Response recv_getCompanyCommentByUserIdList() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException
        {
            getCompanyCommentByUserIdList_result result = new getCompanyCommentByUserIdList_result();
            receiveBase(result, "getCompanyCommentByUserIdList");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCompanyCommentByUserIdList failed: unknown result");
        }

    }
    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }
            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void upsertTalentPoolApp(int hrId, int companyId, int type, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            upsertTalentPoolApp_call method_call = new upsertTalentPoolApp_call(hrId, companyId, type, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class upsertTalentPoolApp_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hrId;
            private int companyId;
            private int type;
            public upsertTalentPoolApp_call(int hrId, int companyId, int type, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hrId = hrId;
                this.companyId = companyId;
                this.type = type;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("upsertTalentPoolApp", org.apache.thrift.protocol.TMessageType.CALL, 0));
                upsertTalentPoolApp_args args = new upsertTalentPoolApp_args();
                args.setHrId(hrId);
                args.setCompanyId(companyId);
                args.setType(type);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_upsertTalentPoolApp();
            }
        }

        public void getTalentAllComment(int hr_id, int company_id, int user_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getTalentAllComment_call method_call = new getTalentAllComment_call(hr_id, company_id, user_id, page_number, page_size, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getTalentAllComment_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int user_id;
            private int page_number;
            private int page_size;
            public getTalentAllComment_call(int hr_id, int company_id, int user_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.user_id = user_id;
                this.page_number = page_number;
                this.page_size = page_size;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTalentAllComment", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getTalentAllComment_args args = new getTalentAllComment_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setUser_id(user_id);
                args.setPage_number(page_number);
                args.setPage_size(page_size);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getTalentAllComment();
            }
        }

        public void getHrTag(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getHrTag_call method_call = new getHrTag_call(hr_id, company_id, page_number, page_size, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getHrTag_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int page_number;
            private int page_size;
            public getHrTag_call(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.page_number = page_number;
                this.page_size = page_size;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHrTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getHrTag_args args = new getHrTag_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setPage_number(page_number);
                args.setPage_size(page_size);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getHrTag();
            }
        }

        public void batchAddTalent(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id, int isGdpr, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            batchAddTalent_call method_call = new batchAddTalent_call(hr_id, user_ids, company_id, isGdpr, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class batchAddTalent_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private java.util.List<java.lang.Integer> user_ids;
            private int company_id;
            private int isGdpr;
            public batchAddTalent_call(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id, int isGdpr, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.user_ids = user_ids;
                this.company_id = company_id;
                this.isGdpr = isGdpr;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchAddTalent", org.apache.thrift.protocol.TMessageType.CALL, 0));
                batchAddTalent_args args = new batchAddTalent_args();
                args.setHr_id(hr_id);
                args.setUser_ids(user_ids);
                args.setCompany_id(company_id);
                args.setIsGdpr(isGdpr);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_batchAddTalent();
            }
        }

        public void batchCancelTalent(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            batchCancelTalent_call method_call = new batchCancelTalent_call(hr_id, user_ids, company_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class batchCancelTalent_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private java.util.List<java.lang.Integer> user_ids;
            private int company_id;
            public batchCancelTalent_call(int hr_id, java.util.List<java.lang.Integer> user_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.user_ids = user_ids;
                this.company_id = company_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchCancelTalent", org.apache.thrift.protocol.TMessageType.CALL, 0));
                batchCancelTalent_args args = new batchCancelTalent_args();
                args.setHr_id(hr_id);
                args.setUser_ids(user_ids);
                args.setCompany_id(company_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_batchCancelTalent();
            }
        }

        public void hrAddTag(int hr_id, int company_id, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            hrAddTag_call method_call = new hrAddTag_call(hr_id, company_id, name, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class hrAddTag_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private java.lang.String name;
            public hrAddTag_call(int hr_id, int company_id, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.name = name;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hrAddTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
                hrAddTag_args args = new hrAddTag_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setName(name);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_hrAddTag();
            }
        }

        public void hrDelTag(int hr_id, int company_id, int tag_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            hrDelTag_call method_call = new hrDelTag_call(hr_id, company_id, tag_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class hrDelTag_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int tag_id;
            public hrDelTag_call(int hr_id, int company_id, int tag_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.tag_id = tag_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hrDelTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
                hrDelTag_args args = new hrDelTag_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setTag_id(tag_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_hrDelTag();
            }
        }

        public void hrUpdateTag(int hr_id, int company_id, int tag_id, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            hrUpdateTag_call method_call = new hrUpdateTag_call(hr_id, company_id, tag_id, name, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class hrUpdateTag_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int tag_id;
            private java.lang.String name;
            public hrUpdateTag_call(int hr_id, int company_id, int tag_id, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.tag_id = tag_id;
                this.name = name;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hrUpdateTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
                hrUpdateTag_args args = new hrUpdateTag_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setTag_id(tag_id);
                args.setName(name);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_hrUpdateTag();
            }
        }

        public void batchCancleTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            batchCancleTalentTag_call method_call = new batchCancleTalentTag_call(hr_id, user_ids, tag_ids, company_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class batchCancleTalentTag_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private java.util.List<java.lang.Integer> user_ids;
            private java.util.List<java.lang.Integer> tag_ids;
            private int company_id;
            public batchCancleTalentTag_call(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.user_ids = user_ids;
                this.tag_ids = tag_ids;
                this.company_id = company_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchCancleTalentTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
                batchCancleTalentTag_args args = new batchCancleTalentTag_args();
                args.setHr_id(hr_id);
                args.setUser_ids(user_ids);
                args.setTag_ids(tag_ids);
                args.setCompany_id(company_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_batchCancleTalentTag();
            }
        }

        public void batchAddTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            batchAddTalentTag_call method_call = new batchAddTalentTag_call(hr_id, user_ids, tag_ids, company_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class batchAddTalentTag_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private java.util.List<java.lang.Integer> user_ids;
            private java.util.List<java.lang.Integer> tag_ids;
            private int company_id;
            public batchAddTalentTag_call(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.user_ids = user_ids;
                this.tag_ids = tag_ids;
                this.company_id = company_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchAddTalentTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
                batchAddTalentTag_args args = new batchAddTalentTag_args();
                args.setHr_id(hr_id);
                args.setUser_ids(user_ids);
                args.setTag_ids(tag_ids);
                args.setCompany_id(company_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_batchAddTalentTag();
            }
        }

        public void hrAddComment(int hr_id, int company_id, int user_id, java.lang.String content, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            hrAddComment_call method_call = new hrAddComment_call(hr_id, company_id, user_id, content, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class hrAddComment_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int user_id;
            private java.lang.String content;
            public hrAddComment_call(int hr_id, int company_id, int user_id, java.lang.String content, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.user_id = user_id;
                this.content = content;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hrAddComment", org.apache.thrift.protocol.TMessageType.CALL, 0));
                hrAddComment_args args = new hrAddComment_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setUser_id(user_id);
                args.setContent(content);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_hrAddComment();
            }
        }

        public void hrDelComment(int hr_id, int company_id, int comment_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            hrDelComment_call method_call = new hrDelComment_call(hr_id, company_id, comment_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class hrDelComment_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int comment_id;
            public hrDelComment_call(int hr_id, int company_id, int comment_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.comment_id = comment_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hrDelComment", org.apache.thrift.protocol.TMessageType.CALL, 0));
                hrDelComment_args args = new hrDelComment_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setComment_id(comment_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_hrDelComment();
            }
        }

        public void batchAddPublicTalent(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids, int isGdpr, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            batchAddPublicTalent_call method_call = new batchAddPublicTalent_call(hr_id, company_id, user_ids, isGdpr, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class batchAddPublicTalent_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private java.util.List<java.lang.Integer> user_ids;
            private int isGdpr;
            public batchAddPublicTalent_call(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids, int isGdpr, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.user_ids = user_ids;
                this.isGdpr = isGdpr;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchAddPublicTalent", org.apache.thrift.protocol.TMessageType.CALL, 0));
                batchAddPublicTalent_args args = new batchAddPublicTalent_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setUser_ids(user_ids);
                args.setIsGdpr(isGdpr);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_batchAddPublicTalent();
            }
        }

        public void batchCancelPublicTalent(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            batchCancelPublicTalent_call method_call = new batchCancelPublicTalent_call(hr_id, company_id, user_ids, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class batchCancelPublicTalent_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private java.util.List<java.lang.Integer> user_ids;
            public batchCancelPublicTalent_call(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.user_ids = user_ids;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchCancelPublicTalent", org.apache.thrift.protocol.TMessageType.CALL, 0));
                batchCancelPublicTalent_args args = new batchCancelPublicTalent_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setUser_ids(user_ids);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_batchCancelPublicTalent();
            }
        }

        public void getCompanyPulicTalent(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getCompanyPulicTalent_call method_call = new getCompanyPulicTalent_call(hr_id, company_id, page_number, page_size, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getCompanyPulicTalent_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int page_number;
            private int page_size;
            public getCompanyPulicTalent_call(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.page_number = page_number;
                this.page_size = page_size;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCompanyPulicTalent", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getCompanyPulicTalent_args args = new getCompanyPulicTalent_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setPage_number(page_number);
                args.setPage_size(page_size);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getCompanyPulicTalent();
            }
        }

        public void batchNewAddTalentTag(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            batchNewAddTalentTag_call method_call = new batchNewAddTalentTag_call(hr_id, user_ids, tag_ids, company_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class batchNewAddTalentTag_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private java.util.List<java.lang.Integer> user_ids;
            private java.util.List<java.lang.Integer> tag_ids;
            private int company_id;
            public batchNewAddTalentTag_call(int hr_id, java.util.List<java.lang.Integer> user_ids, java.util.List<java.lang.Integer> tag_ids, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.user_ids = user_ids;
                this.tag_ids = tag_ids;
                this.company_id = company_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchNewAddTalentTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
                batchNewAddTalentTag_args args = new batchNewAddTalentTag_args();
                args.setHr_id(hr_id);
                args.setUser_ids(user_ids);
                args.setTag_ids(tag_ids);
                args.setCompany_id(company_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_batchNewAddTalentTag();
            }
        }

        public void getTalentStat(int hr_id, int company_id, int type, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getTalentStat_call method_call = new getTalentStat_call(hr_id, company_id, type, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getTalentStat_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int type;
            public getTalentStat_call(int hr_id, int company_id, int type, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.type = type;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTalentStat", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getTalentStat_args args = new getTalentStat_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setType(type);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getTalentStat();
            }
        }

        public void getCompanyUserPublic(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getCompanyUserPublic_call method_call = new getCompanyUserPublic_call(hr_id, company_id, user_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getCompanyUserPublic_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int user_id;
            public getCompanyUserPublic_call(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.user_id = user_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCompanyUserPublic", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getCompanyUserPublic_args args = new getCompanyUserPublic_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setUser_id(user_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getCompanyUserPublic();
            }
        }

        public void getCompanyTalent(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getCompanyTalent_call method_call = new getCompanyTalent_call(hr_id, company_id, user_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getCompanyTalent_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int user_id;
            public getCompanyTalent_call(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.user_id = user_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCompanyTalent", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getCompanyTalent_args args = new getCompanyTalent_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setUser_id(user_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getCompanyTalent();
            }
        }

        public void getHrUserTag(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getHrUserTag_call method_call = new getHrUserTag_call(hr_id, company_id, user_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getHrUserTag_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int user_id;
            public getHrUserTag_call(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.user_id = user_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHrUserTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getHrUserTag_args args = new getHrUserTag_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setUser_id(user_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getHrUserTag();
            }
        }

        public void getUserOrigin(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getUserOrigin_call method_call = new getUserOrigin_call(hr_id, company_id, user_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getUserOrigin_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int user_id;
            public getUserOrigin_call(int hr_id, int company_id, int user_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.user_id = user_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserOrigin", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getUserOrigin_args args = new getUserOrigin_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setUser_id(user_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getUserOrigin();
            }
        }

        public void getTalentAndPublicHr(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getTalentAndPublicHr_call method_call = new getTalentAndPublicHr_call(hr_id, company_id, user_ids, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getTalentAndPublicHr_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private java.util.List<java.lang.Integer> user_ids;
            public getTalentAndPublicHr_call(int hr_id, int company_id, java.util.List<java.lang.Integer> user_ids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.user_ids = user_ids;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTalentAndPublicHr", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getTalentAndPublicHr_args args = new getTalentAndPublicHr_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setUser_ids(user_ids);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getTalentAndPublicHr();
            }
        }

        public void getPositionOrCompanyPast(int company_id, int type, int flag, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getPositionOrCompanyPast_call method_call = new getPositionOrCompanyPast_call(company_id, type, flag, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getPositionOrCompanyPast_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int company_id;
            private int type;
            private int flag;
            public getPositionOrCompanyPast_call(int company_id, int type, int flag, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.company_id = company_id;
                this.type = type;
                this.flag = flag;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPositionOrCompanyPast", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getPositionOrCompanyPast_args args = new getPositionOrCompanyPast_args();
                args.setCompany_id(company_id);
                args.setType(type);
                args.setFlag(flag);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getPositionOrCompanyPast();
            }
        }

        public void addPositionOrCompanyPast(int company_id, int type, int flag, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            addPositionOrCompanyPast_call method_call = new addPositionOrCompanyPast_call(company_id, type, flag, name, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class addPositionOrCompanyPast_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int company_id;
            private int type;
            private int flag;
            private java.lang.String name;
            public addPositionOrCompanyPast_call(int company_id, int type, int flag, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.company_id = company_id;
                this.type = type;
                this.flag = flag;
                this.name = name;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addPositionOrCompanyPast", org.apache.thrift.protocol.TMessageType.CALL, 0));
                addPositionOrCompanyPast_args args = new addPositionOrCompanyPast_args();
                args.setCompany_id(company_id);
                args.setType(type);
                args.setFlag(flag);
                args.setName(name);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_addPositionOrCompanyPast();
            }
        }

        public void getTalentTagList(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getTalentTagList_call method_call = new getTalentTagList_call(hr_id, company_id, page_number, page_size, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getTalentTagList_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int page_number;
            private int page_size;
            public getTalentTagList_call(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.page_number = page_number;
                this.page_size = page_size;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTalentTagList", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getTalentTagList_args args = new getTalentTagList_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setPage_number(page_number);
                args.setPage_size(page_size);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getTalentTagList();
            }
        }

        public void getProfileFilterList(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getProfileFilterList_call method_call = new getProfileFilterList_call(hr_id, company_id, page_number, page_size, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getProfileFilterList_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int page_number;
            private int page_size;
            public getProfileFilterList_call(int hr_id, int company_id, int page_number, int page_size, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.page_number = page_number;
                this.page_size = page_size;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProfileFilterList", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getProfileFilterList_args args = new getProfileFilterList_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setPage_number(page_number);
                args.setPage_size(page_size);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getProfileFilterList();
            }
        }

        public void handerProfileFilterByIds(int hr_id, int company_id, int disable, java.util.List<java.lang.Integer> filter_ids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            handerProfileFilterByIds_call method_call = new handerProfileFilterByIds_call(hr_id, company_id, disable, filter_ids, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class handerProfileFilterByIds_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int disable;
            private java.util.List<java.lang.Integer> filter_ids;
            public handerProfileFilterByIds_call(int hr_id, int company_id, int disable, java.util.List<java.lang.Integer> filter_ids, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.disable = disable;
                this.filter_ids = filter_ids;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("handerProfileFilterByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
                handerProfileFilterByIds_args args = new handerProfileFilterByIds_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setDisable(disable);
                args.setFilter_ids(filter_ids);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_handerProfileFilterByIds();
            }
        }

        public void getProfileFilterInfo(int hr_id, int company_id, int filter_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getProfileFilterInfo_call method_call = new getProfileFilterInfo_call(hr_id, company_id, filter_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getProfileFilterInfo_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int filter_id;
            public getProfileFilterInfo_call(int hr_id, int company_id, int filter_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.filter_id = filter_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProfileFilterInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getProfileFilterInfo_args args = new getProfileFilterInfo_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setFilter_id(filter_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getProfileFilterInfo();
            }
        }

        public void addProfileFilter(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm, java.util.List<java.lang.Integer> positionIdList, int hr_id, int position_total, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            addProfileFilter_call method_call = new addProfileFilter_call(companyTagDO, actionForm, positionIdList, hr_id, position_total, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class addProfileFilter_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO;
            private java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm;
            private java.util.List<java.lang.Integer> positionIdList;
            private int hr_id;
            private int position_total;
            public addProfileFilter_call(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm, java.util.List<java.lang.Integer> positionIdList, int hr_id, int position_total, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyTagDO = companyTagDO;
                this.actionForm = actionForm;
                this.positionIdList = positionIdList;
                this.hr_id = hr_id;
                this.position_total = position_total;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addProfileFilter", org.apache.thrift.protocol.TMessageType.CALL, 0));
                addProfileFilter_args args = new addProfileFilter_args();
                args.setCompanyTagDO(companyTagDO);
                args.setActionForm(actionForm);
                args.setPositionIdList(positionIdList);
                args.setHr_id(hr_id);
                args.setPosition_total(position_total);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_addProfileFilter();
            }
        }

        public void updateProfileFilter(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm, java.util.List<java.lang.Integer> positionIdList, int hr_id, int position_total, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            updateProfileFilter_call method_call = new updateProfileFilter_call(companyTagDO, actionForm, positionIdList, hr_id, position_total, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class updateProfileFilter_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO;
            private java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm;
            private java.util.List<java.lang.Integer> positionIdList;
            private int hr_id;
            private int position_total;
            public updateProfileFilter_call(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO, java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm, java.util.List<java.lang.Integer> positionIdList, int hr_id, int position_total, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyTagDO = companyTagDO;
                this.actionForm = actionForm;
                this.positionIdList = positionIdList;
                this.hr_id = hr_id;
                this.position_total = position_total;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateProfileFilter", org.apache.thrift.protocol.TMessageType.CALL, 0));
                updateProfileFilter_args args = new updateProfileFilter_args();
                args.setCompanyTagDO(companyTagDO);
                args.setActionForm(actionForm);
                args.setPositionIdList(positionIdList);
                args.setHr_id(hr_id);
                args.setPosition_total(position_total);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_updateProfileFilter();
            }
        }

        public void handlerCompanyTagAndProfile(java.util.Set<java.lang.Integer> userid_list, int company_id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            handlerCompanyTagAndProfile_call method_call = new handlerCompanyTagAndProfile_call(userid_list, company_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class handlerCompanyTagAndProfile_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private java.util.Set<java.lang.Integer> userid_list;
            private int company_id;
            public handlerCompanyTagAndProfile_call(java.util.Set<java.lang.Integer> userid_list, int company_id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userid_list = userid_list;
                this.company_id = company_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("handlerCompanyTagAndProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
                handlerCompanyTagAndProfile_args args = new handlerCompanyTagAndProfile_args();
                args.setUserid_list(userid_list);
                args.setCompany_id(company_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void getTalentCountByPositionFilter(int hr_id, int company_id, int position_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getTalentCountByPositionFilter_call method_call = new getTalentCountByPositionFilter_call(hr_id, company_id, position_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getTalentCountByPositionFilter_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int position_id;
            public getTalentCountByPositionFilter_call(int hr_id, int company_id, int position_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.position_id = position_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTalentCountByPositionFilter", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getTalentCountByPositionFilter_args args = new getTalentCountByPositionFilter_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setPosition_id(position_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getTalentCountByPositionFilter();
            }
        }

        public void getEmailBalance(int hr_id, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getEmailBalance_call method_call = new getEmailBalance_call(hr_id, company_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getEmailBalance_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            public getEmailBalance_call(int hr_id, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEmailBalance", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getEmailBalance_args args = new getEmailBalance_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getEmailBalance();
            }
        }

        public void getEmailTemplateList(int hr_id, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getEmailTemplateList_call method_call = new getEmailTemplateList_call(hr_id, company_id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getEmailTemplateList_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            public getEmailTemplateList_call(int hr_id, int company_id, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEmailTemplateList", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getEmailTemplateList_args args = new getEmailTemplateList_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getEmailTemplateList();
            }
        }

        public void getEmailInfo(int hr_id, int company_id, int type, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getEmailInfo_call method_call = new getEmailInfo_call(hr_id, company_id, type, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getEmailInfo_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int type;
            public getEmailInfo_call(int hr_id, int company_id, int type, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.type = type;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEmailInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getEmailInfo_args args = new getEmailInfo_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setType(type);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getEmailInfo();
            }
        }

        public void updateCompanyEmailInfo(int hr_id, int company_id, int type, int disable, java.lang.String context, java.lang.String inscribe, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            updateCompanyEmailInfo_call method_call = new updateCompanyEmailInfo_call(hr_id, company_id, type, disable, context, inscribe, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class updateCompanyEmailInfo_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hr_id;
            private int company_id;
            private int type;
            private int disable;
            private java.lang.String context;
            private java.lang.String inscribe;
            public updateCompanyEmailInfo_call(int hr_id, int company_id, int type, int disable, java.lang.String context, java.lang.String inscribe, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hr_id = hr_id;
                this.company_id = company_id;
                this.type = type;
                this.disable = disable;
                this.context = context;
                this.inscribe = inscribe;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateCompanyEmailInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
                updateCompanyEmailInfo_args args = new updateCompanyEmailInfo_args();
                args.setHr_id(hr_id);
                args.setCompany_id(company_id);
                args.setType(type);
                args.setDisable(disable);
                args.setContext(context);
                args.setInscribe(inscribe);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_updateCompanyEmailInfo();
            }
        }

        public void fetchEmailAccounts(int companyId, java.lang.String companyName, int pageNumber, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.company.struct.EmailAccountForm> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            fetchEmailAccounts_call method_call = new fetchEmailAccounts_call(companyId, companyName, pageNumber, pageSize, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class fetchEmailAccounts_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.company.struct.EmailAccountForm> {
            private int companyId;
            private java.lang.String companyName;
            private int pageNumber;
            private int pageSize;
            public fetchEmailAccounts_call(int companyId, java.lang.String companyName, int pageNumber, int pageSize, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.company.struct.EmailAccountForm> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyId = companyId;
                this.companyName = companyName;
                this.pageNumber = pageNumber;
                this.pageSize = pageSize;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchEmailAccounts", org.apache.thrift.protocol.TMessageType.CALL, 0));
                fetchEmailAccounts_args args = new fetchEmailAccounts_args();
                args.setCompanyId(companyId);
                args.setCompanyName(companyName);
                args.setPageNumber(pageNumber);
                args.setPageSize(pageSize);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.company.struct.EmailAccountForm getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_fetchEmailAccounts();
            }
        }

        public void fetchEmailAccountConsumption(int companyId, byte type, int pageNumber, int pageSize, java.lang.String startDate, java.lang.String endDate, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.company.struct.EmailAccountConsumptionForm> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            fetchEmailAccountConsumption_call method_call = new fetchEmailAccountConsumption_call(companyId, type, pageNumber, pageSize, startDate, endDate, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class fetchEmailAccountConsumption_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.company.struct.EmailAccountConsumptionForm> {
            private int companyId;
            private byte type;
            private int pageNumber;
            private int pageSize;
            private java.lang.String startDate;
            private java.lang.String endDate;
            public fetchEmailAccountConsumption_call(int companyId, byte type, int pageNumber, int pageSize, java.lang.String startDate, java.lang.String endDate, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.company.struct.EmailAccountConsumptionForm> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyId = companyId;
                this.type = type;
                this.pageNumber = pageNumber;
                this.pageSize = pageSize;
                this.startDate = startDate;
                this.endDate = endDate;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchEmailAccountConsumption", org.apache.thrift.protocol.TMessageType.CALL, 0));
                fetchEmailAccountConsumption_args args = new fetchEmailAccountConsumption_args();
                args.setCompanyId(companyId);
                args.setType(type);
                args.setPageNumber(pageNumber);
                args.setPageSize(pageSize);
                args.setStartDate(startDate);
                args.setEndDate(endDate);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.company.struct.EmailAccountConsumptionForm getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_fetchEmailAccountConsumption();
            }
        }

        public void rechargeEmailAccount(int companyId, int lost, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            rechargeEmailAccount_call method_call = new rechargeEmailAccount_call(companyId, lost, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class rechargeEmailAccount_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
            private int companyId;
            private int lost;
            public rechargeEmailAccount_call(int companyId, int lost, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyId = companyId;
                this.lost = lost;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rechargeEmailAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
                rechargeEmailAccount_args args = new rechargeEmailAccount_args();
                args.setCompanyId(companyId);
                args.setLost(lost);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.Integer getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_rechargeEmailAccount();
            }
        }

        public void updateEmailAccountRechargeValue(int id, int lost, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            updateEmailAccountRechargeValue_call method_call = new updateEmailAccountRechargeValue_call(id, lost, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class updateEmailAccountRechargeValue_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private int id;
            private int lost;
            public updateEmailAccountRechargeValue_call(int id, int lost, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
                this.lost = lost;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateEmailAccountRechargeValue", org.apache.thrift.protocol.TMessageType.CALL, 0));
                updateEmailAccountRechargeValue_args args = new updateEmailAccountRechargeValue_args();
                args.setId(id);
                args.setLost(lost);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void addAllTalent(int hrId, java.util.Map<java.lang.String,java.lang.String> params, int companyId, int isGdpr, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            addAllTalent_call method_call = new addAllTalent_call(hrId, params, companyId, isGdpr, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class addAllTalent_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private int hrId;
            private java.util.Map<java.lang.String,java.lang.String> params;
            private int companyId;
            private int isGdpr;
            public addAllTalent_call(int hrId, java.util.Map<java.lang.String,java.lang.String> params, int companyId, int isGdpr, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hrId = hrId;
                this.params = params;
                this.companyId = companyId;
                this.isGdpr = isGdpr;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addAllTalent", org.apache.thrift.protocol.TMessageType.CALL, 0));
                addAllTalent_args args = new addAllTalent_args();
                args.setHrId(hrId);
                args.setParams(params);
                args.setCompanyId(companyId);
                args.setIsGdpr(isGdpr);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void addAllTalentTag(java.util.Map<java.lang.String,java.lang.String> params, java.util.List<java.lang.Integer> tagList, int companyId, int hrId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            addAllTalentTag_call method_call = new addAllTalentTag_call(params, tagList, companyId, hrId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class addAllTalentTag_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private java.util.Map<java.lang.String,java.lang.String> params;
            private java.util.List<java.lang.Integer> tagList;
            private int companyId;
            private int hrId;
            public addAllTalentTag_call(java.util.Map<java.lang.String,java.lang.String> params, java.util.List<java.lang.Integer> tagList, int companyId, int hrId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.params = params;
                this.tagList = tagList;
                this.companyId = companyId;
                this.hrId = hrId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addAllTalentTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
                addAllTalentTag_args args = new addAllTalentTag_args();
                args.setParams(params);
                args.setTagList(tagList);
                args.setCompanyId(companyId);
                args.setHrId(hrId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void addAllTalentPublic(int hrId, java.util.Map<java.lang.String,java.lang.String> params, int companyId, int isGdpr, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            addAllTalentPublic_call method_call = new addAllTalentPublic_call(hrId, params, companyId, isGdpr, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class addAllTalentPublic_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private int hrId;
            private java.util.Map<java.lang.String,java.lang.String> params;
            private int companyId;
            private int isGdpr;
            public addAllTalentPublic_call(int hrId, java.util.Map<java.lang.String,java.lang.String> params, int companyId, int isGdpr, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hrId = hrId;
                this.params = params;
                this.companyId = companyId;
                this.isGdpr = isGdpr;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addAllTalentPublic", org.apache.thrift.protocol.TMessageType.CALL, 0));
                addAllTalentPublic_args args = new addAllTalentPublic_args();
                args.setHrId(hrId);
                args.setParams(params);
                args.setCompanyId(companyId);
                args.setIsGdpr(isGdpr);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void addAllTalentPrivate(int hrId, java.util.Map<java.lang.String,java.lang.String> params, int companyId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            addAllTalentPrivate_call method_call = new addAllTalentPrivate_call(hrId, params, companyId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class addAllTalentPrivate_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private int hrId;
            private java.util.Map<java.lang.String,java.lang.String> params;
            private int companyId;
            public addAllTalentPrivate_call(int hrId, java.util.Map<java.lang.String,java.lang.String> params, int companyId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hrId = hrId;
                this.params = params;
                this.companyId = companyId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addAllTalentPrivate", org.apache.thrift.protocol.TMessageType.CALL, 0));
                addAllTalentPrivate_args args = new addAllTalentPrivate_args();
                args.setHrId(hrId);
                args.setParams(params);
                args.setCompanyId(companyId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void cancleAllTalent(int hrId, java.util.Map<java.lang.String,java.lang.String> params, int companyId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            cancleAllTalent_call method_call = new cancleAllTalent_call(hrId, params, companyId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class cancleAllTalent_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private int hrId;
            private java.util.Map<java.lang.String,java.lang.String> params;
            private int companyId;
            public cancleAllTalent_call(int hrId, java.util.Map<java.lang.String,java.lang.String> params, int companyId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hrId = hrId;
                this.params = params;
                this.companyId = companyId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancleAllTalent", org.apache.thrift.protocol.TMessageType.CALL, 0));
                cancleAllTalent_args args = new cancleAllTalent_args();
                args.setHrId(hrId);
                args.setParams(params);
                args.setCompanyId(companyId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void updateCompanyEmailBalance(int company_id, int balance, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            updateCompanyEmailBalance_call method_call = new updateCompanyEmailBalance_call(company_id, balance, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class updateCompanyEmailBalance_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int company_id;
            private int balance;
            public updateCompanyEmailBalance_call(int company_id, int balance, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.company_id = company_id;
                this.balance = balance;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateCompanyEmailBalance", org.apache.thrift.protocol.TMessageType.CALL, 0));
                updateCompanyEmailBalance_args args = new updateCompanyEmailBalance_args();
                args.setCompany_id(company_id);
                args.setBalance(balance);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_updateCompanyEmailBalance();
            }
        }

        public void sendInviteEmail(java.util.Map<java.lang.String,java.lang.String> params, java.util.List<java.lang.Integer> userIdList, java.util.List<java.lang.Integer> positionIdList, int companyId, int hrId, int flag, int positionFlag, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            sendInviteEmail_call method_call = new sendInviteEmail_call(params, userIdList, positionIdList, companyId, hrId, flag, positionFlag, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class sendInviteEmail_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private java.util.Map<java.lang.String,java.lang.String> params;
            private java.util.List<java.lang.Integer> userIdList;
            private java.util.List<java.lang.Integer> positionIdList;
            private int companyId;
            private int hrId;
            private int flag;
            private int positionFlag;
            public sendInviteEmail_call(java.util.Map<java.lang.String,java.lang.String> params, java.util.List<java.lang.Integer> userIdList, java.util.List<java.lang.Integer> positionIdList, int companyId, int hrId, int flag, int positionFlag, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.params = params;
                this.userIdList = userIdList;
                this.positionIdList = positionIdList;
                this.companyId = companyId;
                this.hrId = hrId;
                this.flag = flag;
                this.positionFlag = positionFlag;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendInviteEmail", org.apache.thrift.protocol.TMessageType.CALL, 0));
                sendInviteEmail_args args = new sendInviteEmail_args();
                args.setParams(params);
                args.setUserIdList(userIdList);
                args.setPositionIdList(positionIdList);
                args.setCompanyId(companyId);
                args.setHrId(hrId);
                args.setFlag(flag);
                args.setPositionFlag(positionFlag);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_sendInviteEmail();
            }
        }

        public void sendResumeEmail(java.util.Map<java.lang.String,java.lang.String> params, java.util.List<java.lang.Integer> userIdList, java.util.List<java.lang.Integer> idList, int companyId, int hrId, int flag, java.util.List<java.lang.String> emailList, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            sendResumeEmail_call method_call = new sendResumeEmail_call(params, userIdList, idList, companyId, hrId, flag, emailList, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class sendResumeEmail_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private java.util.Map<java.lang.String,java.lang.String> params;
            private java.util.List<java.lang.Integer> userIdList;
            private java.util.List<java.lang.Integer> idList;
            private int companyId;
            private int hrId;
            private int flag;
            private java.util.List<java.lang.String> emailList;
            public sendResumeEmail_call(java.util.Map<java.lang.String,java.lang.String> params, java.util.List<java.lang.Integer> userIdList, java.util.List<java.lang.Integer> idList, int companyId, int hrId, int flag, java.util.List<java.lang.String> emailList, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.params = params;
                this.userIdList = userIdList;
                this.idList = idList;
                this.companyId = companyId;
                this.hrId = hrId;
                this.flag = flag;
                this.emailList = emailList;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendResumeEmail", org.apache.thrift.protocol.TMessageType.CALL, 0));
                sendResumeEmail_args args = new sendResumeEmail_args();
                args.setParams(params);
                args.setUserIdList(userIdList);
                args.setIdList(idList);
                args.setCompanyId(companyId);
                args.setHrId(hrId);
                args.setFlag(flag);
                args.setEmailList(emailList);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_sendResumeEmail();
            }
        }

        public void sendPositionInviteEmail(int hrId, int positionId, int companyId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            sendPositionInviteEmail_call method_call = new sendPositionInviteEmail_call(hrId, positionId, companyId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class sendPositionInviteEmail_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int hrId;
            private int positionId;
            private int companyId;
            public sendPositionInviteEmail_call(int hrId, int positionId, int companyId, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.hrId = hrId;
                this.positionId = positionId;
                this.companyId = companyId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendPositionInviteEmail", org.apache.thrift.protocol.TMessageType.CALL, 0));
                sendPositionInviteEmail_args args = new sendPositionInviteEmail_args();
                args.setHrId(hrId);
                args.setPositionId(positionId);
                args.setCompanyId(companyId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_sendPositionInviteEmail();
            }
        }

        public void getCompanyCommentByUserIdList(int companyId, java.util.List<java.lang.Integer> userIdList, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getCompanyCommentByUserIdList_call method_call = new getCompanyCommentByUserIdList_call(companyId, userIdList, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getCompanyCommentByUserIdList_call extends org.apache.thrift.async.TAsyncMethodCall<com.moseeker.thrift.gen.common.struct.Response> {
            private int companyId;
            private java.util.List<java.lang.Integer> userIdList;
            public getCompanyCommentByUserIdList_call(int companyId, java.util.List<java.lang.Integer> userIdList, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.companyId = companyId;
                this.userIdList = userIdList;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCompanyCommentByUserIdList", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getCompanyCommentByUserIdList_args args = new getCompanyCommentByUserIdList_args();
                args.setCompanyId(companyId);
                args.setUserIdList(userIdList);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.moseeker.thrift.gen.common.struct.Response getResult() throws com.moseeker.thrift.gen.common.struct.BIZException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getCompanyCommentByUserIdList();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
        public Processor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
            processMap.put("upsertTalentPoolApp", new upsertTalentPoolApp());
            processMap.put("getTalentAllComment", new getTalentAllComment());
            processMap.put("getHrTag", new getHrTag());
            processMap.put("batchAddTalent", new batchAddTalent());
            processMap.put("batchCancelTalent", new batchCancelTalent());
            processMap.put("hrAddTag", new hrAddTag());
            processMap.put("hrDelTag", new hrDelTag());
            processMap.put("hrUpdateTag", new hrUpdateTag());
            processMap.put("batchCancleTalentTag", new batchCancleTalentTag());
            processMap.put("batchAddTalentTag", new batchAddTalentTag());
            processMap.put("hrAddComment", new hrAddComment());
            processMap.put("hrDelComment", new hrDelComment());
            processMap.put("batchAddPublicTalent", new batchAddPublicTalent());
            processMap.put("batchCancelPublicTalent", new batchCancelPublicTalent());
            processMap.put("getCompanyPulicTalent", new getCompanyPulicTalent());
            processMap.put("batchNewAddTalentTag", new batchNewAddTalentTag());
            processMap.put("getTalentStat", new getTalentStat());
            processMap.put("getCompanyUserPublic", new getCompanyUserPublic());
            processMap.put("getCompanyTalent", new getCompanyTalent());
            processMap.put("getHrUserTag", new getHrUserTag());
            processMap.put("getUserOrigin", new getUserOrigin());
            processMap.put("getTalentAndPublicHr", new getTalentAndPublicHr());
            processMap.put("getPositionOrCompanyPast", new getPositionOrCompanyPast());
            processMap.put("addPositionOrCompanyPast", new addPositionOrCompanyPast());
            processMap.put("getTalentTagList", new getTalentTagList());
            processMap.put("getProfileFilterList", new getProfileFilterList());
            processMap.put("handerProfileFilterByIds", new handerProfileFilterByIds());
            processMap.put("getProfileFilterInfo", new getProfileFilterInfo());
            processMap.put("addProfileFilter", new addProfileFilter());
            processMap.put("updateProfileFilter", new updateProfileFilter());
            processMap.put("handlerCompanyTagAndProfile", new handlerCompanyTagAndProfile());
            processMap.put("getTalentCountByPositionFilter", new getTalentCountByPositionFilter());
            processMap.put("getEmailBalance", new getEmailBalance());
            processMap.put("getEmailTemplateList", new getEmailTemplateList());
            processMap.put("getEmailInfo", new getEmailInfo());
            processMap.put("updateCompanyEmailInfo", new updateCompanyEmailInfo());
            processMap.put("fetchEmailAccounts", new fetchEmailAccounts());
            processMap.put("fetchEmailAccountConsumption", new fetchEmailAccountConsumption());
            processMap.put("rechargeEmailAccount", new rechargeEmailAccount());
            processMap.put("updateEmailAccountRechargeValue", new updateEmailAccountRechargeValue());
            processMap.put("addAllTalent", new addAllTalent());
            processMap.put("addAllTalentTag", new addAllTalentTag());
            processMap.put("addAllTalentPublic", new addAllTalentPublic());
            processMap.put("addAllTalentPrivate", new addAllTalentPrivate());
            processMap.put("cancleAllTalent", new cancleAllTalent());
            processMap.put("updateCompanyEmailBalance", new updateCompanyEmailBalance());
            processMap.put("sendInviteEmail", new sendInviteEmail());
            processMap.put("sendResumeEmail", new sendResumeEmail());
            processMap.put("sendPositionInviteEmail", new sendPositionInviteEmail());
            processMap.put("getCompanyCommentByUserIdList", new getCompanyCommentByUserIdList());
            return processMap;
        }

        public static class upsertTalentPoolApp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, upsertTalentPoolApp_args> {
            public upsertTalentPoolApp() {
                super("upsertTalentPoolApp");
            }

            public upsertTalentPoolApp_args getEmptyArgsInstance() {
                return new upsertTalentPoolApp_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public upsertTalentPoolApp_result getResult(I iface, upsertTalentPoolApp_args args) throws org.apache.thrift.TException {
                upsertTalentPoolApp_result result = new upsertTalentPoolApp_result();
                try {
                    result.success = iface.upsertTalentPoolApp(args.hrId, args.companyId, args.type);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getTalentAllComment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTalentAllComment_args> {
            public getTalentAllComment() {
                super("getTalentAllComment");
            }

            public getTalentAllComment_args getEmptyArgsInstance() {
                return new getTalentAllComment_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getTalentAllComment_result getResult(I iface, getTalentAllComment_args args) throws org.apache.thrift.TException {
                getTalentAllComment_result result = new getTalentAllComment_result();
                try {
                    result.success = iface.getTalentAllComment(args.hr_id, args.company_id, args.user_id, args.page_number, args.page_size);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getHrTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHrTag_args> {
            public getHrTag() {
                super("getHrTag");
            }

            public getHrTag_args getEmptyArgsInstance() {
                return new getHrTag_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getHrTag_result getResult(I iface, getHrTag_args args) throws org.apache.thrift.TException {
                getHrTag_result result = new getHrTag_result();
                try {
                    result.success = iface.getHrTag(args.hr_id, args.company_id, args.page_number, args.page_size);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class batchAddTalent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchAddTalent_args> {
            public batchAddTalent() {
                super("batchAddTalent");
            }

            public batchAddTalent_args getEmptyArgsInstance() {
                return new batchAddTalent_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public batchAddTalent_result getResult(I iface, batchAddTalent_args args) throws org.apache.thrift.TException {
                batchAddTalent_result result = new batchAddTalent_result();
                try {
                    result.success = iface.batchAddTalent(args.hr_id, args.user_ids, args.company_id, args.isGdpr);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class batchCancelTalent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchCancelTalent_args> {
            public batchCancelTalent() {
                super("batchCancelTalent");
            }

            public batchCancelTalent_args getEmptyArgsInstance() {
                return new batchCancelTalent_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public batchCancelTalent_result getResult(I iface, batchCancelTalent_args args) throws org.apache.thrift.TException {
                batchCancelTalent_result result = new batchCancelTalent_result();
                try {
                    result.success = iface.batchCancelTalent(args.hr_id, args.user_ids, args.company_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class hrAddTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hrAddTag_args> {
            public hrAddTag() {
                super("hrAddTag");
            }

            public hrAddTag_args getEmptyArgsInstance() {
                return new hrAddTag_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public hrAddTag_result getResult(I iface, hrAddTag_args args) throws org.apache.thrift.TException {
                hrAddTag_result result = new hrAddTag_result();
                try {
                    result.success = iface.hrAddTag(args.hr_id, args.company_id, args.name);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class hrDelTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hrDelTag_args> {
            public hrDelTag() {
                super("hrDelTag");
            }

            public hrDelTag_args getEmptyArgsInstance() {
                return new hrDelTag_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public hrDelTag_result getResult(I iface, hrDelTag_args args) throws org.apache.thrift.TException {
                hrDelTag_result result = new hrDelTag_result();
                try {
                    result.success = iface.hrDelTag(args.hr_id, args.company_id, args.tag_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class hrUpdateTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hrUpdateTag_args> {
            public hrUpdateTag() {
                super("hrUpdateTag");
            }

            public hrUpdateTag_args getEmptyArgsInstance() {
                return new hrUpdateTag_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public hrUpdateTag_result getResult(I iface, hrUpdateTag_args args) throws org.apache.thrift.TException {
                hrUpdateTag_result result = new hrUpdateTag_result();
                try {
                    result.success = iface.hrUpdateTag(args.hr_id, args.company_id, args.tag_id, args.name);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class batchCancleTalentTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchCancleTalentTag_args> {
            public batchCancleTalentTag() {
                super("batchCancleTalentTag");
            }

            public batchCancleTalentTag_args getEmptyArgsInstance() {
                return new batchCancleTalentTag_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public batchCancleTalentTag_result getResult(I iface, batchCancleTalentTag_args args) throws org.apache.thrift.TException {
                batchCancleTalentTag_result result = new batchCancleTalentTag_result();
                try {
                    result.success = iface.batchCancleTalentTag(args.hr_id, args.user_ids, args.tag_ids, args.company_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class batchAddTalentTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchAddTalentTag_args> {
            public batchAddTalentTag() {
                super("batchAddTalentTag");
            }

            public batchAddTalentTag_args getEmptyArgsInstance() {
                return new batchAddTalentTag_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public batchAddTalentTag_result getResult(I iface, batchAddTalentTag_args args) throws org.apache.thrift.TException {
                batchAddTalentTag_result result = new batchAddTalentTag_result();
                try {
                    result.success = iface.batchAddTalentTag(args.hr_id, args.user_ids, args.tag_ids, args.company_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class hrAddComment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hrAddComment_args> {
            public hrAddComment() {
                super("hrAddComment");
            }

            public hrAddComment_args getEmptyArgsInstance() {
                return new hrAddComment_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public hrAddComment_result getResult(I iface, hrAddComment_args args) throws org.apache.thrift.TException {
                hrAddComment_result result = new hrAddComment_result();
                try {
                    result.success = iface.hrAddComment(args.hr_id, args.company_id, args.user_id, args.content);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class hrDelComment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hrDelComment_args> {
            public hrDelComment() {
                super("hrDelComment");
            }

            public hrDelComment_args getEmptyArgsInstance() {
                return new hrDelComment_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public hrDelComment_result getResult(I iface, hrDelComment_args args) throws org.apache.thrift.TException {
                hrDelComment_result result = new hrDelComment_result();
                try {
                    result.success = iface.hrDelComment(args.hr_id, args.company_id, args.comment_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class batchAddPublicTalent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchAddPublicTalent_args> {
            public batchAddPublicTalent() {
                super("batchAddPublicTalent");
            }

            public batchAddPublicTalent_args getEmptyArgsInstance() {
                return new batchAddPublicTalent_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public batchAddPublicTalent_result getResult(I iface, batchAddPublicTalent_args args) throws org.apache.thrift.TException {
                batchAddPublicTalent_result result = new batchAddPublicTalent_result();
                try {
                    result.success = iface.batchAddPublicTalent(args.hr_id, args.company_id, args.user_ids, args.isGdpr);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class batchCancelPublicTalent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchCancelPublicTalent_args> {
            public batchCancelPublicTalent() {
                super("batchCancelPublicTalent");
            }

            public batchCancelPublicTalent_args getEmptyArgsInstance() {
                return new batchCancelPublicTalent_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public batchCancelPublicTalent_result getResult(I iface, batchCancelPublicTalent_args args) throws org.apache.thrift.TException {
                batchCancelPublicTalent_result result = new batchCancelPublicTalent_result();
                try {
                    result.success = iface.batchCancelPublicTalent(args.hr_id, args.company_id, args.user_ids);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getCompanyPulicTalent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCompanyPulicTalent_args> {
            public getCompanyPulicTalent() {
                super("getCompanyPulicTalent");
            }

            public getCompanyPulicTalent_args getEmptyArgsInstance() {
                return new getCompanyPulicTalent_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getCompanyPulicTalent_result getResult(I iface, getCompanyPulicTalent_args args) throws org.apache.thrift.TException {
                getCompanyPulicTalent_result result = new getCompanyPulicTalent_result();
                try {
                    result.success = iface.getCompanyPulicTalent(args.hr_id, args.company_id, args.page_number, args.page_size);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class batchNewAddTalentTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchNewAddTalentTag_args> {
            public batchNewAddTalentTag() {
                super("batchNewAddTalentTag");
            }

            public batchNewAddTalentTag_args getEmptyArgsInstance() {
                return new batchNewAddTalentTag_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public batchNewAddTalentTag_result getResult(I iface, batchNewAddTalentTag_args args) throws org.apache.thrift.TException {
                batchNewAddTalentTag_result result = new batchNewAddTalentTag_result();
                try {
                    result.success = iface.batchNewAddTalentTag(args.hr_id, args.user_ids, args.tag_ids, args.company_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getTalentStat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTalentStat_args> {
            public getTalentStat() {
                super("getTalentStat");
            }

            public getTalentStat_args getEmptyArgsInstance() {
                return new getTalentStat_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getTalentStat_result getResult(I iface, getTalentStat_args args) throws org.apache.thrift.TException {
                getTalentStat_result result = new getTalentStat_result();
                try {
                    result.success = iface.getTalentStat(args.hr_id, args.company_id, args.type);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getCompanyUserPublic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCompanyUserPublic_args> {
            public getCompanyUserPublic() {
                super("getCompanyUserPublic");
            }

            public getCompanyUserPublic_args getEmptyArgsInstance() {
                return new getCompanyUserPublic_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getCompanyUserPublic_result getResult(I iface, getCompanyUserPublic_args args) throws org.apache.thrift.TException {
                getCompanyUserPublic_result result = new getCompanyUserPublic_result();
                try {
                    result.success = iface.getCompanyUserPublic(args.hr_id, args.company_id, args.user_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getCompanyTalent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCompanyTalent_args> {
            public getCompanyTalent() {
                super("getCompanyTalent");
            }

            public getCompanyTalent_args getEmptyArgsInstance() {
                return new getCompanyTalent_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getCompanyTalent_result getResult(I iface, getCompanyTalent_args args) throws org.apache.thrift.TException {
                getCompanyTalent_result result = new getCompanyTalent_result();
                try {
                    result.success = iface.getCompanyTalent(args.hr_id, args.company_id, args.user_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getHrUserTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHrUserTag_args> {
            public getHrUserTag() {
                super("getHrUserTag");
            }

            public getHrUserTag_args getEmptyArgsInstance() {
                return new getHrUserTag_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getHrUserTag_result getResult(I iface, getHrUserTag_args args) throws org.apache.thrift.TException {
                getHrUserTag_result result = new getHrUserTag_result();
                try {
                    result.success = iface.getHrUserTag(args.hr_id, args.company_id, args.user_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getUserOrigin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserOrigin_args> {
            public getUserOrigin() {
                super("getUserOrigin");
            }

            public getUserOrigin_args getEmptyArgsInstance() {
                return new getUserOrigin_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getUserOrigin_result getResult(I iface, getUserOrigin_args args) throws org.apache.thrift.TException {
                getUserOrigin_result result = new getUserOrigin_result();
                try {
                    result.success = iface.getUserOrigin(args.hr_id, args.company_id, args.user_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getTalentAndPublicHr<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTalentAndPublicHr_args> {
            public getTalentAndPublicHr() {
                super("getTalentAndPublicHr");
            }

            public getTalentAndPublicHr_args getEmptyArgsInstance() {
                return new getTalentAndPublicHr_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getTalentAndPublicHr_result getResult(I iface, getTalentAndPublicHr_args args) throws org.apache.thrift.TException {
                getTalentAndPublicHr_result result = new getTalentAndPublicHr_result();
                try {
                    result.success = iface.getTalentAndPublicHr(args.hr_id, args.company_id, args.user_ids);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getPositionOrCompanyPast<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPositionOrCompanyPast_args> {
            public getPositionOrCompanyPast() {
                super("getPositionOrCompanyPast");
            }

            public getPositionOrCompanyPast_args getEmptyArgsInstance() {
                return new getPositionOrCompanyPast_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getPositionOrCompanyPast_result getResult(I iface, getPositionOrCompanyPast_args args) throws org.apache.thrift.TException {
                getPositionOrCompanyPast_result result = new getPositionOrCompanyPast_result();
                try {
                    result.success = iface.getPositionOrCompanyPast(args.company_id, args.type, args.flag);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class addPositionOrCompanyPast<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addPositionOrCompanyPast_args> {
            public addPositionOrCompanyPast() {
                super("addPositionOrCompanyPast");
            }

            public addPositionOrCompanyPast_args getEmptyArgsInstance() {
                return new addPositionOrCompanyPast_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public addPositionOrCompanyPast_result getResult(I iface, addPositionOrCompanyPast_args args) throws org.apache.thrift.TException {
                addPositionOrCompanyPast_result result = new addPositionOrCompanyPast_result();
                try {
                    result.success = iface.addPositionOrCompanyPast(args.company_id, args.type, args.flag, args.name);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getTalentTagList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTalentTagList_args> {
            public getTalentTagList() {
                super("getTalentTagList");
            }

            public getTalentTagList_args getEmptyArgsInstance() {
                return new getTalentTagList_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getTalentTagList_result getResult(I iface, getTalentTagList_args args) throws org.apache.thrift.TException {
                getTalentTagList_result result = new getTalentTagList_result();
                try {
                    result.success = iface.getTalentTagList(args.hr_id, args.company_id, args.page_number, args.page_size);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getProfileFilterList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProfileFilterList_args> {
            public getProfileFilterList() {
                super("getProfileFilterList");
            }

            public getProfileFilterList_args getEmptyArgsInstance() {
                return new getProfileFilterList_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getProfileFilterList_result getResult(I iface, getProfileFilterList_args args) throws org.apache.thrift.TException {
                getProfileFilterList_result result = new getProfileFilterList_result();
                try {
                    result.success = iface.getProfileFilterList(args.hr_id, args.company_id, args.page_number, args.page_size);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class handerProfileFilterByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, handerProfileFilterByIds_args> {
            public handerProfileFilterByIds() {
                super("handerProfileFilterByIds");
            }

            public handerProfileFilterByIds_args getEmptyArgsInstance() {
                return new handerProfileFilterByIds_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public handerProfileFilterByIds_result getResult(I iface, handerProfileFilterByIds_args args) throws org.apache.thrift.TException {
                handerProfileFilterByIds_result result = new handerProfileFilterByIds_result();
                try {
                    result.success = iface.handerProfileFilterByIds(args.hr_id, args.company_id, args.disable, args.filter_ids);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getProfileFilterInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProfileFilterInfo_args> {
            public getProfileFilterInfo() {
                super("getProfileFilterInfo");
            }

            public getProfileFilterInfo_args getEmptyArgsInstance() {
                return new getProfileFilterInfo_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getProfileFilterInfo_result getResult(I iface, getProfileFilterInfo_args args) throws org.apache.thrift.TException {
                getProfileFilterInfo_result result = new getProfileFilterInfo_result();
                try {
                    result.success = iface.getProfileFilterInfo(args.hr_id, args.company_id, args.filter_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class addProfileFilter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addProfileFilter_args> {
            public addProfileFilter() {
                super("addProfileFilter");
            }

            public addProfileFilter_args getEmptyArgsInstance() {
                return new addProfileFilter_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public addProfileFilter_result getResult(I iface, addProfileFilter_args args) throws org.apache.thrift.TException {
                addProfileFilter_result result = new addProfileFilter_result();
                try {
                    result.success = iface.addProfileFilter(args.companyTagDO, args.actionForm, args.positionIdList, args.hr_id, args.position_total);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class updateProfileFilter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateProfileFilter_args> {
            public updateProfileFilter() {
                super("updateProfileFilter");
            }

            public updateProfileFilter_args getEmptyArgsInstance() {
                return new updateProfileFilter_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public updateProfileFilter_result getResult(I iface, updateProfileFilter_args args) throws org.apache.thrift.TException {
                updateProfileFilter_result result = new updateProfileFilter_result();
                try {
                    result.success = iface.updateProfileFilter(args.companyTagDO, args.actionForm, args.positionIdList, args.hr_id, args.position_total);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class handlerCompanyTagAndProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, handlerCompanyTagAndProfile_args> {
            public handlerCompanyTagAndProfile() {
                super("handlerCompanyTagAndProfile");
            }

            public handlerCompanyTagAndProfile_args getEmptyArgsInstance() {
                return new handlerCompanyTagAndProfile_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public handlerCompanyTagAndProfile_result getResult(I iface, handlerCompanyTagAndProfile_args args) throws org.apache.thrift.TException {
                handlerCompanyTagAndProfile_result result = new handlerCompanyTagAndProfile_result();
                try {
                    iface.handlerCompanyTagAndProfile(args.userid_list, args.company_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getTalentCountByPositionFilter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTalentCountByPositionFilter_args> {
            public getTalentCountByPositionFilter() {
                super("getTalentCountByPositionFilter");
            }

            public getTalentCountByPositionFilter_args getEmptyArgsInstance() {
                return new getTalentCountByPositionFilter_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getTalentCountByPositionFilter_result getResult(I iface, getTalentCountByPositionFilter_args args) throws org.apache.thrift.TException {
                getTalentCountByPositionFilter_result result = new getTalentCountByPositionFilter_result();
                try {
                    result.success = iface.getTalentCountByPositionFilter(args.hr_id, args.company_id, args.position_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getEmailBalance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEmailBalance_args> {
            public getEmailBalance() {
                super("getEmailBalance");
            }

            public getEmailBalance_args getEmptyArgsInstance() {
                return new getEmailBalance_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getEmailBalance_result getResult(I iface, getEmailBalance_args args) throws org.apache.thrift.TException {
                getEmailBalance_result result = new getEmailBalance_result();
                try {
                    result.success = iface.getEmailBalance(args.hr_id, args.company_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getEmailTemplateList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEmailTemplateList_args> {
            public getEmailTemplateList() {
                super("getEmailTemplateList");
            }

            public getEmailTemplateList_args getEmptyArgsInstance() {
                return new getEmailTemplateList_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getEmailTemplateList_result getResult(I iface, getEmailTemplateList_args args) throws org.apache.thrift.TException {
                getEmailTemplateList_result result = new getEmailTemplateList_result();
                try {
                    result.success = iface.getEmailTemplateList(args.hr_id, args.company_id);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getEmailInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEmailInfo_args> {
            public getEmailInfo() {
                super("getEmailInfo");
            }

            public getEmailInfo_args getEmptyArgsInstance() {
                return new getEmailInfo_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getEmailInfo_result getResult(I iface, getEmailInfo_args args) throws org.apache.thrift.TException {
                getEmailInfo_result result = new getEmailInfo_result();
                try {
                    result.success = iface.getEmailInfo(args.hr_id, args.company_id, args.type);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class updateCompanyEmailInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateCompanyEmailInfo_args> {
            public updateCompanyEmailInfo() {
                super("updateCompanyEmailInfo");
            }

            public updateCompanyEmailInfo_args getEmptyArgsInstance() {
                return new updateCompanyEmailInfo_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public updateCompanyEmailInfo_result getResult(I iface, updateCompanyEmailInfo_args args) throws org.apache.thrift.TException {
                updateCompanyEmailInfo_result result = new updateCompanyEmailInfo_result();
                try {
                    result.success = iface.updateCompanyEmailInfo(args.hr_id, args.company_id, args.type, args.disable, args.context, args.inscribe);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class fetchEmailAccounts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchEmailAccounts_args> {
            public fetchEmailAccounts() {
                super("fetchEmailAccounts");
            }

            public fetchEmailAccounts_args getEmptyArgsInstance() {
                return new fetchEmailAccounts_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public fetchEmailAccounts_result getResult(I iface, fetchEmailAccounts_args args) throws org.apache.thrift.TException {
                fetchEmailAccounts_result result = new fetchEmailAccounts_result();
                try {
                    result.success = iface.fetchEmailAccounts(args.companyId, args.companyName, args.pageNumber, args.pageSize);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class fetchEmailAccountConsumption<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchEmailAccountConsumption_args> {
            public fetchEmailAccountConsumption() {
                super("fetchEmailAccountConsumption");
            }

            public fetchEmailAccountConsumption_args getEmptyArgsInstance() {
                return new fetchEmailAccountConsumption_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public fetchEmailAccountConsumption_result getResult(I iface, fetchEmailAccountConsumption_args args) throws org.apache.thrift.TException {
                fetchEmailAccountConsumption_result result = new fetchEmailAccountConsumption_result();
                try {
                    result.success = iface.fetchEmailAccountConsumption(args.companyId, args.type, args.pageNumber, args.pageSize, args.startDate, args.endDate);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class rechargeEmailAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rechargeEmailAccount_args> {
            public rechargeEmailAccount() {
                super("rechargeEmailAccount");
            }

            public rechargeEmailAccount_args getEmptyArgsInstance() {
                return new rechargeEmailAccount_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public rechargeEmailAccount_result getResult(I iface, rechargeEmailAccount_args args) throws org.apache.thrift.TException {
                rechargeEmailAccount_result result = new rechargeEmailAccount_result();
                try {
                    result.success = iface.rechargeEmailAccount(args.companyId, args.lost);
                    result.setSuccessIsSet(true);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class updateEmailAccountRechargeValue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateEmailAccountRechargeValue_args> {
            public updateEmailAccountRechargeValue() {
                super("updateEmailAccountRechargeValue");
            }

            public updateEmailAccountRechargeValue_args getEmptyArgsInstance() {
                return new updateEmailAccountRechargeValue_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public updateEmailAccountRechargeValue_result getResult(I iface, updateEmailAccountRechargeValue_args args) throws org.apache.thrift.TException {
                updateEmailAccountRechargeValue_result result = new updateEmailAccountRechargeValue_result();
                try {
                    iface.updateEmailAccountRechargeValue(args.id, args.lost);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class addAllTalent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addAllTalent_args> {
            public addAllTalent() {
                super("addAllTalent");
            }

            public addAllTalent_args getEmptyArgsInstance() {
                return new addAllTalent_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public addAllTalent_result getResult(I iface, addAllTalent_args args) throws org.apache.thrift.TException {
                addAllTalent_result result = new addAllTalent_result();
                try {
                    iface.addAllTalent(args.hrId, args.params, args.companyId, args.isGdpr);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class addAllTalentTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addAllTalentTag_args> {
            public addAllTalentTag() {
                super("addAllTalentTag");
            }

            public addAllTalentTag_args getEmptyArgsInstance() {
                return new addAllTalentTag_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public addAllTalentTag_result getResult(I iface, addAllTalentTag_args args) throws org.apache.thrift.TException {
                addAllTalentTag_result result = new addAllTalentTag_result();
                try {
                    iface.addAllTalentTag(args.params, args.tagList, args.companyId, args.hrId);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class addAllTalentPublic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addAllTalentPublic_args> {
            public addAllTalentPublic() {
                super("addAllTalentPublic");
            }

            public addAllTalentPublic_args getEmptyArgsInstance() {
                return new addAllTalentPublic_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public addAllTalentPublic_result getResult(I iface, addAllTalentPublic_args args) throws org.apache.thrift.TException {
                addAllTalentPublic_result result = new addAllTalentPublic_result();
                try {
                    iface.addAllTalentPublic(args.hrId, args.params, args.companyId, args.isGdpr);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class addAllTalentPrivate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addAllTalentPrivate_args> {
            public addAllTalentPrivate() {
                super("addAllTalentPrivate");
            }

            public addAllTalentPrivate_args getEmptyArgsInstance() {
                return new addAllTalentPrivate_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public addAllTalentPrivate_result getResult(I iface, addAllTalentPrivate_args args) throws org.apache.thrift.TException {
                addAllTalentPrivate_result result = new addAllTalentPrivate_result();
                try {
                    iface.addAllTalentPrivate(args.hrId, args.params, args.companyId);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class cancleAllTalent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancleAllTalent_args> {
            public cancleAllTalent() {
                super("cancleAllTalent");
            }

            public cancleAllTalent_args getEmptyArgsInstance() {
                return new cancleAllTalent_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public cancleAllTalent_result getResult(I iface, cancleAllTalent_args args) throws org.apache.thrift.TException {
                cancleAllTalent_result result = new cancleAllTalent_result();
                try {
                    iface.cancleAllTalent(args.hrId, args.params, args.companyId);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class updateCompanyEmailBalance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateCompanyEmailBalance_args> {
            public updateCompanyEmailBalance() {
                super("updateCompanyEmailBalance");
            }

            public updateCompanyEmailBalance_args getEmptyArgsInstance() {
                return new updateCompanyEmailBalance_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public updateCompanyEmailBalance_result getResult(I iface, updateCompanyEmailBalance_args args) throws org.apache.thrift.TException {
                updateCompanyEmailBalance_result result = new updateCompanyEmailBalance_result();
                try {
                    result.success = iface.updateCompanyEmailBalance(args.company_id, args.balance);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class sendInviteEmail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendInviteEmail_args> {
            public sendInviteEmail() {
                super("sendInviteEmail");
            }

            public sendInviteEmail_args getEmptyArgsInstance() {
                return new sendInviteEmail_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public sendInviteEmail_result getResult(I iface, sendInviteEmail_args args) throws org.apache.thrift.TException {
                sendInviteEmail_result result = new sendInviteEmail_result();
                try {
                    result.success = iface.sendInviteEmail(args.params, args.userIdList, args.positionIdList, args.companyId, args.hrId, args.flag, args.positionFlag);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class sendResumeEmail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendResumeEmail_args> {
            public sendResumeEmail() {
                super("sendResumeEmail");
            }

            public sendResumeEmail_args getEmptyArgsInstance() {
                return new sendResumeEmail_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public sendResumeEmail_result getResult(I iface, sendResumeEmail_args args) throws org.apache.thrift.TException {
                sendResumeEmail_result result = new sendResumeEmail_result();
                try {
                    result.success = iface.sendResumeEmail(args.params, args.userIdList, args.idList, args.companyId, args.hrId, args.flag, args.emailList);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class sendPositionInviteEmail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendPositionInviteEmail_args> {
            public sendPositionInviteEmail() {
                super("sendPositionInviteEmail");
            }

            public sendPositionInviteEmail_args getEmptyArgsInstance() {
                return new sendPositionInviteEmail_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public sendPositionInviteEmail_result getResult(I iface, sendPositionInviteEmail_args args) throws org.apache.thrift.TException {
                sendPositionInviteEmail_result result = new sendPositionInviteEmail_result();
                try {
                    result.success = iface.sendPositionInviteEmail(args.hrId, args.positionId, args.companyId);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getCompanyCommentByUserIdList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCompanyCommentByUserIdList_args> {
            public getCompanyCommentByUserIdList() {
                super("getCompanyCommentByUserIdList");
            }

            public getCompanyCommentByUserIdList_args getEmptyArgsInstance() {
                return new getCompanyCommentByUserIdList_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getCompanyCommentByUserIdList_result getResult(I iface, getCompanyCommentByUserIdList_args args) throws org.apache.thrift.TException {
                getCompanyCommentByUserIdList_result result = new getCompanyCommentByUserIdList_result();
                try {
                    result.success = iface.getCompanyCommentByUserIdList(args.companyId, args.userIdList);
                } catch (com.moseeker.thrift.gen.common.struct.BIZException e) {
                    result.e = e;
                }
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("upsertTalentPoolApp", new upsertTalentPoolApp());
            processMap.put("getTalentAllComment", new getTalentAllComment());
            processMap.put("getHrTag", new getHrTag());
            processMap.put("batchAddTalent", new batchAddTalent());
            processMap.put("batchCancelTalent", new batchCancelTalent());
            processMap.put("hrAddTag", new hrAddTag());
            processMap.put("hrDelTag", new hrDelTag());
            processMap.put("hrUpdateTag", new hrUpdateTag());
            processMap.put("batchCancleTalentTag", new batchCancleTalentTag());
            processMap.put("batchAddTalentTag", new batchAddTalentTag());
            processMap.put("hrAddComment", new hrAddComment());
            processMap.put("hrDelComment", new hrDelComment());
            processMap.put("batchAddPublicTalent", new batchAddPublicTalent());
            processMap.put("batchCancelPublicTalent", new batchCancelPublicTalent());
            processMap.put("getCompanyPulicTalent", new getCompanyPulicTalent());
            processMap.put("batchNewAddTalentTag", new batchNewAddTalentTag());
            processMap.put("getTalentStat", new getTalentStat());
            processMap.put("getCompanyUserPublic", new getCompanyUserPublic());
            processMap.put("getCompanyTalent", new getCompanyTalent());
            processMap.put("getHrUserTag", new getHrUserTag());
            processMap.put("getUserOrigin", new getUserOrigin());
            processMap.put("getTalentAndPublicHr", new getTalentAndPublicHr());
            processMap.put("getPositionOrCompanyPast", new getPositionOrCompanyPast());
            processMap.put("addPositionOrCompanyPast", new addPositionOrCompanyPast());
            processMap.put("getTalentTagList", new getTalentTagList());
            processMap.put("getProfileFilterList", new getProfileFilterList());
            processMap.put("handerProfileFilterByIds", new handerProfileFilterByIds());
            processMap.put("getProfileFilterInfo", new getProfileFilterInfo());
            processMap.put("addProfileFilter", new addProfileFilter());
            processMap.put("updateProfileFilter", new updateProfileFilter());
            processMap.put("handlerCompanyTagAndProfile", new handlerCompanyTagAndProfile());
            processMap.put("getTalentCountByPositionFilter", new getTalentCountByPositionFilter());
            processMap.put("getEmailBalance", new getEmailBalance());
            processMap.put("getEmailTemplateList", new getEmailTemplateList());
            processMap.put("getEmailInfo", new getEmailInfo());
            processMap.put("updateCompanyEmailInfo", new updateCompanyEmailInfo());
            processMap.put("fetchEmailAccounts", new fetchEmailAccounts());
            processMap.put("fetchEmailAccountConsumption", new fetchEmailAccountConsumption());
            processMap.put("rechargeEmailAccount", new rechargeEmailAccount());
            processMap.put("updateEmailAccountRechargeValue", new updateEmailAccountRechargeValue());
            processMap.put("addAllTalent", new addAllTalent());
            processMap.put("addAllTalentTag", new addAllTalentTag());
            processMap.put("addAllTalentPublic", new addAllTalentPublic());
            processMap.put("addAllTalentPrivate", new addAllTalentPrivate());
            processMap.put("cancleAllTalent", new cancleAllTalent());
            processMap.put("updateCompanyEmailBalance", new updateCompanyEmailBalance());
            processMap.put("sendInviteEmail", new sendInviteEmail());
            processMap.put("sendResumeEmail", new sendResumeEmail());
            processMap.put("sendPositionInviteEmail", new sendPositionInviteEmail());
            processMap.put("getCompanyCommentByUserIdList", new getCompanyCommentByUserIdList());
            return processMap;
        }

        public static class upsertTalentPoolApp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, upsertTalentPoolApp_args, com.moseeker.thrift.gen.common.struct.Response> {
            public upsertTalentPoolApp() {
                super("upsertTalentPoolApp");
            }

            public upsertTalentPoolApp_args getEmptyArgsInstance() {
                return new upsertTalentPoolApp_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        upsertTalentPoolApp_result result = new upsertTalentPoolApp_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        upsertTalentPoolApp_result result = new upsertTalentPoolApp_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, upsertTalentPoolApp_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.upsertTalentPoolApp(args.hrId, args.companyId, args.type,resultHandler);
            }
        }

        public static class getTalentAllComment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTalentAllComment_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getTalentAllComment() {
                super("getTalentAllComment");
            }

            public getTalentAllComment_args getEmptyArgsInstance() {
                return new getTalentAllComment_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getTalentAllComment_result result = new getTalentAllComment_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getTalentAllComment_result result = new getTalentAllComment_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getTalentAllComment_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getTalentAllComment(args.hr_id, args.company_id, args.user_id, args.page_number, args.page_size,resultHandler);
            }
        }

        public static class getHrTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHrTag_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getHrTag() {
                super("getHrTag");
            }

            public getHrTag_args getEmptyArgsInstance() {
                return new getHrTag_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getHrTag_result result = new getHrTag_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getHrTag_result result = new getHrTag_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getHrTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getHrTag(args.hr_id, args.company_id, args.page_number, args.page_size,resultHandler);
            }
        }

        public static class batchAddTalent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchAddTalent_args, com.moseeker.thrift.gen.common.struct.Response> {
            public batchAddTalent() {
                super("batchAddTalent");
            }

            public batchAddTalent_args getEmptyArgsInstance() {
                return new batchAddTalent_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        batchAddTalent_result result = new batchAddTalent_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        batchAddTalent_result result = new batchAddTalent_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, batchAddTalent_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.batchAddTalent(args.hr_id, args.user_ids, args.company_id, args.isGdpr,resultHandler);
            }
        }

        public static class batchCancelTalent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchCancelTalent_args, com.moseeker.thrift.gen.common.struct.Response> {
            public batchCancelTalent() {
                super("batchCancelTalent");
            }

            public batchCancelTalent_args getEmptyArgsInstance() {
                return new batchCancelTalent_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        batchCancelTalent_result result = new batchCancelTalent_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        batchCancelTalent_result result = new batchCancelTalent_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, batchCancelTalent_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.batchCancelTalent(args.hr_id, args.user_ids, args.company_id,resultHandler);
            }
        }

        public static class hrAddTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hrAddTag_args, com.moseeker.thrift.gen.common.struct.Response> {
            public hrAddTag() {
                super("hrAddTag");
            }

            public hrAddTag_args getEmptyArgsInstance() {
                return new hrAddTag_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        hrAddTag_result result = new hrAddTag_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        hrAddTag_result result = new hrAddTag_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, hrAddTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.hrAddTag(args.hr_id, args.company_id, args.name,resultHandler);
            }
        }

        public static class hrDelTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hrDelTag_args, com.moseeker.thrift.gen.common.struct.Response> {
            public hrDelTag() {
                super("hrDelTag");
            }

            public hrDelTag_args getEmptyArgsInstance() {
                return new hrDelTag_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        hrDelTag_result result = new hrDelTag_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        hrDelTag_result result = new hrDelTag_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, hrDelTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.hrDelTag(args.hr_id, args.company_id, args.tag_id,resultHandler);
            }
        }

        public static class hrUpdateTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hrUpdateTag_args, com.moseeker.thrift.gen.common.struct.Response> {
            public hrUpdateTag() {
                super("hrUpdateTag");
            }

            public hrUpdateTag_args getEmptyArgsInstance() {
                return new hrUpdateTag_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        hrUpdateTag_result result = new hrUpdateTag_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        hrUpdateTag_result result = new hrUpdateTag_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, hrUpdateTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.hrUpdateTag(args.hr_id, args.company_id, args.tag_id, args.name,resultHandler);
            }
        }

        public static class batchCancleTalentTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchCancleTalentTag_args, com.moseeker.thrift.gen.common.struct.Response> {
            public batchCancleTalentTag() {
                super("batchCancleTalentTag");
            }

            public batchCancleTalentTag_args getEmptyArgsInstance() {
                return new batchCancleTalentTag_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        batchCancleTalentTag_result result = new batchCancleTalentTag_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        batchCancleTalentTag_result result = new batchCancleTalentTag_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, batchCancleTalentTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.batchCancleTalentTag(args.hr_id, args.user_ids, args.tag_ids, args.company_id,resultHandler);
            }
        }

        public static class batchAddTalentTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchAddTalentTag_args, com.moseeker.thrift.gen.common.struct.Response> {
            public batchAddTalentTag() {
                super("batchAddTalentTag");
            }

            public batchAddTalentTag_args getEmptyArgsInstance() {
                return new batchAddTalentTag_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        batchAddTalentTag_result result = new batchAddTalentTag_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        batchAddTalentTag_result result = new batchAddTalentTag_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, batchAddTalentTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.batchAddTalentTag(args.hr_id, args.user_ids, args.tag_ids, args.company_id,resultHandler);
            }
        }

        public static class hrAddComment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hrAddComment_args, com.moseeker.thrift.gen.common.struct.Response> {
            public hrAddComment() {
                super("hrAddComment");
            }

            public hrAddComment_args getEmptyArgsInstance() {
                return new hrAddComment_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        hrAddComment_result result = new hrAddComment_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        hrAddComment_result result = new hrAddComment_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, hrAddComment_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.hrAddComment(args.hr_id, args.company_id, args.user_id, args.content,resultHandler);
            }
        }

        public static class hrDelComment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hrDelComment_args, com.moseeker.thrift.gen.common.struct.Response> {
            public hrDelComment() {
                super("hrDelComment");
            }

            public hrDelComment_args getEmptyArgsInstance() {
                return new hrDelComment_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        hrDelComment_result result = new hrDelComment_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        hrDelComment_result result = new hrDelComment_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, hrDelComment_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.hrDelComment(args.hr_id, args.company_id, args.comment_id,resultHandler);
            }
        }

        public static class batchAddPublicTalent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchAddPublicTalent_args, com.moseeker.thrift.gen.common.struct.Response> {
            public batchAddPublicTalent() {
                super("batchAddPublicTalent");
            }

            public batchAddPublicTalent_args getEmptyArgsInstance() {
                return new batchAddPublicTalent_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        batchAddPublicTalent_result result = new batchAddPublicTalent_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        batchAddPublicTalent_result result = new batchAddPublicTalent_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, batchAddPublicTalent_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.batchAddPublicTalent(args.hr_id, args.company_id, args.user_ids, args.isGdpr,resultHandler);
            }
        }

        public static class batchCancelPublicTalent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchCancelPublicTalent_args, com.moseeker.thrift.gen.common.struct.Response> {
            public batchCancelPublicTalent() {
                super("batchCancelPublicTalent");
            }

            public batchCancelPublicTalent_args getEmptyArgsInstance() {
                return new batchCancelPublicTalent_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        batchCancelPublicTalent_result result = new batchCancelPublicTalent_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        batchCancelPublicTalent_result result = new batchCancelPublicTalent_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, batchCancelPublicTalent_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.batchCancelPublicTalent(args.hr_id, args.company_id, args.user_ids,resultHandler);
            }
        }

        public static class getCompanyPulicTalent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCompanyPulicTalent_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getCompanyPulicTalent() {
                super("getCompanyPulicTalent");
            }

            public getCompanyPulicTalent_args getEmptyArgsInstance() {
                return new getCompanyPulicTalent_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getCompanyPulicTalent_result result = new getCompanyPulicTalent_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getCompanyPulicTalent_result result = new getCompanyPulicTalent_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getCompanyPulicTalent_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getCompanyPulicTalent(args.hr_id, args.company_id, args.page_number, args.page_size,resultHandler);
            }
        }

        public static class batchNewAddTalentTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchNewAddTalentTag_args, com.moseeker.thrift.gen.common.struct.Response> {
            public batchNewAddTalentTag() {
                super("batchNewAddTalentTag");
            }

            public batchNewAddTalentTag_args getEmptyArgsInstance() {
                return new batchNewAddTalentTag_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        batchNewAddTalentTag_result result = new batchNewAddTalentTag_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        batchNewAddTalentTag_result result = new batchNewAddTalentTag_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, batchNewAddTalentTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.batchNewAddTalentTag(args.hr_id, args.user_ids, args.tag_ids, args.company_id,resultHandler);
            }
        }

        public static class getTalentStat<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTalentStat_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getTalentStat() {
                super("getTalentStat");
            }

            public getTalentStat_args getEmptyArgsInstance() {
                return new getTalentStat_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getTalentStat_result result = new getTalentStat_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getTalentStat_result result = new getTalentStat_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getTalentStat_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getTalentStat(args.hr_id, args.company_id, args.type,resultHandler);
            }
        }

        public static class getCompanyUserPublic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCompanyUserPublic_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getCompanyUserPublic() {
                super("getCompanyUserPublic");
            }

            public getCompanyUserPublic_args getEmptyArgsInstance() {
                return new getCompanyUserPublic_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getCompanyUserPublic_result result = new getCompanyUserPublic_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getCompanyUserPublic_result result = new getCompanyUserPublic_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getCompanyUserPublic_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getCompanyUserPublic(args.hr_id, args.company_id, args.user_id,resultHandler);
            }
        }

        public static class getCompanyTalent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCompanyTalent_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getCompanyTalent() {
                super("getCompanyTalent");
            }

            public getCompanyTalent_args getEmptyArgsInstance() {
                return new getCompanyTalent_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getCompanyTalent_result result = new getCompanyTalent_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getCompanyTalent_result result = new getCompanyTalent_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getCompanyTalent_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getCompanyTalent(args.hr_id, args.company_id, args.user_id,resultHandler);
            }
        }

        public static class getHrUserTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHrUserTag_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getHrUserTag() {
                super("getHrUserTag");
            }

            public getHrUserTag_args getEmptyArgsInstance() {
                return new getHrUserTag_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getHrUserTag_result result = new getHrUserTag_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getHrUserTag_result result = new getHrUserTag_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getHrUserTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getHrUserTag(args.hr_id, args.company_id, args.user_id,resultHandler);
            }
        }

        public static class getUserOrigin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserOrigin_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getUserOrigin() {
                super("getUserOrigin");
            }

            public getUserOrigin_args getEmptyArgsInstance() {
                return new getUserOrigin_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getUserOrigin_result result = new getUserOrigin_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getUserOrigin_result result = new getUserOrigin_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getUserOrigin_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getUserOrigin(args.hr_id, args.company_id, args.user_id,resultHandler);
            }
        }

        public static class getTalentAndPublicHr<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTalentAndPublicHr_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getTalentAndPublicHr() {
                super("getTalentAndPublicHr");
            }

            public getTalentAndPublicHr_args getEmptyArgsInstance() {
                return new getTalentAndPublicHr_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getTalentAndPublicHr_result result = new getTalentAndPublicHr_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getTalentAndPublicHr_result result = new getTalentAndPublicHr_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getTalentAndPublicHr_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getTalentAndPublicHr(args.hr_id, args.company_id, args.user_ids,resultHandler);
            }
        }

        public static class getPositionOrCompanyPast<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPositionOrCompanyPast_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getPositionOrCompanyPast() {
                super("getPositionOrCompanyPast");
            }

            public getPositionOrCompanyPast_args getEmptyArgsInstance() {
                return new getPositionOrCompanyPast_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getPositionOrCompanyPast_result result = new getPositionOrCompanyPast_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getPositionOrCompanyPast_result result = new getPositionOrCompanyPast_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getPositionOrCompanyPast_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getPositionOrCompanyPast(args.company_id, args.type, args.flag,resultHandler);
            }
        }

        public static class addPositionOrCompanyPast<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addPositionOrCompanyPast_args, com.moseeker.thrift.gen.common.struct.Response> {
            public addPositionOrCompanyPast() {
                super("addPositionOrCompanyPast");
            }

            public addPositionOrCompanyPast_args getEmptyArgsInstance() {
                return new addPositionOrCompanyPast_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        addPositionOrCompanyPast_result result = new addPositionOrCompanyPast_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        addPositionOrCompanyPast_result result = new addPositionOrCompanyPast_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, addPositionOrCompanyPast_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.addPositionOrCompanyPast(args.company_id, args.type, args.flag, args.name,resultHandler);
            }
        }

        public static class getTalentTagList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTalentTagList_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getTalentTagList() {
                super("getTalentTagList");
            }

            public getTalentTagList_args getEmptyArgsInstance() {
                return new getTalentTagList_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getTalentTagList_result result = new getTalentTagList_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getTalentTagList_result result = new getTalentTagList_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getTalentTagList_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getTalentTagList(args.hr_id, args.company_id, args.page_number, args.page_size,resultHandler);
            }
        }

        public static class getProfileFilterList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProfileFilterList_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getProfileFilterList() {
                super("getProfileFilterList");
            }

            public getProfileFilterList_args getEmptyArgsInstance() {
                return new getProfileFilterList_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getProfileFilterList_result result = new getProfileFilterList_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getProfileFilterList_result result = new getProfileFilterList_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getProfileFilterList_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getProfileFilterList(args.hr_id, args.company_id, args.page_number, args.page_size,resultHandler);
            }
        }

        public static class handerProfileFilterByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, handerProfileFilterByIds_args, com.moseeker.thrift.gen.common.struct.Response> {
            public handerProfileFilterByIds() {
                super("handerProfileFilterByIds");
            }

            public handerProfileFilterByIds_args getEmptyArgsInstance() {
                return new handerProfileFilterByIds_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        handerProfileFilterByIds_result result = new handerProfileFilterByIds_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        handerProfileFilterByIds_result result = new handerProfileFilterByIds_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, handerProfileFilterByIds_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.handerProfileFilterByIds(args.hr_id, args.company_id, args.disable, args.filter_ids,resultHandler);
            }
        }

        public static class getProfileFilterInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProfileFilterInfo_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getProfileFilterInfo() {
                super("getProfileFilterInfo");
            }

            public getProfileFilterInfo_args getEmptyArgsInstance() {
                return new getProfileFilterInfo_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getProfileFilterInfo_result result = new getProfileFilterInfo_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getProfileFilterInfo_result result = new getProfileFilterInfo_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getProfileFilterInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getProfileFilterInfo(args.hr_id, args.company_id, args.filter_id,resultHandler);
            }
        }

        public static class addProfileFilter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addProfileFilter_args, com.moseeker.thrift.gen.common.struct.Response> {
            public addProfileFilter() {
                super("addProfileFilter");
            }

            public addProfileFilter_args getEmptyArgsInstance() {
                return new addProfileFilter_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        addProfileFilter_result result = new addProfileFilter_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        addProfileFilter_result result = new addProfileFilter_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, addProfileFilter_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.addProfileFilter(args.companyTagDO, args.actionForm, args.positionIdList, args.hr_id, args.position_total,resultHandler);
            }
        }

        public static class updateProfileFilter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateProfileFilter_args, com.moseeker.thrift.gen.common.struct.Response> {
            public updateProfileFilter() {
                super("updateProfileFilter");
            }

            public updateProfileFilter_args getEmptyArgsInstance() {
                return new updateProfileFilter_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        updateProfileFilter_result result = new updateProfileFilter_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        updateProfileFilter_result result = new updateProfileFilter_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, updateProfileFilter_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.updateProfileFilter(args.companyTagDO, args.actionForm, args.positionIdList, args.hr_id, args.position_total,resultHandler);
            }
        }

        public static class handlerCompanyTagAndProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, handlerCompanyTagAndProfile_args, Void> {
            public handlerCompanyTagAndProfile() {
                super("handlerCompanyTagAndProfile");
            }

            public handlerCompanyTagAndProfile_args getEmptyArgsInstance() {
                return new handlerCompanyTagAndProfile_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        handlerCompanyTagAndProfile_result result = new handlerCompanyTagAndProfile_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        handlerCompanyTagAndProfile_result result = new handlerCompanyTagAndProfile_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, handlerCompanyTagAndProfile_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.handlerCompanyTagAndProfile(args.userid_list, args.company_id,resultHandler);
            }
        }

        public static class getTalentCountByPositionFilter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTalentCountByPositionFilter_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getTalentCountByPositionFilter() {
                super("getTalentCountByPositionFilter");
            }

            public getTalentCountByPositionFilter_args getEmptyArgsInstance() {
                return new getTalentCountByPositionFilter_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getTalentCountByPositionFilter_result result = new getTalentCountByPositionFilter_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getTalentCountByPositionFilter_result result = new getTalentCountByPositionFilter_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getTalentCountByPositionFilter_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getTalentCountByPositionFilter(args.hr_id, args.company_id, args.position_id,resultHandler);
            }
        }

        public static class getEmailBalance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEmailBalance_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getEmailBalance() {
                super("getEmailBalance");
            }

            public getEmailBalance_args getEmptyArgsInstance() {
                return new getEmailBalance_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getEmailBalance_result result = new getEmailBalance_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getEmailBalance_result result = new getEmailBalance_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getEmailBalance_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getEmailBalance(args.hr_id, args.company_id,resultHandler);
            }
        }

        public static class getEmailTemplateList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEmailTemplateList_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getEmailTemplateList() {
                super("getEmailTemplateList");
            }

            public getEmailTemplateList_args getEmptyArgsInstance() {
                return new getEmailTemplateList_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getEmailTemplateList_result result = new getEmailTemplateList_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getEmailTemplateList_result result = new getEmailTemplateList_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getEmailTemplateList_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getEmailTemplateList(args.hr_id, args.company_id,resultHandler);
            }
        }

        public static class getEmailInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEmailInfo_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getEmailInfo() {
                super("getEmailInfo");
            }

            public getEmailInfo_args getEmptyArgsInstance() {
                return new getEmailInfo_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getEmailInfo_result result = new getEmailInfo_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getEmailInfo_result result = new getEmailInfo_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getEmailInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getEmailInfo(args.hr_id, args.company_id, args.type,resultHandler);
            }
        }

        public static class updateCompanyEmailInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateCompanyEmailInfo_args, com.moseeker.thrift.gen.common.struct.Response> {
            public updateCompanyEmailInfo() {
                super("updateCompanyEmailInfo");
            }

            public updateCompanyEmailInfo_args getEmptyArgsInstance() {
                return new updateCompanyEmailInfo_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        updateCompanyEmailInfo_result result = new updateCompanyEmailInfo_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        updateCompanyEmailInfo_result result = new updateCompanyEmailInfo_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, updateCompanyEmailInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.updateCompanyEmailInfo(args.hr_id, args.company_id, args.type, args.disable, args.context, args.inscribe,resultHandler);
            }
        }

        public static class fetchEmailAccounts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fetchEmailAccounts_args, com.moseeker.thrift.gen.company.struct.EmailAccountForm> {
            public fetchEmailAccounts() {
                super("fetchEmailAccounts");
            }

            public fetchEmailAccounts_args getEmptyArgsInstance() {
                return new fetchEmailAccounts_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.company.struct.EmailAccountForm> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.company.struct.EmailAccountForm>() {
                    public void onComplete(com.moseeker.thrift.gen.company.struct.EmailAccountForm o) {
                        fetchEmailAccounts_result result = new fetchEmailAccounts_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        fetchEmailAccounts_result result = new fetchEmailAccounts_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, fetchEmailAccounts_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.company.struct.EmailAccountForm> resultHandler) throws org.apache.thrift.TException {
                iface.fetchEmailAccounts(args.companyId, args.companyName, args.pageNumber, args.pageSize,resultHandler);
            }
        }

        public static class fetchEmailAccountConsumption<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fetchEmailAccountConsumption_args, com.moseeker.thrift.gen.company.struct.EmailAccountConsumptionForm> {
            public fetchEmailAccountConsumption() {
                super("fetchEmailAccountConsumption");
            }

            public fetchEmailAccountConsumption_args getEmptyArgsInstance() {
                return new fetchEmailAccountConsumption_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.company.struct.EmailAccountConsumptionForm> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.company.struct.EmailAccountConsumptionForm>() {
                    public void onComplete(com.moseeker.thrift.gen.company.struct.EmailAccountConsumptionForm o) {
                        fetchEmailAccountConsumption_result result = new fetchEmailAccountConsumption_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        fetchEmailAccountConsumption_result result = new fetchEmailAccountConsumption_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, fetchEmailAccountConsumption_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.company.struct.EmailAccountConsumptionForm> resultHandler) throws org.apache.thrift.TException {
                iface.fetchEmailAccountConsumption(args.companyId, args.type, args.pageNumber, args.pageSize, args.startDate, args.endDate,resultHandler);
            }
        }

        public static class rechargeEmailAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rechargeEmailAccount_args, java.lang.Integer> {
            public rechargeEmailAccount() {
                super("rechargeEmailAccount");
            }

            public rechargeEmailAccount_args getEmptyArgsInstance() {
                return new rechargeEmailAccount_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() {
                    public void onComplete(java.lang.Integer o) {
                        rechargeEmailAccount_result result = new rechargeEmailAccount_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        rechargeEmailAccount_result result = new rechargeEmailAccount_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, rechargeEmailAccount_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
                iface.rechargeEmailAccount(args.companyId, args.lost,resultHandler);
            }
        }

        public static class updateEmailAccountRechargeValue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateEmailAccountRechargeValue_args, Void> {
            public updateEmailAccountRechargeValue() {
                super("updateEmailAccountRechargeValue");
            }

            public updateEmailAccountRechargeValue_args getEmptyArgsInstance() {
                return new updateEmailAccountRechargeValue_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        updateEmailAccountRechargeValue_result result = new updateEmailAccountRechargeValue_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        updateEmailAccountRechargeValue_result result = new updateEmailAccountRechargeValue_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, updateEmailAccountRechargeValue_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.updateEmailAccountRechargeValue(args.id, args.lost,resultHandler);
            }
        }

        public static class addAllTalent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addAllTalent_args, Void> {
            public addAllTalent() {
                super("addAllTalent");
            }

            public addAllTalent_args getEmptyArgsInstance() {
                return new addAllTalent_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        addAllTalent_result result = new addAllTalent_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        addAllTalent_result result = new addAllTalent_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, addAllTalent_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.addAllTalent(args.hrId, args.params, args.companyId, args.isGdpr,resultHandler);
            }
        }

        public static class addAllTalentTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addAllTalentTag_args, Void> {
            public addAllTalentTag() {
                super("addAllTalentTag");
            }

            public addAllTalentTag_args getEmptyArgsInstance() {
                return new addAllTalentTag_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        addAllTalentTag_result result = new addAllTalentTag_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        addAllTalentTag_result result = new addAllTalentTag_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, addAllTalentTag_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.addAllTalentTag(args.params, args.tagList, args.companyId, args.hrId,resultHandler);
            }
        }

        public static class addAllTalentPublic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addAllTalentPublic_args, Void> {
            public addAllTalentPublic() {
                super("addAllTalentPublic");
            }

            public addAllTalentPublic_args getEmptyArgsInstance() {
                return new addAllTalentPublic_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        addAllTalentPublic_result result = new addAllTalentPublic_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        addAllTalentPublic_result result = new addAllTalentPublic_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, addAllTalentPublic_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.addAllTalentPublic(args.hrId, args.params, args.companyId, args.isGdpr,resultHandler);
            }
        }

        public static class addAllTalentPrivate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addAllTalentPrivate_args, Void> {
            public addAllTalentPrivate() {
                super("addAllTalentPrivate");
            }

            public addAllTalentPrivate_args getEmptyArgsInstance() {
                return new addAllTalentPrivate_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        addAllTalentPrivate_result result = new addAllTalentPrivate_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        addAllTalentPrivate_result result = new addAllTalentPrivate_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, addAllTalentPrivate_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.addAllTalentPrivate(args.hrId, args.params, args.companyId,resultHandler);
            }
        }

        public static class cancleAllTalent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cancleAllTalent_args, Void> {
            public cancleAllTalent() {
                super("cancleAllTalent");
            }

            public cancleAllTalent_args getEmptyArgsInstance() {
                return new cancleAllTalent_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        cancleAllTalent_result result = new cancleAllTalent_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        cancleAllTalent_result result = new cancleAllTalent_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, cancleAllTalent_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.cancleAllTalent(args.hrId, args.params, args.companyId,resultHandler);
            }
        }

        public static class updateCompanyEmailBalance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateCompanyEmailBalance_args, com.moseeker.thrift.gen.common.struct.Response> {
            public updateCompanyEmailBalance() {
                super("updateCompanyEmailBalance");
            }

            public updateCompanyEmailBalance_args getEmptyArgsInstance() {
                return new updateCompanyEmailBalance_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        updateCompanyEmailBalance_result result = new updateCompanyEmailBalance_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        updateCompanyEmailBalance_result result = new updateCompanyEmailBalance_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, updateCompanyEmailBalance_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.updateCompanyEmailBalance(args.company_id, args.balance,resultHandler);
            }
        }

        public static class sendInviteEmail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendInviteEmail_args, com.moseeker.thrift.gen.common.struct.Response> {
            public sendInviteEmail() {
                super("sendInviteEmail");
            }

            public sendInviteEmail_args getEmptyArgsInstance() {
                return new sendInviteEmail_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        sendInviteEmail_result result = new sendInviteEmail_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        sendInviteEmail_result result = new sendInviteEmail_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, sendInviteEmail_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.sendInviteEmail(args.params, args.userIdList, args.positionIdList, args.companyId, args.hrId, args.flag, args.positionFlag,resultHandler);
            }
        }

        public static class sendResumeEmail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendResumeEmail_args, com.moseeker.thrift.gen.common.struct.Response> {
            public sendResumeEmail() {
                super("sendResumeEmail");
            }

            public sendResumeEmail_args getEmptyArgsInstance() {
                return new sendResumeEmail_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        sendResumeEmail_result result = new sendResumeEmail_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        sendResumeEmail_result result = new sendResumeEmail_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, sendResumeEmail_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.sendResumeEmail(args.params, args.userIdList, args.idList, args.companyId, args.hrId, args.flag, args.emailList,resultHandler);
            }
        }

        public static class sendPositionInviteEmail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendPositionInviteEmail_args, com.moseeker.thrift.gen.common.struct.Response> {
            public sendPositionInviteEmail() {
                super("sendPositionInviteEmail");
            }

            public sendPositionInviteEmail_args getEmptyArgsInstance() {
                return new sendPositionInviteEmail_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        sendPositionInviteEmail_result result = new sendPositionInviteEmail_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        sendPositionInviteEmail_result result = new sendPositionInviteEmail_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, sendPositionInviteEmail_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.sendPositionInviteEmail(args.hrId, args.positionId, args.companyId,resultHandler);
            }
        }

        public static class getCompanyCommentByUserIdList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCompanyCommentByUserIdList_args, com.moseeker.thrift.gen.common.struct.Response> {
            public getCompanyCommentByUserIdList() {
                super("getCompanyCommentByUserIdList");
            }

            public getCompanyCommentByUserIdList_args getEmptyArgsInstance() {
                return new getCompanyCommentByUserIdList_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response>() {
                    public void onComplete(com.moseeker.thrift.gen.common.struct.Response o) {
                        getCompanyCommentByUserIdList_result result = new getCompanyCommentByUserIdList_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        getCompanyCommentByUserIdList_result result = new getCompanyCommentByUserIdList_result();
                        if (e instanceof com.moseeker.thrift.gen.common.struct.BIZException) {
                            result.e = (com.moseeker.thrift.gen.common.struct.BIZException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getCompanyCommentByUserIdList_args args, org.apache.thrift.async.AsyncMethodCallback<com.moseeker.thrift.gen.common.struct.Response> resultHandler) throws org.apache.thrift.TException {
                iface.getCompanyCommentByUserIdList(args.companyId, args.userIdList,resultHandler);
            }
        }

    }

    public static class upsertTalentPoolApp_args implements org.apache.thrift.TBase<upsertTalentPoolApp_args, upsertTalentPoolApp_args._Fields>, java.io.Serializable, Cloneable, Comparable<upsertTalentPoolApp_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("upsertTalentPoolApp_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hrId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new upsertTalentPoolApp_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new upsertTalentPoolApp_argsTupleSchemeFactory();

        public int hrId; // required
        public int companyId; // required
        public int type; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hrId"),
            COMPANY_ID((short)2, "companyId"),
            TYPE((short)3, "type");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // TYPE
                        return TYPE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HRID_ISSET_ID = 0;
        private static final int __COMPANYID_ISSET_ID = 1;
        private static final int __TYPE_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hrId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(upsertTalentPoolApp_args.class, metaDataMap);
        }

        public upsertTalentPoolApp_args() {
        }

        public upsertTalentPoolApp_args(
                int hrId,
                int companyId,
                int type)
        {
            this();
            this.hrId = hrId;
            setHrIdIsSet(true);
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            this.type = type;
            setTypeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public upsertTalentPoolApp_args(upsertTalentPoolApp_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hrId = other.hrId;
            this.companyId = other.companyId;
            this.type = other.type;
        }

        public upsertTalentPoolApp_args deepCopy() {
            return new upsertTalentPoolApp_args(this);
        }

        @Override
        public void clear() {
            setHrIdIsSet(false);
            this.hrId = 0;
            setCompanyIdIsSet(false);
            this.companyId = 0;
            setTypeIsSet(false);
            this.type = 0;
        }

        public int getHrId() {
            return this.hrId;
        }

        public upsertTalentPoolApp_args setHrId(int hrId) {
            this.hrId = hrId;
            setHrIdIsSet(true);
            return this;
        }

        public void unsetHrId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HRID_ISSET_ID);
        }

        /** Returns true if field hrId is set (has been assigned a value) and false otherwise */
        public boolean isSetHrId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HRID_ISSET_ID);
        }

        public void setHrIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HRID_ISSET_ID, value);
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public upsertTalentPoolApp_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public int getType() {
            return this.type;
        }

        public upsertTalentPoolApp_args setType(int type) {
            this.type = type;
            setTypeIsSet(true);
            return this;
        }

        public void unsetType() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        /** Returns true if field type is set (has been assigned a value) and false otherwise */
        public boolean isSetType() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        public void setTypeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHrId();
                    } else {
                        setHrId((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

                case TYPE:
                    if (value == null) {
                        unsetType();
                    } else {
                        setType((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHrId();

                case COMPANY_ID:
                    return getCompanyId();

                case TYPE:
                    return getType();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHrId();
                case COMPANY_ID:
                    return isSetCompanyId();
                case TYPE:
                    return isSetType();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof upsertTalentPoolApp_args)
                return this.equals((upsertTalentPoolApp_args)that);
            return false;
        }

        public boolean equals(upsertTalentPoolApp_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hrId = true;
            boolean that_present_hrId = true;
            if (this_present_hrId || that_present_hrId) {
                if (!(this_present_hrId && that_present_hrId))
                    return false;
                if (this.hrId != that.hrId)
                    return false;
            }

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            boolean this_present_type = true;
            boolean that_present_type = true;
            if (this_present_type || that_present_type) {
                if (!(this_present_type && that_present_type))
                    return false;
                if (this.type != that.type)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hrId;

            hashCode = hashCode * 8191 + companyId;

            hashCode = hashCode * 8191 + type;

            return hashCode;
        }

        @Override
        public int compareTo(upsertTalentPoolApp_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHrId()).compareTo(other.isSetHrId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHrId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrId, other.hrId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetType()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("upsertTalentPoolApp_args(");
            boolean first = true;

            sb.append("hrId:");
            sb.append(this.hrId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("type:");
            sb.append(this.type);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class upsertTalentPoolApp_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public upsertTalentPoolApp_argsStandardScheme getScheme() {
                return new upsertTalentPoolApp_argsStandardScheme();
            }
        }

        private static class upsertTalentPoolApp_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<upsertTalentPoolApp_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, upsertTalentPoolApp_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hrId = iprot.readI32();
                                struct.setHrIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // TYPE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.type = iprot.readI32();
                                struct.setTypeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, upsertTalentPoolApp_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hrId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(TYPE_FIELD_DESC);
                oprot.writeI32(struct.type);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class upsertTalentPoolApp_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public upsertTalentPoolApp_argsTupleScheme getScheme() {
                return new upsertTalentPoolApp_argsTupleScheme();
            }
        }

        private static class upsertTalentPoolApp_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<upsertTalentPoolApp_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, upsertTalentPoolApp_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHrId()) {
                    optionals.set(0);
                }
                if (struct.isSetCompanyId()) {
                    optionals.set(1);
                }
                if (struct.isSetType()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHrId()) {
                    oprot.writeI32(struct.hrId);
                }
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
                if (struct.isSetType()) {
                    oprot.writeI32(struct.type);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, upsertTalentPoolApp_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hrId = iprot.readI32();
                    struct.setHrIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.type = iprot.readI32();
                    struct.setTypeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class upsertTalentPoolApp_result implements org.apache.thrift.TBase<upsertTalentPoolApp_result, upsertTalentPoolApp_result._Fields>, java.io.Serializable, Cloneable, Comparable<upsertTalentPoolApp_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("upsertTalentPoolApp_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new upsertTalentPoolApp_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new upsertTalentPoolApp_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(upsertTalentPoolApp_result.class, metaDataMap);
        }

        public upsertTalentPoolApp_result() {
        }

        public upsertTalentPoolApp_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public upsertTalentPoolApp_result(upsertTalentPoolApp_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public upsertTalentPoolApp_result deepCopy() {
            return new upsertTalentPoolApp_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public upsertTalentPoolApp_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public upsertTalentPoolApp_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof upsertTalentPoolApp_result)
                return this.equals((upsertTalentPoolApp_result)that);
            return false;
        }

        public boolean equals(upsertTalentPoolApp_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(upsertTalentPoolApp_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("upsertTalentPoolApp_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class upsertTalentPoolApp_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public upsertTalentPoolApp_resultStandardScheme getScheme() {
                return new upsertTalentPoolApp_resultStandardScheme();
            }
        }

        private static class upsertTalentPoolApp_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<upsertTalentPoolApp_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, upsertTalentPoolApp_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, upsertTalentPoolApp_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class upsertTalentPoolApp_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public upsertTalentPoolApp_resultTupleScheme getScheme() {
                return new upsertTalentPoolApp_resultTupleScheme();
            }
        }

        private static class upsertTalentPoolApp_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<upsertTalentPoolApp_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, upsertTalentPoolApp_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, upsertTalentPoolApp_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getTalentAllComment_args implements org.apache.thrift.TBase<getTalentAllComment_args, getTalentAllComment_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTalentAllComment_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTalentAllComment_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField PAGE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("page_number", org.apache.thrift.protocol.TType.I32, (short)4);
        private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("page_size", org.apache.thrift.protocol.TType.I32, (short)5);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTalentAllComment_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTalentAllComment_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int user_id; // required
        public int page_number; // required
        public int page_size; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            USER_ID((short)3, "user_id"),
            PAGE_NUMBER((short)4, "page_number"),
            PAGE_SIZE((short)5, "page_size");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // USER_ID
                        return USER_ID;
                    case 4: // PAGE_NUMBER
                        return PAGE_NUMBER;
                    case 5: // PAGE_SIZE
                        return PAGE_SIZE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __USER_ID_ISSET_ID = 2;
        private static final int __PAGE_NUMBER_ISSET_ID = 3;
        private static final int __PAGE_SIZE_ISSET_ID = 4;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("page_number", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("page_size", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTalentAllComment_args.class, metaDataMap);
        }

        public getTalentAllComment_args() {
        }

        public getTalentAllComment_args(
                int hr_id,
                int company_id,
                int user_id,
                int page_number,
                int page_size)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.user_id = user_id;
            setUser_idIsSet(true);
            this.page_number = page_number;
            setPage_numberIsSet(true);
            this.page_size = page_size;
            setPage_sizeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getTalentAllComment_args(getTalentAllComment_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.user_id = other.user_id;
            this.page_number = other.page_number;
            this.page_size = other.page_size;
        }

        public getTalentAllComment_args deepCopy() {
            return new getTalentAllComment_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setUser_idIsSet(false);
            this.user_id = 0;
            setPage_numberIsSet(false);
            this.page_number = 0;
            setPage_sizeIsSet(false);
            this.page_size = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getTalentAllComment_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getTalentAllComment_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getUser_id() {
            return this.user_id;
        }

        public getTalentAllComment_args setUser_id(int user_id) {
            this.user_id = user_id;
            setUser_idIsSet(true);
            return this;
        }

        public void unsetUser_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USER_ID_ISSET_ID);
        }

        /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
        public boolean isSetUser_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USER_ID_ISSET_ID);
        }

        public void setUser_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USER_ID_ISSET_ID, value);
        }

        public int getPage_number() {
            return this.page_number;
        }

        public getTalentAllComment_args setPage_number(int page_number) {
            this.page_number = page_number;
            setPage_numberIsSet(true);
            return this;
        }

        public void unsetPage_number() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID);
        }

        /** Returns true if field page_number is set (has been assigned a value) and false otherwise */
        public boolean isSetPage_number() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID);
        }

        public void setPage_numberIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID, value);
        }

        public int getPage_size() {
            return this.page_size;
        }

        public getTalentAllComment_args setPage_size(int page_size) {
            this.page_size = page_size;
            setPage_sizeIsSet(true);
            return this;
        }

        public void unsetPage_size() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
        }

        /** Returns true if field page_size is set (has been assigned a value) and false otherwise */
        public boolean isSetPage_size() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
        }

        public void setPage_sizeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case USER_ID:
                    if (value == null) {
                        unsetUser_id();
                    } else {
                        setUser_id((java.lang.Integer)value);
                    }
                    break;

                case PAGE_NUMBER:
                    if (value == null) {
                        unsetPage_number();
                    } else {
                        setPage_number((java.lang.Integer)value);
                    }
                    break;

                case PAGE_SIZE:
                    if (value == null) {
                        unsetPage_size();
                    } else {
                        setPage_size((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case USER_ID:
                    return getUser_id();

                case PAGE_NUMBER:
                    return getPage_number();

                case PAGE_SIZE:
                    return getPage_size();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case USER_ID:
                    return isSetUser_id();
                case PAGE_NUMBER:
                    return isSetPage_number();
                case PAGE_SIZE:
                    return isSetPage_size();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getTalentAllComment_args)
                return this.equals((getTalentAllComment_args)that);
            return false;
        }

        public boolean equals(getTalentAllComment_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_user_id = true;
            boolean that_present_user_id = true;
            if (this_present_user_id || that_present_user_id) {
                if (!(this_present_user_id && that_present_user_id))
                    return false;
                if (this.user_id != that.user_id)
                    return false;
            }

            boolean this_present_page_number = true;
            boolean that_present_page_number = true;
            if (this_present_page_number || that_present_page_number) {
                if (!(this_present_page_number && that_present_page_number))
                    return false;
                if (this.page_number != that.page_number)
                    return false;
            }

            boolean this_present_page_size = true;
            boolean that_present_page_size = true;
            if (this_present_page_size || that_present_page_size) {
                if (!(this_present_page_size && that_present_page_size))
                    return false;
                if (this.page_size != that.page_size)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + user_id;

            hashCode = hashCode * 8191 + page_number;

            hashCode = hashCode * 8191 + page_size;

            return hashCode;
        }

        @Override
        public int compareTo(getTalentAllComment_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUser_id()).compareTo(other.isSetUser_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUser_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, other.user_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPage_number()).compareTo(other.isSetPage_number());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage_number()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_number, other.page_number);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPage_size()).compareTo(other.isSetPage_size());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage_size()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_size, other.page_size);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getTalentAllComment_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("user_id:");
            sb.append(this.user_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("page_number:");
            sb.append(this.page_number);
            first = false;
            if (!first) sb.append(", ");
            sb.append("page_size:");
            sb.append(this.page_size);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getTalentAllComment_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentAllComment_argsStandardScheme getScheme() {
                return new getTalentAllComment_argsStandardScheme();
            }
        }

        private static class getTalentAllComment_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTalentAllComment_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getTalentAllComment_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.user_id = iprot.readI32();
                                struct.setUser_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // PAGE_NUMBER
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page_number = iprot.readI32();
                                struct.setPage_numberIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 5: // PAGE_SIZE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page_size = iprot.readI32();
                                struct.setPage_sizeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getTalentAllComment_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.user_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_NUMBER_FIELD_DESC);
                oprot.writeI32(struct.page_number);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
                oprot.writeI32(struct.page_size);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getTalentAllComment_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentAllComment_argsTupleScheme getScheme() {
                return new getTalentAllComment_argsTupleScheme();
            }
        }

        private static class getTalentAllComment_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTalentAllComment_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getTalentAllComment_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetUser_id()) {
                    optionals.set(2);
                }
                if (struct.isSetPage_number()) {
                    optionals.set(3);
                }
                if (struct.isSetPage_size()) {
                    optionals.set(4);
                }
                oprot.writeBitSet(optionals, 5);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetUser_id()) {
                    oprot.writeI32(struct.user_id);
                }
                if (struct.isSetPage_number()) {
                    oprot.writeI32(struct.page_number);
                }
                if (struct.isSetPage_size()) {
                    oprot.writeI32(struct.page_size);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getTalentAllComment_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(5);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.user_id = iprot.readI32();
                    struct.setUser_idIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.page_number = iprot.readI32();
                    struct.setPage_numberIsSet(true);
                }
                if (incoming.get(4)) {
                    struct.page_size = iprot.readI32();
                    struct.setPage_sizeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getTalentAllComment_result implements org.apache.thrift.TBase<getTalentAllComment_result, getTalentAllComment_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTalentAllComment_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTalentAllComment_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTalentAllComment_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTalentAllComment_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTalentAllComment_result.class, metaDataMap);
        }

        public getTalentAllComment_result() {
        }

        public getTalentAllComment_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getTalentAllComment_result(getTalentAllComment_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getTalentAllComment_result deepCopy() {
            return new getTalentAllComment_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getTalentAllComment_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getTalentAllComment_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getTalentAllComment_result)
                return this.equals((getTalentAllComment_result)that);
            return false;
        }

        public boolean equals(getTalentAllComment_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getTalentAllComment_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getTalentAllComment_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getTalentAllComment_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentAllComment_resultStandardScheme getScheme() {
                return new getTalentAllComment_resultStandardScheme();
            }
        }

        private static class getTalentAllComment_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTalentAllComment_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getTalentAllComment_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getTalentAllComment_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getTalentAllComment_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentAllComment_resultTupleScheme getScheme() {
                return new getTalentAllComment_resultTupleScheme();
            }
        }

        private static class getTalentAllComment_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTalentAllComment_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getTalentAllComment_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getTalentAllComment_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getHrTag_args implements org.apache.thrift.TBase<getHrTag_args, getHrTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHrTag_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHrTag_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField PAGE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("page_number", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("page_size", org.apache.thrift.protocol.TType.I32, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getHrTag_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getHrTag_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int page_number; // required
        public int page_size; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            PAGE_NUMBER((short)3, "page_number"),
            PAGE_SIZE((short)4, "page_size");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // PAGE_NUMBER
                        return PAGE_NUMBER;
                    case 4: // PAGE_SIZE
                        return PAGE_SIZE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __PAGE_NUMBER_ISSET_ID = 2;
        private static final int __PAGE_SIZE_ISSET_ID = 3;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("page_number", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("page_size", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHrTag_args.class, metaDataMap);
        }

        public getHrTag_args() {
        }

        public getHrTag_args(
                int hr_id,
                int company_id,
                int page_number,
                int page_size)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.page_number = page_number;
            setPage_numberIsSet(true);
            this.page_size = page_size;
            setPage_sizeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getHrTag_args(getHrTag_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.page_number = other.page_number;
            this.page_size = other.page_size;
        }

        public getHrTag_args deepCopy() {
            return new getHrTag_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setPage_numberIsSet(false);
            this.page_number = 0;
            setPage_sizeIsSet(false);
            this.page_size = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getHrTag_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getHrTag_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getPage_number() {
            return this.page_number;
        }

        public getHrTag_args setPage_number(int page_number) {
            this.page_number = page_number;
            setPage_numberIsSet(true);
            return this;
        }

        public void unsetPage_number() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID);
        }

        /** Returns true if field page_number is set (has been assigned a value) and false otherwise */
        public boolean isSetPage_number() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID);
        }

        public void setPage_numberIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID, value);
        }

        public int getPage_size() {
            return this.page_size;
        }

        public getHrTag_args setPage_size(int page_size) {
            this.page_size = page_size;
            setPage_sizeIsSet(true);
            return this;
        }

        public void unsetPage_size() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
        }

        /** Returns true if field page_size is set (has been assigned a value) and false otherwise */
        public boolean isSetPage_size() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
        }

        public void setPage_sizeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case PAGE_NUMBER:
                    if (value == null) {
                        unsetPage_number();
                    } else {
                        setPage_number((java.lang.Integer)value);
                    }
                    break;

                case PAGE_SIZE:
                    if (value == null) {
                        unsetPage_size();
                    } else {
                        setPage_size((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case PAGE_NUMBER:
                    return getPage_number();

                case PAGE_SIZE:
                    return getPage_size();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case PAGE_NUMBER:
                    return isSetPage_number();
                case PAGE_SIZE:
                    return isSetPage_size();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getHrTag_args)
                return this.equals((getHrTag_args)that);
            return false;
        }

        public boolean equals(getHrTag_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_page_number = true;
            boolean that_present_page_number = true;
            if (this_present_page_number || that_present_page_number) {
                if (!(this_present_page_number && that_present_page_number))
                    return false;
                if (this.page_number != that.page_number)
                    return false;
            }

            boolean this_present_page_size = true;
            boolean that_present_page_size = true;
            if (this_present_page_size || that_present_page_size) {
                if (!(this_present_page_size && that_present_page_size))
                    return false;
                if (this.page_size != that.page_size)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + page_number;

            hashCode = hashCode * 8191 + page_size;

            return hashCode;
        }

        @Override
        public int compareTo(getHrTag_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPage_number()).compareTo(other.isSetPage_number());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage_number()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_number, other.page_number);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPage_size()).compareTo(other.isSetPage_size());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage_size()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_size, other.page_size);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getHrTag_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("page_number:");
            sb.append(this.page_number);
            first = false;
            if (!first) sb.append(", ");
            sb.append("page_size:");
            sb.append(this.page_size);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getHrTag_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getHrTag_argsStandardScheme getScheme() {
                return new getHrTag_argsStandardScheme();
            }
        }

        private static class getHrTag_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getHrTag_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getHrTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PAGE_NUMBER
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page_number = iprot.readI32();
                                struct.setPage_numberIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // PAGE_SIZE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page_size = iprot.readI32();
                                struct.setPage_sizeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getHrTag_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_NUMBER_FIELD_DESC);
                oprot.writeI32(struct.page_number);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
                oprot.writeI32(struct.page_size);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getHrTag_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getHrTag_argsTupleScheme getScheme() {
                return new getHrTag_argsTupleScheme();
            }
        }

        private static class getHrTag_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getHrTag_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getHrTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetPage_number()) {
                    optionals.set(2);
                }
                if (struct.isSetPage_size()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetPage_number()) {
                    oprot.writeI32(struct.page_number);
                }
                if (struct.isSetPage_size()) {
                    oprot.writeI32(struct.page_size);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getHrTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.page_number = iprot.readI32();
                    struct.setPage_numberIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.page_size = iprot.readI32();
                    struct.setPage_sizeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getHrTag_result implements org.apache.thrift.TBase<getHrTag_result, getHrTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHrTag_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHrTag_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getHrTag_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getHrTag_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHrTag_result.class, metaDataMap);
        }

        public getHrTag_result() {
        }

        public getHrTag_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getHrTag_result(getHrTag_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getHrTag_result deepCopy() {
            return new getHrTag_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getHrTag_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getHrTag_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getHrTag_result)
                return this.equals((getHrTag_result)that);
            return false;
        }

        public boolean equals(getHrTag_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getHrTag_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getHrTag_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getHrTag_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getHrTag_resultStandardScheme getScheme() {
                return new getHrTag_resultStandardScheme();
            }
        }

        private static class getHrTag_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getHrTag_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getHrTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getHrTag_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getHrTag_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getHrTag_resultTupleScheme getScheme() {
                return new getHrTag_resultTupleScheme();
            }
        }

        private static class getHrTag_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getHrTag_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getHrTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getHrTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchAddTalent_args implements org.apache.thrift.TBase<batchAddTalent_args, batchAddTalent_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchAddTalent_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchAddTalent_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ids", org.apache.thrift.protocol.TType.LIST, (short)2);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField IS_GDPR_FIELD_DESC = new org.apache.thrift.protocol.TField("isGdpr", org.apache.thrift.protocol.TType.I32, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchAddTalent_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchAddTalent_argsTupleSchemeFactory();

        public int hr_id; // required
        public java.util.List<java.lang.Integer> user_ids; // required
        public int company_id; // required
        public int isGdpr; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            USER_IDS((short)2, "user_ids"),
            COMPANY_ID((short)3, "company_id"),
            IS_GDPR((short)4, "isGdpr");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // USER_IDS
                        return USER_IDS;
                    case 3: // COMPANY_ID
                        return COMPANY_ID;
                    case 4: // IS_GDPR
                        return IS_GDPR;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __ISGDPR_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("user_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.IS_GDPR, new org.apache.thrift.meta_data.FieldMetaData("isGdpr", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchAddTalent_args.class, metaDataMap);
        }

        public batchAddTalent_args() {
        }

        public batchAddTalent_args(
                int hr_id,
                java.util.List<java.lang.Integer> user_ids,
                int company_id,
                int isGdpr)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.user_ids = user_ids;
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.isGdpr = isGdpr;
            setIsGdprIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchAddTalent_args(batchAddTalent_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            if (other.isSetUser_ids()) {
                java.util.List<java.lang.Integer> __this__user_ids = new java.util.ArrayList<java.lang.Integer>(other.user_ids);
                this.user_ids = __this__user_ids;
            }
            this.company_id = other.company_id;
            this.isGdpr = other.isGdpr;
        }

        public batchAddTalent_args deepCopy() {
            return new batchAddTalent_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            this.user_ids = null;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setIsGdprIsSet(false);
            this.isGdpr = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public batchAddTalent_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getUser_idsSize() {
            return (this.user_ids == null) ? 0 : this.user_ids.size();
        }

        public java.util.Iterator<java.lang.Integer> getUser_idsIterator() {
            return (this.user_ids == null) ? null : this.user_ids.iterator();
        }

        public void addToUser_ids(int elem) {
            if (this.user_ids == null) {
                this.user_ids = new java.util.ArrayList<java.lang.Integer>();
            }
            this.user_ids.add(elem);
        }

        public java.util.List<java.lang.Integer> getUser_ids() {
            return this.user_ids;
        }

        public batchAddTalent_args setUser_ids(java.util.List<java.lang.Integer> user_ids) {
            this.user_ids = user_ids;
            return this;
        }

        public void unsetUser_ids() {
            this.user_ids = null;
        }

        /** Returns true if field user_ids is set (has been assigned a value) and false otherwise */
        public boolean isSetUser_ids() {
            return this.user_ids != null;
        }

        public void setUser_idsIsSet(boolean value) {
            if (!value) {
                this.user_ids = null;
            }
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public batchAddTalent_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getIsGdpr() {
            return this.isGdpr;
        }

        public batchAddTalent_args setIsGdpr(int isGdpr) {
            this.isGdpr = isGdpr;
            setIsGdprIsSet(true);
            return this;
        }

        public void unsetIsGdpr() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISGDPR_ISSET_ID);
        }

        /** Returns true if field isGdpr is set (has been assigned a value) and false otherwise */
        public boolean isSetIsGdpr() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISGDPR_ISSET_ID);
        }

        public void setIsGdprIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISGDPR_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case USER_IDS:
                    if (value == null) {
                        unsetUser_ids();
                    } else {
                        setUser_ids((java.util.List<java.lang.Integer>)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case IS_GDPR:
                    if (value == null) {
                        unsetIsGdpr();
                    } else {
                        setIsGdpr((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case USER_IDS:
                    return getUser_ids();

                case COMPANY_ID:
                    return getCompany_id();

                case IS_GDPR:
                    return getIsGdpr();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case USER_IDS:
                    return isSetUser_ids();
                case COMPANY_ID:
                    return isSetCompany_id();
                case IS_GDPR:
                    return isSetIsGdpr();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchAddTalent_args)
                return this.equals((batchAddTalent_args)that);
            return false;
        }

        public boolean equals(batchAddTalent_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_user_ids = true && this.isSetUser_ids();
            boolean that_present_user_ids = true && that.isSetUser_ids();
            if (this_present_user_ids || that_present_user_ids) {
                if (!(this_present_user_ids && that_present_user_ids))
                    return false;
                if (!this.user_ids.equals(that.user_ids))
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_isGdpr = true;
            boolean that_present_isGdpr = true;
            if (this_present_isGdpr || that_present_isGdpr) {
                if (!(this_present_isGdpr && that_present_isGdpr))
                    return false;
                if (this.isGdpr != that.isGdpr)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + ((isSetUser_ids()) ? 131071 : 524287);
            if (isSetUser_ids())
                hashCode = hashCode * 8191 + user_ids.hashCode();

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + isGdpr;

            return hashCode;
        }

        @Override
        public int compareTo(batchAddTalent_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUser_ids()).compareTo(other.isSetUser_ids());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUser_ids()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ids, other.user_ids);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetIsGdpr()).compareTo(other.isSetIsGdpr());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetIsGdpr()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isGdpr, other.isGdpr);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchAddTalent_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("user_ids:");
            if (this.user_ids == null) {
                sb.append("null");
            } else {
                sb.append(this.user_ids);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("isGdpr:");
            sb.append(this.isGdpr);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchAddTalent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchAddTalent_argsStandardScheme getScheme() {
                return new batchAddTalent_argsStandardScheme();
            }
        }

        private static class batchAddTalent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchAddTalent_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchAddTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // USER_IDS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                                    struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list80.size);
                                    int _elem81;
                                    for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                                    {
                                        _elem81 = iprot.readI32();
                                        struct.user_ids.add(_elem81);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setUser_idsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // IS_GDPR
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.isGdpr = iprot.readI32();
                                struct.setIsGdprIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchAddTalent_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                if (struct.user_ids != null) {
                    oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.user_ids.size()));
                        for (int _iter83 : struct.user_ids)
                        {
                            oprot.writeI32(_iter83);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(IS_GDPR_FIELD_DESC);
                oprot.writeI32(struct.isGdpr);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchAddTalent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchAddTalent_argsTupleScheme getScheme() {
                return new batchAddTalent_argsTupleScheme();
            }
        }

        private static class batchAddTalent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchAddTalent_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchAddTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetUser_ids()) {
                    optionals.set(1);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(2);
                }
                if (struct.isSetIsGdpr()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetUser_ids()) {
                    {
                        oprot.writeI32(struct.user_ids.size());
                        for (int _iter84 : struct.user_ids)
                        {
                            oprot.writeI32(_iter84);
                        }
                    }
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetIsGdpr()) {
                    oprot.writeI32(struct.isGdpr);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchAddTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list85.size);
                        int _elem86;
                        for (int _i87 = 0; _i87 < _list85.size; ++_i87)
                        {
                            _elem86 = iprot.readI32();
                            struct.user_ids.add(_elem86);
                        }
                    }
                    struct.setUser_idsIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.isGdpr = iprot.readI32();
                    struct.setIsGdprIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchAddTalent_result implements org.apache.thrift.TBase<batchAddTalent_result, batchAddTalent_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchAddTalent_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchAddTalent_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchAddTalent_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchAddTalent_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchAddTalent_result.class, metaDataMap);
        }

        public batchAddTalent_result() {
        }

        public batchAddTalent_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchAddTalent_result(batchAddTalent_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public batchAddTalent_result deepCopy() {
            return new batchAddTalent_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public batchAddTalent_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public batchAddTalent_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchAddTalent_result)
                return this.equals((batchAddTalent_result)that);
            return false;
        }

        public boolean equals(batchAddTalent_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(batchAddTalent_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchAddTalent_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchAddTalent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchAddTalent_resultStandardScheme getScheme() {
                return new batchAddTalent_resultStandardScheme();
            }
        }

        private static class batchAddTalent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchAddTalent_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchAddTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchAddTalent_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchAddTalent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchAddTalent_resultTupleScheme getScheme() {
                return new batchAddTalent_resultTupleScheme();
            }
        }

        private static class batchAddTalent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchAddTalent_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchAddTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchAddTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchCancelTalent_args implements org.apache.thrift.TBase<batchCancelTalent_args, batchCancelTalent_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchCancelTalent_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchCancelTalent_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ids", org.apache.thrift.protocol.TType.LIST, (short)2);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchCancelTalent_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchCancelTalent_argsTupleSchemeFactory();

        public int hr_id; // required
        public java.util.List<java.lang.Integer> user_ids; // required
        public int company_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            USER_IDS((short)2, "user_ids"),
            COMPANY_ID((short)3, "company_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // USER_IDS
                        return USER_IDS;
                    case 3: // COMPANY_ID
                        return COMPANY_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("user_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchCancelTalent_args.class, metaDataMap);
        }

        public batchCancelTalent_args() {
        }

        public batchCancelTalent_args(
                int hr_id,
                java.util.List<java.lang.Integer> user_ids,
                int company_id)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.user_ids = user_ids;
            this.company_id = company_id;
            setCompany_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchCancelTalent_args(batchCancelTalent_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            if (other.isSetUser_ids()) {
                java.util.List<java.lang.Integer> __this__user_ids = new java.util.ArrayList<java.lang.Integer>(other.user_ids);
                this.user_ids = __this__user_ids;
            }
            this.company_id = other.company_id;
        }

        public batchCancelTalent_args deepCopy() {
            return new batchCancelTalent_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            this.user_ids = null;
            setCompany_idIsSet(false);
            this.company_id = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public batchCancelTalent_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getUser_idsSize() {
            return (this.user_ids == null) ? 0 : this.user_ids.size();
        }

        public java.util.Iterator<java.lang.Integer> getUser_idsIterator() {
            return (this.user_ids == null) ? null : this.user_ids.iterator();
        }

        public void addToUser_ids(int elem) {
            if (this.user_ids == null) {
                this.user_ids = new java.util.ArrayList<java.lang.Integer>();
            }
            this.user_ids.add(elem);
        }

        public java.util.List<java.lang.Integer> getUser_ids() {
            return this.user_ids;
        }

        public batchCancelTalent_args setUser_ids(java.util.List<java.lang.Integer> user_ids) {
            this.user_ids = user_ids;
            return this;
        }

        public void unsetUser_ids() {
            this.user_ids = null;
        }

        /** Returns true if field user_ids is set (has been assigned a value) and false otherwise */
        public boolean isSetUser_ids() {
            return this.user_ids != null;
        }

        public void setUser_idsIsSet(boolean value) {
            if (!value) {
                this.user_ids = null;
            }
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public batchCancelTalent_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case USER_IDS:
                    if (value == null) {
                        unsetUser_ids();
                    } else {
                        setUser_ids((java.util.List<java.lang.Integer>)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case USER_IDS:
                    return getUser_ids();

                case COMPANY_ID:
                    return getCompany_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case USER_IDS:
                    return isSetUser_ids();
                case COMPANY_ID:
                    return isSetCompany_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchCancelTalent_args)
                return this.equals((batchCancelTalent_args)that);
            return false;
        }

        public boolean equals(batchCancelTalent_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_user_ids = true && this.isSetUser_ids();
            boolean that_present_user_ids = true && that.isSetUser_ids();
            if (this_present_user_ids || that_present_user_ids) {
                if (!(this_present_user_ids && that_present_user_ids))
                    return false;
                if (!this.user_ids.equals(that.user_ids))
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + ((isSetUser_ids()) ? 131071 : 524287);
            if (isSetUser_ids())
                hashCode = hashCode * 8191 + user_ids.hashCode();

            hashCode = hashCode * 8191 + company_id;

            return hashCode;
        }

        @Override
        public int compareTo(batchCancelTalent_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUser_ids()).compareTo(other.isSetUser_ids());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUser_ids()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ids, other.user_ids);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchCancelTalent_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("user_ids:");
            if (this.user_ids == null) {
                sb.append("null");
            } else {
                sb.append(this.user_ids);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchCancelTalent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchCancelTalent_argsStandardScheme getScheme() {
                return new batchCancelTalent_argsStandardScheme();
            }
        }

        private static class batchCancelTalent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchCancelTalent_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchCancelTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // USER_IDS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                                    struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list88.size);
                                    int _elem89;
                                    for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                                    {
                                        _elem89 = iprot.readI32();
                                        struct.user_ids.add(_elem89);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setUser_idsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchCancelTalent_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                if (struct.user_ids != null) {
                    oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.user_ids.size()));
                        for (int _iter91 : struct.user_ids)
                        {
                            oprot.writeI32(_iter91);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchCancelTalent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchCancelTalent_argsTupleScheme getScheme() {
                return new batchCancelTalent_argsTupleScheme();
            }
        }

        private static class batchCancelTalent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchCancelTalent_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchCancelTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetUser_ids()) {
                    optionals.set(1);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetUser_ids()) {
                    {
                        oprot.writeI32(struct.user_ids.size());
                        for (int _iter92 : struct.user_ids)
                        {
                            oprot.writeI32(_iter92);
                        }
                    }
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchCancelTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list93.size);
                        int _elem94;
                        for (int _i95 = 0; _i95 < _list93.size; ++_i95)
                        {
                            _elem94 = iprot.readI32();
                            struct.user_ids.add(_elem94);
                        }
                    }
                    struct.setUser_idsIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchCancelTalent_result implements org.apache.thrift.TBase<batchCancelTalent_result, batchCancelTalent_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchCancelTalent_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchCancelTalent_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchCancelTalent_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchCancelTalent_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchCancelTalent_result.class, metaDataMap);
        }

        public batchCancelTalent_result() {
        }

        public batchCancelTalent_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchCancelTalent_result(batchCancelTalent_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public batchCancelTalent_result deepCopy() {
            return new batchCancelTalent_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public batchCancelTalent_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public batchCancelTalent_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchCancelTalent_result)
                return this.equals((batchCancelTalent_result)that);
            return false;
        }

        public boolean equals(batchCancelTalent_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(batchCancelTalent_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchCancelTalent_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchCancelTalent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchCancelTalent_resultStandardScheme getScheme() {
                return new batchCancelTalent_resultStandardScheme();
            }
        }

        private static class batchCancelTalent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchCancelTalent_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchCancelTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchCancelTalent_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchCancelTalent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchCancelTalent_resultTupleScheme getScheme() {
                return new batchCancelTalent_resultTupleScheme();
            }
        }

        private static class batchCancelTalent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchCancelTalent_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchCancelTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchCancelTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class hrAddTag_args implements org.apache.thrift.TBase<hrAddTag_args, hrAddTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<hrAddTag_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hrAddTag_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hrAddTag_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hrAddTag_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public java.lang.String name; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            NAME((short)3, "name");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // NAME
                        return NAME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hrAddTag_args.class, metaDataMap);
        }

        public hrAddTag_args() {
        }

        public hrAddTag_args(
                int hr_id,
                int company_id,
                java.lang.String name)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.name = name;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public hrAddTag_args(hrAddTag_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            if (other.isSetName()) {
                this.name = other.name;
            }
        }

        public hrAddTag_args deepCopy() {
            return new hrAddTag_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            this.name = null;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public hrAddTag_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public hrAddTag_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public java.lang.String getName() {
            return this.name;
        }

        public hrAddTag_args setName(java.lang.String name) {
            this.name = name;
            return this;
        }

        public void unsetName() {
            this.name = null;
        }

        /** Returns true if field name is set (has been assigned a value) and false otherwise */
        public boolean isSetName() {
            return this.name != null;
        }

        public void setNameIsSet(boolean value) {
            if (!value) {
                this.name = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case NAME:
                    if (value == null) {
                        unsetName();
                    } else {
                        setName((java.lang.String)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case NAME:
                    return getName();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case NAME:
                    return isSetName();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof hrAddTag_args)
                return this.equals((hrAddTag_args)that);
            return false;
        }

        public boolean equals(hrAddTag_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_name = true && this.isSetName();
            boolean that_present_name = true && that.isSetName();
            if (this_present_name || that_present_name) {
                if (!(this_present_name && that_present_name))
                    return false;
                if (!this.name.equals(that.name))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
            if (isSetName())
                hashCode = hashCode * 8191 + name.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(hrAddTag_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("hrAddTag_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("name:");
            if (this.name == null) {
                sb.append("null");
            } else {
                sb.append(this.name);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class hrAddTag_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrAddTag_argsStandardScheme getScheme() {
                return new hrAddTag_argsStandardScheme();
            }
        }

        private static class hrAddTag_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<hrAddTag_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, hrAddTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.name = iprot.readString();
                                struct.setNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, hrAddTag_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                if (struct.name != null) {
                    oprot.writeFieldBegin(NAME_FIELD_DESC);
                    oprot.writeString(struct.name);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class hrAddTag_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrAddTag_argsTupleScheme getScheme() {
                return new hrAddTag_argsTupleScheme();
            }
        }

        private static class hrAddTag_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<hrAddTag_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, hrAddTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetName()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetName()) {
                    oprot.writeString(struct.name);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, hrAddTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.name = iprot.readString();
                    struct.setNameIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class hrAddTag_result implements org.apache.thrift.TBase<hrAddTag_result, hrAddTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<hrAddTag_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hrAddTag_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hrAddTag_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hrAddTag_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hrAddTag_result.class, metaDataMap);
        }

        public hrAddTag_result() {
        }

        public hrAddTag_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public hrAddTag_result(hrAddTag_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public hrAddTag_result deepCopy() {
            return new hrAddTag_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public hrAddTag_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public hrAddTag_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof hrAddTag_result)
                return this.equals((hrAddTag_result)that);
            return false;
        }

        public boolean equals(hrAddTag_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(hrAddTag_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("hrAddTag_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class hrAddTag_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrAddTag_resultStandardScheme getScheme() {
                return new hrAddTag_resultStandardScheme();
            }
        }

        private static class hrAddTag_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<hrAddTag_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, hrAddTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, hrAddTag_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class hrAddTag_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrAddTag_resultTupleScheme getScheme() {
                return new hrAddTag_resultTupleScheme();
            }
        }

        private static class hrAddTag_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<hrAddTag_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, hrAddTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, hrAddTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class hrDelTag_args implements org.apache.thrift.TBase<hrDelTag_args, hrDelTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<hrDelTag_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hrDelTag_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tag_id", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hrDelTag_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hrDelTag_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int tag_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            TAG_ID((short)3, "tag_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // TAG_ID
                        return TAG_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __TAG_ID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("tag_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hrDelTag_args.class, metaDataMap);
        }

        public hrDelTag_args() {
        }

        public hrDelTag_args(
                int hr_id,
                int company_id,
                int tag_id)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.tag_id = tag_id;
            setTag_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public hrDelTag_args(hrDelTag_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.tag_id = other.tag_id;
        }

        public hrDelTag_args deepCopy() {
            return new hrDelTag_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setTag_idIsSet(false);
            this.tag_id = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public hrDelTag_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public hrDelTag_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getTag_id() {
            return this.tag_id;
        }

        public hrDelTag_args setTag_id(int tag_id) {
            this.tag_id = tag_id;
            setTag_idIsSet(true);
            return this;
        }

        public void unsetTag_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TAG_ID_ISSET_ID);
        }

        /** Returns true if field tag_id is set (has been assigned a value) and false otherwise */
        public boolean isSetTag_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TAG_ID_ISSET_ID);
        }

        public void setTag_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TAG_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case TAG_ID:
                    if (value == null) {
                        unsetTag_id();
                    } else {
                        setTag_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case TAG_ID:
                    return getTag_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case TAG_ID:
                    return isSetTag_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof hrDelTag_args)
                return this.equals((hrDelTag_args)that);
            return false;
        }

        public boolean equals(hrDelTag_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_tag_id = true;
            boolean that_present_tag_id = true;
            if (this_present_tag_id || that_present_tag_id) {
                if (!(this_present_tag_id && that_present_tag_id))
                    return false;
                if (this.tag_id != that.tag_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + tag_id;

            return hashCode;
        }

        @Override
        public int compareTo(hrDelTag_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetTag_id()).compareTo(other.isSetTag_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTag_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag_id, other.tag_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("hrDelTag_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("tag_id:");
            sb.append(this.tag_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class hrDelTag_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrDelTag_argsStandardScheme getScheme() {
                return new hrDelTag_argsStandardScheme();
            }
        }

        private static class hrDelTag_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<hrDelTag_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, hrDelTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // TAG_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.tag_id = iprot.readI32();
                                struct.setTag_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, hrDelTag_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(TAG_ID_FIELD_DESC);
                oprot.writeI32(struct.tag_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class hrDelTag_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrDelTag_argsTupleScheme getScheme() {
                return new hrDelTag_argsTupleScheme();
            }
        }

        private static class hrDelTag_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<hrDelTag_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, hrDelTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetTag_id()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetTag_id()) {
                    oprot.writeI32(struct.tag_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, hrDelTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.tag_id = iprot.readI32();
                    struct.setTag_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class hrDelTag_result implements org.apache.thrift.TBase<hrDelTag_result, hrDelTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<hrDelTag_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hrDelTag_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hrDelTag_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hrDelTag_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hrDelTag_result.class, metaDataMap);
        }

        public hrDelTag_result() {
        }

        public hrDelTag_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public hrDelTag_result(hrDelTag_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public hrDelTag_result deepCopy() {
            return new hrDelTag_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public hrDelTag_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public hrDelTag_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof hrDelTag_result)
                return this.equals((hrDelTag_result)that);
            return false;
        }

        public boolean equals(hrDelTag_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(hrDelTag_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("hrDelTag_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class hrDelTag_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrDelTag_resultStandardScheme getScheme() {
                return new hrDelTag_resultStandardScheme();
            }
        }

        private static class hrDelTag_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<hrDelTag_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, hrDelTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, hrDelTag_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class hrDelTag_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrDelTag_resultTupleScheme getScheme() {
                return new hrDelTag_resultTupleScheme();
            }
        }

        private static class hrDelTag_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<hrDelTag_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, hrDelTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, hrDelTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class hrUpdateTag_args implements org.apache.thrift.TBase<hrUpdateTag_args, hrUpdateTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<hrUpdateTag_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hrUpdateTag_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tag_id", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hrUpdateTag_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hrUpdateTag_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int tag_id; // required
        public java.lang.String name; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            TAG_ID((short)3, "tag_id"),
            NAME((short)4, "name");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // TAG_ID
                        return TAG_ID;
                    case 4: // NAME
                        return NAME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __TAG_ID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("tag_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hrUpdateTag_args.class, metaDataMap);
        }

        public hrUpdateTag_args() {
        }

        public hrUpdateTag_args(
                int hr_id,
                int company_id,
                int tag_id,
                java.lang.String name)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.tag_id = tag_id;
            setTag_idIsSet(true);
            this.name = name;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public hrUpdateTag_args(hrUpdateTag_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.tag_id = other.tag_id;
            if (other.isSetName()) {
                this.name = other.name;
            }
        }

        public hrUpdateTag_args deepCopy() {
            return new hrUpdateTag_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setTag_idIsSet(false);
            this.tag_id = 0;
            this.name = null;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public hrUpdateTag_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public hrUpdateTag_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getTag_id() {
            return this.tag_id;
        }

        public hrUpdateTag_args setTag_id(int tag_id) {
            this.tag_id = tag_id;
            setTag_idIsSet(true);
            return this;
        }

        public void unsetTag_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TAG_ID_ISSET_ID);
        }

        /** Returns true if field tag_id is set (has been assigned a value) and false otherwise */
        public boolean isSetTag_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TAG_ID_ISSET_ID);
        }

        public void setTag_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TAG_ID_ISSET_ID, value);
        }

        public java.lang.String getName() {
            return this.name;
        }

        public hrUpdateTag_args setName(java.lang.String name) {
            this.name = name;
            return this;
        }

        public void unsetName() {
            this.name = null;
        }

        /** Returns true if field name is set (has been assigned a value) and false otherwise */
        public boolean isSetName() {
            return this.name != null;
        }

        public void setNameIsSet(boolean value) {
            if (!value) {
                this.name = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case TAG_ID:
                    if (value == null) {
                        unsetTag_id();
                    } else {
                        setTag_id((java.lang.Integer)value);
                    }
                    break;

                case NAME:
                    if (value == null) {
                        unsetName();
                    } else {
                        setName((java.lang.String)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case TAG_ID:
                    return getTag_id();

                case NAME:
                    return getName();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case TAG_ID:
                    return isSetTag_id();
                case NAME:
                    return isSetName();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof hrUpdateTag_args)
                return this.equals((hrUpdateTag_args)that);
            return false;
        }

        public boolean equals(hrUpdateTag_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_tag_id = true;
            boolean that_present_tag_id = true;
            if (this_present_tag_id || that_present_tag_id) {
                if (!(this_present_tag_id && that_present_tag_id))
                    return false;
                if (this.tag_id != that.tag_id)
                    return false;
            }

            boolean this_present_name = true && this.isSetName();
            boolean that_present_name = true && that.isSetName();
            if (this_present_name || that_present_name) {
                if (!(this_present_name && that_present_name))
                    return false;
                if (!this.name.equals(that.name))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + tag_id;

            hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
            if (isSetName())
                hashCode = hashCode * 8191 + name.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(hrUpdateTag_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetTag_id()).compareTo(other.isSetTag_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTag_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag_id, other.tag_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("hrUpdateTag_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("tag_id:");
            sb.append(this.tag_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("name:");
            if (this.name == null) {
                sb.append("null");
            } else {
                sb.append(this.name);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class hrUpdateTag_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrUpdateTag_argsStandardScheme getScheme() {
                return new hrUpdateTag_argsStandardScheme();
            }
        }

        private static class hrUpdateTag_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<hrUpdateTag_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, hrUpdateTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // TAG_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.tag_id = iprot.readI32();
                                struct.setTag_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.name = iprot.readString();
                                struct.setNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, hrUpdateTag_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(TAG_ID_FIELD_DESC);
                oprot.writeI32(struct.tag_id);
                oprot.writeFieldEnd();
                if (struct.name != null) {
                    oprot.writeFieldBegin(NAME_FIELD_DESC);
                    oprot.writeString(struct.name);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class hrUpdateTag_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrUpdateTag_argsTupleScheme getScheme() {
                return new hrUpdateTag_argsTupleScheme();
            }
        }

        private static class hrUpdateTag_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<hrUpdateTag_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, hrUpdateTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetTag_id()) {
                    optionals.set(2);
                }
                if (struct.isSetName()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetTag_id()) {
                    oprot.writeI32(struct.tag_id);
                }
                if (struct.isSetName()) {
                    oprot.writeString(struct.name);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, hrUpdateTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.tag_id = iprot.readI32();
                    struct.setTag_idIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.name = iprot.readString();
                    struct.setNameIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class hrUpdateTag_result implements org.apache.thrift.TBase<hrUpdateTag_result, hrUpdateTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<hrUpdateTag_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hrUpdateTag_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hrUpdateTag_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hrUpdateTag_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hrUpdateTag_result.class, metaDataMap);
        }

        public hrUpdateTag_result() {
        }

        public hrUpdateTag_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public hrUpdateTag_result(hrUpdateTag_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public hrUpdateTag_result deepCopy() {
            return new hrUpdateTag_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public hrUpdateTag_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public hrUpdateTag_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof hrUpdateTag_result)
                return this.equals((hrUpdateTag_result)that);
            return false;
        }

        public boolean equals(hrUpdateTag_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(hrUpdateTag_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("hrUpdateTag_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class hrUpdateTag_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrUpdateTag_resultStandardScheme getScheme() {
                return new hrUpdateTag_resultStandardScheme();
            }
        }

        private static class hrUpdateTag_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<hrUpdateTag_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, hrUpdateTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, hrUpdateTag_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class hrUpdateTag_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrUpdateTag_resultTupleScheme getScheme() {
                return new hrUpdateTag_resultTupleScheme();
            }
        }

        private static class hrUpdateTag_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<hrUpdateTag_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, hrUpdateTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, hrUpdateTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchCancleTalentTag_args implements org.apache.thrift.TBase<batchCancleTalentTag_args, batchCancleTalentTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchCancleTalentTag_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchCancleTalentTag_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ids", org.apache.thrift.protocol.TType.LIST, (short)2);
        private static final org.apache.thrift.protocol.TField TAG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("tag_ids", org.apache.thrift.protocol.TType.LIST, (short)3);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchCancleTalentTag_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchCancleTalentTag_argsTupleSchemeFactory();

        public int hr_id; // required
        public java.util.List<java.lang.Integer> user_ids; // required
        public java.util.List<java.lang.Integer> tag_ids; // required
        public int company_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            USER_IDS((short)2, "user_ids"),
            TAG_IDS((short)3, "tag_ids"),
            COMPANY_ID((short)4, "company_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // USER_IDS
                        return USER_IDS;
                    case 3: // TAG_IDS
                        return TAG_IDS;
                    case 4: // COMPANY_ID
                        return COMPANY_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("user_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            tmpMap.put(_Fields.TAG_IDS, new org.apache.thrift.meta_data.FieldMetaData("tag_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchCancleTalentTag_args.class, metaDataMap);
        }

        public batchCancleTalentTag_args() {
        }

        public batchCancleTalentTag_args(
                int hr_id,
                java.util.List<java.lang.Integer> user_ids,
                java.util.List<java.lang.Integer> tag_ids,
                int company_id)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.user_ids = user_ids;
            this.tag_ids = tag_ids;
            this.company_id = company_id;
            setCompany_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchCancleTalentTag_args(batchCancleTalentTag_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            if (other.isSetUser_ids()) {
                java.util.List<java.lang.Integer> __this__user_ids = new java.util.ArrayList<java.lang.Integer>(other.user_ids);
                this.user_ids = __this__user_ids;
            }
            if (other.isSetTag_ids()) {
                java.util.List<java.lang.Integer> __this__tag_ids = new java.util.ArrayList<java.lang.Integer>(other.tag_ids);
                this.tag_ids = __this__tag_ids;
            }
            this.company_id = other.company_id;
        }

        public batchCancleTalentTag_args deepCopy() {
            return new batchCancleTalentTag_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            this.user_ids = null;
            this.tag_ids = null;
            setCompany_idIsSet(false);
            this.company_id = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public batchCancleTalentTag_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getUser_idsSize() {
            return (this.user_ids == null) ? 0 : this.user_ids.size();
        }

        public java.util.Iterator<java.lang.Integer> getUser_idsIterator() {
            return (this.user_ids == null) ? null : this.user_ids.iterator();
        }

        public void addToUser_ids(int elem) {
            if (this.user_ids == null) {
                this.user_ids = new java.util.ArrayList<java.lang.Integer>();
            }
            this.user_ids.add(elem);
        }

        public java.util.List<java.lang.Integer> getUser_ids() {
            return this.user_ids;
        }

        public batchCancleTalentTag_args setUser_ids(java.util.List<java.lang.Integer> user_ids) {
            this.user_ids = user_ids;
            return this;
        }

        public void unsetUser_ids() {
            this.user_ids = null;
        }

        /** Returns true if field user_ids is set (has been assigned a value) and false otherwise */
        public boolean isSetUser_ids() {
            return this.user_ids != null;
        }

        public void setUser_idsIsSet(boolean value) {
            if (!value) {
                this.user_ids = null;
            }
        }

        public int getTag_idsSize() {
            return (this.tag_ids == null) ? 0 : this.tag_ids.size();
        }

        public java.util.Iterator<java.lang.Integer> getTag_idsIterator() {
            return (this.tag_ids == null) ? null : this.tag_ids.iterator();
        }

        public void addToTag_ids(int elem) {
            if (this.tag_ids == null) {
                this.tag_ids = new java.util.ArrayList<java.lang.Integer>();
            }
            this.tag_ids.add(elem);
        }

        public java.util.List<java.lang.Integer> getTag_ids() {
            return this.tag_ids;
        }

        public batchCancleTalentTag_args setTag_ids(java.util.List<java.lang.Integer> tag_ids) {
            this.tag_ids = tag_ids;
            return this;
        }

        public void unsetTag_ids() {
            this.tag_ids = null;
        }

        /** Returns true if field tag_ids is set (has been assigned a value) and false otherwise */
        public boolean isSetTag_ids() {
            return this.tag_ids != null;
        }

        public void setTag_idsIsSet(boolean value) {
            if (!value) {
                this.tag_ids = null;
            }
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public batchCancleTalentTag_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case USER_IDS:
                    if (value == null) {
                        unsetUser_ids();
                    } else {
                        setUser_ids((java.util.List<java.lang.Integer>)value);
                    }
                    break;

                case TAG_IDS:
                    if (value == null) {
                        unsetTag_ids();
                    } else {
                        setTag_ids((java.util.List<java.lang.Integer>)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case USER_IDS:
                    return getUser_ids();

                case TAG_IDS:
                    return getTag_ids();

                case COMPANY_ID:
                    return getCompany_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case USER_IDS:
                    return isSetUser_ids();
                case TAG_IDS:
                    return isSetTag_ids();
                case COMPANY_ID:
                    return isSetCompany_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchCancleTalentTag_args)
                return this.equals((batchCancleTalentTag_args)that);
            return false;
        }

        public boolean equals(batchCancleTalentTag_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_user_ids = true && this.isSetUser_ids();
            boolean that_present_user_ids = true && that.isSetUser_ids();
            if (this_present_user_ids || that_present_user_ids) {
                if (!(this_present_user_ids && that_present_user_ids))
                    return false;
                if (!this.user_ids.equals(that.user_ids))
                    return false;
            }

            boolean this_present_tag_ids = true && this.isSetTag_ids();
            boolean that_present_tag_ids = true && that.isSetTag_ids();
            if (this_present_tag_ids || that_present_tag_ids) {
                if (!(this_present_tag_ids && that_present_tag_ids))
                    return false;
                if (!this.tag_ids.equals(that.tag_ids))
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + ((isSetUser_ids()) ? 131071 : 524287);
            if (isSetUser_ids())
                hashCode = hashCode * 8191 + user_ids.hashCode();

            hashCode = hashCode * 8191 + ((isSetTag_ids()) ? 131071 : 524287);
            if (isSetTag_ids())
                hashCode = hashCode * 8191 + tag_ids.hashCode();

            hashCode = hashCode * 8191 + company_id;

            return hashCode;
        }

        @Override
        public int compareTo(batchCancleTalentTag_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUser_ids()).compareTo(other.isSetUser_ids());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUser_ids()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ids, other.user_ids);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetTag_ids()).compareTo(other.isSetTag_ids());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTag_ids()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag_ids, other.tag_ids);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchCancleTalentTag_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("user_ids:");
            if (this.user_ids == null) {
                sb.append("null");
            } else {
                sb.append(this.user_ids);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("tag_ids:");
            if (this.tag_ids == null) {
                sb.append("null");
            } else {
                sb.append(this.tag_ids);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchCancleTalentTag_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchCancleTalentTag_argsStandardScheme getScheme() {
                return new batchCancleTalentTag_argsStandardScheme();
            }
        }

        private static class batchCancleTalentTag_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchCancleTalentTag_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchCancleTalentTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // USER_IDS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                                    struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list96.size);
                                    int _elem97;
                                    for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                                    {
                                        _elem97 = iprot.readI32();
                                        struct.user_ids.add(_elem97);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setUser_idsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // TAG_IDS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list99 = iprot.readListBegin();
                                    struct.tag_ids = new java.util.ArrayList<java.lang.Integer>(_list99.size);
                                    int _elem100;
                                    for (int _i101 = 0; _i101 < _list99.size; ++_i101)
                                    {
                                        _elem100 = iprot.readI32();
                                        struct.tag_ids.add(_elem100);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setTag_idsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchCancleTalentTag_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                if (struct.user_ids != null) {
                    oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.user_ids.size()));
                        for (int _iter102 : struct.user_ids)
                        {
                            oprot.writeI32(_iter102);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.tag_ids != null) {
                    oprot.writeFieldBegin(TAG_IDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.tag_ids.size()));
                        for (int _iter103 : struct.tag_ids)
                        {
                            oprot.writeI32(_iter103);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchCancleTalentTag_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchCancleTalentTag_argsTupleScheme getScheme() {
                return new batchCancleTalentTag_argsTupleScheme();
            }
        }

        private static class batchCancleTalentTag_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchCancleTalentTag_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchCancleTalentTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetUser_ids()) {
                    optionals.set(1);
                }
                if (struct.isSetTag_ids()) {
                    optionals.set(2);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetUser_ids()) {
                    {
                        oprot.writeI32(struct.user_ids.size());
                        for (int _iter104 : struct.user_ids)
                        {
                            oprot.writeI32(_iter104);
                        }
                    }
                }
                if (struct.isSetTag_ids()) {
                    {
                        oprot.writeI32(struct.tag_ids.size());
                        for (int _iter105 : struct.tag_ids)
                        {
                            oprot.writeI32(_iter105);
                        }
                    }
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchCancleTalentTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TList _list106 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list106.size);
                        int _elem107;
                        for (int _i108 = 0; _i108 < _list106.size; ++_i108)
                        {
                            _elem107 = iprot.readI32();
                            struct.user_ids.add(_elem107);
                        }
                    }
                    struct.setUser_idsIsSet(true);
                }
                if (incoming.get(2)) {
                    {
                        org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.tag_ids = new java.util.ArrayList<java.lang.Integer>(_list109.size);
                        int _elem110;
                        for (int _i111 = 0; _i111 < _list109.size; ++_i111)
                        {
                            _elem110 = iprot.readI32();
                            struct.tag_ids.add(_elem110);
                        }
                    }
                    struct.setTag_idsIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchCancleTalentTag_result implements org.apache.thrift.TBase<batchCancleTalentTag_result, batchCancleTalentTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchCancleTalentTag_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchCancleTalentTag_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchCancleTalentTag_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchCancleTalentTag_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchCancleTalentTag_result.class, metaDataMap);
        }

        public batchCancleTalentTag_result() {
        }

        public batchCancleTalentTag_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchCancleTalentTag_result(batchCancleTalentTag_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public batchCancleTalentTag_result deepCopy() {
            return new batchCancleTalentTag_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public batchCancleTalentTag_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public batchCancleTalentTag_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchCancleTalentTag_result)
                return this.equals((batchCancleTalentTag_result)that);
            return false;
        }

        public boolean equals(batchCancleTalentTag_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(batchCancleTalentTag_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchCancleTalentTag_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchCancleTalentTag_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchCancleTalentTag_resultStandardScheme getScheme() {
                return new batchCancleTalentTag_resultStandardScheme();
            }
        }

        private static class batchCancleTalentTag_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchCancleTalentTag_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchCancleTalentTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchCancleTalentTag_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchCancleTalentTag_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchCancleTalentTag_resultTupleScheme getScheme() {
                return new batchCancleTalentTag_resultTupleScheme();
            }
        }

        private static class batchCancleTalentTag_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchCancleTalentTag_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchCancleTalentTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchCancleTalentTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchAddTalentTag_args implements org.apache.thrift.TBase<batchAddTalentTag_args, batchAddTalentTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchAddTalentTag_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchAddTalentTag_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ids", org.apache.thrift.protocol.TType.LIST, (short)2);
        private static final org.apache.thrift.protocol.TField TAG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("tag_ids", org.apache.thrift.protocol.TType.LIST, (short)3);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchAddTalentTag_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchAddTalentTag_argsTupleSchemeFactory();

        public int hr_id; // required
        public java.util.List<java.lang.Integer> user_ids; // required
        public java.util.List<java.lang.Integer> tag_ids; // required
        public int company_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            USER_IDS((short)2, "user_ids"),
            TAG_IDS((short)3, "tag_ids"),
            COMPANY_ID((short)4, "company_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // USER_IDS
                        return USER_IDS;
                    case 3: // TAG_IDS
                        return TAG_IDS;
                    case 4: // COMPANY_ID
                        return COMPANY_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("user_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            tmpMap.put(_Fields.TAG_IDS, new org.apache.thrift.meta_data.FieldMetaData("tag_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchAddTalentTag_args.class, metaDataMap);
        }

        public batchAddTalentTag_args() {
        }

        public batchAddTalentTag_args(
                int hr_id,
                java.util.List<java.lang.Integer> user_ids,
                java.util.List<java.lang.Integer> tag_ids,
                int company_id)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.user_ids = user_ids;
            this.tag_ids = tag_ids;
            this.company_id = company_id;
            setCompany_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchAddTalentTag_args(batchAddTalentTag_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            if (other.isSetUser_ids()) {
                java.util.List<java.lang.Integer> __this__user_ids = new java.util.ArrayList<java.lang.Integer>(other.user_ids);
                this.user_ids = __this__user_ids;
            }
            if (other.isSetTag_ids()) {
                java.util.List<java.lang.Integer> __this__tag_ids = new java.util.ArrayList<java.lang.Integer>(other.tag_ids);
                this.tag_ids = __this__tag_ids;
            }
            this.company_id = other.company_id;
        }

        public batchAddTalentTag_args deepCopy() {
            return new batchAddTalentTag_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            this.user_ids = null;
            this.tag_ids = null;
            setCompany_idIsSet(false);
            this.company_id = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public batchAddTalentTag_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getUser_idsSize() {
            return (this.user_ids == null) ? 0 : this.user_ids.size();
        }

        public java.util.Iterator<java.lang.Integer> getUser_idsIterator() {
            return (this.user_ids == null) ? null : this.user_ids.iterator();
        }

        public void addToUser_ids(int elem) {
            if (this.user_ids == null) {
                this.user_ids = new java.util.ArrayList<java.lang.Integer>();
            }
            this.user_ids.add(elem);
        }

        public java.util.List<java.lang.Integer> getUser_ids() {
            return this.user_ids;
        }

        public batchAddTalentTag_args setUser_ids(java.util.List<java.lang.Integer> user_ids) {
            this.user_ids = user_ids;
            return this;
        }

        public void unsetUser_ids() {
            this.user_ids = null;
        }

        /** Returns true if field user_ids is set (has been assigned a value) and false otherwise */
        public boolean isSetUser_ids() {
            return this.user_ids != null;
        }

        public void setUser_idsIsSet(boolean value) {
            if (!value) {
                this.user_ids = null;
            }
        }

        public int getTag_idsSize() {
            return (this.tag_ids == null) ? 0 : this.tag_ids.size();
        }

        public java.util.Iterator<java.lang.Integer> getTag_idsIterator() {
            return (this.tag_ids == null) ? null : this.tag_ids.iterator();
        }

        public void addToTag_ids(int elem) {
            if (this.tag_ids == null) {
                this.tag_ids = new java.util.ArrayList<java.lang.Integer>();
            }
            this.tag_ids.add(elem);
        }

        public java.util.List<java.lang.Integer> getTag_ids() {
            return this.tag_ids;
        }

        public batchAddTalentTag_args setTag_ids(java.util.List<java.lang.Integer> tag_ids) {
            this.tag_ids = tag_ids;
            return this;
        }

        public void unsetTag_ids() {
            this.tag_ids = null;
        }

        /** Returns true if field tag_ids is set (has been assigned a value) and false otherwise */
        public boolean isSetTag_ids() {
            return this.tag_ids != null;
        }

        public void setTag_idsIsSet(boolean value) {
            if (!value) {
                this.tag_ids = null;
            }
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public batchAddTalentTag_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case USER_IDS:
                    if (value == null) {
                        unsetUser_ids();
                    } else {
                        setUser_ids((java.util.List<java.lang.Integer>)value);
                    }
                    break;

                case TAG_IDS:
                    if (value == null) {
                        unsetTag_ids();
                    } else {
                        setTag_ids((java.util.List<java.lang.Integer>)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case USER_IDS:
                    return getUser_ids();

                case TAG_IDS:
                    return getTag_ids();

                case COMPANY_ID:
                    return getCompany_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case USER_IDS:
                    return isSetUser_ids();
                case TAG_IDS:
                    return isSetTag_ids();
                case COMPANY_ID:
                    return isSetCompany_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchAddTalentTag_args)
                return this.equals((batchAddTalentTag_args)that);
            return false;
        }

        public boolean equals(batchAddTalentTag_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_user_ids = true && this.isSetUser_ids();
            boolean that_present_user_ids = true && that.isSetUser_ids();
            if (this_present_user_ids || that_present_user_ids) {
                if (!(this_present_user_ids && that_present_user_ids))
                    return false;
                if (!this.user_ids.equals(that.user_ids))
                    return false;
            }

            boolean this_present_tag_ids = true && this.isSetTag_ids();
            boolean that_present_tag_ids = true && that.isSetTag_ids();
            if (this_present_tag_ids || that_present_tag_ids) {
                if (!(this_present_tag_ids && that_present_tag_ids))
                    return false;
                if (!this.tag_ids.equals(that.tag_ids))
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + ((isSetUser_ids()) ? 131071 : 524287);
            if (isSetUser_ids())
                hashCode = hashCode * 8191 + user_ids.hashCode();

            hashCode = hashCode * 8191 + ((isSetTag_ids()) ? 131071 : 524287);
            if (isSetTag_ids())
                hashCode = hashCode * 8191 + tag_ids.hashCode();

            hashCode = hashCode * 8191 + company_id;

            return hashCode;
        }

        @Override
        public int compareTo(batchAddTalentTag_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUser_ids()).compareTo(other.isSetUser_ids());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUser_ids()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ids, other.user_ids);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetTag_ids()).compareTo(other.isSetTag_ids());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTag_ids()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag_ids, other.tag_ids);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchAddTalentTag_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("user_ids:");
            if (this.user_ids == null) {
                sb.append("null");
            } else {
                sb.append(this.user_ids);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("tag_ids:");
            if (this.tag_ids == null) {
                sb.append("null");
            } else {
                sb.append(this.tag_ids);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchAddTalentTag_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchAddTalentTag_argsStandardScheme getScheme() {
                return new batchAddTalentTag_argsStandardScheme();
            }
        }

        private static class batchAddTalentTag_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchAddTalentTag_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchAddTalentTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // USER_IDS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                                    struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list112.size);
                                    int _elem113;
                                    for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                                    {
                                        _elem113 = iprot.readI32();
                                        struct.user_ids.add(_elem113);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setUser_idsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // TAG_IDS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list115 = iprot.readListBegin();
                                    struct.tag_ids = new java.util.ArrayList<java.lang.Integer>(_list115.size);
                                    int _elem116;
                                    for (int _i117 = 0; _i117 < _list115.size; ++_i117)
                                    {
                                        _elem116 = iprot.readI32();
                                        struct.tag_ids.add(_elem116);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setTag_idsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchAddTalentTag_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                if (struct.user_ids != null) {
                    oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.user_ids.size()));
                        for (int _iter118 : struct.user_ids)
                        {
                            oprot.writeI32(_iter118);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.tag_ids != null) {
                    oprot.writeFieldBegin(TAG_IDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.tag_ids.size()));
                        for (int _iter119 : struct.tag_ids)
                        {
                            oprot.writeI32(_iter119);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchAddTalentTag_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchAddTalentTag_argsTupleScheme getScheme() {
                return new batchAddTalentTag_argsTupleScheme();
            }
        }

        private static class batchAddTalentTag_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchAddTalentTag_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchAddTalentTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetUser_ids()) {
                    optionals.set(1);
                }
                if (struct.isSetTag_ids()) {
                    optionals.set(2);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetUser_ids()) {
                    {
                        oprot.writeI32(struct.user_ids.size());
                        for (int _iter120 : struct.user_ids)
                        {
                            oprot.writeI32(_iter120);
                        }
                    }
                }
                if (struct.isSetTag_ids()) {
                    {
                        oprot.writeI32(struct.tag_ids.size());
                        for (int _iter121 : struct.tag_ids)
                        {
                            oprot.writeI32(_iter121);
                        }
                    }
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchAddTalentTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TList _list122 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list122.size);
                        int _elem123;
                        for (int _i124 = 0; _i124 < _list122.size; ++_i124)
                        {
                            _elem123 = iprot.readI32();
                            struct.user_ids.add(_elem123);
                        }
                    }
                    struct.setUser_idsIsSet(true);
                }
                if (incoming.get(2)) {
                    {
                        org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.tag_ids = new java.util.ArrayList<java.lang.Integer>(_list125.size);
                        int _elem126;
                        for (int _i127 = 0; _i127 < _list125.size; ++_i127)
                        {
                            _elem126 = iprot.readI32();
                            struct.tag_ids.add(_elem126);
                        }
                    }
                    struct.setTag_idsIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchAddTalentTag_result implements org.apache.thrift.TBase<batchAddTalentTag_result, batchAddTalentTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchAddTalentTag_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchAddTalentTag_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchAddTalentTag_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchAddTalentTag_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchAddTalentTag_result.class, metaDataMap);
        }

        public batchAddTalentTag_result() {
        }

        public batchAddTalentTag_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchAddTalentTag_result(batchAddTalentTag_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public batchAddTalentTag_result deepCopy() {
            return new batchAddTalentTag_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public batchAddTalentTag_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public batchAddTalentTag_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchAddTalentTag_result)
                return this.equals((batchAddTalentTag_result)that);
            return false;
        }

        public boolean equals(batchAddTalentTag_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(batchAddTalentTag_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchAddTalentTag_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchAddTalentTag_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchAddTalentTag_resultStandardScheme getScheme() {
                return new batchAddTalentTag_resultStandardScheme();
            }
        }

        private static class batchAddTalentTag_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchAddTalentTag_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchAddTalentTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchAddTalentTag_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchAddTalentTag_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchAddTalentTag_resultTupleScheme getScheme() {
                return new batchAddTalentTag_resultTupleScheme();
            }
        }

        private static class batchAddTalentTag_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchAddTalentTag_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchAddTalentTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchAddTalentTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class hrAddComment_args implements org.apache.thrift.TBase<hrAddComment_args, hrAddComment_args._Fields>, java.io.Serializable, Cloneable, Comparable<hrAddComment_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hrAddComment_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hrAddComment_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hrAddComment_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int user_id; // required
        public java.lang.String content; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            USER_ID((short)3, "user_id"),
            CONTENT((short)4, "content");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // USER_ID
                        return USER_ID;
                    case 4: // CONTENT
                        return CONTENT;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __USER_ID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hrAddComment_args.class, metaDataMap);
        }

        public hrAddComment_args() {
        }

        public hrAddComment_args(
                int hr_id,
                int company_id,
                int user_id,
                java.lang.String content)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.user_id = user_id;
            setUser_idIsSet(true);
            this.content = content;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public hrAddComment_args(hrAddComment_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.user_id = other.user_id;
            if (other.isSetContent()) {
                this.content = other.content;
            }
        }

        public hrAddComment_args deepCopy() {
            return new hrAddComment_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setUser_idIsSet(false);
            this.user_id = 0;
            this.content = null;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public hrAddComment_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public hrAddComment_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getUser_id() {
            return this.user_id;
        }

        public hrAddComment_args setUser_id(int user_id) {
            this.user_id = user_id;
            setUser_idIsSet(true);
            return this;
        }

        public void unsetUser_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USER_ID_ISSET_ID);
        }

        /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
        public boolean isSetUser_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USER_ID_ISSET_ID);
        }

        public void setUser_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USER_ID_ISSET_ID, value);
        }

        public java.lang.String getContent() {
            return this.content;
        }

        public hrAddComment_args setContent(java.lang.String content) {
            this.content = content;
            return this;
        }

        public void unsetContent() {
            this.content = null;
        }

        /** Returns true if field content is set (has been assigned a value) and false otherwise */
        public boolean isSetContent() {
            return this.content != null;
        }

        public void setContentIsSet(boolean value) {
            if (!value) {
                this.content = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case USER_ID:
                    if (value == null) {
                        unsetUser_id();
                    } else {
                        setUser_id((java.lang.Integer)value);
                    }
                    break;

                case CONTENT:
                    if (value == null) {
                        unsetContent();
                    } else {
                        setContent((java.lang.String)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case USER_ID:
                    return getUser_id();

                case CONTENT:
                    return getContent();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case USER_ID:
                    return isSetUser_id();
                case CONTENT:
                    return isSetContent();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof hrAddComment_args)
                return this.equals((hrAddComment_args)that);
            return false;
        }

        public boolean equals(hrAddComment_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_user_id = true;
            boolean that_present_user_id = true;
            if (this_present_user_id || that_present_user_id) {
                if (!(this_present_user_id && that_present_user_id))
                    return false;
                if (this.user_id != that.user_id)
                    return false;
            }

            boolean this_present_content = true && this.isSetContent();
            boolean that_present_content = true && that.isSetContent();
            if (this_present_content || that_present_content) {
                if (!(this_present_content && that_present_content))
                    return false;
                if (!this.content.equals(that.content))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + user_id;

            hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
            if (isSetContent())
                hashCode = hashCode * 8191 + content.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(hrAddComment_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUser_id()).compareTo(other.isSetUser_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUser_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, other.user_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetContent()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("hrAddComment_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("user_id:");
            sb.append(this.user_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("content:");
            if (this.content == null) {
                sb.append("null");
            } else {
                sb.append(this.content);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class hrAddComment_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrAddComment_argsStandardScheme getScheme() {
                return new hrAddComment_argsStandardScheme();
            }
        }

        private static class hrAddComment_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<hrAddComment_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, hrAddComment_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.user_id = iprot.readI32();
                                struct.setUser_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // CONTENT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.content = iprot.readString();
                                struct.setContentIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, hrAddComment_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.user_id);
                oprot.writeFieldEnd();
                if (struct.content != null) {
                    oprot.writeFieldBegin(CONTENT_FIELD_DESC);
                    oprot.writeString(struct.content);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class hrAddComment_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrAddComment_argsTupleScheme getScheme() {
                return new hrAddComment_argsTupleScheme();
            }
        }

        private static class hrAddComment_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<hrAddComment_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, hrAddComment_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetUser_id()) {
                    optionals.set(2);
                }
                if (struct.isSetContent()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetUser_id()) {
                    oprot.writeI32(struct.user_id);
                }
                if (struct.isSetContent()) {
                    oprot.writeString(struct.content);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, hrAddComment_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.user_id = iprot.readI32();
                    struct.setUser_idIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.content = iprot.readString();
                    struct.setContentIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class hrAddComment_result implements org.apache.thrift.TBase<hrAddComment_result, hrAddComment_result._Fields>, java.io.Serializable, Cloneable, Comparable<hrAddComment_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hrAddComment_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hrAddComment_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hrAddComment_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hrAddComment_result.class, metaDataMap);
        }

        public hrAddComment_result() {
        }

        public hrAddComment_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public hrAddComment_result(hrAddComment_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public hrAddComment_result deepCopy() {
            return new hrAddComment_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public hrAddComment_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public hrAddComment_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof hrAddComment_result)
                return this.equals((hrAddComment_result)that);
            return false;
        }

        public boolean equals(hrAddComment_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(hrAddComment_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("hrAddComment_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class hrAddComment_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrAddComment_resultStandardScheme getScheme() {
                return new hrAddComment_resultStandardScheme();
            }
        }

        private static class hrAddComment_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<hrAddComment_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, hrAddComment_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, hrAddComment_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class hrAddComment_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrAddComment_resultTupleScheme getScheme() {
                return new hrAddComment_resultTupleScheme();
            }
        }

        private static class hrAddComment_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<hrAddComment_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, hrAddComment_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, hrAddComment_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class hrDelComment_args implements org.apache.thrift.TBase<hrDelComment_args, hrDelComment_args._Fields>, java.io.Serializable, Cloneable, Comparable<hrDelComment_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hrDelComment_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField COMMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("comment_id", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hrDelComment_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hrDelComment_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int comment_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            COMMENT_ID((short)3, "comment_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // COMMENT_ID
                        return COMMENT_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __COMMENT_ID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("comment_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hrDelComment_args.class, metaDataMap);
        }

        public hrDelComment_args() {
        }

        public hrDelComment_args(
                int hr_id,
                int company_id,
                int comment_id)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.comment_id = comment_id;
            setComment_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public hrDelComment_args(hrDelComment_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.comment_id = other.comment_id;
        }

        public hrDelComment_args deepCopy() {
            return new hrDelComment_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setComment_idIsSet(false);
            this.comment_id = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public hrDelComment_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public hrDelComment_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getComment_id() {
            return this.comment_id;
        }

        public hrDelComment_args setComment_id(int comment_id) {
            this.comment_id = comment_id;
            setComment_idIsSet(true);
            return this;
        }

        public void unsetComment_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMMENT_ID_ISSET_ID);
        }

        /** Returns true if field comment_id is set (has been assigned a value) and false otherwise */
        public boolean isSetComment_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMMENT_ID_ISSET_ID);
        }

        public void setComment_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMMENT_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case COMMENT_ID:
                    if (value == null) {
                        unsetComment_id();
                    } else {
                        setComment_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case COMMENT_ID:
                    return getComment_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case COMMENT_ID:
                    return isSetComment_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof hrDelComment_args)
                return this.equals((hrDelComment_args)that);
            return false;
        }

        public boolean equals(hrDelComment_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_comment_id = true;
            boolean that_present_comment_id = true;
            if (this_present_comment_id || that_present_comment_id) {
                if (!(this_present_comment_id && that_present_comment_id))
                    return false;
                if (this.comment_id != that.comment_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + comment_id;

            return hashCode;
        }

        @Override
        public int compareTo(hrDelComment_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetComment_id()).compareTo(other.isSetComment_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetComment_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment_id, other.comment_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("hrDelComment_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("comment_id:");
            sb.append(this.comment_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class hrDelComment_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrDelComment_argsStandardScheme getScheme() {
                return new hrDelComment_argsStandardScheme();
            }
        }

        private static class hrDelComment_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<hrDelComment_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, hrDelComment_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // COMMENT_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.comment_id = iprot.readI32();
                                struct.setComment_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, hrDelComment_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMMENT_ID_FIELD_DESC);
                oprot.writeI32(struct.comment_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class hrDelComment_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrDelComment_argsTupleScheme getScheme() {
                return new hrDelComment_argsTupleScheme();
            }
        }

        private static class hrDelComment_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<hrDelComment_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, hrDelComment_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetComment_id()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetComment_id()) {
                    oprot.writeI32(struct.comment_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, hrDelComment_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.comment_id = iprot.readI32();
                    struct.setComment_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class hrDelComment_result implements org.apache.thrift.TBase<hrDelComment_result, hrDelComment_result._Fields>, java.io.Serializable, Cloneable, Comparable<hrDelComment_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hrDelComment_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hrDelComment_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hrDelComment_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hrDelComment_result.class, metaDataMap);
        }

        public hrDelComment_result() {
        }

        public hrDelComment_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public hrDelComment_result(hrDelComment_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public hrDelComment_result deepCopy() {
            return new hrDelComment_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public hrDelComment_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public hrDelComment_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof hrDelComment_result)
                return this.equals((hrDelComment_result)that);
            return false;
        }

        public boolean equals(hrDelComment_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(hrDelComment_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("hrDelComment_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class hrDelComment_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrDelComment_resultStandardScheme getScheme() {
                return new hrDelComment_resultStandardScheme();
            }
        }

        private static class hrDelComment_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<hrDelComment_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, hrDelComment_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, hrDelComment_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class hrDelComment_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public hrDelComment_resultTupleScheme getScheme() {
                return new hrDelComment_resultTupleScheme();
            }
        }

        private static class hrDelComment_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<hrDelComment_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, hrDelComment_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, hrDelComment_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchAddPublicTalent_args implements org.apache.thrift.TBase<batchAddPublicTalent_args, batchAddPublicTalent_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchAddPublicTalent_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchAddPublicTalent_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ids", org.apache.thrift.protocol.TType.LIST, (short)3);
        private static final org.apache.thrift.protocol.TField IS_GDPR_FIELD_DESC = new org.apache.thrift.protocol.TField("isGdpr", org.apache.thrift.protocol.TType.I32, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchAddPublicTalent_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchAddPublicTalent_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public java.util.List<java.lang.Integer> user_ids; // required
        public int isGdpr; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            USER_IDS((short)3, "user_ids"),
            IS_GDPR((short)4, "isGdpr");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // USER_IDS
                        return USER_IDS;
                    case 4: // IS_GDPR
                        return IS_GDPR;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __ISGDPR_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("user_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            tmpMap.put(_Fields.IS_GDPR, new org.apache.thrift.meta_data.FieldMetaData("isGdpr", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchAddPublicTalent_args.class, metaDataMap);
        }

        public batchAddPublicTalent_args() {
        }

        public batchAddPublicTalent_args(
                int hr_id,
                int company_id,
                java.util.List<java.lang.Integer> user_ids,
                int isGdpr)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.user_ids = user_ids;
            this.isGdpr = isGdpr;
            setIsGdprIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchAddPublicTalent_args(batchAddPublicTalent_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            if (other.isSetUser_ids()) {
                java.util.List<java.lang.Integer> __this__user_ids = new java.util.ArrayList<java.lang.Integer>(other.user_ids);
                this.user_ids = __this__user_ids;
            }
            this.isGdpr = other.isGdpr;
        }

        public batchAddPublicTalent_args deepCopy() {
            return new batchAddPublicTalent_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            this.user_ids = null;
            setIsGdprIsSet(false);
            this.isGdpr = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public batchAddPublicTalent_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public batchAddPublicTalent_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getUser_idsSize() {
            return (this.user_ids == null) ? 0 : this.user_ids.size();
        }

        public java.util.Iterator<java.lang.Integer> getUser_idsIterator() {
            return (this.user_ids == null) ? null : this.user_ids.iterator();
        }

        public void addToUser_ids(int elem) {
            if (this.user_ids == null) {
                this.user_ids = new java.util.ArrayList<java.lang.Integer>();
            }
            this.user_ids.add(elem);
        }

        public java.util.List<java.lang.Integer> getUser_ids() {
            return this.user_ids;
        }

        public batchAddPublicTalent_args setUser_ids(java.util.List<java.lang.Integer> user_ids) {
            this.user_ids = user_ids;
            return this;
        }

        public void unsetUser_ids() {
            this.user_ids = null;
        }

        /** Returns true if field user_ids is set (has been assigned a value) and false otherwise */
        public boolean isSetUser_ids() {
            return this.user_ids != null;
        }

        public void setUser_idsIsSet(boolean value) {
            if (!value) {
                this.user_ids = null;
            }
        }

        public int getIsGdpr() {
            return this.isGdpr;
        }

        public batchAddPublicTalent_args setIsGdpr(int isGdpr) {
            this.isGdpr = isGdpr;
            setIsGdprIsSet(true);
            return this;
        }

        public void unsetIsGdpr() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISGDPR_ISSET_ID);
        }

        /** Returns true if field isGdpr is set (has been assigned a value) and false otherwise */
        public boolean isSetIsGdpr() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISGDPR_ISSET_ID);
        }

        public void setIsGdprIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISGDPR_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case USER_IDS:
                    if (value == null) {
                        unsetUser_ids();
                    } else {
                        setUser_ids((java.util.List<java.lang.Integer>)value);
                    }
                    break;

                case IS_GDPR:
                    if (value == null) {
                        unsetIsGdpr();
                    } else {
                        setIsGdpr((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case USER_IDS:
                    return getUser_ids();

                case IS_GDPR:
                    return getIsGdpr();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case USER_IDS:
                    return isSetUser_ids();
                case IS_GDPR:
                    return isSetIsGdpr();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchAddPublicTalent_args)
                return this.equals((batchAddPublicTalent_args)that);
            return false;
        }

        public boolean equals(batchAddPublicTalent_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_user_ids = true && this.isSetUser_ids();
            boolean that_present_user_ids = true && that.isSetUser_ids();
            if (this_present_user_ids || that_present_user_ids) {
                if (!(this_present_user_ids && that_present_user_ids))
                    return false;
                if (!this.user_ids.equals(that.user_ids))
                    return false;
            }

            boolean this_present_isGdpr = true;
            boolean that_present_isGdpr = true;
            if (this_present_isGdpr || that_present_isGdpr) {
                if (!(this_present_isGdpr && that_present_isGdpr))
                    return false;
                if (this.isGdpr != that.isGdpr)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + ((isSetUser_ids()) ? 131071 : 524287);
            if (isSetUser_ids())
                hashCode = hashCode * 8191 + user_ids.hashCode();

            hashCode = hashCode * 8191 + isGdpr;

            return hashCode;
        }

        @Override
        public int compareTo(batchAddPublicTalent_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUser_ids()).compareTo(other.isSetUser_ids());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUser_ids()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ids, other.user_ids);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetIsGdpr()).compareTo(other.isSetIsGdpr());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetIsGdpr()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isGdpr, other.isGdpr);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchAddPublicTalent_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("user_ids:");
            if (this.user_ids == null) {
                sb.append("null");
            } else {
                sb.append(this.user_ids);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("isGdpr:");
            sb.append(this.isGdpr);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchAddPublicTalent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchAddPublicTalent_argsStandardScheme getScheme() {
                return new batchAddPublicTalent_argsStandardScheme();
            }
        }

        private static class batchAddPublicTalent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchAddPublicTalent_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchAddPublicTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // USER_IDS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                                    struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list128.size);
                                    int _elem129;
                                    for (int _i130 = 0; _i130 < _list128.size; ++_i130)
                                    {
                                        _elem129 = iprot.readI32();
                                        struct.user_ids.add(_elem129);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setUser_idsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // IS_GDPR
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.isGdpr = iprot.readI32();
                                struct.setIsGdprIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchAddPublicTalent_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                if (struct.user_ids != null) {
                    oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.user_ids.size()));
                        for (int _iter131 : struct.user_ids)
                        {
                            oprot.writeI32(_iter131);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(IS_GDPR_FIELD_DESC);
                oprot.writeI32(struct.isGdpr);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchAddPublicTalent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchAddPublicTalent_argsTupleScheme getScheme() {
                return new batchAddPublicTalent_argsTupleScheme();
            }
        }

        private static class batchAddPublicTalent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchAddPublicTalent_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchAddPublicTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetUser_ids()) {
                    optionals.set(2);
                }
                if (struct.isSetIsGdpr()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetUser_ids()) {
                    {
                        oprot.writeI32(struct.user_ids.size());
                        for (int _iter132 : struct.user_ids)
                        {
                            oprot.writeI32(_iter132);
                        }
                    }
                }
                if (struct.isSetIsGdpr()) {
                    oprot.writeI32(struct.isGdpr);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchAddPublicTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    {
                        org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list133.size);
                        int _elem134;
                        for (int _i135 = 0; _i135 < _list133.size; ++_i135)
                        {
                            _elem134 = iprot.readI32();
                            struct.user_ids.add(_elem134);
                        }
                    }
                    struct.setUser_idsIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.isGdpr = iprot.readI32();
                    struct.setIsGdprIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchAddPublicTalent_result implements org.apache.thrift.TBase<batchAddPublicTalent_result, batchAddPublicTalent_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchAddPublicTalent_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchAddPublicTalent_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchAddPublicTalent_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchAddPublicTalent_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchAddPublicTalent_result.class, metaDataMap);
        }

        public batchAddPublicTalent_result() {
        }

        public batchAddPublicTalent_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchAddPublicTalent_result(batchAddPublicTalent_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public batchAddPublicTalent_result deepCopy() {
            return new batchAddPublicTalent_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public batchAddPublicTalent_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public batchAddPublicTalent_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchAddPublicTalent_result)
                return this.equals((batchAddPublicTalent_result)that);
            return false;
        }

        public boolean equals(batchAddPublicTalent_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(batchAddPublicTalent_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchAddPublicTalent_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchAddPublicTalent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchAddPublicTalent_resultStandardScheme getScheme() {
                return new batchAddPublicTalent_resultStandardScheme();
            }
        }

        private static class batchAddPublicTalent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchAddPublicTalent_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchAddPublicTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchAddPublicTalent_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchAddPublicTalent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchAddPublicTalent_resultTupleScheme getScheme() {
                return new batchAddPublicTalent_resultTupleScheme();
            }
        }

        private static class batchAddPublicTalent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchAddPublicTalent_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchAddPublicTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchAddPublicTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchCancelPublicTalent_args implements org.apache.thrift.TBase<batchCancelPublicTalent_args, batchCancelPublicTalent_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchCancelPublicTalent_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchCancelPublicTalent_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ids", org.apache.thrift.protocol.TType.LIST, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchCancelPublicTalent_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchCancelPublicTalent_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public java.util.List<java.lang.Integer> user_ids; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            USER_IDS((short)3, "user_ids");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // USER_IDS
                        return USER_IDS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("user_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchCancelPublicTalent_args.class, metaDataMap);
        }

        public batchCancelPublicTalent_args() {
        }

        public batchCancelPublicTalent_args(
                int hr_id,
                int company_id,
                java.util.List<java.lang.Integer> user_ids)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.user_ids = user_ids;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchCancelPublicTalent_args(batchCancelPublicTalent_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            if (other.isSetUser_ids()) {
                java.util.List<java.lang.Integer> __this__user_ids = new java.util.ArrayList<java.lang.Integer>(other.user_ids);
                this.user_ids = __this__user_ids;
            }
        }

        public batchCancelPublicTalent_args deepCopy() {
            return new batchCancelPublicTalent_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            this.user_ids = null;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public batchCancelPublicTalent_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public batchCancelPublicTalent_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getUser_idsSize() {
            return (this.user_ids == null) ? 0 : this.user_ids.size();
        }

        public java.util.Iterator<java.lang.Integer> getUser_idsIterator() {
            return (this.user_ids == null) ? null : this.user_ids.iterator();
        }

        public void addToUser_ids(int elem) {
            if (this.user_ids == null) {
                this.user_ids = new java.util.ArrayList<java.lang.Integer>();
            }
            this.user_ids.add(elem);
        }

        public java.util.List<java.lang.Integer> getUser_ids() {
            return this.user_ids;
        }

        public batchCancelPublicTalent_args setUser_ids(java.util.List<java.lang.Integer> user_ids) {
            this.user_ids = user_ids;
            return this;
        }

        public void unsetUser_ids() {
            this.user_ids = null;
        }

        /** Returns true if field user_ids is set (has been assigned a value) and false otherwise */
        public boolean isSetUser_ids() {
            return this.user_ids != null;
        }

        public void setUser_idsIsSet(boolean value) {
            if (!value) {
                this.user_ids = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case USER_IDS:
                    if (value == null) {
                        unsetUser_ids();
                    } else {
                        setUser_ids((java.util.List<java.lang.Integer>)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case USER_IDS:
                    return getUser_ids();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case USER_IDS:
                    return isSetUser_ids();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchCancelPublicTalent_args)
                return this.equals((batchCancelPublicTalent_args)that);
            return false;
        }

        public boolean equals(batchCancelPublicTalent_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_user_ids = true && this.isSetUser_ids();
            boolean that_present_user_ids = true && that.isSetUser_ids();
            if (this_present_user_ids || that_present_user_ids) {
                if (!(this_present_user_ids && that_present_user_ids))
                    return false;
                if (!this.user_ids.equals(that.user_ids))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + ((isSetUser_ids()) ? 131071 : 524287);
            if (isSetUser_ids())
                hashCode = hashCode * 8191 + user_ids.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(batchCancelPublicTalent_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUser_ids()).compareTo(other.isSetUser_ids());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUser_ids()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ids, other.user_ids);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchCancelPublicTalent_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("user_ids:");
            if (this.user_ids == null) {
                sb.append("null");
            } else {
                sb.append(this.user_ids);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchCancelPublicTalent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchCancelPublicTalent_argsStandardScheme getScheme() {
                return new batchCancelPublicTalent_argsStandardScheme();
            }
        }

        private static class batchCancelPublicTalent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchCancelPublicTalent_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchCancelPublicTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // USER_IDS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list136 = iprot.readListBegin();
                                    struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list136.size);
                                    int _elem137;
                                    for (int _i138 = 0; _i138 < _list136.size; ++_i138)
                                    {
                                        _elem137 = iprot.readI32();
                                        struct.user_ids.add(_elem137);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setUser_idsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchCancelPublicTalent_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                if (struct.user_ids != null) {
                    oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.user_ids.size()));
                        for (int _iter139 : struct.user_ids)
                        {
                            oprot.writeI32(_iter139);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchCancelPublicTalent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchCancelPublicTalent_argsTupleScheme getScheme() {
                return new batchCancelPublicTalent_argsTupleScheme();
            }
        }

        private static class batchCancelPublicTalent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchCancelPublicTalent_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchCancelPublicTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetUser_ids()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetUser_ids()) {
                    {
                        oprot.writeI32(struct.user_ids.size());
                        for (int _iter140 : struct.user_ids)
                        {
                            oprot.writeI32(_iter140);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchCancelPublicTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    {
                        org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list141.size);
                        int _elem142;
                        for (int _i143 = 0; _i143 < _list141.size; ++_i143)
                        {
                            _elem142 = iprot.readI32();
                            struct.user_ids.add(_elem142);
                        }
                    }
                    struct.setUser_idsIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchCancelPublicTalent_result implements org.apache.thrift.TBase<batchCancelPublicTalent_result, batchCancelPublicTalent_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchCancelPublicTalent_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchCancelPublicTalent_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchCancelPublicTalent_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchCancelPublicTalent_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchCancelPublicTalent_result.class, metaDataMap);
        }

        public batchCancelPublicTalent_result() {
        }

        public batchCancelPublicTalent_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchCancelPublicTalent_result(batchCancelPublicTalent_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public batchCancelPublicTalent_result deepCopy() {
            return new batchCancelPublicTalent_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public batchCancelPublicTalent_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public batchCancelPublicTalent_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchCancelPublicTalent_result)
                return this.equals((batchCancelPublicTalent_result)that);
            return false;
        }

        public boolean equals(batchCancelPublicTalent_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(batchCancelPublicTalent_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchCancelPublicTalent_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchCancelPublicTalent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchCancelPublicTalent_resultStandardScheme getScheme() {
                return new batchCancelPublicTalent_resultStandardScheme();
            }
        }

        private static class batchCancelPublicTalent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchCancelPublicTalent_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchCancelPublicTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchCancelPublicTalent_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchCancelPublicTalent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchCancelPublicTalent_resultTupleScheme getScheme() {
                return new batchCancelPublicTalent_resultTupleScheme();
            }
        }

        private static class batchCancelPublicTalent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchCancelPublicTalent_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchCancelPublicTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchCancelPublicTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getCompanyPulicTalent_args implements org.apache.thrift.TBase<getCompanyPulicTalent_args, getCompanyPulicTalent_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCompanyPulicTalent_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompanyPulicTalent_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField PAGE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("page_number", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("page_size", org.apache.thrift.protocol.TType.I32, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCompanyPulicTalent_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCompanyPulicTalent_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int page_number; // required
        public int page_size; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            PAGE_NUMBER((short)3, "page_number"),
            PAGE_SIZE((short)4, "page_size");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // PAGE_NUMBER
                        return PAGE_NUMBER;
                    case 4: // PAGE_SIZE
                        return PAGE_SIZE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __PAGE_NUMBER_ISSET_ID = 2;
        private static final int __PAGE_SIZE_ISSET_ID = 3;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("page_number", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("page_size", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompanyPulicTalent_args.class, metaDataMap);
        }

        public getCompanyPulicTalent_args() {
        }

        public getCompanyPulicTalent_args(
                int hr_id,
                int company_id,
                int page_number,
                int page_size)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.page_number = page_number;
            setPage_numberIsSet(true);
            this.page_size = page_size;
            setPage_sizeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCompanyPulicTalent_args(getCompanyPulicTalent_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.page_number = other.page_number;
            this.page_size = other.page_size;
        }

        public getCompanyPulicTalent_args deepCopy() {
            return new getCompanyPulicTalent_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setPage_numberIsSet(false);
            this.page_number = 0;
            setPage_sizeIsSet(false);
            this.page_size = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getCompanyPulicTalent_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getCompanyPulicTalent_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getPage_number() {
            return this.page_number;
        }

        public getCompanyPulicTalent_args setPage_number(int page_number) {
            this.page_number = page_number;
            setPage_numberIsSet(true);
            return this;
        }

        public void unsetPage_number() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID);
        }

        /** Returns true if field page_number is set (has been assigned a value) and false otherwise */
        public boolean isSetPage_number() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID);
        }

        public void setPage_numberIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID, value);
        }

        public int getPage_size() {
            return this.page_size;
        }

        public getCompanyPulicTalent_args setPage_size(int page_size) {
            this.page_size = page_size;
            setPage_sizeIsSet(true);
            return this;
        }

        public void unsetPage_size() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
        }

        /** Returns true if field page_size is set (has been assigned a value) and false otherwise */
        public boolean isSetPage_size() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
        }

        public void setPage_sizeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case PAGE_NUMBER:
                    if (value == null) {
                        unsetPage_number();
                    } else {
                        setPage_number((java.lang.Integer)value);
                    }
                    break;

                case PAGE_SIZE:
                    if (value == null) {
                        unsetPage_size();
                    } else {
                        setPage_size((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case PAGE_NUMBER:
                    return getPage_number();

                case PAGE_SIZE:
                    return getPage_size();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case PAGE_NUMBER:
                    return isSetPage_number();
                case PAGE_SIZE:
                    return isSetPage_size();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getCompanyPulicTalent_args)
                return this.equals((getCompanyPulicTalent_args)that);
            return false;
        }

        public boolean equals(getCompanyPulicTalent_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_page_number = true;
            boolean that_present_page_number = true;
            if (this_present_page_number || that_present_page_number) {
                if (!(this_present_page_number && that_present_page_number))
                    return false;
                if (this.page_number != that.page_number)
                    return false;
            }

            boolean this_present_page_size = true;
            boolean that_present_page_size = true;
            if (this_present_page_size || that_present_page_size) {
                if (!(this_present_page_size && that_present_page_size))
                    return false;
                if (this.page_size != that.page_size)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + page_number;

            hashCode = hashCode * 8191 + page_size;

            return hashCode;
        }

        @Override
        public int compareTo(getCompanyPulicTalent_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPage_number()).compareTo(other.isSetPage_number());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage_number()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_number, other.page_number);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPage_size()).compareTo(other.isSetPage_size());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage_size()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_size, other.page_size);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getCompanyPulicTalent_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("page_number:");
            sb.append(this.page_number);
            first = false;
            if (!first) sb.append(", ");
            sb.append("page_size:");
            sb.append(this.page_size);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getCompanyPulicTalent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyPulicTalent_argsStandardScheme getScheme() {
                return new getCompanyPulicTalent_argsStandardScheme();
            }
        }

        private static class getCompanyPulicTalent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCompanyPulicTalent_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getCompanyPulicTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PAGE_NUMBER
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page_number = iprot.readI32();
                                struct.setPage_numberIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // PAGE_SIZE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page_size = iprot.readI32();
                                struct.setPage_sizeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getCompanyPulicTalent_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_NUMBER_FIELD_DESC);
                oprot.writeI32(struct.page_number);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
                oprot.writeI32(struct.page_size);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getCompanyPulicTalent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyPulicTalent_argsTupleScheme getScheme() {
                return new getCompanyPulicTalent_argsTupleScheme();
            }
        }

        private static class getCompanyPulicTalent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCompanyPulicTalent_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getCompanyPulicTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetPage_number()) {
                    optionals.set(2);
                }
                if (struct.isSetPage_size()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetPage_number()) {
                    oprot.writeI32(struct.page_number);
                }
                if (struct.isSetPage_size()) {
                    oprot.writeI32(struct.page_size);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getCompanyPulicTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.page_number = iprot.readI32();
                    struct.setPage_numberIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.page_size = iprot.readI32();
                    struct.setPage_sizeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getCompanyPulicTalent_result implements org.apache.thrift.TBase<getCompanyPulicTalent_result, getCompanyPulicTalent_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCompanyPulicTalent_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompanyPulicTalent_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCompanyPulicTalent_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCompanyPulicTalent_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompanyPulicTalent_result.class, metaDataMap);
        }

        public getCompanyPulicTalent_result() {
        }

        public getCompanyPulicTalent_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCompanyPulicTalent_result(getCompanyPulicTalent_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getCompanyPulicTalent_result deepCopy() {
            return new getCompanyPulicTalent_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getCompanyPulicTalent_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getCompanyPulicTalent_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getCompanyPulicTalent_result)
                return this.equals((getCompanyPulicTalent_result)that);
            return false;
        }

        public boolean equals(getCompanyPulicTalent_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getCompanyPulicTalent_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getCompanyPulicTalent_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getCompanyPulicTalent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyPulicTalent_resultStandardScheme getScheme() {
                return new getCompanyPulicTalent_resultStandardScheme();
            }
        }

        private static class getCompanyPulicTalent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCompanyPulicTalent_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getCompanyPulicTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getCompanyPulicTalent_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getCompanyPulicTalent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyPulicTalent_resultTupleScheme getScheme() {
                return new getCompanyPulicTalent_resultTupleScheme();
            }
        }

        private static class getCompanyPulicTalent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCompanyPulicTalent_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getCompanyPulicTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getCompanyPulicTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchNewAddTalentTag_args implements org.apache.thrift.TBase<batchNewAddTalentTag_args, batchNewAddTalentTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchNewAddTalentTag_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchNewAddTalentTag_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ids", org.apache.thrift.protocol.TType.LIST, (short)2);
        private static final org.apache.thrift.protocol.TField TAG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("tag_ids", org.apache.thrift.protocol.TType.LIST, (short)3);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchNewAddTalentTag_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchNewAddTalentTag_argsTupleSchemeFactory();

        public int hr_id; // required
        public java.util.List<java.lang.Integer> user_ids; // required
        public java.util.List<java.lang.Integer> tag_ids; // required
        public int company_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            USER_IDS((short)2, "user_ids"),
            TAG_IDS((short)3, "tag_ids"),
            COMPANY_ID((short)4, "company_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // USER_IDS
                        return USER_IDS;
                    case 3: // TAG_IDS
                        return TAG_IDS;
                    case 4: // COMPANY_ID
                        return COMPANY_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("user_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            tmpMap.put(_Fields.TAG_IDS, new org.apache.thrift.meta_data.FieldMetaData("tag_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchNewAddTalentTag_args.class, metaDataMap);
        }

        public batchNewAddTalentTag_args() {
        }

        public batchNewAddTalentTag_args(
                int hr_id,
                java.util.List<java.lang.Integer> user_ids,
                java.util.List<java.lang.Integer> tag_ids,
                int company_id)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.user_ids = user_ids;
            this.tag_ids = tag_ids;
            this.company_id = company_id;
            setCompany_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchNewAddTalentTag_args(batchNewAddTalentTag_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            if (other.isSetUser_ids()) {
                java.util.List<java.lang.Integer> __this__user_ids = new java.util.ArrayList<java.lang.Integer>(other.user_ids);
                this.user_ids = __this__user_ids;
            }
            if (other.isSetTag_ids()) {
                java.util.List<java.lang.Integer> __this__tag_ids = new java.util.ArrayList<java.lang.Integer>(other.tag_ids);
                this.tag_ids = __this__tag_ids;
            }
            this.company_id = other.company_id;
        }

        public batchNewAddTalentTag_args deepCopy() {
            return new batchNewAddTalentTag_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            this.user_ids = null;
            this.tag_ids = null;
            setCompany_idIsSet(false);
            this.company_id = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public batchNewAddTalentTag_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getUser_idsSize() {
            return (this.user_ids == null) ? 0 : this.user_ids.size();
        }

        public java.util.Iterator<java.lang.Integer> getUser_idsIterator() {
            return (this.user_ids == null) ? null : this.user_ids.iterator();
        }

        public void addToUser_ids(int elem) {
            if (this.user_ids == null) {
                this.user_ids = new java.util.ArrayList<java.lang.Integer>();
            }
            this.user_ids.add(elem);
        }

        public java.util.List<java.lang.Integer> getUser_ids() {
            return this.user_ids;
        }

        public batchNewAddTalentTag_args setUser_ids(java.util.List<java.lang.Integer> user_ids) {
            this.user_ids = user_ids;
            return this;
        }

        public void unsetUser_ids() {
            this.user_ids = null;
        }

        /** Returns true if field user_ids is set (has been assigned a value) and false otherwise */
        public boolean isSetUser_ids() {
            return this.user_ids != null;
        }

        public void setUser_idsIsSet(boolean value) {
            if (!value) {
                this.user_ids = null;
            }
        }

        public int getTag_idsSize() {
            return (this.tag_ids == null) ? 0 : this.tag_ids.size();
        }

        public java.util.Iterator<java.lang.Integer> getTag_idsIterator() {
            return (this.tag_ids == null) ? null : this.tag_ids.iterator();
        }

        public void addToTag_ids(int elem) {
            if (this.tag_ids == null) {
                this.tag_ids = new java.util.ArrayList<java.lang.Integer>();
            }
            this.tag_ids.add(elem);
        }

        public java.util.List<java.lang.Integer> getTag_ids() {
            return this.tag_ids;
        }

        public batchNewAddTalentTag_args setTag_ids(java.util.List<java.lang.Integer> tag_ids) {
            this.tag_ids = tag_ids;
            return this;
        }

        public void unsetTag_ids() {
            this.tag_ids = null;
        }

        /** Returns true if field tag_ids is set (has been assigned a value) and false otherwise */
        public boolean isSetTag_ids() {
            return this.tag_ids != null;
        }

        public void setTag_idsIsSet(boolean value) {
            if (!value) {
                this.tag_ids = null;
            }
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public batchNewAddTalentTag_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case USER_IDS:
                    if (value == null) {
                        unsetUser_ids();
                    } else {
                        setUser_ids((java.util.List<java.lang.Integer>)value);
                    }
                    break;

                case TAG_IDS:
                    if (value == null) {
                        unsetTag_ids();
                    } else {
                        setTag_ids((java.util.List<java.lang.Integer>)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case USER_IDS:
                    return getUser_ids();

                case TAG_IDS:
                    return getTag_ids();

                case COMPANY_ID:
                    return getCompany_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case USER_IDS:
                    return isSetUser_ids();
                case TAG_IDS:
                    return isSetTag_ids();
                case COMPANY_ID:
                    return isSetCompany_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchNewAddTalentTag_args)
                return this.equals((batchNewAddTalentTag_args)that);
            return false;
        }

        public boolean equals(batchNewAddTalentTag_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_user_ids = true && this.isSetUser_ids();
            boolean that_present_user_ids = true && that.isSetUser_ids();
            if (this_present_user_ids || that_present_user_ids) {
                if (!(this_present_user_ids && that_present_user_ids))
                    return false;
                if (!this.user_ids.equals(that.user_ids))
                    return false;
            }

            boolean this_present_tag_ids = true && this.isSetTag_ids();
            boolean that_present_tag_ids = true && that.isSetTag_ids();
            if (this_present_tag_ids || that_present_tag_ids) {
                if (!(this_present_tag_ids && that_present_tag_ids))
                    return false;
                if (!this.tag_ids.equals(that.tag_ids))
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + ((isSetUser_ids()) ? 131071 : 524287);
            if (isSetUser_ids())
                hashCode = hashCode * 8191 + user_ids.hashCode();

            hashCode = hashCode * 8191 + ((isSetTag_ids()) ? 131071 : 524287);
            if (isSetTag_ids())
                hashCode = hashCode * 8191 + tag_ids.hashCode();

            hashCode = hashCode * 8191 + company_id;

            return hashCode;
        }

        @Override
        public int compareTo(batchNewAddTalentTag_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUser_ids()).compareTo(other.isSetUser_ids());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUser_ids()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ids, other.user_ids);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetTag_ids()).compareTo(other.isSetTag_ids());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTag_ids()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag_ids, other.tag_ids);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchNewAddTalentTag_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("user_ids:");
            if (this.user_ids == null) {
                sb.append("null");
            } else {
                sb.append(this.user_ids);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("tag_ids:");
            if (this.tag_ids == null) {
                sb.append("null");
            } else {
                sb.append(this.tag_ids);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchNewAddTalentTag_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchNewAddTalentTag_argsStandardScheme getScheme() {
                return new batchNewAddTalentTag_argsStandardScheme();
            }
        }

        private static class batchNewAddTalentTag_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchNewAddTalentTag_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchNewAddTalentTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // USER_IDS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                                    struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list144.size);
                                    int _elem145;
                                    for (int _i146 = 0; _i146 < _list144.size; ++_i146)
                                    {
                                        _elem145 = iprot.readI32();
                                        struct.user_ids.add(_elem145);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setUser_idsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // TAG_IDS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list147 = iprot.readListBegin();
                                    struct.tag_ids = new java.util.ArrayList<java.lang.Integer>(_list147.size);
                                    int _elem148;
                                    for (int _i149 = 0; _i149 < _list147.size; ++_i149)
                                    {
                                        _elem148 = iprot.readI32();
                                        struct.tag_ids.add(_elem148);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setTag_idsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchNewAddTalentTag_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                if (struct.user_ids != null) {
                    oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.user_ids.size()));
                        for (int _iter150 : struct.user_ids)
                        {
                            oprot.writeI32(_iter150);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.tag_ids != null) {
                    oprot.writeFieldBegin(TAG_IDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.tag_ids.size()));
                        for (int _iter151 : struct.tag_ids)
                        {
                            oprot.writeI32(_iter151);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchNewAddTalentTag_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchNewAddTalentTag_argsTupleScheme getScheme() {
                return new batchNewAddTalentTag_argsTupleScheme();
            }
        }

        private static class batchNewAddTalentTag_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchNewAddTalentTag_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchNewAddTalentTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetUser_ids()) {
                    optionals.set(1);
                }
                if (struct.isSetTag_ids()) {
                    optionals.set(2);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetUser_ids()) {
                    {
                        oprot.writeI32(struct.user_ids.size());
                        for (int _iter152 : struct.user_ids)
                        {
                            oprot.writeI32(_iter152);
                        }
                    }
                }
                if (struct.isSetTag_ids()) {
                    {
                        oprot.writeI32(struct.tag_ids.size());
                        for (int _iter153 : struct.tag_ids)
                        {
                            oprot.writeI32(_iter153);
                        }
                    }
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchNewAddTalentTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TList _list154 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list154.size);
                        int _elem155;
                        for (int _i156 = 0; _i156 < _list154.size; ++_i156)
                        {
                            _elem155 = iprot.readI32();
                            struct.user_ids.add(_elem155);
                        }
                    }
                    struct.setUser_idsIsSet(true);
                }
                if (incoming.get(2)) {
                    {
                        org.apache.thrift.protocol.TList _list157 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.tag_ids = new java.util.ArrayList<java.lang.Integer>(_list157.size);
                        int _elem158;
                        for (int _i159 = 0; _i159 < _list157.size; ++_i159)
                        {
                            _elem158 = iprot.readI32();
                            struct.tag_ids.add(_elem158);
                        }
                    }
                    struct.setTag_idsIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class batchNewAddTalentTag_result implements org.apache.thrift.TBase<batchNewAddTalentTag_result, batchNewAddTalentTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchNewAddTalentTag_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchNewAddTalentTag_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchNewAddTalentTag_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchNewAddTalentTag_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchNewAddTalentTag_result.class, metaDataMap);
        }

        public batchNewAddTalentTag_result() {
        }

        public batchNewAddTalentTag_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchNewAddTalentTag_result(batchNewAddTalentTag_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public batchNewAddTalentTag_result deepCopy() {
            return new batchNewAddTalentTag_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public batchNewAddTalentTag_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public batchNewAddTalentTag_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof batchNewAddTalentTag_result)
                return this.equals((batchNewAddTalentTag_result)that);
            return false;
        }

        public boolean equals(batchNewAddTalentTag_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(batchNewAddTalentTag_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("batchNewAddTalentTag_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchNewAddTalentTag_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchNewAddTalentTag_resultStandardScheme getScheme() {
                return new batchNewAddTalentTag_resultStandardScheme();
            }
        }

        private static class batchNewAddTalentTag_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchNewAddTalentTag_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, batchNewAddTalentTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, batchNewAddTalentTag_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchNewAddTalentTag_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public batchNewAddTalentTag_resultTupleScheme getScheme() {
                return new batchNewAddTalentTag_resultTupleScheme();
            }
        }

        private static class batchNewAddTalentTag_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchNewAddTalentTag_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchNewAddTalentTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchNewAddTalentTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getTalentStat_args implements org.apache.thrift.TBase<getTalentStat_args, getTalentStat_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTalentStat_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTalentStat_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTalentStat_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTalentStat_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int type; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            TYPE((short)3, "type");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // TYPE
                        return TYPE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __TYPE_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTalentStat_args.class, metaDataMap);
        }

        public getTalentStat_args() {
        }

        public getTalentStat_args(
                int hr_id,
                int company_id,
                int type)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.type = type;
            setTypeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getTalentStat_args(getTalentStat_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.type = other.type;
        }

        public getTalentStat_args deepCopy() {
            return new getTalentStat_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setTypeIsSet(false);
            this.type = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getTalentStat_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getTalentStat_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getType() {
            return this.type;
        }

        public getTalentStat_args setType(int type) {
            this.type = type;
            setTypeIsSet(true);
            return this;
        }

        public void unsetType() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        /** Returns true if field type is set (has been assigned a value) and false otherwise */
        public boolean isSetType() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        public void setTypeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case TYPE:
                    if (value == null) {
                        unsetType();
                    } else {
                        setType((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case TYPE:
                    return getType();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case TYPE:
                    return isSetType();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getTalentStat_args)
                return this.equals((getTalentStat_args)that);
            return false;
        }

        public boolean equals(getTalentStat_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_type = true;
            boolean that_present_type = true;
            if (this_present_type || that_present_type) {
                if (!(this_present_type && that_present_type))
                    return false;
                if (this.type != that.type)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + type;

            return hashCode;
        }

        @Override
        public int compareTo(getTalentStat_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetType()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getTalentStat_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("type:");
            sb.append(this.type);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getTalentStat_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentStat_argsStandardScheme getScheme() {
                return new getTalentStat_argsStandardScheme();
            }
        }

        private static class getTalentStat_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTalentStat_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getTalentStat_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // TYPE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.type = iprot.readI32();
                                struct.setTypeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getTalentStat_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(TYPE_FIELD_DESC);
                oprot.writeI32(struct.type);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getTalentStat_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentStat_argsTupleScheme getScheme() {
                return new getTalentStat_argsTupleScheme();
            }
        }

        private static class getTalentStat_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTalentStat_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getTalentStat_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetType()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetType()) {
                    oprot.writeI32(struct.type);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getTalentStat_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.type = iprot.readI32();
                    struct.setTypeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getTalentStat_result implements org.apache.thrift.TBase<getTalentStat_result, getTalentStat_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTalentStat_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTalentStat_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTalentStat_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTalentStat_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTalentStat_result.class, metaDataMap);
        }

        public getTalentStat_result() {
        }

        public getTalentStat_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getTalentStat_result(getTalentStat_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getTalentStat_result deepCopy() {
            return new getTalentStat_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getTalentStat_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getTalentStat_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getTalentStat_result)
                return this.equals((getTalentStat_result)that);
            return false;
        }

        public boolean equals(getTalentStat_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getTalentStat_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getTalentStat_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getTalentStat_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentStat_resultStandardScheme getScheme() {
                return new getTalentStat_resultStandardScheme();
            }
        }

        private static class getTalentStat_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTalentStat_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getTalentStat_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getTalentStat_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getTalentStat_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentStat_resultTupleScheme getScheme() {
                return new getTalentStat_resultTupleScheme();
            }
        }

        private static class getTalentStat_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTalentStat_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getTalentStat_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getTalentStat_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getCompanyUserPublic_args implements org.apache.thrift.TBase<getCompanyUserPublic_args, getCompanyUserPublic_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCompanyUserPublic_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompanyUserPublic_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCompanyUserPublic_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCompanyUserPublic_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int user_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            USER_ID((short)3, "user_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // USER_ID
                        return USER_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __USER_ID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompanyUserPublic_args.class, metaDataMap);
        }

        public getCompanyUserPublic_args() {
        }

        public getCompanyUserPublic_args(
                int hr_id,
                int company_id,
                int user_id)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.user_id = user_id;
            setUser_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCompanyUserPublic_args(getCompanyUserPublic_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.user_id = other.user_id;
        }

        public getCompanyUserPublic_args deepCopy() {
            return new getCompanyUserPublic_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setUser_idIsSet(false);
            this.user_id = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getCompanyUserPublic_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getCompanyUserPublic_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getUser_id() {
            return this.user_id;
        }

        public getCompanyUserPublic_args setUser_id(int user_id) {
            this.user_id = user_id;
            setUser_idIsSet(true);
            return this;
        }

        public void unsetUser_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USER_ID_ISSET_ID);
        }

        /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
        public boolean isSetUser_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USER_ID_ISSET_ID);
        }

        public void setUser_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USER_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case USER_ID:
                    if (value == null) {
                        unsetUser_id();
                    } else {
                        setUser_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case USER_ID:
                    return getUser_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case USER_ID:
                    return isSetUser_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getCompanyUserPublic_args)
                return this.equals((getCompanyUserPublic_args)that);
            return false;
        }

        public boolean equals(getCompanyUserPublic_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_user_id = true;
            boolean that_present_user_id = true;
            if (this_present_user_id || that_present_user_id) {
                if (!(this_present_user_id && that_present_user_id))
                    return false;
                if (this.user_id != that.user_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + user_id;

            return hashCode;
        }

        @Override
        public int compareTo(getCompanyUserPublic_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUser_id()).compareTo(other.isSetUser_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUser_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, other.user_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getCompanyUserPublic_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("user_id:");
            sb.append(this.user_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getCompanyUserPublic_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyUserPublic_argsStandardScheme getScheme() {
                return new getCompanyUserPublic_argsStandardScheme();
            }
        }

        private static class getCompanyUserPublic_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCompanyUserPublic_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getCompanyUserPublic_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.user_id = iprot.readI32();
                                struct.setUser_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getCompanyUserPublic_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.user_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getCompanyUserPublic_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyUserPublic_argsTupleScheme getScheme() {
                return new getCompanyUserPublic_argsTupleScheme();
            }
        }

        private static class getCompanyUserPublic_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCompanyUserPublic_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getCompanyUserPublic_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetUser_id()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetUser_id()) {
                    oprot.writeI32(struct.user_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getCompanyUserPublic_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.user_id = iprot.readI32();
                    struct.setUser_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getCompanyUserPublic_result implements org.apache.thrift.TBase<getCompanyUserPublic_result, getCompanyUserPublic_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCompanyUserPublic_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompanyUserPublic_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCompanyUserPublic_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCompanyUserPublic_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompanyUserPublic_result.class, metaDataMap);
        }

        public getCompanyUserPublic_result() {
        }

        public getCompanyUserPublic_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCompanyUserPublic_result(getCompanyUserPublic_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getCompanyUserPublic_result deepCopy() {
            return new getCompanyUserPublic_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getCompanyUserPublic_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getCompanyUserPublic_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getCompanyUserPublic_result)
                return this.equals((getCompanyUserPublic_result)that);
            return false;
        }

        public boolean equals(getCompanyUserPublic_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getCompanyUserPublic_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getCompanyUserPublic_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getCompanyUserPublic_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyUserPublic_resultStandardScheme getScheme() {
                return new getCompanyUserPublic_resultStandardScheme();
            }
        }

        private static class getCompanyUserPublic_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCompanyUserPublic_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getCompanyUserPublic_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getCompanyUserPublic_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getCompanyUserPublic_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyUserPublic_resultTupleScheme getScheme() {
                return new getCompanyUserPublic_resultTupleScheme();
            }
        }

        private static class getCompanyUserPublic_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCompanyUserPublic_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getCompanyUserPublic_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getCompanyUserPublic_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getCompanyTalent_args implements org.apache.thrift.TBase<getCompanyTalent_args, getCompanyTalent_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCompanyTalent_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompanyTalent_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCompanyTalent_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCompanyTalent_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int user_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            USER_ID((short)3, "user_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // USER_ID
                        return USER_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __USER_ID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompanyTalent_args.class, metaDataMap);
        }

        public getCompanyTalent_args() {
        }

        public getCompanyTalent_args(
                int hr_id,
                int company_id,
                int user_id)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.user_id = user_id;
            setUser_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCompanyTalent_args(getCompanyTalent_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.user_id = other.user_id;
        }

        public getCompanyTalent_args deepCopy() {
            return new getCompanyTalent_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setUser_idIsSet(false);
            this.user_id = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getCompanyTalent_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getCompanyTalent_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getUser_id() {
            return this.user_id;
        }

        public getCompanyTalent_args setUser_id(int user_id) {
            this.user_id = user_id;
            setUser_idIsSet(true);
            return this;
        }

        public void unsetUser_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USER_ID_ISSET_ID);
        }

        /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
        public boolean isSetUser_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USER_ID_ISSET_ID);
        }

        public void setUser_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USER_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case USER_ID:
                    if (value == null) {
                        unsetUser_id();
                    } else {
                        setUser_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case USER_ID:
                    return getUser_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case USER_ID:
                    return isSetUser_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getCompanyTalent_args)
                return this.equals((getCompanyTalent_args)that);
            return false;
        }

        public boolean equals(getCompanyTalent_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_user_id = true;
            boolean that_present_user_id = true;
            if (this_present_user_id || that_present_user_id) {
                if (!(this_present_user_id && that_present_user_id))
                    return false;
                if (this.user_id != that.user_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + user_id;

            return hashCode;
        }

        @Override
        public int compareTo(getCompanyTalent_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUser_id()).compareTo(other.isSetUser_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUser_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, other.user_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getCompanyTalent_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("user_id:");
            sb.append(this.user_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getCompanyTalent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyTalent_argsStandardScheme getScheme() {
                return new getCompanyTalent_argsStandardScheme();
            }
        }

        private static class getCompanyTalent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCompanyTalent_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getCompanyTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.user_id = iprot.readI32();
                                struct.setUser_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getCompanyTalent_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.user_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getCompanyTalent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyTalent_argsTupleScheme getScheme() {
                return new getCompanyTalent_argsTupleScheme();
            }
        }

        private static class getCompanyTalent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCompanyTalent_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getCompanyTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetUser_id()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetUser_id()) {
                    oprot.writeI32(struct.user_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getCompanyTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.user_id = iprot.readI32();
                    struct.setUser_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getCompanyTalent_result implements org.apache.thrift.TBase<getCompanyTalent_result, getCompanyTalent_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCompanyTalent_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompanyTalent_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCompanyTalent_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCompanyTalent_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompanyTalent_result.class, metaDataMap);
        }

        public getCompanyTalent_result() {
        }

        public getCompanyTalent_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCompanyTalent_result(getCompanyTalent_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getCompanyTalent_result deepCopy() {
            return new getCompanyTalent_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getCompanyTalent_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getCompanyTalent_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getCompanyTalent_result)
                return this.equals((getCompanyTalent_result)that);
            return false;
        }

        public boolean equals(getCompanyTalent_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getCompanyTalent_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getCompanyTalent_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getCompanyTalent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyTalent_resultStandardScheme getScheme() {
                return new getCompanyTalent_resultStandardScheme();
            }
        }

        private static class getCompanyTalent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCompanyTalent_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getCompanyTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getCompanyTalent_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getCompanyTalent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyTalent_resultTupleScheme getScheme() {
                return new getCompanyTalent_resultTupleScheme();
            }
        }

        private static class getCompanyTalent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCompanyTalent_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getCompanyTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getCompanyTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getHrUserTag_args implements org.apache.thrift.TBase<getHrUserTag_args, getHrUserTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHrUserTag_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHrUserTag_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getHrUserTag_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getHrUserTag_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int user_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            USER_ID((short)3, "user_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // USER_ID
                        return USER_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __USER_ID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHrUserTag_args.class, metaDataMap);
        }

        public getHrUserTag_args() {
        }

        public getHrUserTag_args(
                int hr_id,
                int company_id,
                int user_id)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.user_id = user_id;
            setUser_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getHrUserTag_args(getHrUserTag_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.user_id = other.user_id;
        }

        public getHrUserTag_args deepCopy() {
            return new getHrUserTag_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setUser_idIsSet(false);
            this.user_id = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getHrUserTag_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getHrUserTag_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getUser_id() {
            return this.user_id;
        }

        public getHrUserTag_args setUser_id(int user_id) {
            this.user_id = user_id;
            setUser_idIsSet(true);
            return this;
        }

        public void unsetUser_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USER_ID_ISSET_ID);
        }

        /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
        public boolean isSetUser_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USER_ID_ISSET_ID);
        }

        public void setUser_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USER_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case USER_ID:
                    if (value == null) {
                        unsetUser_id();
                    } else {
                        setUser_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case USER_ID:
                    return getUser_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case USER_ID:
                    return isSetUser_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getHrUserTag_args)
                return this.equals((getHrUserTag_args)that);
            return false;
        }

        public boolean equals(getHrUserTag_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_user_id = true;
            boolean that_present_user_id = true;
            if (this_present_user_id || that_present_user_id) {
                if (!(this_present_user_id && that_present_user_id))
                    return false;
                if (this.user_id != that.user_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + user_id;

            return hashCode;
        }

        @Override
        public int compareTo(getHrUserTag_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUser_id()).compareTo(other.isSetUser_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUser_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, other.user_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getHrUserTag_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("user_id:");
            sb.append(this.user_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getHrUserTag_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getHrUserTag_argsStandardScheme getScheme() {
                return new getHrUserTag_argsStandardScheme();
            }
        }

        private static class getHrUserTag_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getHrUserTag_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getHrUserTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.user_id = iprot.readI32();
                                struct.setUser_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getHrUserTag_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.user_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getHrUserTag_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getHrUserTag_argsTupleScheme getScheme() {
                return new getHrUserTag_argsTupleScheme();
            }
        }

        private static class getHrUserTag_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getHrUserTag_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getHrUserTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetUser_id()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetUser_id()) {
                    oprot.writeI32(struct.user_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getHrUserTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.user_id = iprot.readI32();
                    struct.setUser_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getHrUserTag_result implements org.apache.thrift.TBase<getHrUserTag_result, getHrUserTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHrUserTag_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHrUserTag_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getHrUserTag_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getHrUserTag_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHrUserTag_result.class, metaDataMap);
        }

        public getHrUserTag_result() {
        }

        public getHrUserTag_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getHrUserTag_result(getHrUserTag_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getHrUserTag_result deepCopy() {
            return new getHrUserTag_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getHrUserTag_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getHrUserTag_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getHrUserTag_result)
                return this.equals((getHrUserTag_result)that);
            return false;
        }

        public boolean equals(getHrUserTag_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getHrUserTag_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getHrUserTag_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getHrUserTag_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getHrUserTag_resultStandardScheme getScheme() {
                return new getHrUserTag_resultStandardScheme();
            }
        }

        private static class getHrUserTag_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getHrUserTag_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getHrUserTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getHrUserTag_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getHrUserTag_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getHrUserTag_resultTupleScheme getScheme() {
                return new getHrUserTag_resultTupleScheme();
            }
        }

        private static class getHrUserTag_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getHrUserTag_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getHrUserTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getHrUserTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getUserOrigin_args implements org.apache.thrift.TBase<getUserOrigin_args, getUserOrigin_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserOrigin_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserOrigin_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserOrigin_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserOrigin_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int user_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            USER_ID((short)3, "user_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // USER_ID
                        return USER_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __USER_ID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserOrigin_args.class, metaDataMap);
        }

        public getUserOrigin_args() {
        }

        public getUserOrigin_args(
                int hr_id,
                int company_id,
                int user_id)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.user_id = user_id;
            setUser_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getUserOrigin_args(getUserOrigin_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.user_id = other.user_id;
        }

        public getUserOrigin_args deepCopy() {
            return new getUserOrigin_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setUser_idIsSet(false);
            this.user_id = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getUserOrigin_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getUserOrigin_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getUser_id() {
            return this.user_id;
        }

        public getUserOrigin_args setUser_id(int user_id) {
            this.user_id = user_id;
            setUser_idIsSet(true);
            return this;
        }

        public void unsetUser_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USER_ID_ISSET_ID);
        }

        /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
        public boolean isSetUser_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USER_ID_ISSET_ID);
        }

        public void setUser_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USER_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case USER_ID:
                    if (value == null) {
                        unsetUser_id();
                    } else {
                        setUser_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case USER_ID:
                    return getUser_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case USER_ID:
                    return isSetUser_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getUserOrigin_args)
                return this.equals((getUserOrigin_args)that);
            return false;
        }

        public boolean equals(getUserOrigin_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_user_id = true;
            boolean that_present_user_id = true;
            if (this_present_user_id || that_present_user_id) {
                if (!(this_present_user_id && that_present_user_id))
                    return false;
                if (this.user_id != that.user_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + user_id;

            return hashCode;
        }

        @Override
        public int compareTo(getUserOrigin_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUser_id()).compareTo(other.isSetUser_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUser_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, other.user_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserOrigin_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("user_id:");
            sb.append(this.user_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getUserOrigin_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getUserOrigin_argsStandardScheme getScheme() {
                return new getUserOrigin_argsStandardScheme();
            }
        }

        private static class getUserOrigin_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUserOrigin_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getUserOrigin_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // USER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.user_id = iprot.readI32();
                                struct.setUser_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getUserOrigin_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI32(struct.user_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getUserOrigin_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getUserOrigin_argsTupleScheme getScheme() {
                return new getUserOrigin_argsTupleScheme();
            }
        }

        private static class getUserOrigin_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUserOrigin_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getUserOrigin_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetUser_id()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetUser_id()) {
                    oprot.writeI32(struct.user_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getUserOrigin_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.user_id = iprot.readI32();
                    struct.setUser_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getUserOrigin_result implements org.apache.thrift.TBase<getUserOrigin_result, getUserOrigin_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserOrigin_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserOrigin_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserOrigin_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserOrigin_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserOrigin_result.class, metaDataMap);
        }

        public getUserOrigin_result() {
        }

        public getUserOrigin_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getUserOrigin_result(getUserOrigin_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getUserOrigin_result deepCopy() {
            return new getUserOrigin_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getUserOrigin_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getUserOrigin_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getUserOrigin_result)
                return this.equals((getUserOrigin_result)that);
            return false;
        }

        public boolean equals(getUserOrigin_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getUserOrigin_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserOrigin_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getUserOrigin_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getUserOrigin_resultStandardScheme getScheme() {
                return new getUserOrigin_resultStandardScheme();
            }
        }

        private static class getUserOrigin_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUserOrigin_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getUserOrigin_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getUserOrigin_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getUserOrigin_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getUserOrigin_resultTupleScheme getScheme() {
                return new getUserOrigin_resultTupleScheme();
            }
        }

        private static class getUserOrigin_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUserOrigin_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getUserOrigin_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getUserOrigin_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getTalentAndPublicHr_args implements org.apache.thrift.TBase<getTalentAndPublicHr_args, getTalentAndPublicHr_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTalentAndPublicHr_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTalentAndPublicHr_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ids", org.apache.thrift.protocol.TType.LIST, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTalentAndPublicHr_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTalentAndPublicHr_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public java.util.List<java.lang.Integer> user_ids; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            USER_IDS((short)3, "user_ids");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // USER_IDS
                        return USER_IDS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("user_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTalentAndPublicHr_args.class, metaDataMap);
        }

        public getTalentAndPublicHr_args() {
        }

        public getTalentAndPublicHr_args(
                int hr_id,
                int company_id,
                java.util.List<java.lang.Integer> user_ids)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.user_ids = user_ids;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getTalentAndPublicHr_args(getTalentAndPublicHr_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            if (other.isSetUser_ids()) {
                java.util.List<java.lang.Integer> __this__user_ids = new java.util.ArrayList<java.lang.Integer>(other.user_ids);
                this.user_ids = __this__user_ids;
            }
        }

        public getTalentAndPublicHr_args deepCopy() {
            return new getTalentAndPublicHr_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            this.user_ids = null;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getTalentAndPublicHr_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getTalentAndPublicHr_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getUser_idsSize() {
            return (this.user_ids == null) ? 0 : this.user_ids.size();
        }

        public java.util.Iterator<java.lang.Integer> getUser_idsIterator() {
            return (this.user_ids == null) ? null : this.user_ids.iterator();
        }

        public void addToUser_ids(int elem) {
            if (this.user_ids == null) {
                this.user_ids = new java.util.ArrayList<java.lang.Integer>();
            }
            this.user_ids.add(elem);
        }

        public java.util.List<java.lang.Integer> getUser_ids() {
            return this.user_ids;
        }

        public getTalentAndPublicHr_args setUser_ids(java.util.List<java.lang.Integer> user_ids) {
            this.user_ids = user_ids;
            return this;
        }

        public void unsetUser_ids() {
            this.user_ids = null;
        }

        /** Returns true if field user_ids is set (has been assigned a value) and false otherwise */
        public boolean isSetUser_ids() {
            return this.user_ids != null;
        }

        public void setUser_idsIsSet(boolean value) {
            if (!value) {
                this.user_ids = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case USER_IDS:
                    if (value == null) {
                        unsetUser_ids();
                    } else {
                        setUser_ids((java.util.List<java.lang.Integer>)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case USER_IDS:
                    return getUser_ids();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case USER_IDS:
                    return isSetUser_ids();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getTalentAndPublicHr_args)
                return this.equals((getTalentAndPublicHr_args)that);
            return false;
        }

        public boolean equals(getTalentAndPublicHr_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_user_ids = true && this.isSetUser_ids();
            boolean that_present_user_ids = true && that.isSetUser_ids();
            if (this_present_user_ids || that_present_user_ids) {
                if (!(this_present_user_ids && that_present_user_ids))
                    return false;
                if (!this.user_ids.equals(that.user_ids))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + ((isSetUser_ids()) ? 131071 : 524287);
            if (isSetUser_ids())
                hashCode = hashCode * 8191 + user_ids.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getTalentAndPublicHr_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUser_ids()).compareTo(other.isSetUser_ids());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUser_ids()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ids, other.user_ids);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getTalentAndPublicHr_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("user_ids:");
            if (this.user_ids == null) {
                sb.append("null");
            } else {
                sb.append(this.user_ids);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getTalentAndPublicHr_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentAndPublicHr_argsStandardScheme getScheme() {
                return new getTalentAndPublicHr_argsStandardScheme();
            }
        }

        private static class getTalentAndPublicHr_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTalentAndPublicHr_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getTalentAndPublicHr_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // USER_IDS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list160 = iprot.readListBegin();
                                    struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list160.size);
                                    int _elem161;
                                    for (int _i162 = 0; _i162 < _list160.size; ++_i162)
                                    {
                                        _elem161 = iprot.readI32();
                                        struct.user_ids.add(_elem161);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setUser_idsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getTalentAndPublicHr_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                if (struct.user_ids != null) {
                    oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.user_ids.size()));
                        for (int _iter163 : struct.user_ids)
                        {
                            oprot.writeI32(_iter163);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getTalentAndPublicHr_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentAndPublicHr_argsTupleScheme getScheme() {
                return new getTalentAndPublicHr_argsTupleScheme();
            }
        }

        private static class getTalentAndPublicHr_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTalentAndPublicHr_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getTalentAndPublicHr_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetUser_ids()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetUser_ids()) {
                    {
                        oprot.writeI32(struct.user_ids.size());
                        for (int _iter164 : struct.user_ids)
                        {
                            oprot.writeI32(_iter164);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getTalentAndPublicHr_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    {
                        org.apache.thrift.protocol.TList _list165 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.user_ids = new java.util.ArrayList<java.lang.Integer>(_list165.size);
                        int _elem166;
                        for (int _i167 = 0; _i167 < _list165.size; ++_i167)
                        {
                            _elem166 = iprot.readI32();
                            struct.user_ids.add(_elem166);
                        }
                    }
                    struct.setUser_idsIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getTalentAndPublicHr_result implements org.apache.thrift.TBase<getTalentAndPublicHr_result, getTalentAndPublicHr_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTalentAndPublicHr_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTalentAndPublicHr_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTalentAndPublicHr_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTalentAndPublicHr_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTalentAndPublicHr_result.class, metaDataMap);
        }

        public getTalentAndPublicHr_result() {
        }

        public getTalentAndPublicHr_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getTalentAndPublicHr_result(getTalentAndPublicHr_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getTalentAndPublicHr_result deepCopy() {
            return new getTalentAndPublicHr_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getTalentAndPublicHr_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getTalentAndPublicHr_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getTalentAndPublicHr_result)
                return this.equals((getTalentAndPublicHr_result)that);
            return false;
        }

        public boolean equals(getTalentAndPublicHr_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getTalentAndPublicHr_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getTalentAndPublicHr_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getTalentAndPublicHr_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentAndPublicHr_resultStandardScheme getScheme() {
                return new getTalentAndPublicHr_resultStandardScheme();
            }
        }

        private static class getTalentAndPublicHr_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTalentAndPublicHr_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getTalentAndPublicHr_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getTalentAndPublicHr_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getTalentAndPublicHr_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentAndPublicHr_resultTupleScheme getScheme() {
                return new getTalentAndPublicHr_resultTupleScheme();
            }
        }

        private static class getTalentAndPublicHr_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTalentAndPublicHr_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getTalentAndPublicHr_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getTalentAndPublicHr_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPositionOrCompanyPast_args implements org.apache.thrift.TBase<getPositionOrCompanyPast_args, getPositionOrCompanyPast_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPositionOrCompanyPast_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPositionOrCompanyPast_args");

        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPositionOrCompanyPast_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPositionOrCompanyPast_argsTupleSchemeFactory();

        public int company_id; // required
        public int type; // required
        public int flag; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_ID((short)1, "company_id"),
            TYPE((short)2, "type"),
            FLAG((short)3, "flag");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // COMPANY_ID
                        return COMPANY_ID;
                    case 2: // TYPE
                        return TYPE;
                    case 3: // FLAG
                        return FLAG;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __COMPANY_ID_ISSET_ID = 0;
        private static final int __TYPE_ISSET_ID = 1;
        private static final int __FLAG_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPositionOrCompanyPast_args.class, metaDataMap);
        }

        public getPositionOrCompanyPast_args() {
        }

        public getPositionOrCompanyPast_args(
                int company_id,
                int type,
                int flag)
        {
            this();
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.type = type;
            setTypeIsSet(true);
            this.flag = flag;
            setFlagIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPositionOrCompanyPast_args(getPositionOrCompanyPast_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.company_id = other.company_id;
            this.type = other.type;
            this.flag = other.flag;
        }

        public getPositionOrCompanyPast_args deepCopy() {
            return new getPositionOrCompanyPast_args(this);
        }

        @Override
        public void clear() {
            setCompany_idIsSet(false);
            this.company_id = 0;
            setTypeIsSet(false);
            this.type = 0;
            setFlagIsSet(false);
            this.flag = 0;
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getPositionOrCompanyPast_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getType() {
            return this.type;
        }

        public getPositionOrCompanyPast_args setType(int type) {
            this.type = type;
            setTypeIsSet(true);
            return this;
        }

        public void unsetType() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        /** Returns true if field type is set (has been assigned a value) and false otherwise */
        public boolean isSetType() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        public void setTypeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
        }

        public int getFlag() {
            return this.flag;
        }

        public getPositionOrCompanyPast_args setFlag(int flag) {
            this.flag = flag;
            setFlagIsSet(true);
            return this;
        }

        public void unsetFlag() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
        }

        /** Returns true if field flag is set (has been assigned a value) and false otherwise */
        public boolean isSetFlag() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
        }

        public void setFlagIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case TYPE:
                    if (value == null) {
                        unsetType();
                    } else {
                        setType((java.lang.Integer)value);
                    }
                    break;

                case FLAG:
                    if (value == null) {
                        unsetFlag();
                    } else {
                        setFlag((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_ID:
                    return getCompany_id();

                case TYPE:
                    return getType();

                case FLAG:
                    return getFlag();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_ID:
                    return isSetCompany_id();
                case TYPE:
                    return isSetType();
                case FLAG:
                    return isSetFlag();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPositionOrCompanyPast_args)
                return this.equals((getPositionOrCompanyPast_args)that);
            return false;
        }

        public boolean equals(getPositionOrCompanyPast_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_type = true;
            boolean that_present_type = true;
            if (this_present_type || that_present_type) {
                if (!(this_present_type && that_present_type))
                    return false;
                if (this.type != that.type)
                    return false;
            }

            boolean this_present_flag = true;
            boolean that_present_flag = true;
            if (this_present_flag || that_present_flag) {
                if (!(this_present_flag && that_present_flag))
                    return false;
                if (this.flag != that.flag)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + type;

            hashCode = hashCode * 8191 + flag;

            return hashCode;
        }

        @Override
        public int compareTo(getPositionOrCompanyPast_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetType()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFlag()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPositionOrCompanyPast_args(");
            boolean first = true;

            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("type:");
            sb.append(this.type);
            first = false;
            if (!first) sb.append(", ");
            sb.append("flag:");
            sb.append(this.flag);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPositionOrCompanyPast_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionOrCompanyPast_argsStandardScheme getScheme() {
                return new getPositionOrCompanyPast_argsStandardScheme();
            }
        }

        private static class getPositionOrCompanyPast_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPositionOrCompanyPast_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPositionOrCompanyPast_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // TYPE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.type = iprot.readI32();
                                struct.setTypeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // FLAG
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.flag = iprot.readI32();
                                struct.setFlagIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPositionOrCompanyPast_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(TYPE_FIELD_DESC);
                oprot.writeI32(struct.type);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(FLAG_FIELD_DESC);
                oprot.writeI32(struct.flag);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPositionOrCompanyPast_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionOrCompanyPast_argsTupleScheme getScheme() {
                return new getPositionOrCompanyPast_argsTupleScheme();
            }
        }

        private static class getPositionOrCompanyPast_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPositionOrCompanyPast_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPositionOrCompanyPast_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompany_id()) {
                    optionals.set(0);
                }
                if (struct.isSetType()) {
                    optionals.set(1);
                }
                if (struct.isSetFlag()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetType()) {
                    oprot.writeI32(struct.type);
                }
                if (struct.isSetFlag()) {
                    oprot.writeI32(struct.flag);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPositionOrCompanyPast_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.type = iprot.readI32();
                    struct.setTypeIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.flag = iprot.readI32();
                    struct.setFlagIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPositionOrCompanyPast_result implements org.apache.thrift.TBase<getPositionOrCompanyPast_result, getPositionOrCompanyPast_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPositionOrCompanyPast_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPositionOrCompanyPast_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPositionOrCompanyPast_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPositionOrCompanyPast_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPositionOrCompanyPast_result.class, metaDataMap);
        }

        public getPositionOrCompanyPast_result() {
        }

        public getPositionOrCompanyPast_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPositionOrCompanyPast_result(getPositionOrCompanyPast_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getPositionOrCompanyPast_result deepCopy() {
            return new getPositionOrCompanyPast_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getPositionOrCompanyPast_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getPositionOrCompanyPast_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPositionOrCompanyPast_result)
                return this.equals((getPositionOrCompanyPast_result)that);
            return false;
        }

        public boolean equals(getPositionOrCompanyPast_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getPositionOrCompanyPast_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getPositionOrCompanyPast_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPositionOrCompanyPast_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionOrCompanyPast_resultStandardScheme getScheme() {
                return new getPositionOrCompanyPast_resultStandardScheme();
            }
        }

        private static class getPositionOrCompanyPast_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPositionOrCompanyPast_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPositionOrCompanyPast_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPositionOrCompanyPast_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPositionOrCompanyPast_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getPositionOrCompanyPast_resultTupleScheme getScheme() {
                return new getPositionOrCompanyPast_resultTupleScheme();
            }
        }

        private static class getPositionOrCompanyPast_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPositionOrCompanyPast_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPositionOrCompanyPast_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPositionOrCompanyPast_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addPositionOrCompanyPast_args implements org.apache.thrift.TBase<addPositionOrCompanyPast_args, addPositionOrCompanyPast_args._Fields>, java.io.Serializable, Cloneable, Comparable<addPositionOrCompanyPast_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPositionOrCompanyPast_args");

        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addPositionOrCompanyPast_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addPositionOrCompanyPast_argsTupleSchemeFactory();

        public int company_id; // required
        public int type; // required
        public int flag; // required
        public java.lang.String name; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_ID((short)1, "company_id"),
            TYPE((short)2, "type"),
            FLAG((short)3, "flag"),
            NAME((short)4, "name");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // COMPANY_ID
                        return COMPANY_ID;
                    case 2: // TYPE
                        return TYPE;
                    case 3: // FLAG
                        return FLAG;
                    case 4: // NAME
                        return NAME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __COMPANY_ID_ISSET_ID = 0;
        private static final int __TYPE_ISSET_ID = 1;
        private static final int __FLAG_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPositionOrCompanyPast_args.class, metaDataMap);
        }

        public addPositionOrCompanyPast_args() {
        }

        public addPositionOrCompanyPast_args(
                int company_id,
                int type,
                int flag,
                java.lang.String name)
        {
            this();
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.type = type;
            setTypeIsSet(true);
            this.flag = flag;
            setFlagIsSet(true);
            this.name = name;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addPositionOrCompanyPast_args(addPositionOrCompanyPast_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.company_id = other.company_id;
            this.type = other.type;
            this.flag = other.flag;
            if (other.isSetName()) {
                this.name = other.name;
            }
        }

        public addPositionOrCompanyPast_args deepCopy() {
            return new addPositionOrCompanyPast_args(this);
        }

        @Override
        public void clear() {
            setCompany_idIsSet(false);
            this.company_id = 0;
            setTypeIsSet(false);
            this.type = 0;
            setFlagIsSet(false);
            this.flag = 0;
            this.name = null;
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public addPositionOrCompanyPast_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getType() {
            return this.type;
        }

        public addPositionOrCompanyPast_args setType(int type) {
            this.type = type;
            setTypeIsSet(true);
            return this;
        }

        public void unsetType() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        /** Returns true if field type is set (has been assigned a value) and false otherwise */
        public boolean isSetType() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        public void setTypeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
        }

        public int getFlag() {
            return this.flag;
        }

        public addPositionOrCompanyPast_args setFlag(int flag) {
            this.flag = flag;
            setFlagIsSet(true);
            return this;
        }

        public void unsetFlag() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
        }

        /** Returns true if field flag is set (has been assigned a value) and false otherwise */
        public boolean isSetFlag() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
        }

        public void setFlagIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
        }

        public java.lang.String getName() {
            return this.name;
        }

        public addPositionOrCompanyPast_args setName(java.lang.String name) {
            this.name = name;
            return this;
        }

        public void unsetName() {
            this.name = null;
        }

        /** Returns true if field name is set (has been assigned a value) and false otherwise */
        public boolean isSetName() {
            return this.name != null;
        }

        public void setNameIsSet(boolean value) {
            if (!value) {
                this.name = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case TYPE:
                    if (value == null) {
                        unsetType();
                    } else {
                        setType((java.lang.Integer)value);
                    }
                    break;

                case FLAG:
                    if (value == null) {
                        unsetFlag();
                    } else {
                        setFlag((java.lang.Integer)value);
                    }
                    break;

                case NAME:
                    if (value == null) {
                        unsetName();
                    } else {
                        setName((java.lang.String)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_ID:
                    return getCompany_id();

                case TYPE:
                    return getType();

                case FLAG:
                    return getFlag();

                case NAME:
                    return getName();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_ID:
                    return isSetCompany_id();
                case TYPE:
                    return isSetType();
                case FLAG:
                    return isSetFlag();
                case NAME:
                    return isSetName();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addPositionOrCompanyPast_args)
                return this.equals((addPositionOrCompanyPast_args)that);
            return false;
        }

        public boolean equals(addPositionOrCompanyPast_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_type = true;
            boolean that_present_type = true;
            if (this_present_type || that_present_type) {
                if (!(this_present_type && that_present_type))
                    return false;
                if (this.type != that.type)
                    return false;
            }

            boolean this_present_flag = true;
            boolean that_present_flag = true;
            if (this_present_flag || that_present_flag) {
                if (!(this_present_flag && that_present_flag))
                    return false;
                if (this.flag != that.flag)
                    return false;
            }

            boolean this_present_name = true && this.isSetName();
            boolean that_present_name = true && that.isSetName();
            if (this_present_name || that_present_name) {
                if (!(this_present_name && that_present_name))
                    return false;
                if (!this.name.equals(that.name))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + type;

            hashCode = hashCode * 8191 + flag;

            hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
            if (isSetName())
                hashCode = hashCode * 8191 + name.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(addPositionOrCompanyPast_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetType()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFlag()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addPositionOrCompanyPast_args(");
            boolean first = true;

            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("type:");
            sb.append(this.type);
            first = false;
            if (!first) sb.append(", ");
            sb.append("flag:");
            sb.append(this.flag);
            first = false;
            if (!first) sb.append(", ");
            sb.append("name:");
            if (this.name == null) {
                sb.append("null");
            } else {
                sb.append(this.name);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addPositionOrCompanyPast_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addPositionOrCompanyPast_argsStandardScheme getScheme() {
                return new addPositionOrCompanyPast_argsStandardScheme();
            }
        }

        private static class addPositionOrCompanyPast_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addPositionOrCompanyPast_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addPositionOrCompanyPast_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // TYPE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.type = iprot.readI32();
                                struct.setTypeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // FLAG
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.flag = iprot.readI32();
                                struct.setFlagIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.name = iprot.readString();
                                struct.setNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addPositionOrCompanyPast_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(TYPE_FIELD_DESC);
                oprot.writeI32(struct.type);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(FLAG_FIELD_DESC);
                oprot.writeI32(struct.flag);
                oprot.writeFieldEnd();
                if (struct.name != null) {
                    oprot.writeFieldBegin(NAME_FIELD_DESC);
                    oprot.writeString(struct.name);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addPositionOrCompanyPast_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addPositionOrCompanyPast_argsTupleScheme getScheme() {
                return new addPositionOrCompanyPast_argsTupleScheme();
            }
        }

        private static class addPositionOrCompanyPast_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addPositionOrCompanyPast_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addPositionOrCompanyPast_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompany_id()) {
                    optionals.set(0);
                }
                if (struct.isSetType()) {
                    optionals.set(1);
                }
                if (struct.isSetFlag()) {
                    optionals.set(2);
                }
                if (struct.isSetName()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetType()) {
                    oprot.writeI32(struct.type);
                }
                if (struct.isSetFlag()) {
                    oprot.writeI32(struct.flag);
                }
                if (struct.isSetName()) {
                    oprot.writeString(struct.name);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addPositionOrCompanyPast_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.type = iprot.readI32();
                    struct.setTypeIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.flag = iprot.readI32();
                    struct.setFlagIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.name = iprot.readString();
                    struct.setNameIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addPositionOrCompanyPast_result implements org.apache.thrift.TBase<addPositionOrCompanyPast_result, addPositionOrCompanyPast_result._Fields>, java.io.Serializable, Cloneable, Comparable<addPositionOrCompanyPast_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPositionOrCompanyPast_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addPositionOrCompanyPast_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addPositionOrCompanyPast_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPositionOrCompanyPast_result.class, metaDataMap);
        }

        public addPositionOrCompanyPast_result() {
        }

        public addPositionOrCompanyPast_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addPositionOrCompanyPast_result(addPositionOrCompanyPast_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public addPositionOrCompanyPast_result deepCopy() {
            return new addPositionOrCompanyPast_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public addPositionOrCompanyPast_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public addPositionOrCompanyPast_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addPositionOrCompanyPast_result)
                return this.equals((addPositionOrCompanyPast_result)that);
            return false;
        }

        public boolean equals(addPositionOrCompanyPast_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(addPositionOrCompanyPast_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addPositionOrCompanyPast_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addPositionOrCompanyPast_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addPositionOrCompanyPast_resultStandardScheme getScheme() {
                return new addPositionOrCompanyPast_resultStandardScheme();
            }
        }

        private static class addPositionOrCompanyPast_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addPositionOrCompanyPast_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addPositionOrCompanyPast_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addPositionOrCompanyPast_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addPositionOrCompanyPast_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addPositionOrCompanyPast_resultTupleScheme getScheme() {
                return new addPositionOrCompanyPast_resultTupleScheme();
            }
        }

        private static class addPositionOrCompanyPast_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addPositionOrCompanyPast_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addPositionOrCompanyPast_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addPositionOrCompanyPast_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getTalentTagList_args implements org.apache.thrift.TBase<getTalentTagList_args, getTalentTagList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTalentTagList_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTalentTagList_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField PAGE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("page_number", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("page_size", org.apache.thrift.protocol.TType.I32, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTalentTagList_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTalentTagList_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int page_number; // required
        public int page_size; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            PAGE_NUMBER((short)3, "page_number"),
            PAGE_SIZE((short)4, "page_size");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // PAGE_NUMBER
                        return PAGE_NUMBER;
                    case 4: // PAGE_SIZE
                        return PAGE_SIZE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __PAGE_NUMBER_ISSET_ID = 2;
        private static final int __PAGE_SIZE_ISSET_ID = 3;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("page_number", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("page_size", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTalentTagList_args.class, metaDataMap);
        }

        public getTalentTagList_args() {
        }

        public getTalentTagList_args(
                int hr_id,
                int company_id,
                int page_number,
                int page_size)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.page_number = page_number;
            setPage_numberIsSet(true);
            this.page_size = page_size;
            setPage_sizeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getTalentTagList_args(getTalentTagList_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.page_number = other.page_number;
            this.page_size = other.page_size;
        }

        public getTalentTagList_args deepCopy() {
            return new getTalentTagList_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setPage_numberIsSet(false);
            this.page_number = 0;
            setPage_sizeIsSet(false);
            this.page_size = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getTalentTagList_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getTalentTagList_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getPage_number() {
            return this.page_number;
        }

        public getTalentTagList_args setPage_number(int page_number) {
            this.page_number = page_number;
            setPage_numberIsSet(true);
            return this;
        }

        public void unsetPage_number() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID);
        }

        /** Returns true if field page_number is set (has been assigned a value) and false otherwise */
        public boolean isSetPage_number() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID);
        }

        public void setPage_numberIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID, value);
        }

        public int getPage_size() {
            return this.page_size;
        }

        public getTalentTagList_args setPage_size(int page_size) {
            this.page_size = page_size;
            setPage_sizeIsSet(true);
            return this;
        }

        public void unsetPage_size() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
        }

        /** Returns true if field page_size is set (has been assigned a value) and false otherwise */
        public boolean isSetPage_size() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
        }

        public void setPage_sizeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case PAGE_NUMBER:
                    if (value == null) {
                        unsetPage_number();
                    } else {
                        setPage_number((java.lang.Integer)value);
                    }
                    break;

                case PAGE_SIZE:
                    if (value == null) {
                        unsetPage_size();
                    } else {
                        setPage_size((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case PAGE_NUMBER:
                    return getPage_number();

                case PAGE_SIZE:
                    return getPage_size();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case PAGE_NUMBER:
                    return isSetPage_number();
                case PAGE_SIZE:
                    return isSetPage_size();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getTalentTagList_args)
                return this.equals((getTalentTagList_args)that);
            return false;
        }

        public boolean equals(getTalentTagList_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_page_number = true;
            boolean that_present_page_number = true;
            if (this_present_page_number || that_present_page_number) {
                if (!(this_present_page_number && that_present_page_number))
                    return false;
                if (this.page_number != that.page_number)
                    return false;
            }

            boolean this_present_page_size = true;
            boolean that_present_page_size = true;
            if (this_present_page_size || that_present_page_size) {
                if (!(this_present_page_size && that_present_page_size))
                    return false;
                if (this.page_size != that.page_size)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + page_number;

            hashCode = hashCode * 8191 + page_size;

            return hashCode;
        }

        @Override
        public int compareTo(getTalentTagList_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPage_number()).compareTo(other.isSetPage_number());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage_number()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_number, other.page_number);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPage_size()).compareTo(other.isSetPage_size());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage_size()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_size, other.page_size);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getTalentTagList_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("page_number:");
            sb.append(this.page_number);
            first = false;
            if (!first) sb.append(", ");
            sb.append("page_size:");
            sb.append(this.page_size);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getTalentTagList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentTagList_argsStandardScheme getScheme() {
                return new getTalentTagList_argsStandardScheme();
            }
        }

        private static class getTalentTagList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTalentTagList_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getTalentTagList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PAGE_NUMBER
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page_number = iprot.readI32();
                                struct.setPage_numberIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // PAGE_SIZE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page_size = iprot.readI32();
                                struct.setPage_sizeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getTalentTagList_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_NUMBER_FIELD_DESC);
                oprot.writeI32(struct.page_number);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
                oprot.writeI32(struct.page_size);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getTalentTagList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentTagList_argsTupleScheme getScheme() {
                return new getTalentTagList_argsTupleScheme();
            }
        }

        private static class getTalentTagList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTalentTagList_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getTalentTagList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetPage_number()) {
                    optionals.set(2);
                }
                if (struct.isSetPage_size()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetPage_number()) {
                    oprot.writeI32(struct.page_number);
                }
                if (struct.isSetPage_size()) {
                    oprot.writeI32(struct.page_size);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getTalentTagList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.page_number = iprot.readI32();
                    struct.setPage_numberIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.page_size = iprot.readI32();
                    struct.setPage_sizeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getTalentTagList_result implements org.apache.thrift.TBase<getTalentTagList_result, getTalentTagList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTalentTagList_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTalentTagList_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTalentTagList_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTalentTagList_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTalentTagList_result.class, metaDataMap);
        }

        public getTalentTagList_result() {
        }

        public getTalentTagList_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getTalentTagList_result(getTalentTagList_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getTalentTagList_result deepCopy() {
            return new getTalentTagList_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getTalentTagList_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getTalentTagList_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getTalentTagList_result)
                return this.equals((getTalentTagList_result)that);
            return false;
        }

        public boolean equals(getTalentTagList_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getTalentTagList_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getTalentTagList_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getTalentTagList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentTagList_resultStandardScheme getScheme() {
                return new getTalentTagList_resultStandardScheme();
            }
        }

        private static class getTalentTagList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTalentTagList_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getTalentTagList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getTalentTagList_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getTalentTagList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentTagList_resultTupleScheme getScheme() {
                return new getTalentTagList_resultTupleScheme();
            }
        }

        private static class getTalentTagList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTalentTagList_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getTalentTagList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getTalentTagList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getProfileFilterList_args implements org.apache.thrift.TBase<getProfileFilterList_args, getProfileFilterList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileFilterList_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileFilterList_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField PAGE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("page_number", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("page_size", org.apache.thrift.protocol.TType.I32, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getProfileFilterList_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getProfileFilterList_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int page_number; // required
        public int page_size; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            PAGE_NUMBER((short)3, "page_number"),
            PAGE_SIZE((short)4, "page_size");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // PAGE_NUMBER
                        return PAGE_NUMBER;
                    case 4: // PAGE_SIZE
                        return PAGE_SIZE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __PAGE_NUMBER_ISSET_ID = 2;
        private static final int __PAGE_SIZE_ISSET_ID = 3;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("page_number", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("page_size", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileFilterList_args.class, metaDataMap);
        }

        public getProfileFilterList_args() {
        }

        public getProfileFilterList_args(
                int hr_id,
                int company_id,
                int page_number,
                int page_size)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.page_number = page_number;
            setPage_numberIsSet(true);
            this.page_size = page_size;
            setPage_sizeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getProfileFilterList_args(getProfileFilterList_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.page_number = other.page_number;
            this.page_size = other.page_size;
        }

        public getProfileFilterList_args deepCopy() {
            return new getProfileFilterList_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setPage_numberIsSet(false);
            this.page_number = 0;
            setPage_sizeIsSet(false);
            this.page_size = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getProfileFilterList_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getProfileFilterList_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getPage_number() {
            return this.page_number;
        }

        public getProfileFilterList_args setPage_number(int page_number) {
            this.page_number = page_number;
            setPage_numberIsSet(true);
            return this;
        }

        public void unsetPage_number() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID);
        }

        /** Returns true if field page_number is set (has been assigned a value) and false otherwise */
        public boolean isSetPage_number() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID);
        }

        public void setPage_numberIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_NUMBER_ISSET_ID, value);
        }

        public int getPage_size() {
            return this.page_size;
        }

        public getProfileFilterList_args setPage_size(int page_size) {
            this.page_size = page_size;
            setPage_sizeIsSet(true);
            return this;
        }

        public void unsetPage_size() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
        }

        /** Returns true if field page_size is set (has been assigned a value) and false otherwise */
        public boolean isSetPage_size() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
        }

        public void setPage_sizeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case PAGE_NUMBER:
                    if (value == null) {
                        unsetPage_number();
                    } else {
                        setPage_number((java.lang.Integer)value);
                    }
                    break;

                case PAGE_SIZE:
                    if (value == null) {
                        unsetPage_size();
                    } else {
                        setPage_size((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case PAGE_NUMBER:
                    return getPage_number();

                case PAGE_SIZE:
                    return getPage_size();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case PAGE_NUMBER:
                    return isSetPage_number();
                case PAGE_SIZE:
                    return isSetPage_size();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getProfileFilterList_args)
                return this.equals((getProfileFilterList_args)that);
            return false;
        }

        public boolean equals(getProfileFilterList_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_page_number = true;
            boolean that_present_page_number = true;
            if (this_present_page_number || that_present_page_number) {
                if (!(this_present_page_number && that_present_page_number))
                    return false;
                if (this.page_number != that.page_number)
                    return false;
            }

            boolean this_present_page_size = true;
            boolean that_present_page_size = true;
            if (this_present_page_size || that_present_page_size) {
                if (!(this_present_page_size && that_present_page_size))
                    return false;
                if (this.page_size != that.page_size)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + page_number;

            hashCode = hashCode * 8191 + page_size;

            return hashCode;
        }

        @Override
        public int compareTo(getProfileFilterList_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPage_number()).compareTo(other.isSetPage_number());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage_number()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_number, other.page_number);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPage_size()).compareTo(other.isSetPage_size());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage_size()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_size, other.page_size);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getProfileFilterList_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("page_number:");
            sb.append(this.page_number);
            first = false;
            if (!first) sb.append(", ");
            sb.append("page_size:");
            sb.append(this.page_size);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getProfileFilterList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProfileFilterList_argsStandardScheme getScheme() {
                return new getProfileFilterList_argsStandardScheme();
            }
        }

        private static class getProfileFilterList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getProfileFilterList_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileFilterList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PAGE_NUMBER
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page_number = iprot.readI32();
                                struct.setPage_numberIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // PAGE_SIZE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.page_size = iprot.readI32();
                                struct.setPage_sizeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileFilterList_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_NUMBER_FIELD_DESC);
                oprot.writeI32(struct.page_number);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
                oprot.writeI32(struct.page_size);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getProfileFilterList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProfileFilterList_argsTupleScheme getScheme() {
                return new getProfileFilterList_argsTupleScheme();
            }
        }

        private static class getProfileFilterList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getProfileFilterList_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getProfileFilterList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetPage_number()) {
                    optionals.set(2);
                }
                if (struct.isSetPage_size()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetPage_number()) {
                    oprot.writeI32(struct.page_number);
                }
                if (struct.isSetPage_size()) {
                    oprot.writeI32(struct.page_size);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getProfileFilterList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.page_number = iprot.readI32();
                    struct.setPage_numberIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.page_size = iprot.readI32();
                    struct.setPage_sizeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getProfileFilterList_result implements org.apache.thrift.TBase<getProfileFilterList_result, getProfileFilterList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileFilterList_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileFilterList_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getProfileFilterList_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getProfileFilterList_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileFilterList_result.class, metaDataMap);
        }

        public getProfileFilterList_result() {
        }

        public getProfileFilterList_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getProfileFilterList_result(getProfileFilterList_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getProfileFilterList_result deepCopy() {
            return new getProfileFilterList_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getProfileFilterList_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getProfileFilterList_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getProfileFilterList_result)
                return this.equals((getProfileFilterList_result)that);
            return false;
        }

        public boolean equals(getProfileFilterList_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getProfileFilterList_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getProfileFilterList_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getProfileFilterList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProfileFilterList_resultStandardScheme getScheme() {
                return new getProfileFilterList_resultStandardScheme();
            }
        }

        private static class getProfileFilterList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getProfileFilterList_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileFilterList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileFilterList_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getProfileFilterList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProfileFilterList_resultTupleScheme getScheme() {
                return new getProfileFilterList_resultTupleScheme();
            }
        }

        private static class getProfileFilterList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getProfileFilterList_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getProfileFilterList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getProfileFilterList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class handerProfileFilterByIds_args implements org.apache.thrift.TBase<handerProfileFilterByIds_args, handerProfileFilterByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<handerProfileFilterByIds_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("handerProfileFilterByIds_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField DISABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("disable", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField FILTER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("filter_ids", org.apache.thrift.protocol.TType.LIST, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new handerProfileFilterByIds_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new handerProfileFilterByIds_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int disable; // required
        public java.util.List<java.lang.Integer> filter_ids; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            DISABLE((short)3, "disable"),
            FILTER_IDS((short)4, "filter_ids");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // DISABLE
                        return DISABLE;
                    case 4: // FILTER_IDS
                        return FILTER_IDS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __DISABLE_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.DISABLE, new org.apache.thrift.meta_data.FieldMetaData("disable", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.FILTER_IDS, new org.apache.thrift.meta_data.FieldMetaData("filter_ids", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(handerProfileFilterByIds_args.class, metaDataMap);
        }

        public handerProfileFilterByIds_args() {
        }

        public handerProfileFilterByIds_args(
                int hr_id,
                int company_id,
                int disable,
                java.util.List<java.lang.Integer> filter_ids)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.disable = disable;
            setDisableIsSet(true);
            this.filter_ids = filter_ids;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public handerProfileFilterByIds_args(handerProfileFilterByIds_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.disable = other.disable;
            if (other.isSetFilter_ids()) {
                java.util.List<java.lang.Integer> __this__filter_ids = new java.util.ArrayList<java.lang.Integer>(other.filter_ids);
                this.filter_ids = __this__filter_ids;
            }
        }

        public handerProfileFilterByIds_args deepCopy() {
            return new handerProfileFilterByIds_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setDisableIsSet(false);
            this.disable = 0;
            this.filter_ids = null;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public handerProfileFilterByIds_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public handerProfileFilterByIds_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getDisable() {
            return this.disable;
        }

        public handerProfileFilterByIds_args setDisable(int disable) {
            this.disable = disable;
            setDisableIsSet(true);
            return this;
        }

        public void unsetDisable() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISABLE_ISSET_ID);
        }

        /** Returns true if field disable is set (has been assigned a value) and false otherwise */
        public boolean isSetDisable() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISABLE_ISSET_ID);
        }

        public void setDisableIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISABLE_ISSET_ID, value);
        }

        public int getFilter_idsSize() {
            return (this.filter_ids == null) ? 0 : this.filter_ids.size();
        }

        public java.util.Iterator<java.lang.Integer> getFilter_idsIterator() {
            return (this.filter_ids == null) ? null : this.filter_ids.iterator();
        }

        public void addToFilter_ids(int elem) {
            if (this.filter_ids == null) {
                this.filter_ids = new java.util.ArrayList<java.lang.Integer>();
            }
            this.filter_ids.add(elem);
        }

        public java.util.List<java.lang.Integer> getFilter_ids() {
            return this.filter_ids;
        }

        public handerProfileFilterByIds_args setFilter_ids(java.util.List<java.lang.Integer> filter_ids) {
            this.filter_ids = filter_ids;
            return this;
        }

        public void unsetFilter_ids() {
            this.filter_ids = null;
        }

        /** Returns true if field filter_ids is set (has been assigned a value) and false otherwise */
        public boolean isSetFilter_ids() {
            return this.filter_ids != null;
        }

        public void setFilter_idsIsSet(boolean value) {
            if (!value) {
                this.filter_ids = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case DISABLE:
                    if (value == null) {
                        unsetDisable();
                    } else {
                        setDisable((java.lang.Integer)value);
                    }
                    break;

                case FILTER_IDS:
                    if (value == null) {
                        unsetFilter_ids();
                    } else {
                        setFilter_ids((java.util.List<java.lang.Integer>)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case DISABLE:
                    return getDisable();

                case FILTER_IDS:
                    return getFilter_ids();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case DISABLE:
                    return isSetDisable();
                case FILTER_IDS:
                    return isSetFilter_ids();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof handerProfileFilterByIds_args)
                return this.equals((handerProfileFilterByIds_args)that);
            return false;
        }

        public boolean equals(handerProfileFilterByIds_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_disable = true;
            boolean that_present_disable = true;
            if (this_present_disable || that_present_disable) {
                if (!(this_present_disable && that_present_disable))
                    return false;
                if (this.disable != that.disable)
                    return false;
            }

            boolean this_present_filter_ids = true && this.isSetFilter_ids();
            boolean that_present_filter_ids = true && that.isSetFilter_ids();
            if (this_present_filter_ids || that_present_filter_ids) {
                if (!(this_present_filter_ids && that_present_filter_ids))
                    return false;
                if (!this.filter_ids.equals(that.filter_ids))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + disable;

            hashCode = hashCode * 8191 + ((isSetFilter_ids()) ? 131071 : 524287);
            if (isSetFilter_ids())
                hashCode = hashCode * 8191 + filter_ids.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(handerProfileFilterByIds_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetDisable()).compareTo(other.isSetDisable());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDisable()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable, other.disable);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetFilter_ids()).compareTo(other.isSetFilter_ids());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFilter_ids()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter_ids, other.filter_ids);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("handerProfileFilterByIds_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("disable:");
            sb.append(this.disable);
            first = false;
            if (!first) sb.append(", ");
            sb.append("filter_ids:");
            if (this.filter_ids == null) {
                sb.append("null");
            } else {
                sb.append(this.filter_ids);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class handerProfileFilterByIds_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public handerProfileFilterByIds_argsStandardScheme getScheme() {
                return new handerProfileFilterByIds_argsStandardScheme();
            }
        }

        private static class handerProfileFilterByIds_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<handerProfileFilterByIds_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, handerProfileFilterByIds_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // DISABLE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.disable = iprot.readI32();
                                struct.setDisableIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // FILTER_IDS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list168 = iprot.readListBegin();
                                    struct.filter_ids = new java.util.ArrayList<java.lang.Integer>(_list168.size);
                                    int _elem169;
                                    for (int _i170 = 0; _i170 < _list168.size; ++_i170)
                                    {
                                        _elem169 = iprot.readI32();
                                        struct.filter_ids.add(_elem169);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setFilter_idsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, handerProfileFilterByIds_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(DISABLE_FIELD_DESC);
                oprot.writeI32(struct.disable);
                oprot.writeFieldEnd();
                if (struct.filter_ids != null) {
                    oprot.writeFieldBegin(FILTER_IDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.filter_ids.size()));
                        for (int _iter171 : struct.filter_ids)
                        {
                            oprot.writeI32(_iter171);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class handerProfileFilterByIds_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public handerProfileFilterByIds_argsTupleScheme getScheme() {
                return new handerProfileFilterByIds_argsTupleScheme();
            }
        }

        private static class handerProfileFilterByIds_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<handerProfileFilterByIds_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, handerProfileFilterByIds_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetDisable()) {
                    optionals.set(2);
                }
                if (struct.isSetFilter_ids()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetDisable()) {
                    oprot.writeI32(struct.disable);
                }
                if (struct.isSetFilter_ids()) {
                    {
                        oprot.writeI32(struct.filter_ids.size());
                        for (int _iter172 : struct.filter_ids)
                        {
                            oprot.writeI32(_iter172);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, handerProfileFilterByIds_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.disable = iprot.readI32();
                    struct.setDisableIsSet(true);
                }
                if (incoming.get(3)) {
                    {
                        org.apache.thrift.protocol.TList _list173 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.filter_ids = new java.util.ArrayList<java.lang.Integer>(_list173.size);
                        int _elem174;
                        for (int _i175 = 0; _i175 < _list173.size; ++_i175)
                        {
                            _elem174 = iprot.readI32();
                            struct.filter_ids.add(_elem174);
                        }
                    }
                    struct.setFilter_idsIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class handerProfileFilterByIds_result implements org.apache.thrift.TBase<handerProfileFilterByIds_result, handerProfileFilterByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<handerProfileFilterByIds_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("handerProfileFilterByIds_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new handerProfileFilterByIds_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new handerProfileFilterByIds_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(handerProfileFilterByIds_result.class, metaDataMap);
        }

        public handerProfileFilterByIds_result() {
        }

        public handerProfileFilterByIds_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public handerProfileFilterByIds_result(handerProfileFilterByIds_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public handerProfileFilterByIds_result deepCopy() {
            return new handerProfileFilterByIds_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public handerProfileFilterByIds_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public handerProfileFilterByIds_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof handerProfileFilterByIds_result)
                return this.equals((handerProfileFilterByIds_result)that);
            return false;
        }

        public boolean equals(handerProfileFilterByIds_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(handerProfileFilterByIds_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("handerProfileFilterByIds_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class handerProfileFilterByIds_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public handerProfileFilterByIds_resultStandardScheme getScheme() {
                return new handerProfileFilterByIds_resultStandardScheme();
            }
        }

        private static class handerProfileFilterByIds_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<handerProfileFilterByIds_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, handerProfileFilterByIds_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, handerProfileFilterByIds_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class handerProfileFilterByIds_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public handerProfileFilterByIds_resultTupleScheme getScheme() {
                return new handerProfileFilterByIds_resultTupleScheme();
            }
        }

        private static class handerProfileFilterByIds_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<handerProfileFilterByIds_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, handerProfileFilterByIds_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, handerProfileFilterByIds_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getProfileFilterInfo_args implements org.apache.thrift.TBase<getProfileFilterInfo_args, getProfileFilterInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileFilterInfo_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileFilterInfo_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField FILTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("filter_id", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getProfileFilterInfo_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getProfileFilterInfo_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int filter_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            FILTER_ID((short)3, "filter_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // FILTER_ID
                        return FILTER_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __FILTER_ID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.FILTER_ID, new org.apache.thrift.meta_data.FieldMetaData("filter_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileFilterInfo_args.class, metaDataMap);
        }

        public getProfileFilterInfo_args() {
        }

        public getProfileFilterInfo_args(
                int hr_id,
                int company_id,
                int filter_id)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.filter_id = filter_id;
            setFilter_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getProfileFilterInfo_args(getProfileFilterInfo_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.filter_id = other.filter_id;
        }

        public getProfileFilterInfo_args deepCopy() {
            return new getProfileFilterInfo_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setFilter_idIsSet(false);
            this.filter_id = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getProfileFilterInfo_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getProfileFilterInfo_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getFilter_id() {
            return this.filter_id;
        }

        public getProfileFilterInfo_args setFilter_id(int filter_id) {
            this.filter_id = filter_id;
            setFilter_idIsSet(true);
            return this;
        }

        public void unsetFilter_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILTER_ID_ISSET_ID);
        }

        /** Returns true if field filter_id is set (has been assigned a value) and false otherwise */
        public boolean isSetFilter_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILTER_ID_ISSET_ID);
        }

        public void setFilter_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILTER_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case FILTER_ID:
                    if (value == null) {
                        unsetFilter_id();
                    } else {
                        setFilter_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case FILTER_ID:
                    return getFilter_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case FILTER_ID:
                    return isSetFilter_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getProfileFilterInfo_args)
                return this.equals((getProfileFilterInfo_args)that);
            return false;
        }

        public boolean equals(getProfileFilterInfo_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_filter_id = true;
            boolean that_present_filter_id = true;
            if (this_present_filter_id || that_present_filter_id) {
                if (!(this_present_filter_id && that_present_filter_id))
                    return false;
                if (this.filter_id != that.filter_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + filter_id;

            return hashCode;
        }

        @Override
        public int compareTo(getProfileFilterInfo_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetFilter_id()).compareTo(other.isSetFilter_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFilter_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter_id, other.filter_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getProfileFilterInfo_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("filter_id:");
            sb.append(this.filter_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getProfileFilterInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProfileFilterInfo_argsStandardScheme getScheme() {
                return new getProfileFilterInfo_argsStandardScheme();
            }
        }

        private static class getProfileFilterInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getProfileFilterInfo_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileFilterInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // FILTER_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.filter_id = iprot.readI32();
                                struct.setFilter_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileFilterInfo_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(FILTER_ID_FIELD_DESC);
                oprot.writeI32(struct.filter_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getProfileFilterInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProfileFilterInfo_argsTupleScheme getScheme() {
                return new getProfileFilterInfo_argsTupleScheme();
            }
        }

        private static class getProfileFilterInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getProfileFilterInfo_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getProfileFilterInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetFilter_id()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetFilter_id()) {
                    oprot.writeI32(struct.filter_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getProfileFilterInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.filter_id = iprot.readI32();
                    struct.setFilter_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getProfileFilterInfo_result implements org.apache.thrift.TBase<getProfileFilterInfo_result, getProfileFilterInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileFilterInfo_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileFilterInfo_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getProfileFilterInfo_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getProfileFilterInfo_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileFilterInfo_result.class, metaDataMap);
        }

        public getProfileFilterInfo_result() {
        }

        public getProfileFilterInfo_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getProfileFilterInfo_result(getProfileFilterInfo_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getProfileFilterInfo_result deepCopy() {
            return new getProfileFilterInfo_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getProfileFilterInfo_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getProfileFilterInfo_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getProfileFilterInfo_result)
                return this.equals((getProfileFilterInfo_result)that);
            return false;
        }

        public boolean equals(getProfileFilterInfo_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getProfileFilterInfo_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getProfileFilterInfo_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getProfileFilterInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProfileFilterInfo_resultStandardScheme getScheme() {
                return new getProfileFilterInfo_resultStandardScheme();
            }
        }

        private static class getProfileFilterInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getProfileFilterInfo_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileFilterInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileFilterInfo_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getProfileFilterInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getProfileFilterInfo_resultTupleScheme getScheme() {
                return new getProfileFilterInfo_resultTupleScheme();
            }
        }

        private static class getProfileFilterInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getProfileFilterInfo_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getProfileFilterInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getProfileFilterInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addProfileFilter_args implements org.apache.thrift.TBase<addProfileFilter_args, addProfileFilter_args._Fields>, java.io.Serializable, Cloneable, Comparable<addProfileFilter_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProfileFilter_args");

        private static final org.apache.thrift.protocol.TField COMPANY_TAG_DO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyTagDO", org.apache.thrift.protocol.TType.STRUCT, (short)1);
        private static final org.apache.thrift.protocol.TField ACTION_FORM_FIELD_DESC = new org.apache.thrift.protocol.TField("actionForm", org.apache.thrift.protocol.TType.LIST, (short)2);
        private static final org.apache.thrift.protocol.TField POSITION_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("positionIdList", org.apache.thrift.protocol.TType.LIST, (short)3);
        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)4);
        private static final org.apache.thrift.protocol.TField POSITION_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("position_total", org.apache.thrift.protocol.TType.I32, (short)5);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addProfileFilter_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addProfileFilter_argsTupleSchemeFactory();

        public com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO; // required
        public java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm; // required
        public java.util.List<java.lang.Integer> positionIdList; // required
        public int hr_id; // required
        public int position_total; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_TAG_DO((short)1, "companyTagDO"),
            ACTION_FORM((short)2, "actionForm"),
            POSITION_ID_LIST((short)3, "positionIdList"),
            HR_ID((short)4, "hr_id"),
            POSITION_TOTAL((short)5, "position_total");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // COMPANY_TAG_DO
                        return COMPANY_TAG_DO;
                    case 2: // ACTION_FORM
                        return ACTION_FORM;
                    case 3: // POSITION_ID_LIST
                        return POSITION_ID_LIST;
                    case 4: // HR_ID
                        return HR_ID;
                    case 5: // POSITION_TOTAL
                        return POSITION_TOTAL;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __POSITION_TOTAL_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_TAG_DO, new org.apache.thrift.meta_data.FieldMetaData("companyTagDO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO.class)));
            tmpMap.put(_Fields.ACTION_FORM, new org.apache.thrift.meta_data.FieldMetaData("actionForm", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.company.struct.ActionForm.class))));
            tmpMap.put(_Fields.POSITION_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("positionIdList", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.POSITION_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("position_total", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProfileFilter_args.class, metaDataMap);
        }

        public addProfileFilter_args() {
        }

        public addProfileFilter_args(
                com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO,
                java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm,
                java.util.List<java.lang.Integer> positionIdList,
                int hr_id,
                int position_total)
        {
            this();
            this.companyTagDO = companyTagDO;
            this.actionForm = actionForm;
            this.positionIdList = positionIdList;
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.position_total = position_total;
            setPosition_totalIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addProfileFilter_args(addProfileFilter_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetCompanyTagDO()) {
                this.companyTagDO = new com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO(other.companyTagDO);
            }
            if (other.isSetActionForm()) {
                java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> __this__actionForm = new java.util.ArrayList<com.moseeker.thrift.gen.company.struct.ActionForm>(other.actionForm.size());
                for (com.moseeker.thrift.gen.company.struct.ActionForm other_element : other.actionForm) {
                    __this__actionForm.add(new com.moseeker.thrift.gen.company.struct.ActionForm(other_element));
                }
                this.actionForm = __this__actionForm;
            }
            if (other.isSetPositionIdList()) {
                java.util.List<java.lang.Integer> __this__positionIdList = new java.util.ArrayList<java.lang.Integer>(other.positionIdList);
                this.positionIdList = __this__positionIdList;
            }
            this.hr_id = other.hr_id;
            this.position_total = other.position_total;
        }

        public addProfileFilter_args deepCopy() {
            return new addProfileFilter_args(this);
        }

        @Override
        public void clear() {
            this.companyTagDO = null;
            this.actionForm = null;
            this.positionIdList = null;
            setHr_idIsSet(false);
            this.hr_id = 0;
            setPosition_totalIsSet(false);
            this.position_total = 0;
        }

        public com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO getCompanyTagDO() {
            return this.companyTagDO;
        }

        public addProfileFilter_args setCompanyTagDO(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO) {
            this.companyTagDO = companyTagDO;
            return this;
        }

        public void unsetCompanyTagDO() {
            this.companyTagDO = null;
        }

        /** Returns true if field companyTagDO is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyTagDO() {
            return this.companyTagDO != null;
        }

        public void setCompanyTagDOIsSet(boolean value) {
            if (!value) {
                this.companyTagDO = null;
            }
        }

        public int getActionFormSize() {
            return (this.actionForm == null) ? 0 : this.actionForm.size();
        }

        public java.util.Iterator<com.moseeker.thrift.gen.company.struct.ActionForm> getActionFormIterator() {
            return (this.actionForm == null) ? null : this.actionForm.iterator();
        }

        public void addToActionForm(com.moseeker.thrift.gen.company.struct.ActionForm elem) {
            if (this.actionForm == null) {
                this.actionForm = new java.util.ArrayList<com.moseeker.thrift.gen.company.struct.ActionForm>();
            }
            this.actionForm.add(elem);
        }

        public java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> getActionForm() {
            return this.actionForm;
        }

        public addProfileFilter_args setActionForm(java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm) {
            this.actionForm = actionForm;
            return this;
        }

        public void unsetActionForm() {
            this.actionForm = null;
        }

        /** Returns true if field actionForm is set (has been assigned a value) and false otherwise */
        public boolean isSetActionForm() {
            return this.actionForm != null;
        }

        public void setActionFormIsSet(boolean value) {
            if (!value) {
                this.actionForm = null;
            }
        }

        public int getPositionIdListSize() {
            return (this.positionIdList == null) ? 0 : this.positionIdList.size();
        }

        public java.util.Iterator<java.lang.Integer> getPositionIdListIterator() {
            return (this.positionIdList == null) ? null : this.positionIdList.iterator();
        }

        public void addToPositionIdList(int elem) {
            if (this.positionIdList == null) {
                this.positionIdList = new java.util.ArrayList<java.lang.Integer>();
            }
            this.positionIdList.add(elem);
        }

        public java.util.List<java.lang.Integer> getPositionIdList() {
            return this.positionIdList;
        }

        public addProfileFilter_args setPositionIdList(java.util.List<java.lang.Integer> positionIdList) {
            this.positionIdList = positionIdList;
            return this;
        }

        public void unsetPositionIdList() {
            this.positionIdList = null;
        }

        /** Returns true if field positionIdList is set (has been assigned a value) and false otherwise */
        public boolean isSetPositionIdList() {
            return this.positionIdList != null;
        }

        public void setPositionIdListIsSet(boolean value) {
            if (!value) {
                this.positionIdList = null;
            }
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public addProfileFilter_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getPosition_total() {
            return this.position_total;
        }

        public addProfileFilter_args setPosition_total(int position_total) {
            this.position_total = position_total;
            setPosition_totalIsSet(true);
            return this;
        }

        public void unsetPosition_total() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITION_TOTAL_ISSET_ID);
        }

        /** Returns true if field position_total is set (has been assigned a value) and false otherwise */
        public boolean isSetPosition_total() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITION_TOTAL_ISSET_ID);
        }

        public void setPosition_totalIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITION_TOTAL_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case COMPANY_TAG_DO:
                    if (value == null) {
                        unsetCompanyTagDO();
                    } else {
                        setCompanyTagDO((com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO)value);
                    }
                    break;

                case ACTION_FORM:
                    if (value == null) {
                        unsetActionForm();
                    } else {
                        setActionForm((java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm>)value);
                    }
                    break;

                case POSITION_ID_LIST:
                    if (value == null) {
                        unsetPositionIdList();
                    } else {
                        setPositionIdList((java.util.List<java.lang.Integer>)value);
                    }
                    break;

                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case POSITION_TOTAL:
                    if (value == null) {
                        unsetPosition_total();
                    } else {
                        setPosition_total((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_TAG_DO:
                    return getCompanyTagDO();

                case ACTION_FORM:
                    return getActionForm();

                case POSITION_ID_LIST:
                    return getPositionIdList();

                case HR_ID:
                    return getHr_id();

                case POSITION_TOTAL:
                    return getPosition_total();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_TAG_DO:
                    return isSetCompanyTagDO();
                case ACTION_FORM:
                    return isSetActionForm();
                case POSITION_ID_LIST:
                    return isSetPositionIdList();
                case HR_ID:
                    return isSetHr_id();
                case POSITION_TOTAL:
                    return isSetPosition_total();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addProfileFilter_args)
                return this.equals((addProfileFilter_args)that);
            return false;
        }

        public boolean equals(addProfileFilter_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyTagDO = true && this.isSetCompanyTagDO();
            boolean that_present_companyTagDO = true && that.isSetCompanyTagDO();
            if (this_present_companyTagDO || that_present_companyTagDO) {
                if (!(this_present_companyTagDO && that_present_companyTagDO))
                    return false;
                if (!this.companyTagDO.equals(that.companyTagDO))
                    return false;
            }

            boolean this_present_actionForm = true && this.isSetActionForm();
            boolean that_present_actionForm = true && that.isSetActionForm();
            if (this_present_actionForm || that_present_actionForm) {
                if (!(this_present_actionForm && that_present_actionForm))
                    return false;
                if (!this.actionForm.equals(that.actionForm))
                    return false;
            }

            boolean this_present_positionIdList = true && this.isSetPositionIdList();
            boolean that_present_positionIdList = true && that.isSetPositionIdList();
            if (this_present_positionIdList || that_present_positionIdList) {
                if (!(this_present_positionIdList && that_present_positionIdList))
                    return false;
                if (!this.positionIdList.equals(that.positionIdList))
                    return false;
            }

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_position_total = true;
            boolean that_present_position_total = true;
            if (this_present_position_total || that_present_position_total) {
                if (!(this_present_position_total && that_present_position_total))
                    return false;
                if (this.position_total != that.position_total)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCompanyTagDO()) ? 131071 : 524287);
            if (isSetCompanyTagDO())
                hashCode = hashCode * 8191 + companyTagDO.hashCode();

            hashCode = hashCode * 8191 + ((isSetActionForm()) ? 131071 : 524287);
            if (isSetActionForm())
                hashCode = hashCode * 8191 + actionForm.hashCode();

            hashCode = hashCode * 8191 + ((isSetPositionIdList()) ? 131071 : 524287);
            if (isSetPositionIdList())
                hashCode = hashCode * 8191 + positionIdList.hashCode();

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + position_total;

            return hashCode;
        }

        @Override
        public int compareTo(addProfileFilter_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyTagDO()).compareTo(other.isSetCompanyTagDO());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyTagDO()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyTagDO, other.companyTagDO);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetActionForm()).compareTo(other.isSetActionForm());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetActionForm()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionForm, other.actionForm);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPositionIdList()).compareTo(other.isSetPositionIdList());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPositionIdList()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionIdList, other.positionIdList);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPosition_total()).compareTo(other.isSetPosition_total());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPosition_total()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position_total, other.position_total);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addProfileFilter_args(");
            boolean first = true;

            sb.append("companyTagDO:");
            if (this.companyTagDO == null) {
                sb.append("null");
            } else {
                sb.append(this.companyTagDO);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("actionForm:");
            if (this.actionForm == null) {
                sb.append("null");
            } else {
                sb.append(this.actionForm);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("positionIdList:");
            if (this.positionIdList == null) {
                sb.append("null");
            } else {
                sb.append(this.positionIdList);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("position_total:");
            sb.append(this.position_total);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (companyTagDO != null) {
                companyTagDO.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addProfileFilter_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addProfileFilter_argsStandardScheme getScheme() {
                return new addProfileFilter_argsStandardScheme();
            }
        }

        private static class addProfileFilter_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addProfileFilter_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addProfileFilter_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_TAG_DO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.companyTagDO = new com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO();
                                struct.companyTagDO.read(iprot);
                                struct.setCompanyTagDOIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // ACTION_FORM
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list176 = iprot.readListBegin();
                                    struct.actionForm = new java.util.ArrayList<com.moseeker.thrift.gen.company.struct.ActionForm>(_list176.size);
                                    com.moseeker.thrift.gen.company.struct.ActionForm _elem177;
                                    for (int _i178 = 0; _i178 < _list176.size; ++_i178)
                                    {
                                        _elem177 = new com.moseeker.thrift.gen.company.struct.ActionForm();
                                        _elem177.read(iprot);
                                        struct.actionForm.add(_elem177);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setActionFormIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // POSITION_ID_LIST
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list179 = iprot.readListBegin();
                                    struct.positionIdList = new java.util.ArrayList<java.lang.Integer>(_list179.size);
                                    int _elem180;
                                    for (int _i181 = 0; _i181 < _list179.size; ++_i181)
                                    {
                                        _elem180 = iprot.readI32();
                                        struct.positionIdList.add(_elem180);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setPositionIdListIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 5: // POSITION_TOTAL
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.position_total = iprot.readI32();
                                struct.setPosition_totalIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addProfileFilter_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.companyTagDO != null) {
                    oprot.writeFieldBegin(COMPANY_TAG_DO_FIELD_DESC);
                    struct.companyTagDO.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.actionForm != null) {
                    oprot.writeFieldBegin(ACTION_FORM_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.actionForm.size()));
                        for (com.moseeker.thrift.gen.company.struct.ActionForm _iter182 : struct.actionForm)
                        {
                            _iter182.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.positionIdList != null) {
                    oprot.writeFieldBegin(POSITION_ID_LIST_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.positionIdList.size()));
                        for (int _iter183 : struct.positionIdList)
                        {
                            oprot.writeI32(_iter183);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(POSITION_TOTAL_FIELD_DESC);
                oprot.writeI32(struct.position_total);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addProfileFilter_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addProfileFilter_argsTupleScheme getScheme() {
                return new addProfileFilter_argsTupleScheme();
            }
        }

        private static class addProfileFilter_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addProfileFilter_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addProfileFilter_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyTagDO()) {
                    optionals.set(0);
                }
                if (struct.isSetActionForm()) {
                    optionals.set(1);
                }
                if (struct.isSetPositionIdList()) {
                    optionals.set(2);
                }
                if (struct.isSetHr_id()) {
                    optionals.set(3);
                }
                if (struct.isSetPosition_total()) {
                    optionals.set(4);
                }
                oprot.writeBitSet(optionals, 5);
                if (struct.isSetCompanyTagDO()) {
                    struct.companyTagDO.write(oprot);
                }
                if (struct.isSetActionForm()) {
                    {
                        oprot.writeI32(struct.actionForm.size());
                        for (com.moseeker.thrift.gen.company.struct.ActionForm _iter184 : struct.actionForm)
                        {
                            _iter184.write(oprot);
                        }
                    }
                }
                if (struct.isSetPositionIdList()) {
                    {
                        oprot.writeI32(struct.positionIdList.size());
                        for (int _iter185 : struct.positionIdList)
                        {
                            oprot.writeI32(_iter185);
                        }
                    }
                }
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetPosition_total()) {
                    oprot.writeI32(struct.position_total);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addProfileFilter_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(5);
                if (incoming.get(0)) {
                    struct.companyTagDO = new com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO();
                    struct.companyTagDO.read(iprot);
                    struct.setCompanyTagDOIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TList _list186 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.actionForm = new java.util.ArrayList<com.moseeker.thrift.gen.company.struct.ActionForm>(_list186.size);
                        com.moseeker.thrift.gen.company.struct.ActionForm _elem187;
                        for (int _i188 = 0; _i188 < _list186.size; ++_i188)
                        {
                            _elem187 = new com.moseeker.thrift.gen.company.struct.ActionForm();
                            _elem187.read(iprot);
                            struct.actionForm.add(_elem187);
                        }
                    }
                    struct.setActionFormIsSet(true);
                }
                if (incoming.get(2)) {
                    {
                        org.apache.thrift.protocol.TList _list189 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.positionIdList = new java.util.ArrayList<java.lang.Integer>(_list189.size);
                        int _elem190;
                        for (int _i191 = 0; _i191 < _list189.size; ++_i191)
                        {
                            _elem190 = iprot.readI32();
                            struct.positionIdList.add(_elem190);
                        }
                    }
                    struct.setPositionIdListIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(4)) {
                    struct.position_total = iprot.readI32();
                    struct.setPosition_totalIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addProfileFilter_result implements org.apache.thrift.TBase<addProfileFilter_result, addProfileFilter_result._Fields>, java.io.Serializable, Cloneable, Comparable<addProfileFilter_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProfileFilter_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addProfileFilter_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addProfileFilter_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProfileFilter_result.class, metaDataMap);
        }

        public addProfileFilter_result() {
        }

        public addProfileFilter_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addProfileFilter_result(addProfileFilter_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public addProfileFilter_result deepCopy() {
            return new addProfileFilter_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public addProfileFilter_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public addProfileFilter_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addProfileFilter_result)
                return this.equals((addProfileFilter_result)that);
            return false;
        }

        public boolean equals(addProfileFilter_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(addProfileFilter_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addProfileFilter_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addProfileFilter_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addProfileFilter_resultStandardScheme getScheme() {
                return new addProfileFilter_resultStandardScheme();
            }
        }

        private static class addProfileFilter_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addProfileFilter_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addProfileFilter_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addProfileFilter_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addProfileFilter_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addProfileFilter_resultTupleScheme getScheme() {
                return new addProfileFilter_resultTupleScheme();
            }
        }

        private static class addProfileFilter_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addProfileFilter_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addProfileFilter_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addProfileFilter_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updateProfileFilter_args implements org.apache.thrift.TBase<updateProfileFilter_args, updateProfileFilter_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateProfileFilter_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProfileFilter_args");

        private static final org.apache.thrift.protocol.TField COMPANY_TAG_DO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyTagDO", org.apache.thrift.protocol.TType.STRUCT, (short)1);
        private static final org.apache.thrift.protocol.TField ACTION_FORM_FIELD_DESC = new org.apache.thrift.protocol.TField("actionForm", org.apache.thrift.protocol.TType.LIST, (short)2);
        private static final org.apache.thrift.protocol.TField POSITION_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("positionIdList", org.apache.thrift.protocol.TType.LIST, (short)3);
        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)4);
        private static final org.apache.thrift.protocol.TField POSITION_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("position_total", org.apache.thrift.protocol.TType.I32, (short)5);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateProfileFilter_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateProfileFilter_argsTupleSchemeFactory();

        public com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO; // required
        public java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm; // required
        public java.util.List<java.lang.Integer> positionIdList; // required
        public int hr_id; // required
        public int position_total; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_TAG_DO((short)1, "companyTagDO"),
            ACTION_FORM((short)2, "actionForm"),
            POSITION_ID_LIST((short)3, "positionIdList"),
            HR_ID((short)4, "hr_id"),
            POSITION_TOTAL((short)5, "position_total");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // COMPANY_TAG_DO
                        return COMPANY_TAG_DO;
                    case 2: // ACTION_FORM
                        return ACTION_FORM;
                    case 3: // POSITION_ID_LIST
                        return POSITION_ID_LIST;
                    case 4: // HR_ID
                        return HR_ID;
                    case 5: // POSITION_TOTAL
                        return POSITION_TOTAL;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __POSITION_TOTAL_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_TAG_DO, new org.apache.thrift.meta_data.FieldMetaData("companyTagDO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO.class)));
            tmpMap.put(_Fields.ACTION_FORM, new org.apache.thrift.meta_data.FieldMetaData("actionForm", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.company.struct.ActionForm.class))));
            tmpMap.put(_Fields.POSITION_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("positionIdList", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.POSITION_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("position_total", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProfileFilter_args.class, metaDataMap);
        }

        public updateProfileFilter_args() {
        }

        public updateProfileFilter_args(
                com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO,
                java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm,
                java.util.List<java.lang.Integer> positionIdList,
                int hr_id,
                int position_total)
        {
            this();
            this.companyTagDO = companyTagDO;
            this.actionForm = actionForm;
            this.positionIdList = positionIdList;
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.position_total = position_total;
            setPosition_totalIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateProfileFilter_args(updateProfileFilter_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetCompanyTagDO()) {
                this.companyTagDO = new com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO(other.companyTagDO);
            }
            if (other.isSetActionForm()) {
                java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> __this__actionForm = new java.util.ArrayList<com.moseeker.thrift.gen.company.struct.ActionForm>(other.actionForm.size());
                for (com.moseeker.thrift.gen.company.struct.ActionForm other_element : other.actionForm) {
                    __this__actionForm.add(new com.moseeker.thrift.gen.company.struct.ActionForm(other_element));
                }
                this.actionForm = __this__actionForm;
            }
            if (other.isSetPositionIdList()) {
                java.util.List<java.lang.Integer> __this__positionIdList = new java.util.ArrayList<java.lang.Integer>(other.positionIdList);
                this.positionIdList = __this__positionIdList;
            }
            this.hr_id = other.hr_id;
            this.position_total = other.position_total;
        }

        public updateProfileFilter_args deepCopy() {
            return new updateProfileFilter_args(this);
        }

        @Override
        public void clear() {
            this.companyTagDO = null;
            this.actionForm = null;
            this.positionIdList = null;
            setHr_idIsSet(false);
            this.hr_id = 0;
            setPosition_totalIsSet(false);
            this.position_total = 0;
        }

        public com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO getCompanyTagDO() {
            return this.companyTagDO;
        }

        public updateProfileFilter_args setCompanyTagDO(com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO companyTagDO) {
            this.companyTagDO = companyTagDO;
            return this;
        }

        public void unsetCompanyTagDO() {
            this.companyTagDO = null;
        }

        /** Returns true if field companyTagDO is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyTagDO() {
            return this.companyTagDO != null;
        }

        public void setCompanyTagDOIsSet(boolean value) {
            if (!value) {
                this.companyTagDO = null;
            }
        }

        public int getActionFormSize() {
            return (this.actionForm == null) ? 0 : this.actionForm.size();
        }

        public java.util.Iterator<com.moseeker.thrift.gen.company.struct.ActionForm> getActionFormIterator() {
            return (this.actionForm == null) ? null : this.actionForm.iterator();
        }

        public void addToActionForm(com.moseeker.thrift.gen.company.struct.ActionForm elem) {
            if (this.actionForm == null) {
                this.actionForm = new java.util.ArrayList<com.moseeker.thrift.gen.company.struct.ActionForm>();
            }
            this.actionForm.add(elem);
        }

        public java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> getActionForm() {
            return this.actionForm;
        }

        public updateProfileFilter_args setActionForm(java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm> actionForm) {
            this.actionForm = actionForm;
            return this;
        }

        public void unsetActionForm() {
            this.actionForm = null;
        }

        /** Returns true if field actionForm is set (has been assigned a value) and false otherwise */
        public boolean isSetActionForm() {
            return this.actionForm != null;
        }

        public void setActionFormIsSet(boolean value) {
            if (!value) {
                this.actionForm = null;
            }
        }

        public int getPositionIdListSize() {
            return (this.positionIdList == null) ? 0 : this.positionIdList.size();
        }

        public java.util.Iterator<java.lang.Integer> getPositionIdListIterator() {
            return (this.positionIdList == null) ? null : this.positionIdList.iterator();
        }

        public void addToPositionIdList(int elem) {
            if (this.positionIdList == null) {
                this.positionIdList = new java.util.ArrayList<java.lang.Integer>();
            }
            this.positionIdList.add(elem);
        }

        public java.util.List<java.lang.Integer> getPositionIdList() {
            return this.positionIdList;
        }

        public updateProfileFilter_args setPositionIdList(java.util.List<java.lang.Integer> positionIdList) {
            this.positionIdList = positionIdList;
            return this;
        }

        public void unsetPositionIdList() {
            this.positionIdList = null;
        }

        /** Returns true if field positionIdList is set (has been assigned a value) and false otherwise */
        public boolean isSetPositionIdList() {
            return this.positionIdList != null;
        }

        public void setPositionIdListIsSet(boolean value) {
            if (!value) {
                this.positionIdList = null;
            }
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public updateProfileFilter_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getPosition_total() {
            return this.position_total;
        }

        public updateProfileFilter_args setPosition_total(int position_total) {
            this.position_total = position_total;
            setPosition_totalIsSet(true);
            return this;
        }

        public void unsetPosition_total() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITION_TOTAL_ISSET_ID);
        }

        /** Returns true if field position_total is set (has been assigned a value) and false otherwise */
        public boolean isSetPosition_total() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITION_TOTAL_ISSET_ID);
        }

        public void setPosition_totalIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITION_TOTAL_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case COMPANY_TAG_DO:
                    if (value == null) {
                        unsetCompanyTagDO();
                    } else {
                        setCompanyTagDO((com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO)value);
                    }
                    break;

                case ACTION_FORM:
                    if (value == null) {
                        unsetActionForm();
                    } else {
                        setActionForm((java.util.List<com.moseeker.thrift.gen.company.struct.ActionForm>)value);
                    }
                    break;

                case POSITION_ID_LIST:
                    if (value == null) {
                        unsetPositionIdList();
                    } else {
                        setPositionIdList((java.util.List<java.lang.Integer>)value);
                    }
                    break;

                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case POSITION_TOTAL:
                    if (value == null) {
                        unsetPosition_total();
                    } else {
                        setPosition_total((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_TAG_DO:
                    return getCompanyTagDO();

                case ACTION_FORM:
                    return getActionForm();

                case POSITION_ID_LIST:
                    return getPositionIdList();

                case HR_ID:
                    return getHr_id();

                case POSITION_TOTAL:
                    return getPosition_total();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_TAG_DO:
                    return isSetCompanyTagDO();
                case ACTION_FORM:
                    return isSetActionForm();
                case POSITION_ID_LIST:
                    return isSetPositionIdList();
                case HR_ID:
                    return isSetHr_id();
                case POSITION_TOTAL:
                    return isSetPosition_total();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updateProfileFilter_args)
                return this.equals((updateProfileFilter_args)that);
            return false;
        }

        public boolean equals(updateProfileFilter_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyTagDO = true && this.isSetCompanyTagDO();
            boolean that_present_companyTagDO = true && that.isSetCompanyTagDO();
            if (this_present_companyTagDO || that_present_companyTagDO) {
                if (!(this_present_companyTagDO && that_present_companyTagDO))
                    return false;
                if (!this.companyTagDO.equals(that.companyTagDO))
                    return false;
            }

            boolean this_present_actionForm = true && this.isSetActionForm();
            boolean that_present_actionForm = true && that.isSetActionForm();
            if (this_present_actionForm || that_present_actionForm) {
                if (!(this_present_actionForm && that_present_actionForm))
                    return false;
                if (!this.actionForm.equals(that.actionForm))
                    return false;
            }

            boolean this_present_positionIdList = true && this.isSetPositionIdList();
            boolean that_present_positionIdList = true && that.isSetPositionIdList();
            if (this_present_positionIdList || that_present_positionIdList) {
                if (!(this_present_positionIdList && that_present_positionIdList))
                    return false;
                if (!this.positionIdList.equals(that.positionIdList))
                    return false;
            }

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_position_total = true;
            boolean that_present_position_total = true;
            if (this_present_position_total || that_present_position_total) {
                if (!(this_present_position_total && that_present_position_total))
                    return false;
                if (this.position_total != that.position_total)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCompanyTagDO()) ? 131071 : 524287);
            if (isSetCompanyTagDO())
                hashCode = hashCode * 8191 + companyTagDO.hashCode();

            hashCode = hashCode * 8191 + ((isSetActionForm()) ? 131071 : 524287);
            if (isSetActionForm())
                hashCode = hashCode * 8191 + actionForm.hashCode();

            hashCode = hashCode * 8191 + ((isSetPositionIdList()) ? 131071 : 524287);
            if (isSetPositionIdList())
                hashCode = hashCode * 8191 + positionIdList.hashCode();

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + position_total;

            return hashCode;
        }

        @Override
        public int compareTo(updateProfileFilter_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyTagDO()).compareTo(other.isSetCompanyTagDO());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyTagDO()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyTagDO, other.companyTagDO);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetActionForm()).compareTo(other.isSetActionForm());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetActionForm()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionForm, other.actionForm);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPositionIdList()).compareTo(other.isSetPositionIdList());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPositionIdList()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionIdList, other.positionIdList);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPosition_total()).compareTo(other.isSetPosition_total());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPosition_total()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position_total, other.position_total);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updateProfileFilter_args(");
            boolean first = true;

            sb.append("companyTagDO:");
            if (this.companyTagDO == null) {
                sb.append("null");
            } else {
                sb.append(this.companyTagDO);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("actionForm:");
            if (this.actionForm == null) {
                sb.append("null");
            } else {
                sb.append(this.actionForm);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("positionIdList:");
            if (this.positionIdList == null) {
                sb.append("null");
            } else {
                sb.append(this.positionIdList);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("position_total:");
            sb.append(this.position_total);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (companyTagDO != null) {
                companyTagDO.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updateProfileFilter_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateProfileFilter_argsStandardScheme getScheme() {
                return new updateProfileFilter_argsStandardScheme();
            }
        }

        private static class updateProfileFilter_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateProfileFilter_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateProfileFilter_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_TAG_DO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.companyTagDO = new com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO();
                                struct.companyTagDO.read(iprot);
                                struct.setCompanyTagDOIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // ACTION_FORM
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list192 = iprot.readListBegin();
                                    struct.actionForm = new java.util.ArrayList<com.moseeker.thrift.gen.company.struct.ActionForm>(_list192.size);
                                    com.moseeker.thrift.gen.company.struct.ActionForm _elem193;
                                    for (int _i194 = 0; _i194 < _list192.size; ++_i194)
                                    {
                                        _elem193 = new com.moseeker.thrift.gen.company.struct.ActionForm();
                                        _elem193.read(iprot);
                                        struct.actionForm.add(_elem193);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setActionFormIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // POSITION_ID_LIST
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list195 = iprot.readListBegin();
                                    struct.positionIdList = new java.util.ArrayList<java.lang.Integer>(_list195.size);
                                    int _elem196;
                                    for (int _i197 = 0; _i197 < _list195.size; ++_i197)
                                    {
                                        _elem196 = iprot.readI32();
                                        struct.positionIdList.add(_elem196);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setPositionIdListIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 5: // POSITION_TOTAL
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.position_total = iprot.readI32();
                                struct.setPosition_totalIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateProfileFilter_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.companyTagDO != null) {
                    oprot.writeFieldBegin(COMPANY_TAG_DO_FIELD_DESC);
                    struct.companyTagDO.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.actionForm != null) {
                    oprot.writeFieldBegin(ACTION_FORM_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.actionForm.size()));
                        for (com.moseeker.thrift.gen.company.struct.ActionForm _iter198 : struct.actionForm)
                        {
                            _iter198.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.positionIdList != null) {
                    oprot.writeFieldBegin(POSITION_ID_LIST_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.positionIdList.size()));
                        for (int _iter199 : struct.positionIdList)
                        {
                            oprot.writeI32(_iter199);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(POSITION_TOTAL_FIELD_DESC);
                oprot.writeI32(struct.position_total);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateProfileFilter_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateProfileFilter_argsTupleScheme getScheme() {
                return new updateProfileFilter_argsTupleScheme();
            }
        }

        private static class updateProfileFilter_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateProfileFilter_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateProfileFilter_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyTagDO()) {
                    optionals.set(0);
                }
                if (struct.isSetActionForm()) {
                    optionals.set(1);
                }
                if (struct.isSetPositionIdList()) {
                    optionals.set(2);
                }
                if (struct.isSetHr_id()) {
                    optionals.set(3);
                }
                if (struct.isSetPosition_total()) {
                    optionals.set(4);
                }
                oprot.writeBitSet(optionals, 5);
                if (struct.isSetCompanyTagDO()) {
                    struct.companyTagDO.write(oprot);
                }
                if (struct.isSetActionForm()) {
                    {
                        oprot.writeI32(struct.actionForm.size());
                        for (com.moseeker.thrift.gen.company.struct.ActionForm _iter200 : struct.actionForm)
                        {
                            _iter200.write(oprot);
                        }
                    }
                }
                if (struct.isSetPositionIdList()) {
                    {
                        oprot.writeI32(struct.positionIdList.size());
                        for (int _iter201 : struct.positionIdList)
                        {
                            oprot.writeI32(_iter201);
                        }
                    }
                }
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetPosition_total()) {
                    oprot.writeI32(struct.position_total);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateProfileFilter_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(5);
                if (incoming.get(0)) {
                    struct.companyTagDO = new com.moseeker.thrift.gen.company.struct.TalentpoolCompanyTagDO();
                    struct.companyTagDO.read(iprot);
                    struct.setCompanyTagDOIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TList _list202 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.actionForm = new java.util.ArrayList<com.moseeker.thrift.gen.company.struct.ActionForm>(_list202.size);
                        com.moseeker.thrift.gen.company.struct.ActionForm _elem203;
                        for (int _i204 = 0; _i204 < _list202.size; ++_i204)
                        {
                            _elem203 = new com.moseeker.thrift.gen.company.struct.ActionForm();
                            _elem203.read(iprot);
                            struct.actionForm.add(_elem203);
                        }
                    }
                    struct.setActionFormIsSet(true);
                }
                if (incoming.get(2)) {
                    {
                        org.apache.thrift.protocol.TList _list205 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.positionIdList = new java.util.ArrayList<java.lang.Integer>(_list205.size);
                        int _elem206;
                        for (int _i207 = 0; _i207 < _list205.size; ++_i207)
                        {
                            _elem206 = iprot.readI32();
                            struct.positionIdList.add(_elem206);
                        }
                    }
                    struct.setPositionIdListIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(4)) {
                    struct.position_total = iprot.readI32();
                    struct.setPosition_totalIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updateProfileFilter_result implements org.apache.thrift.TBase<updateProfileFilter_result, updateProfileFilter_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateProfileFilter_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProfileFilter_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateProfileFilter_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateProfileFilter_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProfileFilter_result.class, metaDataMap);
        }

        public updateProfileFilter_result() {
        }

        public updateProfileFilter_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateProfileFilter_result(updateProfileFilter_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public updateProfileFilter_result deepCopy() {
            return new updateProfileFilter_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public updateProfileFilter_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public updateProfileFilter_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updateProfileFilter_result)
                return this.equals((updateProfileFilter_result)that);
            return false;
        }

        public boolean equals(updateProfileFilter_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(updateProfileFilter_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updateProfileFilter_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updateProfileFilter_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateProfileFilter_resultStandardScheme getScheme() {
                return new updateProfileFilter_resultStandardScheme();
            }
        }

        private static class updateProfileFilter_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateProfileFilter_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateProfileFilter_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateProfileFilter_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateProfileFilter_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateProfileFilter_resultTupleScheme getScheme() {
                return new updateProfileFilter_resultTupleScheme();
            }
        }

        private static class updateProfileFilter_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateProfileFilter_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateProfileFilter_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateProfileFilter_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class handlerCompanyTagAndProfile_args implements org.apache.thrift.TBase<handlerCompanyTagAndProfile_args, handlerCompanyTagAndProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<handlerCompanyTagAndProfile_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("handlerCompanyTagAndProfile_args");

        private static final org.apache.thrift.protocol.TField USERID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("userid_list", org.apache.thrift.protocol.TType.SET, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new handlerCompanyTagAndProfile_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new handlerCompanyTagAndProfile_argsTupleSchemeFactory();

        public java.util.Set<java.lang.Integer> userid_list; // required
        public int company_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USERID_LIST((short)1, "userid_list"),
            COMPANY_ID((short)2, "company_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // USERID_LIST
                        return USERID_LIST;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __COMPANY_ID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USERID_LIST, new org.apache.thrift.meta_data.FieldMetaData("userid_list", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(handlerCompanyTagAndProfile_args.class, metaDataMap);
        }

        public handlerCompanyTagAndProfile_args() {
        }

        public handlerCompanyTagAndProfile_args(
                java.util.Set<java.lang.Integer> userid_list,
                int company_id)
        {
            this();
            this.userid_list = userid_list;
            this.company_id = company_id;
            setCompany_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public handlerCompanyTagAndProfile_args(handlerCompanyTagAndProfile_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetUserid_list()) {
                java.util.Set<java.lang.Integer> __this__userid_list = new java.util.HashSet<java.lang.Integer>(other.userid_list);
                this.userid_list = __this__userid_list;
            }
            this.company_id = other.company_id;
        }

        public handlerCompanyTagAndProfile_args deepCopy() {
            return new handlerCompanyTagAndProfile_args(this);
        }

        @Override
        public void clear() {
            this.userid_list = null;
            setCompany_idIsSet(false);
            this.company_id = 0;
        }

        public int getUserid_listSize() {
            return (this.userid_list == null) ? 0 : this.userid_list.size();
        }

        public java.util.Iterator<java.lang.Integer> getUserid_listIterator() {
            return (this.userid_list == null) ? null : this.userid_list.iterator();
        }

        public void addToUserid_list(int elem) {
            if (this.userid_list == null) {
                this.userid_list = new java.util.HashSet<java.lang.Integer>();
            }
            this.userid_list.add(elem);
        }

        public java.util.Set<java.lang.Integer> getUserid_list() {
            return this.userid_list;
        }

        public handlerCompanyTagAndProfile_args setUserid_list(java.util.Set<java.lang.Integer> userid_list) {
            this.userid_list = userid_list;
            return this;
        }

        public void unsetUserid_list() {
            this.userid_list = null;
        }

        /** Returns true if field userid_list is set (has been assigned a value) and false otherwise */
        public boolean isSetUserid_list() {
            return this.userid_list != null;
        }

        public void setUserid_listIsSet(boolean value) {
            if (!value) {
                this.userid_list = null;
            }
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public handlerCompanyTagAndProfile_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case USERID_LIST:
                    if (value == null) {
                        unsetUserid_list();
                    } else {
                        setUserid_list((java.util.Set<java.lang.Integer>)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case USERID_LIST:
                    return getUserid_list();

                case COMPANY_ID:
                    return getCompany_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case USERID_LIST:
                    return isSetUserid_list();
                case COMPANY_ID:
                    return isSetCompany_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof handlerCompanyTagAndProfile_args)
                return this.equals((handlerCompanyTagAndProfile_args)that);
            return false;
        }

        public boolean equals(handlerCompanyTagAndProfile_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_userid_list = true && this.isSetUserid_list();
            boolean that_present_userid_list = true && that.isSetUserid_list();
            if (this_present_userid_list || that_present_userid_list) {
                if (!(this_present_userid_list && that_present_userid_list))
                    return false;
                if (!this.userid_list.equals(that.userid_list))
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetUserid_list()) ? 131071 : 524287);
            if (isSetUserid_list())
                hashCode = hashCode * 8191 + userid_list.hashCode();

            hashCode = hashCode * 8191 + company_id;

            return hashCode;
        }

        @Override
        public int compareTo(handlerCompanyTagAndProfile_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetUserid_list()).compareTo(other.isSetUserid_list());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserid_list()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid_list, other.userid_list);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("handlerCompanyTagAndProfile_args(");
            boolean first = true;

            sb.append("userid_list:");
            if (this.userid_list == null) {
                sb.append("null");
            } else {
                sb.append(this.userid_list);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class handlerCompanyTagAndProfile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public handlerCompanyTagAndProfile_argsStandardScheme getScheme() {
                return new handlerCompanyTagAndProfile_argsStandardScheme();
            }
        }

        private static class handlerCompanyTagAndProfile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<handlerCompanyTagAndProfile_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, handlerCompanyTagAndProfile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USERID_LIST
                            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                                {
                                    org.apache.thrift.protocol.TSet _set208 = iprot.readSetBegin();
                                    struct.userid_list = new java.util.HashSet<java.lang.Integer>(2*_set208.size);
                                    int _elem209;
                                    for (int _i210 = 0; _i210 < _set208.size; ++_i210)
                                    {
                                        _elem209 = iprot.readI32();
                                        struct.userid_list.add(_elem209);
                                    }
                                    iprot.readSetEnd();
                                }
                                struct.setUserid_listIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, handlerCompanyTagAndProfile_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.userid_list != null) {
                    oprot.writeFieldBegin(USERID_LIST_FIELD_DESC);
                    {
                        oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.userid_list.size()));
                        for (int _iter211 : struct.userid_list)
                        {
                            oprot.writeI32(_iter211);
                        }
                        oprot.writeSetEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class handlerCompanyTagAndProfile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public handlerCompanyTagAndProfile_argsTupleScheme getScheme() {
                return new handlerCompanyTagAndProfile_argsTupleScheme();
            }
        }

        private static class handlerCompanyTagAndProfile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<handlerCompanyTagAndProfile_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, handlerCompanyTagAndProfile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetUserid_list()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetUserid_list()) {
                    {
                        oprot.writeI32(struct.userid_list.size());
                        for (int _iter212 : struct.userid_list)
                        {
                            oprot.writeI32(_iter212);
                        }
                    }
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, handlerCompanyTagAndProfile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TSet _set213 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.userid_list = new java.util.HashSet<java.lang.Integer>(2*_set213.size);
                        int _elem214;
                        for (int _i215 = 0; _i215 < _set213.size; ++_i215)
                        {
                            _elem214 = iprot.readI32();
                            struct.userid_list.add(_elem214);
                        }
                    }
                    struct.setUserid_listIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class handlerCompanyTagAndProfile_result implements org.apache.thrift.TBase<handlerCompanyTagAndProfile_result, handlerCompanyTagAndProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<handlerCompanyTagAndProfile_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("handlerCompanyTagAndProfile_result");

        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new handlerCompanyTagAndProfile_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new handlerCompanyTagAndProfile_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(handlerCompanyTagAndProfile_result.class, metaDataMap);
        }

        public handlerCompanyTagAndProfile_result() {
        }

        public handlerCompanyTagAndProfile_result(
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public handlerCompanyTagAndProfile_result(handlerCompanyTagAndProfile_result other) {
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public handlerCompanyTagAndProfile_result deepCopy() {
            return new handlerCompanyTagAndProfile_result(this);
        }

        @Override
        public void clear() {
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public handlerCompanyTagAndProfile_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof handlerCompanyTagAndProfile_result)
                return this.equals((handlerCompanyTagAndProfile_result)that);
            return false;
        }

        public boolean equals(handlerCompanyTagAndProfile_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(handlerCompanyTagAndProfile_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("handlerCompanyTagAndProfile_result(");
            boolean first = true;

            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class handlerCompanyTagAndProfile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public handlerCompanyTagAndProfile_resultStandardScheme getScheme() {
                return new handlerCompanyTagAndProfile_resultStandardScheme();
            }
        }

        private static class handlerCompanyTagAndProfile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<handlerCompanyTagAndProfile_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, handlerCompanyTagAndProfile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, handlerCompanyTagAndProfile_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class handlerCompanyTagAndProfile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public handlerCompanyTagAndProfile_resultTupleScheme getScheme() {
                return new handlerCompanyTagAndProfile_resultTupleScheme();
            }
        }

        private static class handlerCompanyTagAndProfile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<handlerCompanyTagAndProfile_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, handlerCompanyTagAndProfile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetE()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, handlerCompanyTagAndProfile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getTalentCountByPositionFilter_args implements org.apache.thrift.TBase<getTalentCountByPositionFilter_args, getTalentCountByPositionFilter_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTalentCountByPositionFilter_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTalentCountByPositionFilter_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("position_id", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTalentCountByPositionFilter_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTalentCountByPositionFilter_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int position_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            POSITION_ID((short)3, "position_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // POSITION_ID
                        return POSITION_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __POSITION_ID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("position_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTalentCountByPositionFilter_args.class, metaDataMap);
        }

        public getTalentCountByPositionFilter_args() {
        }

        public getTalentCountByPositionFilter_args(
                int hr_id,
                int company_id,
                int position_id)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.position_id = position_id;
            setPosition_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getTalentCountByPositionFilter_args(getTalentCountByPositionFilter_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.position_id = other.position_id;
        }

        public getTalentCountByPositionFilter_args deepCopy() {
            return new getTalentCountByPositionFilter_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setPosition_idIsSet(false);
            this.position_id = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getTalentCountByPositionFilter_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getTalentCountByPositionFilter_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getPosition_id() {
            return this.position_id;
        }

        public getTalentCountByPositionFilter_args setPosition_id(int position_id) {
            this.position_id = position_id;
            setPosition_idIsSet(true);
            return this;
        }

        public void unsetPosition_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITION_ID_ISSET_ID);
        }

        /** Returns true if field position_id is set (has been assigned a value) and false otherwise */
        public boolean isSetPosition_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITION_ID_ISSET_ID);
        }

        public void setPosition_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITION_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case POSITION_ID:
                    if (value == null) {
                        unsetPosition_id();
                    } else {
                        setPosition_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case POSITION_ID:
                    return getPosition_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case POSITION_ID:
                    return isSetPosition_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getTalentCountByPositionFilter_args)
                return this.equals((getTalentCountByPositionFilter_args)that);
            return false;
        }

        public boolean equals(getTalentCountByPositionFilter_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_position_id = true;
            boolean that_present_position_id = true;
            if (this_present_position_id || that_present_position_id) {
                if (!(this_present_position_id && that_present_position_id))
                    return false;
                if (this.position_id != that.position_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + position_id;

            return hashCode;
        }

        @Override
        public int compareTo(getTalentCountByPositionFilter_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPosition_id()).compareTo(other.isSetPosition_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPosition_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position_id, other.position_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getTalentCountByPositionFilter_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("position_id:");
            sb.append(this.position_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getTalentCountByPositionFilter_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentCountByPositionFilter_argsStandardScheme getScheme() {
                return new getTalentCountByPositionFilter_argsStandardScheme();
            }
        }

        private static class getTalentCountByPositionFilter_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTalentCountByPositionFilter_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getTalentCountByPositionFilter_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // POSITION_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.position_id = iprot.readI32();
                                struct.setPosition_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getTalentCountByPositionFilter_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
                oprot.writeI32(struct.position_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getTalentCountByPositionFilter_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentCountByPositionFilter_argsTupleScheme getScheme() {
                return new getTalentCountByPositionFilter_argsTupleScheme();
            }
        }

        private static class getTalentCountByPositionFilter_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTalentCountByPositionFilter_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getTalentCountByPositionFilter_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetPosition_id()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetPosition_id()) {
                    oprot.writeI32(struct.position_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getTalentCountByPositionFilter_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.position_id = iprot.readI32();
                    struct.setPosition_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getTalentCountByPositionFilter_result implements org.apache.thrift.TBase<getTalentCountByPositionFilter_result, getTalentCountByPositionFilter_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTalentCountByPositionFilter_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTalentCountByPositionFilter_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTalentCountByPositionFilter_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTalentCountByPositionFilter_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTalentCountByPositionFilter_result.class, metaDataMap);
        }

        public getTalentCountByPositionFilter_result() {
        }

        public getTalentCountByPositionFilter_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getTalentCountByPositionFilter_result(getTalentCountByPositionFilter_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getTalentCountByPositionFilter_result deepCopy() {
            return new getTalentCountByPositionFilter_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getTalentCountByPositionFilter_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getTalentCountByPositionFilter_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getTalentCountByPositionFilter_result)
                return this.equals((getTalentCountByPositionFilter_result)that);
            return false;
        }

        public boolean equals(getTalentCountByPositionFilter_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getTalentCountByPositionFilter_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getTalentCountByPositionFilter_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getTalentCountByPositionFilter_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentCountByPositionFilter_resultStandardScheme getScheme() {
                return new getTalentCountByPositionFilter_resultStandardScheme();
            }
        }

        private static class getTalentCountByPositionFilter_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTalentCountByPositionFilter_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getTalentCountByPositionFilter_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getTalentCountByPositionFilter_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getTalentCountByPositionFilter_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getTalentCountByPositionFilter_resultTupleScheme getScheme() {
                return new getTalentCountByPositionFilter_resultTupleScheme();
            }
        }

        private static class getTalentCountByPositionFilter_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTalentCountByPositionFilter_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getTalentCountByPositionFilter_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getTalentCountByPositionFilter_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getEmailBalance_args implements org.apache.thrift.TBase<getEmailBalance_args, getEmailBalance_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEmailBalance_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEmailBalance_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getEmailBalance_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getEmailBalance_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEmailBalance_args.class, metaDataMap);
        }

        public getEmailBalance_args() {
        }

        public getEmailBalance_args(
                int hr_id,
                int company_id)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getEmailBalance_args(getEmailBalance_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
        }

        public getEmailBalance_args deepCopy() {
            return new getEmailBalance_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getEmailBalance_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getEmailBalance_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getEmailBalance_args)
                return this.equals((getEmailBalance_args)that);
            return false;
        }

        public boolean equals(getEmailBalance_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            return hashCode;
        }

        @Override
        public int compareTo(getEmailBalance_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getEmailBalance_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getEmailBalance_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getEmailBalance_argsStandardScheme getScheme() {
                return new getEmailBalance_argsStandardScheme();
            }
        }

        private static class getEmailBalance_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getEmailBalance_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getEmailBalance_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getEmailBalance_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getEmailBalance_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getEmailBalance_argsTupleScheme getScheme() {
                return new getEmailBalance_argsTupleScheme();
            }
        }

        private static class getEmailBalance_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getEmailBalance_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getEmailBalance_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getEmailBalance_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getEmailBalance_result implements org.apache.thrift.TBase<getEmailBalance_result, getEmailBalance_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEmailBalance_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEmailBalance_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getEmailBalance_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getEmailBalance_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEmailBalance_result.class, metaDataMap);
        }

        public getEmailBalance_result() {
        }

        public getEmailBalance_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getEmailBalance_result(getEmailBalance_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getEmailBalance_result deepCopy() {
            return new getEmailBalance_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getEmailBalance_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getEmailBalance_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getEmailBalance_result)
                return this.equals((getEmailBalance_result)that);
            return false;
        }

        public boolean equals(getEmailBalance_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getEmailBalance_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getEmailBalance_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getEmailBalance_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getEmailBalance_resultStandardScheme getScheme() {
                return new getEmailBalance_resultStandardScheme();
            }
        }

        private static class getEmailBalance_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getEmailBalance_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getEmailBalance_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getEmailBalance_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getEmailBalance_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getEmailBalance_resultTupleScheme getScheme() {
                return new getEmailBalance_resultTupleScheme();
            }
        }

        private static class getEmailBalance_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getEmailBalance_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getEmailBalance_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getEmailBalance_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getEmailTemplateList_args implements org.apache.thrift.TBase<getEmailTemplateList_args, getEmailTemplateList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEmailTemplateList_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEmailTemplateList_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getEmailTemplateList_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getEmailTemplateList_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEmailTemplateList_args.class, metaDataMap);
        }

        public getEmailTemplateList_args() {
        }

        public getEmailTemplateList_args(
                int hr_id,
                int company_id)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getEmailTemplateList_args(getEmailTemplateList_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
        }

        public getEmailTemplateList_args deepCopy() {
            return new getEmailTemplateList_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getEmailTemplateList_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getEmailTemplateList_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getEmailTemplateList_args)
                return this.equals((getEmailTemplateList_args)that);
            return false;
        }

        public boolean equals(getEmailTemplateList_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            return hashCode;
        }

        @Override
        public int compareTo(getEmailTemplateList_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getEmailTemplateList_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getEmailTemplateList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getEmailTemplateList_argsStandardScheme getScheme() {
                return new getEmailTemplateList_argsStandardScheme();
            }
        }

        private static class getEmailTemplateList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getEmailTemplateList_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getEmailTemplateList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getEmailTemplateList_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getEmailTemplateList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getEmailTemplateList_argsTupleScheme getScheme() {
                return new getEmailTemplateList_argsTupleScheme();
            }
        }

        private static class getEmailTemplateList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getEmailTemplateList_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getEmailTemplateList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getEmailTemplateList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getEmailTemplateList_result implements org.apache.thrift.TBase<getEmailTemplateList_result, getEmailTemplateList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEmailTemplateList_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEmailTemplateList_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getEmailTemplateList_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getEmailTemplateList_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEmailTemplateList_result.class, metaDataMap);
        }

        public getEmailTemplateList_result() {
        }

        public getEmailTemplateList_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getEmailTemplateList_result(getEmailTemplateList_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getEmailTemplateList_result deepCopy() {
            return new getEmailTemplateList_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getEmailTemplateList_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getEmailTemplateList_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getEmailTemplateList_result)
                return this.equals((getEmailTemplateList_result)that);
            return false;
        }

        public boolean equals(getEmailTemplateList_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getEmailTemplateList_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getEmailTemplateList_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getEmailTemplateList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getEmailTemplateList_resultStandardScheme getScheme() {
                return new getEmailTemplateList_resultStandardScheme();
            }
        }

        private static class getEmailTemplateList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getEmailTemplateList_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getEmailTemplateList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getEmailTemplateList_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getEmailTemplateList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getEmailTemplateList_resultTupleScheme getScheme() {
                return new getEmailTemplateList_resultTupleScheme();
            }
        }

        private static class getEmailTemplateList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getEmailTemplateList_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getEmailTemplateList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getEmailTemplateList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getEmailInfo_args implements org.apache.thrift.TBase<getEmailInfo_args, getEmailInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEmailInfo_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEmailInfo_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getEmailInfo_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getEmailInfo_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int type; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            TYPE((short)3, "type");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // TYPE
                        return TYPE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __TYPE_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEmailInfo_args.class, metaDataMap);
        }

        public getEmailInfo_args() {
        }

        public getEmailInfo_args(
                int hr_id,
                int company_id,
                int type)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.type = type;
            setTypeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getEmailInfo_args(getEmailInfo_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.type = other.type;
        }

        public getEmailInfo_args deepCopy() {
            return new getEmailInfo_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setTypeIsSet(false);
            this.type = 0;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public getEmailInfo_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public getEmailInfo_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getType() {
            return this.type;
        }

        public getEmailInfo_args setType(int type) {
            this.type = type;
            setTypeIsSet(true);
            return this;
        }

        public void unsetType() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        /** Returns true if field type is set (has been assigned a value) and false otherwise */
        public boolean isSetType() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        public void setTypeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case TYPE:
                    if (value == null) {
                        unsetType();
                    } else {
                        setType((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case TYPE:
                    return getType();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case TYPE:
                    return isSetType();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getEmailInfo_args)
                return this.equals((getEmailInfo_args)that);
            return false;
        }

        public boolean equals(getEmailInfo_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_type = true;
            boolean that_present_type = true;
            if (this_present_type || that_present_type) {
                if (!(this_present_type && that_present_type))
                    return false;
                if (this.type != that.type)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + type;

            return hashCode;
        }

        @Override
        public int compareTo(getEmailInfo_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetType()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getEmailInfo_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("type:");
            sb.append(this.type);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getEmailInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getEmailInfo_argsStandardScheme getScheme() {
                return new getEmailInfo_argsStandardScheme();
            }
        }

        private static class getEmailInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getEmailInfo_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getEmailInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // TYPE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.type = iprot.readI32();
                                struct.setTypeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getEmailInfo_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(TYPE_FIELD_DESC);
                oprot.writeI32(struct.type);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getEmailInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getEmailInfo_argsTupleScheme getScheme() {
                return new getEmailInfo_argsTupleScheme();
            }
        }

        private static class getEmailInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getEmailInfo_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getEmailInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetType()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetType()) {
                    oprot.writeI32(struct.type);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getEmailInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.type = iprot.readI32();
                    struct.setTypeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getEmailInfo_result implements org.apache.thrift.TBase<getEmailInfo_result, getEmailInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEmailInfo_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEmailInfo_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getEmailInfo_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getEmailInfo_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEmailInfo_result.class, metaDataMap);
        }

        public getEmailInfo_result() {
        }

        public getEmailInfo_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getEmailInfo_result(getEmailInfo_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getEmailInfo_result deepCopy() {
            return new getEmailInfo_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getEmailInfo_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getEmailInfo_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getEmailInfo_result)
                return this.equals((getEmailInfo_result)that);
            return false;
        }

        public boolean equals(getEmailInfo_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getEmailInfo_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getEmailInfo_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getEmailInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getEmailInfo_resultStandardScheme getScheme() {
                return new getEmailInfo_resultStandardScheme();
            }
        }

        private static class getEmailInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getEmailInfo_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getEmailInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getEmailInfo_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getEmailInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getEmailInfo_resultTupleScheme getScheme() {
                return new getEmailInfo_resultTupleScheme();
            }
        }

        private static class getEmailInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getEmailInfo_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getEmailInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getEmailInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updateCompanyEmailInfo_args implements org.apache.thrift.TBase<updateCompanyEmailInfo_args, updateCompanyEmailInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateCompanyEmailInfo_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCompanyEmailInfo_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hr_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField DISABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("disable", org.apache.thrift.protocol.TType.I32, (short)4);
        private static final org.apache.thrift.protocol.TField CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("context", org.apache.thrift.protocol.TType.STRING, (short)5);
        private static final org.apache.thrift.protocol.TField INSCRIBE_FIELD_DESC = new org.apache.thrift.protocol.TField("inscribe", org.apache.thrift.protocol.TType.STRING, (short)6);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateCompanyEmailInfo_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateCompanyEmailInfo_argsTupleSchemeFactory();

        public int hr_id; // required
        public int company_id; // required
        public int type; // required
        public int disable; // required
        public java.lang.String context; // required
        public java.lang.String inscribe; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hr_id"),
            COMPANY_ID((short)2, "company_id"),
            TYPE((short)3, "type"),
            DISABLE((short)4, "disable"),
            CONTEXT((short)5, "context"),
            INSCRIBE((short)6, "inscribe");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // COMPANY_ID
                        return COMPANY_ID;
                    case 3: // TYPE
                        return TYPE;
                    case 4: // DISABLE
                        return DISABLE;
                    case 5: // CONTEXT
                        return CONTEXT;
                    case 6: // INSCRIBE
                        return INSCRIBE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HR_ID_ISSET_ID = 0;
        private static final int __COMPANY_ID_ISSET_ID = 1;
        private static final int __TYPE_ISSET_ID = 2;
        private static final int __DISABLE_ISSET_ID = 3;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hr_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.DISABLE, new org.apache.thrift.meta_data.FieldMetaData("disable", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("context", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.INSCRIBE, new org.apache.thrift.meta_data.FieldMetaData("inscribe", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCompanyEmailInfo_args.class, metaDataMap);
        }

        public updateCompanyEmailInfo_args() {
        }

        public updateCompanyEmailInfo_args(
                int hr_id,
                int company_id,
                int type,
                int disable,
                java.lang.String context,
                java.lang.String inscribe)
        {
            this();
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.type = type;
            setTypeIsSet(true);
            this.disable = disable;
            setDisableIsSet(true);
            this.context = context;
            this.inscribe = inscribe;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateCompanyEmailInfo_args(updateCompanyEmailInfo_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hr_id = other.hr_id;
            this.company_id = other.company_id;
            this.type = other.type;
            this.disable = other.disable;
            if (other.isSetContext()) {
                this.context = other.context;
            }
            if (other.isSetInscribe()) {
                this.inscribe = other.inscribe;
            }
        }

        public updateCompanyEmailInfo_args deepCopy() {
            return new updateCompanyEmailInfo_args(this);
        }

        @Override
        public void clear() {
            setHr_idIsSet(false);
            this.hr_id = 0;
            setCompany_idIsSet(false);
            this.company_id = 0;
            setTypeIsSet(false);
            this.type = 0;
            setDisableIsSet(false);
            this.disable = 0;
            this.context = null;
            this.inscribe = null;
        }

        public int getHr_id() {
            return this.hr_id;
        }

        public updateCompanyEmailInfo_args setHr_id(int hr_id) {
            this.hr_id = hr_id;
            setHr_idIsSet(true);
            return this;
        }

        public void unsetHr_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        /** Returns true if field hr_id is set (has been assigned a value) and false otherwise */
        public boolean isSetHr_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HR_ID_ISSET_ID);
        }

        public void setHr_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HR_ID_ISSET_ID, value);
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public updateCompanyEmailInfo_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getType() {
            return this.type;
        }

        public updateCompanyEmailInfo_args setType(int type) {
            this.type = type;
            setTypeIsSet(true);
            return this;
        }

        public void unsetType() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        /** Returns true if field type is set (has been assigned a value) and false otherwise */
        public boolean isSetType() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        public void setTypeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
        }

        public int getDisable() {
            return this.disable;
        }

        public updateCompanyEmailInfo_args setDisable(int disable) {
            this.disable = disable;
            setDisableIsSet(true);
            return this;
        }

        public void unsetDisable() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISABLE_ISSET_ID);
        }

        /** Returns true if field disable is set (has been assigned a value) and false otherwise */
        public boolean isSetDisable() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISABLE_ISSET_ID);
        }

        public void setDisableIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISABLE_ISSET_ID, value);
        }

        public java.lang.String getContext() {
            return this.context;
        }

        public updateCompanyEmailInfo_args setContext(java.lang.String context) {
            this.context = context;
            return this;
        }

        public void unsetContext() {
            this.context = null;
        }

        /** Returns true if field context is set (has been assigned a value) and false otherwise */
        public boolean isSetContext() {
            return this.context != null;
        }

        public void setContextIsSet(boolean value) {
            if (!value) {
                this.context = null;
            }
        }

        public java.lang.String getInscribe() {
            return this.inscribe;
        }

        public updateCompanyEmailInfo_args setInscribe(java.lang.String inscribe) {
            this.inscribe = inscribe;
            return this;
        }

        public void unsetInscribe() {
            this.inscribe = null;
        }

        /** Returns true if field inscribe is set (has been assigned a value) and false otherwise */
        public boolean isSetInscribe() {
            return this.inscribe != null;
        }

        public void setInscribeIsSet(boolean value) {
            if (!value) {
                this.inscribe = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHr_id();
                    } else {
                        setHr_id((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case TYPE:
                    if (value == null) {
                        unsetType();
                    } else {
                        setType((java.lang.Integer)value);
                    }
                    break;

                case DISABLE:
                    if (value == null) {
                        unsetDisable();
                    } else {
                        setDisable((java.lang.Integer)value);
                    }
                    break;

                case CONTEXT:
                    if (value == null) {
                        unsetContext();
                    } else {
                        setContext((java.lang.String)value);
                    }
                    break;

                case INSCRIBE:
                    if (value == null) {
                        unsetInscribe();
                    } else {
                        setInscribe((java.lang.String)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHr_id();

                case COMPANY_ID:
                    return getCompany_id();

                case TYPE:
                    return getType();

                case DISABLE:
                    return getDisable();

                case CONTEXT:
                    return getContext();

                case INSCRIBE:
                    return getInscribe();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHr_id();
                case COMPANY_ID:
                    return isSetCompany_id();
                case TYPE:
                    return isSetType();
                case DISABLE:
                    return isSetDisable();
                case CONTEXT:
                    return isSetContext();
                case INSCRIBE:
                    return isSetInscribe();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updateCompanyEmailInfo_args)
                return this.equals((updateCompanyEmailInfo_args)that);
            return false;
        }

        public boolean equals(updateCompanyEmailInfo_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hr_id = true;
            boolean that_present_hr_id = true;
            if (this_present_hr_id || that_present_hr_id) {
                if (!(this_present_hr_id && that_present_hr_id))
                    return false;
                if (this.hr_id != that.hr_id)
                    return false;
            }

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_type = true;
            boolean that_present_type = true;
            if (this_present_type || that_present_type) {
                if (!(this_present_type && that_present_type))
                    return false;
                if (this.type != that.type)
                    return false;
            }

            boolean this_present_disable = true;
            boolean that_present_disable = true;
            if (this_present_disable || that_present_disable) {
                if (!(this_present_disable && that_present_disable))
                    return false;
                if (this.disable != that.disable)
                    return false;
            }

            boolean this_present_context = true && this.isSetContext();
            boolean that_present_context = true && that.isSetContext();
            if (this_present_context || that_present_context) {
                if (!(this_present_context && that_present_context))
                    return false;
                if (!this.context.equals(that.context))
                    return false;
            }

            boolean this_present_inscribe = true && this.isSetInscribe();
            boolean that_present_inscribe = true && that.isSetInscribe();
            if (this_present_inscribe || that_present_inscribe) {
                if (!(this_present_inscribe && that_present_inscribe))
                    return false;
                if (!this.inscribe.equals(that.inscribe))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hr_id;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + type;

            hashCode = hashCode * 8191 + disable;

            hashCode = hashCode * 8191 + ((isSetContext()) ? 131071 : 524287);
            if (isSetContext())
                hashCode = hashCode * 8191 + context.hashCode();

            hashCode = hashCode * 8191 + ((isSetInscribe()) ? 131071 : 524287);
            if (isSetInscribe())
                hashCode = hashCode * 8191 + inscribe.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(updateCompanyEmailInfo_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHr_id()).compareTo(other.isSetHr_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHr_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr_id, other.hr_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetType()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetDisable()).compareTo(other.isSetDisable());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDisable()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable, other.disable);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetContext()).compareTo(other.isSetContext());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetContext()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.context, other.context);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetInscribe()).compareTo(other.isSetInscribe());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetInscribe()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inscribe, other.inscribe);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updateCompanyEmailInfo_args(");
            boolean first = true;

            sb.append("hr_id:");
            sb.append(this.hr_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("type:");
            sb.append(this.type);
            first = false;
            if (!first) sb.append(", ");
            sb.append("disable:");
            sb.append(this.disable);
            first = false;
            if (!first) sb.append(", ");
            sb.append("context:");
            if (this.context == null) {
                sb.append("null");
            } else {
                sb.append(this.context);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("inscribe:");
            if (this.inscribe == null) {
                sb.append("null");
            } else {
                sb.append(this.inscribe);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updateCompanyEmailInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateCompanyEmailInfo_argsStandardScheme getScheme() {
                return new updateCompanyEmailInfo_argsStandardScheme();
            }
        }

        private static class updateCompanyEmailInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateCompanyEmailInfo_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateCompanyEmailInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hr_id = iprot.readI32();
                                struct.setHr_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // TYPE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.type = iprot.readI32();
                                struct.setTypeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // DISABLE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.disable = iprot.readI32();
                                struct.setDisableIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 5: // CONTEXT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.context = iprot.readString();
                                struct.setContextIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 6: // INSCRIBE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.inscribe = iprot.readString();
                                struct.setInscribeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateCompanyEmailInfo_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hr_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(TYPE_FIELD_DESC);
                oprot.writeI32(struct.type);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(DISABLE_FIELD_DESC);
                oprot.writeI32(struct.disable);
                oprot.writeFieldEnd();
                if (struct.context != null) {
                    oprot.writeFieldBegin(CONTEXT_FIELD_DESC);
                    oprot.writeString(struct.context);
                    oprot.writeFieldEnd();
                }
                if (struct.inscribe != null) {
                    oprot.writeFieldBegin(INSCRIBE_FIELD_DESC);
                    oprot.writeString(struct.inscribe);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateCompanyEmailInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateCompanyEmailInfo_argsTupleScheme getScheme() {
                return new updateCompanyEmailInfo_argsTupleScheme();
            }
        }

        private static class updateCompanyEmailInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateCompanyEmailInfo_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateCompanyEmailInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHr_id()) {
                    optionals.set(0);
                }
                if (struct.isSetCompany_id()) {
                    optionals.set(1);
                }
                if (struct.isSetType()) {
                    optionals.set(2);
                }
                if (struct.isSetDisable()) {
                    optionals.set(3);
                }
                if (struct.isSetContext()) {
                    optionals.set(4);
                }
                if (struct.isSetInscribe()) {
                    optionals.set(5);
                }
                oprot.writeBitSet(optionals, 6);
                if (struct.isSetHr_id()) {
                    oprot.writeI32(struct.hr_id);
                }
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetType()) {
                    oprot.writeI32(struct.type);
                }
                if (struct.isSetDisable()) {
                    oprot.writeI32(struct.disable);
                }
                if (struct.isSetContext()) {
                    oprot.writeString(struct.context);
                }
                if (struct.isSetInscribe()) {
                    oprot.writeString(struct.inscribe);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateCompanyEmailInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(6);
                if (incoming.get(0)) {
                    struct.hr_id = iprot.readI32();
                    struct.setHr_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.type = iprot.readI32();
                    struct.setTypeIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.disable = iprot.readI32();
                    struct.setDisableIsSet(true);
                }
                if (incoming.get(4)) {
                    struct.context = iprot.readString();
                    struct.setContextIsSet(true);
                }
                if (incoming.get(5)) {
                    struct.inscribe = iprot.readString();
                    struct.setInscribeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updateCompanyEmailInfo_result implements org.apache.thrift.TBase<updateCompanyEmailInfo_result, updateCompanyEmailInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateCompanyEmailInfo_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCompanyEmailInfo_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateCompanyEmailInfo_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateCompanyEmailInfo_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCompanyEmailInfo_result.class, metaDataMap);
        }

        public updateCompanyEmailInfo_result() {
        }

        public updateCompanyEmailInfo_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateCompanyEmailInfo_result(updateCompanyEmailInfo_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public updateCompanyEmailInfo_result deepCopy() {
            return new updateCompanyEmailInfo_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public updateCompanyEmailInfo_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public updateCompanyEmailInfo_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updateCompanyEmailInfo_result)
                return this.equals((updateCompanyEmailInfo_result)that);
            return false;
        }

        public boolean equals(updateCompanyEmailInfo_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(updateCompanyEmailInfo_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updateCompanyEmailInfo_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updateCompanyEmailInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateCompanyEmailInfo_resultStandardScheme getScheme() {
                return new updateCompanyEmailInfo_resultStandardScheme();
            }
        }

        private static class updateCompanyEmailInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateCompanyEmailInfo_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateCompanyEmailInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateCompanyEmailInfo_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateCompanyEmailInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateCompanyEmailInfo_resultTupleScheme getScheme() {
                return new updateCompanyEmailInfo_resultTupleScheme();
            }
        }

        private static class updateCompanyEmailInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateCompanyEmailInfo_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateCompanyEmailInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateCompanyEmailInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class fetchEmailAccounts_args implements org.apache.thrift.TBase<fetchEmailAccounts_args, fetchEmailAccounts_args._Fields>, java.io.Serializable, Cloneable, Comparable<fetchEmailAccounts_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchEmailAccounts_args");

        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField COMPANY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("companyName", org.apache.thrift.protocol.TType.STRING, (short)2);
        private static final org.apache.thrift.protocol.TField PAGE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNumber", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetchEmailAccounts_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetchEmailAccounts_argsTupleSchemeFactory();

        public int companyId; // required
        public java.lang.String companyName; // required
        public int pageNumber; // required
        public int pageSize; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_ID((short)1, "companyId"),
            COMPANY_NAME((short)2, "companyName"),
            PAGE_NUMBER((short)3, "pageNumber"),
            PAGE_SIZE((short)4, "pageSize");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // COMPANY_ID
                        return COMPANY_ID;
                    case 2: // COMPANY_NAME
                        return COMPANY_NAME;
                    case 3: // PAGE_NUMBER
                        return PAGE_NUMBER;
                    case 4: // PAGE_SIZE
                        return PAGE_SIZE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __COMPANYID_ISSET_ID = 0;
        private static final int __PAGENUMBER_ISSET_ID = 1;
        private static final int __PAGESIZE_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_NAME, new org.apache.thrift.meta_data.FieldMetaData("companyName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PAGE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("pageNumber", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchEmailAccounts_args.class, metaDataMap);
        }

        public fetchEmailAccounts_args() {
        }

        public fetchEmailAccounts_args(
                int companyId,
                java.lang.String companyName,
                int pageNumber,
                int pageSize)
        {
            this();
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            this.companyName = companyName;
            this.pageNumber = pageNumber;
            setPageNumberIsSet(true);
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public fetchEmailAccounts_args(fetchEmailAccounts_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.companyId = other.companyId;
            if (other.isSetCompanyName()) {
                this.companyName = other.companyName;
            }
            this.pageNumber = other.pageNumber;
            this.pageSize = other.pageSize;
        }

        public fetchEmailAccounts_args deepCopy() {
            return new fetchEmailAccounts_args(this);
        }

        @Override
        public void clear() {
            setCompanyIdIsSet(false);
            this.companyId = 0;
            this.companyName = null;
            setPageNumberIsSet(false);
            this.pageNumber = 0;
            setPageSizeIsSet(false);
            this.pageSize = 0;
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public fetchEmailAccounts_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public java.lang.String getCompanyName() {
            return this.companyName;
        }

        public fetchEmailAccounts_args setCompanyName(java.lang.String companyName) {
            this.companyName = companyName;
            return this;
        }

        public void unsetCompanyName() {
            this.companyName = null;
        }

        /** Returns true if field companyName is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyName() {
            return this.companyName != null;
        }

        public void setCompanyNameIsSet(boolean value) {
            if (!value) {
                this.companyName = null;
            }
        }

        public int getPageNumber() {
            return this.pageNumber;
        }

        public fetchEmailAccounts_args setPageNumber(int pageNumber) {
            this.pageNumber = pageNumber;
            setPageNumberIsSet(true);
            return this;
        }

        public void unsetPageNumber() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGENUMBER_ISSET_ID);
        }

        /** Returns true if field pageNumber is set (has been assigned a value) and false otherwise */
        public boolean isSetPageNumber() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGENUMBER_ISSET_ID);
        }

        public void setPageNumberIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGENUMBER_ISSET_ID, value);
        }

        public int getPageSize() {
            return this.pageSize;
        }

        public fetchEmailAccounts_args setPageSize(int pageSize) {
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
            return this;
        }

        public void unsetPageSize() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
        public boolean isSetPageSize() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        public void setPageSizeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_NAME:
                    if (value == null) {
                        unsetCompanyName();
                    } else {
                        setCompanyName((java.lang.String)value);
                    }
                    break;

                case PAGE_NUMBER:
                    if (value == null) {
                        unsetPageNumber();
                    } else {
                        setPageNumber((java.lang.Integer)value);
                    }
                    break;

                case PAGE_SIZE:
                    if (value == null) {
                        unsetPageSize();
                    } else {
                        setPageSize((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_ID:
                    return getCompanyId();

                case COMPANY_NAME:
                    return getCompanyName();

                case PAGE_NUMBER:
                    return getPageNumber();

                case PAGE_SIZE:
                    return getPageSize();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_ID:
                    return isSetCompanyId();
                case COMPANY_NAME:
                    return isSetCompanyName();
                case PAGE_NUMBER:
                    return isSetPageNumber();
                case PAGE_SIZE:
                    return isSetPageSize();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof fetchEmailAccounts_args)
                return this.equals((fetchEmailAccounts_args)that);
            return false;
        }

        public boolean equals(fetchEmailAccounts_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            boolean this_present_companyName = true && this.isSetCompanyName();
            boolean that_present_companyName = true && that.isSetCompanyName();
            if (this_present_companyName || that_present_companyName) {
                if (!(this_present_companyName && that_present_companyName))
                    return false;
                if (!this.companyName.equals(that.companyName))
                    return false;
            }

            boolean this_present_pageNumber = true;
            boolean that_present_pageNumber = true;
            if (this_present_pageNumber || that_present_pageNumber) {
                if (!(this_present_pageNumber && that_present_pageNumber))
                    return false;
                if (this.pageNumber != that.pageNumber)
                    return false;
            }

            boolean this_present_pageSize = true;
            boolean that_present_pageSize = true;
            if (this_present_pageSize || that_present_pageSize) {
                if (!(this_present_pageSize && that_present_pageSize))
                    return false;
                if (this.pageSize != that.pageSize)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + companyId;

            hashCode = hashCode * 8191 + ((isSetCompanyName()) ? 131071 : 524287);
            if (isSetCompanyName())
                hashCode = hashCode * 8191 + companyName.hashCode();

            hashCode = hashCode * 8191 + pageNumber;

            hashCode = hashCode * 8191 + pageSize;

            return hashCode;
        }

        @Override
        public int compareTo(fetchEmailAccounts_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompanyName()).compareTo(other.isSetCompanyName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyName, other.companyName);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPageNumber()).compareTo(other.isSetPageNumber());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPageNumber()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNumber, other.pageNumber);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPageSize()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("fetchEmailAccounts_args(");
            boolean first = true;

            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("companyName:");
            if (this.companyName == null) {
                sb.append("null");
            } else {
                sb.append(this.companyName);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("pageNumber:");
            sb.append(this.pageNumber);
            first = false;
            if (!first) sb.append(", ");
            sb.append("pageSize:");
            sb.append(this.pageSize);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class fetchEmailAccounts_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public fetchEmailAccounts_argsStandardScheme getScheme() {
                return new fetchEmailAccounts_argsStandardScheme();
            }
        }

        private static class fetchEmailAccounts_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetchEmailAccounts_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, fetchEmailAccounts_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // COMPANY_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.companyName = iprot.readString();
                                struct.setCompanyNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PAGE_NUMBER
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pageNumber = iprot.readI32();
                                struct.setPageNumberIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // PAGE_SIZE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pageSize = iprot.readI32();
                                struct.setPageSizeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, fetchEmailAccounts_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                if (struct.companyName != null) {
                    oprot.writeFieldBegin(COMPANY_NAME_FIELD_DESC);
                    oprot.writeString(struct.companyName);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(PAGE_NUMBER_FIELD_DESC);
                oprot.writeI32(struct.pageNumber);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
                oprot.writeI32(struct.pageSize);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class fetchEmailAccounts_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public fetchEmailAccounts_argsTupleScheme getScheme() {
                return new fetchEmailAccounts_argsTupleScheme();
            }
        }

        private static class fetchEmailAccounts_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetchEmailAccounts_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, fetchEmailAccounts_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyId()) {
                    optionals.set(0);
                }
                if (struct.isSetCompanyName()) {
                    optionals.set(1);
                }
                if (struct.isSetPageNumber()) {
                    optionals.set(2);
                }
                if (struct.isSetPageSize()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
                if (struct.isSetCompanyName()) {
                    oprot.writeString(struct.companyName);
                }
                if (struct.isSetPageNumber()) {
                    oprot.writeI32(struct.pageNumber);
                }
                if (struct.isSetPageSize()) {
                    oprot.writeI32(struct.pageSize);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, fetchEmailAccounts_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.companyName = iprot.readString();
                    struct.setCompanyNameIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.pageNumber = iprot.readI32();
                    struct.setPageNumberIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.pageSize = iprot.readI32();
                    struct.setPageSizeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class fetchEmailAccounts_result implements org.apache.thrift.TBase<fetchEmailAccounts_result, fetchEmailAccounts_result._Fields>, java.io.Serializable, Cloneable, Comparable<fetchEmailAccounts_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchEmailAccounts_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetchEmailAccounts_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetchEmailAccounts_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.company.struct.EmailAccountForm success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.company.struct.EmailAccountForm.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchEmailAccounts_result.class, metaDataMap);
        }

        public fetchEmailAccounts_result() {
        }

        public fetchEmailAccounts_result(
                com.moseeker.thrift.gen.company.struct.EmailAccountForm success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public fetchEmailAccounts_result(fetchEmailAccounts_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.company.struct.EmailAccountForm(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public fetchEmailAccounts_result deepCopy() {
            return new fetchEmailAccounts_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.company.struct.EmailAccountForm getSuccess() {
            return this.success;
        }

        public fetchEmailAccounts_result setSuccess(com.moseeker.thrift.gen.company.struct.EmailAccountForm success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public fetchEmailAccounts_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.company.struct.EmailAccountForm)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof fetchEmailAccounts_result)
                return this.equals((fetchEmailAccounts_result)that);
            return false;
        }

        public boolean equals(fetchEmailAccounts_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(fetchEmailAccounts_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("fetchEmailAccounts_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class fetchEmailAccounts_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public fetchEmailAccounts_resultStandardScheme getScheme() {
                return new fetchEmailAccounts_resultStandardScheme();
            }
        }

        private static class fetchEmailAccounts_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetchEmailAccounts_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, fetchEmailAccounts_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.company.struct.EmailAccountForm();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, fetchEmailAccounts_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class fetchEmailAccounts_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public fetchEmailAccounts_resultTupleScheme getScheme() {
                return new fetchEmailAccounts_resultTupleScheme();
            }
        }

        private static class fetchEmailAccounts_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetchEmailAccounts_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, fetchEmailAccounts_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, fetchEmailAccounts_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.company.struct.EmailAccountForm();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class fetchEmailAccountConsumption_args implements org.apache.thrift.TBase<fetchEmailAccountConsumption_args, fetchEmailAccountConsumption_args._Fields>, java.io.Serializable, Cloneable, Comparable<fetchEmailAccountConsumption_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchEmailAccountConsumption_args");

        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.BYTE, (short)2);
        private static final org.apache.thrift.protocol.TField PAGE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNumber", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)4);
        private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.STRING, (short)5);
        private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.STRING, (short)6);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetchEmailAccountConsumption_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetchEmailAccountConsumption_argsTupleSchemeFactory();

        public int companyId; // required
        public byte type; // required
        public int pageNumber; // required
        public int pageSize; // required
        public java.lang.String startDate; // required
        public java.lang.String endDate; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_ID((short)1, "companyId"),
            TYPE((short)2, "type"),
            PAGE_NUMBER((short)3, "pageNumber"),
            PAGE_SIZE((short)4, "pageSize"),
            START_DATE((short)5, "startDate"),
            END_DATE((short)6, "endDate");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // COMPANY_ID
                        return COMPANY_ID;
                    case 2: // TYPE
                        return TYPE;
                    case 3: // PAGE_NUMBER
                        return PAGE_NUMBER;
                    case 4: // PAGE_SIZE
                        return PAGE_SIZE;
                    case 5: // START_DATE
                        return START_DATE;
                    case 6: // END_DATE
                        return END_DATE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __COMPANYID_ISSET_ID = 0;
        private static final int __TYPE_ISSET_ID = 1;
        private static final int __PAGENUMBER_ISSET_ID = 2;
        private static final int __PAGESIZE_ISSET_ID = 3;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
            tmpMap.put(_Fields.PAGE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("pageNumber", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchEmailAccountConsumption_args.class, metaDataMap);
        }

        public fetchEmailAccountConsumption_args() {
        }

        public fetchEmailAccountConsumption_args(
                int companyId,
                byte type,
                int pageNumber,
                int pageSize,
                java.lang.String startDate,
                java.lang.String endDate)
        {
            this();
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            this.type = type;
            setTypeIsSet(true);
            this.pageNumber = pageNumber;
            setPageNumberIsSet(true);
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
            this.startDate = startDate;
            this.endDate = endDate;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public fetchEmailAccountConsumption_args(fetchEmailAccountConsumption_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.companyId = other.companyId;
            this.type = other.type;
            this.pageNumber = other.pageNumber;
            this.pageSize = other.pageSize;
            if (other.isSetStartDate()) {
                this.startDate = other.startDate;
            }
            if (other.isSetEndDate()) {
                this.endDate = other.endDate;
            }
        }

        public fetchEmailAccountConsumption_args deepCopy() {
            return new fetchEmailAccountConsumption_args(this);
        }

        @Override
        public void clear() {
            setCompanyIdIsSet(false);
            this.companyId = 0;
            setTypeIsSet(false);
            this.type = 0;
            setPageNumberIsSet(false);
            this.pageNumber = 0;
            setPageSizeIsSet(false);
            this.pageSize = 0;
            this.startDate = null;
            this.endDate = null;
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public fetchEmailAccountConsumption_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public byte getType() {
            return this.type;
        }

        public fetchEmailAccountConsumption_args setType(byte type) {
            this.type = type;
            setTypeIsSet(true);
            return this;
        }

        public void unsetType() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        /** Returns true if field type is set (has been assigned a value) and false otherwise */
        public boolean isSetType() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
        }

        public void setTypeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
        }

        public int getPageNumber() {
            return this.pageNumber;
        }

        public fetchEmailAccountConsumption_args setPageNumber(int pageNumber) {
            this.pageNumber = pageNumber;
            setPageNumberIsSet(true);
            return this;
        }

        public void unsetPageNumber() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGENUMBER_ISSET_ID);
        }

        /** Returns true if field pageNumber is set (has been assigned a value) and false otherwise */
        public boolean isSetPageNumber() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGENUMBER_ISSET_ID);
        }

        public void setPageNumberIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGENUMBER_ISSET_ID, value);
        }

        public int getPageSize() {
            return this.pageSize;
        }

        public fetchEmailAccountConsumption_args setPageSize(int pageSize) {
            this.pageSize = pageSize;
            setPageSizeIsSet(true);
            return this;
        }

        public void unsetPageSize() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
        public boolean isSetPageSize() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
        }

        public void setPageSizeIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
        }

        public java.lang.String getStartDate() {
            return this.startDate;
        }

        public fetchEmailAccountConsumption_args setStartDate(java.lang.String startDate) {
            this.startDate = startDate;
            return this;
        }

        public void unsetStartDate() {
            this.startDate = null;
        }

        /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
        public boolean isSetStartDate() {
            return this.startDate != null;
        }

        public void setStartDateIsSet(boolean value) {
            if (!value) {
                this.startDate = null;
            }
        }

        public java.lang.String getEndDate() {
            return this.endDate;
        }

        public fetchEmailAccountConsumption_args setEndDate(java.lang.String endDate) {
            this.endDate = endDate;
            return this;
        }

        public void unsetEndDate() {
            this.endDate = null;
        }

        /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
        public boolean isSetEndDate() {
            return this.endDate != null;
        }

        public void setEndDateIsSet(boolean value) {
            if (!value) {
                this.endDate = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

                case TYPE:
                    if (value == null) {
                        unsetType();
                    } else {
                        setType((java.lang.Byte)value);
                    }
                    break;

                case PAGE_NUMBER:
                    if (value == null) {
                        unsetPageNumber();
                    } else {
                        setPageNumber((java.lang.Integer)value);
                    }
                    break;

                case PAGE_SIZE:
                    if (value == null) {
                        unsetPageSize();
                    } else {
                        setPageSize((java.lang.Integer)value);
                    }
                    break;

                case START_DATE:
                    if (value == null) {
                        unsetStartDate();
                    } else {
                        setStartDate((java.lang.String)value);
                    }
                    break;

                case END_DATE:
                    if (value == null) {
                        unsetEndDate();
                    } else {
                        setEndDate((java.lang.String)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_ID:
                    return getCompanyId();

                case TYPE:
                    return getType();

                case PAGE_NUMBER:
                    return getPageNumber();

                case PAGE_SIZE:
                    return getPageSize();

                case START_DATE:
                    return getStartDate();

                case END_DATE:
                    return getEndDate();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_ID:
                    return isSetCompanyId();
                case TYPE:
                    return isSetType();
                case PAGE_NUMBER:
                    return isSetPageNumber();
                case PAGE_SIZE:
                    return isSetPageSize();
                case START_DATE:
                    return isSetStartDate();
                case END_DATE:
                    return isSetEndDate();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof fetchEmailAccountConsumption_args)
                return this.equals((fetchEmailAccountConsumption_args)that);
            return false;
        }

        public boolean equals(fetchEmailAccountConsumption_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            boolean this_present_type = true;
            boolean that_present_type = true;
            if (this_present_type || that_present_type) {
                if (!(this_present_type && that_present_type))
                    return false;
                if (this.type != that.type)
                    return false;
            }

            boolean this_present_pageNumber = true;
            boolean that_present_pageNumber = true;
            if (this_present_pageNumber || that_present_pageNumber) {
                if (!(this_present_pageNumber && that_present_pageNumber))
                    return false;
                if (this.pageNumber != that.pageNumber)
                    return false;
            }

            boolean this_present_pageSize = true;
            boolean that_present_pageSize = true;
            if (this_present_pageSize || that_present_pageSize) {
                if (!(this_present_pageSize && that_present_pageSize))
                    return false;
                if (this.pageSize != that.pageSize)
                    return false;
            }

            boolean this_present_startDate = true && this.isSetStartDate();
            boolean that_present_startDate = true && that.isSetStartDate();
            if (this_present_startDate || that_present_startDate) {
                if (!(this_present_startDate && that_present_startDate))
                    return false;
                if (!this.startDate.equals(that.startDate))
                    return false;
            }

            boolean this_present_endDate = true && this.isSetEndDate();
            boolean that_present_endDate = true && that.isSetEndDate();
            if (this_present_endDate || that_present_endDate) {
                if (!(this_present_endDate && that_present_endDate))
                    return false;
                if (!this.endDate.equals(that.endDate))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + companyId;

            hashCode = hashCode * 8191 + (int) (type);

            hashCode = hashCode * 8191 + pageNumber;

            hashCode = hashCode * 8191 + pageSize;

            hashCode = hashCode * 8191 + ((isSetStartDate()) ? 131071 : 524287);
            if (isSetStartDate())
                hashCode = hashCode * 8191 + startDate.hashCode();

            hashCode = hashCode * 8191 + ((isSetEndDate()) ? 131071 : 524287);
            if (isSetEndDate())
                hashCode = hashCode * 8191 + endDate.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(fetchEmailAccountConsumption_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetType()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPageNumber()).compareTo(other.isSetPageNumber());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPageNumber()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNumber, other.pageNumber);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPageSize()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetStartDate()).compareTo(other.isSetStartDate());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetStartDate()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, other.startDate);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetEndDate()).compareTo(other.isSetEndDate());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEndDate()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, other.endDate);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("fetchEmailAccountConsumption_args(");
            boolean first = true;

            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("type:");
            sb.append(this.type);
            first = false;
            if (!first) sb.append(", ");
            sb.append("pageNumber:");
            sb.append(this.pageNumber);
            first = false;
            if (!first) sb.append(", ");
            sb.append("pageSize:");
            sb.append(this.pageSize);
            first = false;
            if (!first) sb.append(", ");
            sb.append("startDate:");
            if (this.startDate == null) {
                sb.append("null");
            } else {
                sb.append(this.startDate);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("endDate:");
            if (this.endDate == null) {
                sb.append("null");
            } else {
                sb.append(this.endDate);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class fetchEmailAccountConsumption_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public fetchEmailAccountConsumption_argsStandardScheme getScheme() {
                return new fetchEmailAccountConsumption_argsStandardScheme();
            }
        }

        private static class fetchEmailAccountConsumption_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetchEmailAccountConsumption_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, fetchEmailAccountConsumption_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // TYPE
                            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                                struct.type = iprot.readByte();
                                struct.setTypeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PAGE_NUMBER
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pageNumber = iprot.readI32();
                                struct.setPageNumberIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // PAGE_SIZE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pageSize = iprot.readI32();
                                struct.setPageSizeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 5: // START_DATE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.startDate = iprot.readString();
                                struct.setStartDateIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 6: // END_DATE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.endDate = iprot.readString();
                                struct.setEndDateIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, fetchEmailAccountConsumption_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(TYPE_FIELD_DESC);
                oprot.writeByte(struct.type);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_NUMBER_FIELD_DESC);
                oprot.writeI32(struct.pageNumber);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
                oprot.writeI32(struct.pageSize);
                oprot.writeFieldEnd();
                if (struct.startDate != null) {
                    oprot.writeFieldBegin(START_DATE_FIELD_DESC);
                    oprot.writeString(struct.startDate);
                    oprot.writeFieldEnd();
                }
                if (struct.endDate != null) {
                    oprot.writeFieldBegin(END_DATE_FIELD_DESC);
                    oprot.writeString(struct.endDate);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class fetchEmailAccountConsumption_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public fetchEmailAccountConsumption_argsTupleScheme getScheme() {
                return new fetchEmailAccountConsumption_argsTupleScheme();
            }
        }

        private static class fetchEmailAccountConsumption_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetchEmailAccountConsumption_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, fetchEmailAccountConsumption_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyId()) {
                    optionals.set(0);
                }
                if (struct.isSetType()) {
                    optionals.set(1);
                }
                if (struct.isSetPageNumber()) {
                    optionals.set(2);
                }
                if (struct.isSetPageSize()) {
                    optionals.set(3);
                }
                if (struct.isSetStartDate()) {
                    optionals.set(4);
                }
                if (struct.isSetEndDate()) {
                    optionals.set(5);
                }
                oprot.writeBitSet(optionals, 6);
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
                if (struct.isSetType()) {
                    oprot.writeByte(struct.type);
                }
                if (struct.isSetPageNumber()) {
                    oprot.writeI32(struct.pageNumber);
                }
                if (struct.isSetPageSize()) {
                    oprot.writeI32(struct.pageSize);
                }
                if (struct.isSetStartDate()) {
                    oprot.writeString(struct.startDate);
                }
                if (struct.isSetEndDate()) {
                    oprot.writeString(struct.endDate);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, fetchEmailAccountConsumption_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(6);
                if (incoming.get(0)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.type = iprot.readByte();
                    struct.setTypeIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.pageNumber = iprot.readI32();
                    struct.setPageNumberIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.pageSize = iprot.readI32();
                    struct.setPageSizeIsSet(true);
                }
                if (incoming.get(4)) {
                    struct.startDate = iprot.readString();
                    struct.setStartDateIsSet(true);
                }
                if (incoming.get(5)) {
                    struct.endDate = iprot.readString();
                    struct.setEndDateIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class fetchEmailAccountConsumption_result implements org.apache.thrift.TBase<fetchEmailAccountConsumption_result, fetchEmailAccountConsumption_result._Fields>, java.io.Serializable, Cloneable, Comparable<fetchEmailAccountConsumption_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchEmailAccountConsumption_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetchEmailAccountConsumption_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetchEmailAccountConsumption_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.company.struct.EmailAccountConsumptionForm success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.company.struct.EmailAccountConsumptionForm.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchEmailAccountConsumption_result.class, metaDataMap);
        }

        public fetchEmailAccountConsumption_result() {
        }

        public fetchEmailAccountConsumption_result(
                com.moseeker.thrift.gen.company.struct.EmailAccountConsumptionForm success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public fetchEmailAccountConsumption_result(fetchEmailAccountConsumption_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.company.struct.EmailAccountConsumptionForm(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public fetchEmailAccountConsumption_result deepCopy() {
            return new fetchEmailAccountConsumption_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.company.struct.EmailAccountConsumptionForm getSuccess() {
            return this.success;
        }

        public fetchEmailAccountConsumption_result setSuccess(com.moseeker.thrift.gen.company.struct.EmailAccountConsumptionForm success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public fetchEmailAccountConsumption_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.company.struct.EmailAccountConsumptionForm)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof fetchEmailAccountConsumption_result)
                return this.equals((fetchEmailAccountConsumption_result)that);
            return false;
        }

        public boolean equals(fetchEmailAccountConsumption_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(fetchEmailAccountConsumption_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("fetchEmailAccountConsumption_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class fetchEmailAccountConsumption_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public fetchEmailAccountConsumption_resultStandardScheme getScheme() {
                return new fetchEmailAccountConsumption_resultStandardScheme();
            }
        }

        private static class fetchEmailAccountConsumption_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetchEmailAccountConsumption_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, fetchEmailAccountConsumption_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.company.struct.EmailAccountConsumptionForm();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, fetchEmailAccountConsumption_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class fetchEmailAccountConsumption_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public fetchEmailAccountConsumption_resultTupleScheme getScheme() {
                return new fetchEmailAccountConsumption_resultTupleScheme();
            }
        }

        private static class fetchEmailAccountConsumption_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetchEmailAccountConsumption_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, fetchEmailAccountConsumption_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, fetchEmailAccountConsumption_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.company.struct.EmailAccountConsumptionForm();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class rechargeEmailAccount_args implements org.apache.thrift.TBase<rechargeEmailAccount_args, rechargeEmailAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<rechargeEmailAccount_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rechargeEmailAccount_args");

        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField LOST_FIELD_DESC = new org.apache.thrift.protocol.TField("lost", org.apache.thrift.protocol.TType.I32, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rechargeEmailAccount_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rechargeEmailAccount_argsTupleSchemeFactory();

        public int companyId; // required
        public int lost; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_ID((short)1, "companyId"),
            LOST((short)2, "lost");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // COMPANY_ID
                        return COMPANY_ID;
                    case 2: // LOST
                        return LOST;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __COMPANYID_ISSET_ID = 0;
        private static final int __LOST_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.LOST, new org.apache.thrift.meta_data.FieldMetaData("lost", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rechargeEmailAccount_args.class, metaDataMap);
        }

        public rechargeEmailAccount_args() {
        }

        public rechargeEmailAccount_args(
                int companyId,
                int lost)
        {
            this();
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            this.lost = lost;
            setLostIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public rechargeEmailAccount_args(rechargeEmailAccount_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.companyId = other.companyId;
            this.lost = other.lost;
        }

        public rechargeEmailAccount_args deepCopy() {
            return new rechargeEmailAccount_args(this);
        }

        @Override
        public void clear() {
            setCompanyIdIsSet(false);
            this.companyId = 0;
            setLostIsSet(false);
            this.lost = 0;
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public rechargeEmailAccount_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public int getLost() {
            return this.lost;
        }

        public rechargeEmailAccount_args setLost(int lost) {
            this.lost = lost;
            setLostIsSet(true);
            return this;
        }

        public void unsetLost() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOST_ISSET_ID);
        }

        /** Returns true if field lost is set (has been assigned a value) and false otherwise */
        public boolean isSetLost() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOST_ISSET_ID);
        }

        public void setLostIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOST_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

                case LOST:
                    if (value == null) {
                        unsetLost();
                    } else {
                        setLost((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_ID:
                    return getCompanyId();

                case LOST:
                    return getLost();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_ID:
                    return isSetCompanyId();
                case LOST:
                    return isSetLost();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof rechargeEmailAccount_args)
                return this.equals((rechargeEmailAccount_args)that);
            return false;
        }

        public boolean equals(rechargeEmailAccount_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            boolean this_present_lost = true;
            boolean that_present_lost = true;
            if (this_present_lost || that_present_lost) {
                if (!(this_present_lost && that_present_lost))
                    return false;
                if (this.lost != that.lost)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + companyId;

            hashCode = hashCode * 8191 + lost;

            return hashCode;
        }

        @Override
        public int compareTo(rechargeEmailAccount_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetLost()).compareTo(other.isSetLost());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetLost()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lost, other.lost);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("rechargeEmailAccount_args(");
            boolean first = true;

            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("lost:");
            sb.append(this.lost);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class rechargeEmailAccount_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public rechargeEmailAccount_argsStandardScheme getScheme() {
                return new rechargeEmailAccount_argsStandardScheme();
            }
        }

        private static class rechargeEmailAccount_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<rechargeEmailAccount_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, rechargeEmailAccount_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // LOST
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.lost = iprot.readI32();
                                struct.setLostIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, rechargeEmailAccount_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(LOST_FIELD_DESC);
                oprot.writeI32(struct.lost);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class rechargeEmailAccount_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public rechargeEmailAccount_argsTupleScheme getScheme() {
                return new rechargeEmailAccount_argsTupleScheme();
            }
        }

        private static class rechargeEmailAccount_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<rechargeEmailAccount_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, rechargeEmailAccount_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyId()) {
                    optionals.set(0);
                }
                if (struct.isSetLost()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
                if (struct.isSetLost()) {
                    oprot.writeI32(struct.lost);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, rechargeEmailAccount_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.lost = iprot.readI32();
                    struct.setLostIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class rechargeEmailAccount_result implements org.apache.thrift.TBase<rechargeEmailAccount_result, rechargeEmailAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<rechargeEmailAccount_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rechargeEmailAccount_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rechargeEmailAccount_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rechargeEmailAccount_resultTupleSchemeFactory();

        public int success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rechargeEmailAccount_result.class, metaDataMap);
        }

        public rechargeEmailAccount_result() {
        }

        public rechargeEmailAccount_result(
                int success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            setSuccessIsSet(true);
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public rechargeEmailAccount_result(rechargeEmailAccount_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public rechargeEmailAccount_result deepCopy() {
            return new rechargeEmailAccount_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
            this.e = null;
        }

        public int getSuccess() {
            return this.success;
        }

        public rechargeEmailAccount_result setSuccess(int success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public rechargeEmailAccount_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.Integer)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof rechargeEmailAccount_result)
                return this.equals((rechargeEmailAccount_result)that);
            return false;
        }

        public boolean equals(rechargeEmailAccount_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + success;

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(rechargeEmailAccount_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("rechargeEmailAccount_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class rechargeEmailAccount_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public rechargeEmailAccount_resultStandardScheme getScheme() {
                return new rechargeEmailAccount_resultStandardScheme();
            }
        }

        private static class rechargeEmailAccount_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<rechargeEmailAccount_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, rechargeEmailAccount_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.success = iprot.readI32();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, rechargeEmailAccount_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI32(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class rechargeEmailAccount_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public rechargeEmailAccount_resultTupleScheme getScheme() {
                return new rechargeEmailAccount_resultTupleScheme();
            }
        }

        private static class rechargeEmailAccount_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<rechargeEmailAccount_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, rechargeEmailAccount_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeI32(struct.success);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, rechargeEmailAccount_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readI32();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updateEmailAccountRechargeValue_args implements org.apache.thrift.TBase<updateEmailAccountRechargeValue_args, updateEmailAccountRechargeValue_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateEmailAccountRechargeValue_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateEmailAccountRechargeValue_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField LOST_FIELD_DESC = new org.apache.thrift.protocol.TField("lost", org.apache.thrift.protocol.TType.I32, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateEmailAccountRechargeValue_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateEmailAccountRechargeValue_argsTupleSchemeFactory();

        public int id; // required
        public int lost; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short)1, "id"),
            LOST((short)2, "lost");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // ID
                        return ID;
                    case 2: // LOST
                        return LOST;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ID_ISSET_ID = 0;
        private static final int __LOST_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.LOST, new org.apache.thrift.meta_data.FieldMetaData("lost", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateEmailAccountRechargeValue_args.class, metaDataMap);
        }

        public updateEmailAccountRechargeValue_args() {
        }

        public updateEmailAccountRechargeValue_args(
                int id,
                int lost)
        {
            this();
            this.id = id;
            setIdIsSet(true);
            this.lost = lost;
            setLostIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateEmailAccountRechargeValue_args(updateEmailAccountRechargeValue_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.id = other.id;
            this.lost = other.lost;
        }

        public updateEmailAccountRechargeValue_args deepCopy() {
            return new updateEmailAccountRechargeValue_args(this);
        }

        @Override
        public void clear() {
            setIdIsSet(false);
            this.id = 0;
            setLostIsSet(false);
            this.lost = 0;
        }

        public int getId() {
            return this.id;
        }

        public updateEmailAccountRechargeValue_args setId(int id) {
            this.id = id;
            setIdIsSet(true);
            return this;
        }

        public void unsetId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
        }

        public void setIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
        }

        public int getLost() {
            return this.lost;
        }

        public updateEmailAccountRechargeValue_args setLost(int lost) {
            this.lost = lost;
            setLostIsSet(true);
            return this;
        }

        public void unsetLost() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOST_ISSET_ID);
        }

        /** Returns true if field lost is set (has been assigned a value) and false otherwise */
        public boolean isSetLost() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOST_ISSET_ID);
        }

        public void setLostIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOST_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((java.lang.Integer)value);
                    }
                    break;

                case LOST:
                    if (value == null) {
                        unsetLost();
                    } else {
                        setLost((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

                case LOST:
                    return getLost();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
                case LOST:
                    return isSetLost();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updateEmailAccountRechargeValue_args)
                return this.equals((updateEmailAccountRechargeValue_args)that);
            return false;
        }

        public boolean equals(updateEmailAccountRechargeValue_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true;
            boolean that_present_id = true;
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (this.id != that.id)
                    return false;
            }

            boolean this_present_lost = true;
            boolean that_present_lost = true;
            if (this_present_lost || that_present_lost) {
                if (!(this_present_lost && that_present_lost))
                    return false;
                if (this.lost != that.lost)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + id;

            hashCode = hashCode * 8191 + lost;

            return hashCode;
        }

        @Override
        public int compareTo(updateEmailAccountRechargeValue_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetLost()).compareTo(other.isSetLost());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetLost()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lost, other.lost);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updateEmailAccountRechargeValue_args(");
            boolean first = true;

            sb.append("id:");
            sb.append(this.id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("lost:");
            sb.append(this.lost);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updateEmailAccountRechargeValue_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateEmailAccountRechargeValue_argsStandardScheme getScheme() {
                return new updateEmailAccountRechargeValue_argsStandardScheme();
            }
        }

        private static class updateEmailAccountRechargeValue_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateEmailAccountRechargeValue_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateEmailAccountRechargeValue_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.id = iprot.readI32();
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // LOST
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.lost = iprot.readI32();
                                struct.setLostIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateEmailAccountRechargeValue_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI32(struct.id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(LOST_FIELD_DESC);
                oprot.writeI32(struct.lost);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateEmailAccountRechargeValue_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateEmailAccountRechargeValue_argsTupleScheme getScheme() {
                return new updateEmailAccountRechargeValue_argsTupleScheme();
            }
        }

        private static class updateEmailAccountRechargeValue_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateEmailAccountRechargeValue_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateEmailAccountRechargeValue_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                if (struct.isSetLost()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetId()) {
                    oprot.writeI32(struct.id);
                }
                if (struct.isSetLost()) {
                    oprot.writeI32(struct.lost);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateEmailAccountRechargeValue_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.id = iprot.readI32();
                    struct.setIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.lost = iprot.readI32();
                    struct.setLostIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updateEmailAccountRechargeValue_result implements org.apache.thrift.TBase<updateEmailAccountRechargeValue_result, updateEmailAccountRechargeValue_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateEmailAccountRechargeValue_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateEmailAccountRechargeValue_result");

        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateEmailAccountRechargeValue_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateEmailAccountRechargeValue_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateEmailAccountRechargeValue_result.class, metaDataMap);
        }

        public updateEmailAccountRechargeValue_result() {
        }

        public updateEmailAccountRechargeValue_result(
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateEmailAccountRechargeValue_result(updateEmailAccountRechargeValue_result other) {
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public updateEmailAccountRechargeValue_result deepCopy() {
            return new updateEmailAccountRechargeValue_result(this);
        }

        @Override
        public void clear() {
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public updateEmailAccountRechargeValue_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updateEmailAccountRechargeValue_result)
                return this.equals((updateEmailAccountRechargeValue_result)that);
            return false;
        }

        public boolean equals(updateEmailAccountRechargeValue_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(updateEmailAccountRechargeValue_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updateEmailAccountRechargeValue_result(");
            boolean first = true;

            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updateEmailAccountRechargeValue_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateEmailAccountRechargeValue_resultStandardScheme getScheme() {
                return new updateEmailAccountRechargeValue_resultStandardScheme();
            }
        }

        private static class updateEmailAccountRechargeValue_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateEmailAccountRechargeValue_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateEmailAccountRechargeValue_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateEmailAccountRechargeValue_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateEmailAccountRechargeValue_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateEmailAccountRechargeValue_resultTupleScheme getScheme() {
                return new updateEmailAccountRechargeValue_resultTupleScheme();
            }
        }

        private static class updateEmailAccountRechargeValue_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateEmailAccountRechargeValue_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateEmailAccountRechargeValue_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetE()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateEmailAccountRechargeValue_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addAllTalent_args implements org.apache.thrift.TBase<addAllTalent_args, addAllTalent_args._Fields>, java.io.Serializable, Cloneable, Comparable<addAllTalent_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAllTalent_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hrId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)2);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField IS_GDPR_FIELD_DESC = new org.apache.thrift.protocol.TField("isGdpr", org.apache.thrift.protocol.TType.I32, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addAllTalent_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addAllTalent_argsTupleSchemeFactory();

        public int hrId; // required
        public java.util.Map<java.lang.String,java.lang.String> params; // required
        public int companyId; // required
        public int isGdpr; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hrId"),
            PARAMS((short)2, "params"),
            COMPANY_ID((short)3, "companyId"),
            IS_GDPR((short)4, "isGdpr");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // PARAMS
                        return PARAMS;
                    case 3: // COMPANY_ID
                        return COMPANY_ID;
                    case 4: // IS_GDPR
                        return IS_GDPR;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HRID_ISSET_ID = 0;
        private static final int __COMPANYID_ISSET_ID = 1;
        private static final int __ISGDPR_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hrId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.IS_GDPR, new org.apache.thrift.meta_data.FieldMetaData("isGdpr", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAllTalent_args.class, metaDataMap);
        }

        public addAllTalent_args() {
        }

        public addAllTalent_args(
                int hrId,
                java.util.Map<java.lang.String,java.lang.String> params,
                int companyId,
                int isGdpr)
        {
            this();
            this.hrId = hrId;
            setHrIdIsSet(true);
            this.params = params;
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            this.isGdpr = isGdpr;
            setIsGdprIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addAllTalent_args(addAllTalent_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hrId = other.hrId;
            if (other.isSetParams()) {
                java.util.Map<java.lang.String,java.lang.String> __this__params = new java.util.HashMap<java.lang.String,java.lang.String>(other.params);
                this.params = __this__params;
            }
            this.companyId = other.companyId;
            this.isGdpr = other.isGdpr;
        }

        public addAllTalent_args deepCopy() {
            return new addAllTalent_args(this);
        }

        @Override
        public void clear() {
            setHrIdIsSet(false);
            this.hrId = 0;
            this.params = null;
            setCompanyIdIsSet(false);
            this.companyId = 0;
            setIsGdprIsSet(false);
            this.isGdpr = 0;
        }

        public int getHrId() {
            return this.hrId;
        }

        public addAllTalent_args setHrId(int hrId) {
            this.hrId = hrId;
            setHrIdIsSet(true);
            return this;
        }

        public void unsetHrId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HRID_ISSET_ID);
        }

        /** Returns true if field hrId is set (has been assigned a value) and false otherwise */
        public boolean isSetHrId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HRID_ISSET_ID);
        }

        public void setHrIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HRID_ISSET_ID, value);
        }

        public int getParamsSize() {
            return (this.params == null) ? 0 : this.params.size();
        }

        public void putToParams(java.lang.String key, java.lang.String val) {
            if (this.params == null) {
                this.params = new java.util.HashMap<java.lang.String,java.lang.String>();
            }
            this.params.put(key, val);
        }

        public java.util.Map<java.lang.String,java.lang.String> getParams() {
            return this.params;
        }

        public addAllTalent_args setParams(java.util.Map<java.lang.String,java.lang.String> params) {
            this.params = params;
            return this;
        }

        public void unsetParams() {
            this.params = null;
        }

        /** Returns true if field params is set (has been assigned a value) and false otherwise */
        public boolean isSetParams() {
            return this.params != null;
        }

        public void setParamsIsSet(boolean value) {
            if (!value) {
                this.params = null;
            }
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public addAllTalent_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public int getIsGdpr() {
            return this.isGdpr;
        }

        public addAllTalent_args setIsGdpr(int isGdpr) {
            this.isGdpr = isGdpr;
            setIsGdprIsSet(true);
            return this;
        }

        public void unsetIsGdpr() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISGDPR_ISSET_ID);
        }

        /** Returns true if field isGdpr is set (has been assigned a value) and false otherwise */
        public boolean isSetIsGdpr() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISGDPR_ISSET_ID);
        }

        public void setIsGdprIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISGDPR_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHrId();
                    } else {
                        setHrId((java.lang.Integer)value);
                    }
                    break;

                case PARAMS:
                    if (value == null) {
                        unsetParams();
                    } else {
                        setParams((java.util.Map<java.lang.String,java.lang.String>)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

                case IS_GDPR:
                    if (value == null) {
                        unsetIsGdpr();
                    } else {
                        setIsGdpr((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHrId();

                case PARAMS:
                    return getParams();

                case COMPANY_ID:
                    return getCompanyId();

                case IS_GDPR:
                    return getIsGdpr();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHrId();
                case PARAMS:
                    return isSetParams();
                case COMPANY_ID:
                    return isSetCompanyId();
                case IS_GDPR:
                    return isSetIsGdpr();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addAllTalent_args)
                return this.equals((addAllTalent_args)that);
            return false;
        }

        public boolean equals(addAllTalent_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hrId = true;
            boolean that_present_hrId = true;
            if (this_present_hrId || that_present_hrId) {
                if (!(this_present_hrId && that_present_hrId))
                    return false;
                if (this.hrId != that.hrId)
                    return false;
            }

            boolean this_present_params = true && this.isSetParams();
            boolean that_present_params = true && that.isSetParams();
            if (this_present_params || that_present_params) {
                if (!(this_present_params && that_present_params))
                    return false;
                if (!this.params.equals(that.params))
                    return false;
            }

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            boolean this_present_isGdpr = true;
            boolean that_present_isGdpr = true;
            if (this_present_isGdpr || that_present_isGdpr) {
                if (!(this_present_isGdpr && that_present_isGdpr))
                    return false;
                if (this.isGdpr != that.isGdpr)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hrId;

            hashCode = hashCode * 8191 + ((isSetParams()) ? 131071 : 524287);
            if (isSetParams())
                hashCode = hashCode * 8191 + params.hashCode();

            hashCode = hashCode * 8191 + companyId;

            hashCode = hashCode * 8191 + isGdpr;

            return hashCode;
        }

        @Override
        public int compareTo(addAllTalent_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHrId()).compareTo(other.isSetHrId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHrId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrId, other.hrId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetParams()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetIsGdpr()).compareTo(other.isSetIsGdpr());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetIsGdpr()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isGdpr, other.isGdpr);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addAllTalent_args(");
            boolean first = true;

            sb.append("hrId:");
            sb.append(this.hrId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("params:");
            if (this.params == null) {
                sb.append("null");
            } else {
                sb.append(this.params);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("isGdpr:");
            sb.append(this.isGdpr);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addAllTalent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addAllTalent_argsStandardScheme getScheme() {
                return new addAllTalent_argsStandardScheme();
            }
        }

        private static class addAllTalent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addAllTalent_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addAllTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hrId = iprot.readI32();
                                struct.setHrIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PARAMS
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map216 = iprot.readMapBegin();
                                    struct.params = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map216.size);
                                    java.lang.String _key217;
                                    java.lang.String _val218;
                                    for (int _i219 = 0; _i219 < _map216.size; ++_i219)
                                    {
                                        _key217 = iprot.readString();
                                        _val218 = iprot.readString();
                                        struct.params.put(_key217, _val218);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setParamsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // IS_GDPR
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.isGdpr = iprot.readI32();
                                struct.setIsGdprIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addAllTalent_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hrId);
                oprot.writeFieldEnd();
                if (struct.params != null) {
                    oprot.writeFieldBegin(PARAMS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
                        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter220 : struct.params.entrySet())
                        {
                            oprot.writeString(_iter220.getKey());
                            oprot.writeString(_iter220.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(IS_GDPR_FIELD_DESC);
                oprot.writeI32(struct.isGdpr);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addAllTalent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addAllTalent_argsTupleScheme getScheme() {
                return new addAllTalent_argsTupleScheme();
            }
        }

        private static class addAllTalent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addAllTalent_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addAllTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHrId()) {
                    optionals.set(0);
                }
                if (struct.isSetParams()) {
                    optionals.set(1);
                }
                if (struct.isSetCompanyId()) {
                    optionals.set(2);
                }
                if (struct.isSetIsGdpr()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetHrId()) {
                    oprot.writeI32(struct.hrId);
                }
                if (struct.isSetParams()) {
                    {
                        oprot.writeI32(struct.params.size());
                        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter221 : struct.params.entrySet())
                        {
                            oprot.writeString(_iter221.getKey());
                            oprot.writeString(_iter221.getValue());
                        }
                    }
                }
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
                if (struct.isSetIsGdpr()) {
                    oprot.writeI32(struct.isGdpr);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addAllTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.hrId = iprot.readI32();
                    struct.setHrIdIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TMap _map222 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.params = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map222.size);
                        java.lang.String _key223;
                        java.lang.String _val224;
                        for (int _i225 = 0; _i225 < _map222.size; ++_i225)
                        {
                            _key223 = iprot.readString();
                            _val224 = iprot.readString();
                            struct.params.put(_key223, _val224);
                        }
                    }
                    struct.setParamsIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.isGdpr = iprot.readI32();
                    struct.setIsGdprIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addAllTalent_result implements org.apache.thrift.TBase<addAllTalent_result, addAllTalent_result._Fields>, java.io.Serializable, Cloneable, Comparable<addAllTalent_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAllTalent_result");

        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addAllTalent_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addAllTalent_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAllTalent_result.class, metaDataMap);
        }

        public addAllTalent_result() {
        }

        public addAllTalent_result(
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addAllTalent_result(addAllTalent_result other) {
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public addAllTalent_result deepCopy() {
            return new addAllTalent_result(this);
        }

        @Override
        public void clear() {
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public addAllTalent_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addAllTalent_result)
                return this.equals((addAllTalent_result)that);
            return false;
        }

        public boolean equals(addAllTalent_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(addAllTalent_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addAllTalent_result(");
            boolean first = true;

            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addAllTalent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addAllTalent_resultStandardScheme getScheme() {
                return new addAllTalent_resultStandardScheme();
            }
        }

        private static class addAllTalent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addAllTalent_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addAllTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addAllTalent_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addAllTalent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addAllTalent_resultTupleScheme getScheme() {
                return new addAllTalent_resultTupleScheme();
            }
        }

        private static class addAllTalent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addAllTalent_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addAllTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetE()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addAllTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addAllTalentTag_args implements org.apache.thrift.TBase<addAllTalentTag_args, addAllTalentTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<addAllTalentTag_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAllTalentTag_args");

        private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)1);
        private static final org.apache.thrift.protocol.TField TAG_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("tagList", org.apache.thrift.protocol.TType.LIST, (short)2);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hrId", org.apache.thrift.protocol.TType.I32, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addAllTalentTag_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addAllTalentTag_argsTupleSchemeFactory();

        public java.util.Map<java.lang.String,java.lang.String> params; // required
        public java.util.List<java.lang.Integer> tagList; // required
        public int companyId; // required
        public int hrId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PARAMS((short)1, "params"),
            TAG_LIST((short)2, "tagList"),
            COMPANY_ID((short)3, "companyId"),
            HR_ID((short)4, "hrId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PARAMS
                        return PARAMS;
                    case 2: // TAG_LIST
                        return TAG_LIST;
                    case 3: // COMPANY_ID
                        return COMPANY_ID;
                    case 4: // HR_ID
                        return HR_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __COMPANYID_ISSET_ID = 0;
        private static final int __HRID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
            tmpMap.put(_Fields.TAG_LIST, new org.apache.thrift.meta_data.FieldMetaData("tagList", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hrId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAllTalentTag_args.class, metaDataMap);
        }

        public addAllTalentTag_args() {
        }

        public addAllTalentTag_args(
                java.util.Map<java.lang.String,java.lang.String> params,
                java.util.List<java.lang.Integer> tagList,
                int companyId,
                int hrId)
        {
            this();
            this.params = params;
            this.tagList = tagList;
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            this.hrId = hrId;
            setHrIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addAllTalentTag_args(addAllTalentTag_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetParams()) {
                java.util.Map<java.lang.String,java.lang.String> __this__params = new java.util.HashMap<java.lang.String,java.lang.String>(other.params);
                this.params = __this__params;
            }
            if (other.isSetTagList()) {
                java.util.List<java.lang.Integer> __this__tagList = new java.util.ArrayList<java.lang.Integer>(other.tagList);
                this.tagList = __this__tagList;
            }
            this.companyId = other.companyId;
            this.hrId = other.hrId;
        }

        public addAllTalentTag_args deepCopy() {
            return new addAllTalentTag_args(this);
        }

        @Override
        public void clear() {
            this.params = null;
            this.tagList = null;
            setCompanyIdIsSet(false);
            this.companyId = 0;
            setHrIdIsSet(false);
            this.hrId = 0;
        }

        public int getParamsSize() {
            return (this.params == null) ? 0 : this.params.size();
        }

        public void putToParams(java.lang.String key, java.lang.String val) {
            if (this.params == null) {
                this.params = new java.util.HashMap<java.lang.String,java.lang.String>();
            }
            this.params.put(key, val);
        }

        public java.util.Map<java.lang.String,java.lang.String> getParams() {
            return this.params;
        }

        public addAllTalentTag_args setParams(java.util.Map<java.lang.String,java.lang.String> params) {
            this.params = params;
            return this;
        }

        public void unsetParams() {
            this.params = null;
        }

        /** Returns true if field params is set (has been assigned a value) and false otherwise */
        public boolean isSetParams() {
            return this.params != null;
        }

        public void setParamsIsSet(boolean value) {
            if (!value) {
                this.params = null;
            }
        }

        public int getTagListSize() {
            return (this.tagList == null) ? 0 : this.tagList.size();
        }

        public java.util.Iterator<java.lang.Integer> getTagListIterator() {
            return (this.tagList == null) ? null : this.tagList.iterator();
        }

        public void addToTagList(int elem) {
            if (this.tagList == null) {
                this.tagList = new java.util.ArrayList<java.lang.Integer>();
            }
            this.tagList.add(elem);
        }

        public java.util.List<java.lang.Integer> getTagList() {
            return this.tagList;
        }

        public addAllTalentTag_args setTagList(java.util.List<java.lang.Integer> tagList) {
            this.tagList = tagList;
            return this;
        }

        public void unsetTagList() {
            this.tagList = null;
        }

        /** Returns true if field tagList is set (has been assigned a value) and false otherwise */
        public boolean isSetTagList() {
            return this.tagList != null;
        }

        public void setTagListIsSet(boolean value) {
            if (!value) {
                this.tagList = null;
            }
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public addAllTalentTag_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public int getHrId() {
            return this.hrId;
        }

        public addAllTalentTag_args setHrId(int hrId) {
            this.hrId = hrId;
            setHrIdIsSet(true);
            return this;
        }

        public void unsetHrId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HRID_ISSET_ID);
        }

        /** Returns true if field hrId is set (has been assigned a value) and false otherwise */
        public boolean isSetHrId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HRID_ISSET_ID);
        }

        public void setHrIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HRID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case PARAMS:
                    if (value == null) {
                        unsetParams();
                    } else {
                        setParams((java.util.Map<java.lang.String,java.lang.String>)value);
                    }
                    break;

                case TAG_LIST:
                    if (value == null) {
                        unsetTagList();
                    } else {
                        setTagList((java.util.List<java.lang.Integer>)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

                case HR_ID:
                    if (value == null) {
                        unsetHrId();
                    } else {
                        setHrId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case PARAMS:
                    return getParams();

                case TAG_LIST:
                    return getTagList();

                case COMPANY_ID:
                    return getCompanyId();

                case HR_ID:
                    return getHrId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case PARAMS:
                    return isSetParams();
                case TAG_LIST:
                    return isSetTagList();
                case COMPANY_ID:
                    return isSetCompanyId();
                case HR_ID:
                    return isSetHrId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addAllTalentTag_args)
                return this.equals((addAllTalentTag_args)that);
            return false;
        }

        public boolean equals(addAllTalentTag_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_params = true && this.isSetParams();
            boolean that_present_params = true && that.isSetParams();
            if (this_present_params || that_present_params) {
                if (!(this_present_params && that_present_params))
                    return false;
                if (!this.params.equals(that.params))
                    return false;
            }

            boolean this_present_tagList = true && this.isSetTagList();
            boolean that_present_tagList = true && that.isSetTagList();
            if (this_present_tagList || that_present_tagList) {
                if (!(this_present_tagList && that_present_tagList))
                    return false;
                if (!this.tagList.equals(that.tagList))
                    return false;
            }

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            boolean this_present_hrId = true;
            boolean that_present_hrId = true;
            if (this_present_hrId || that_present_hrId) {
                if (!(this_present_hrId && that_present_hrId))
                    return false;
                if (this.hrId != that.hrId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetParams()) ? 131071 : 524287);
            if (isSetParams())
                hashCode = hashCode * 8191 + params.hashCode();

            hashCode = hashCode * 8191 + ((isSetTagList()) ? 131071 : 524287);
            if (isSetTagList())
                hashCode = hashCode * 8191 + tagList.hashCode();

            hashCode = hashCode * 8191 + companyId;

            hashCode = hashCode * 8191 + hrId;

            return hashCode;
        }

        @Override
        public int compareTo(addAllTalentTag_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetParams()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetTagList()).compareTo(other.isSetTagList());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTagList()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagList, other.tagList);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetHrId()).compareTo(other.isSetHrId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHrId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrId, other.hrId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addAllTalentTag_args(");
            boolean first = true;

            sb.append("params:");
            if (this.params == null) {
                sb.append("null");
            } else {
                sb.append(this.params);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("tagList:");
            if (this.tagList == null) {
                sb.append("null");
            } else {
                sb.append(this.tagList);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("hrId:");
            sb.append(this.hrId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addAllTalentTag_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addAllTalentTag_argsStandardScheme getScheme() {
                return new addAllTalentTag_argsStandardScheme();
            }
        }

        private static class addAllTalentTag_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addAllTalentTag_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addAllTalentTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PARAMS
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map226 = iprot.readMapBegin();
                                    struct.params = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map226.size);
                                    java.lang.String _key227;
                                    java.lang.String _val228;
                                    for (int _i229 = 0; _i229 < _map226.size; ++_i229)
                                    {
                                        _key227 = iprot.readString();
                                        _val228 = iprot.readString();
                                        struct.params.put(_key227, _val228);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setParamsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // TAG_LIST
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list230 = iprot.readListBegin();
                                    struct.tagList = new java.util.ArrayList<java.lang.Integer>(_list230.size);
                                    int _elem231;
                                    for (int _i232 = 0; _i232 < _list230.size; ++_i232)
                                    {
                                        _elem231 = iprot.readI32();
                                        struct.tagList.add(_elem231);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setTagListIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hrId = iprot.readI32();
                                struct.setHrIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addAllTalentTag_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.params != null) {
                    oprot.writeFieldBegin(PARAMS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
                        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter233 : struct.params.entrySet())
                        {
                            oprot.writeString(_iter233.getKey());
                            oprot.writeString(_iter233.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.tagList != null) {
                    oprot.writeFieldBegin(TAG_LIST_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.tagList.size()));
                        for (int _iter234 : struct.tagList)
                        {
                            oprot.writeI32(_iter234);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hrId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addAllTalentTag_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addAllTalentTag_argsTupleScheme getScheme() {
                return new addAllTalentTag_argsTupleScheme();
            }
        }

        private static class addAllTalentTag_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addAllTalentTag_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addAllTalentTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetParams()) {
                    optionals.set(0);
                }
                if (struct.isSetTagList()) {
                    optionals.set(1);
                }
                if (struct.isSetCompanyId()) {
                    optionals.set(2);
                }
                if (struct.isSetHrId()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetParams()) {
                    {
                        oprot.writeI32(struct.params.size());
                        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter235 : struct.params.entrySet())
                        {
                            oprot.writeString(_iter235.getKey());
                            oprot.writeString(_iter235.getValue());
                        }
                    }
                }
                if (struct.isSetTagList()) {
                    {
                        oprot.writeI32(struct.tagList.size());
                        for (int _iter236 : struct.tagList)
                        {
                            oprot.writeI32(_iter236);
                        }
                    }
                }
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
                if (struct.isSetHrId()) {
                    oprot.writeI32(struct.hrId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addAllTalentTag_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TMap _map237 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.params = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map237.size);
                        java.lang.String _key238;
                        java.lang.String _val239;
                        for (int _i240 = 0; _i240 < _map237.size; ++_i240)
                        {
                            _key238 = iprot.readString();
                            _val239 = iprot.readString();
                            struct.params.put(_key238, _val239);
                        }
                    }
                    struct.setParamsIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TList _list241 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.tagList = new java.util.ArrayList<java.lang.Integer>(_list241.size);
                        int _elem242;
                        for (int _i243 = 0; _i243 < _list241.size; ++_i243)
                        {
                            _elem242 = iprot.readI32();
                            struct.tagList.add(_elem242);
                        }
                    }
                    struct.setTagListIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.hrId = iprot.readI32();
                    struct.setHrIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addAllTalentTag_result implements org.apache.thrift.TBase<addAllTalentTag_result, addAllTalentTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<addAllTalentTag_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAllTalentTag_result");

        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addAllTalentTag_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addAllTalentTag_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAllTalentTag_result.class, metaDataMap);
        }

        public addAllTalentTag_result() {
        }

        public addAllTalentTag_result(
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addAllTalentTag_result(addAllTalentTag_result other) {
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public addAllTalentTag_result deepCopy() {
            return new addAllTalentTag_result(this);
        }

        @Override
        public void clear() {
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public addAllTalentTag_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addAllTalentTag_result)
                return this.equals((addAllTalentTag_result)that);
            return false;
        }

        public boolean equals(addAllTalentTag_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(addAllTalentTag_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addAllTalentTag_result(");
            boolean first = true;

            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addAllTalentTag_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addAllTalentTag_resultStandardScheme getScheme() {
                return new addAllTalentTag_resultStandardScheme();
            }
        }

        private static class addAllTalentTag_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addAllTalentTag_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addAllTalentTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addAllTalentTag_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addAllTalentTag_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addAllTalentTag_resultTupleScheme getScheme() {
                return new addAllTalentTag_resultTupleScheme();
            }
        }

        private static class addAllTalentTag_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addAllTalentTag_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addAllTalentTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetE()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addAllTalentTag_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addAllTalentPublic_args implements org.apache.thrift.TBase<addAllTalentPublic_args, addAllTalentPublic_args._Fields>, java.io.Serializable, Cloneable, Comparable<addAllTalentPublic_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAllTalentPublic_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hrId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)2);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)3);
        private static final org.apache.thrift.protocol.TField IS_GDPR_FIELD_DESC = new org.apache.thrift.protocol.TField("isGdpr", org.apache.thrift.protocol.TType.I32, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addAllTalentPublic_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addAllTalentPublic_argsTupleSchemeFactory();

        public int hrId; // required
        public java.util.Map<java.lang.String,java.lang.String> params; // required
        public int companyId; // required
        public int isGdpr; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hrId"),
            PARAMS((short)2, "params"),
            COMPANY_ID((short)3, "companyId"),
            IS_GDPR((short)4, "isGdpr");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // PARAMS
                        return PARAMS;
                    case 3: // COMPANY_ID
                        return COMPANY_ID;
                    case 4: // IS_GDPR
                        return IS_GDPR;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HRID_ISSET_ID = 0;
        private static final int __COMPANYID_ISSET_ID = 1;
        private static final int __ISGDPR_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hrId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.IS_GDPR, new org.apache.thrift.meta_data.FieldMetaData("isGdpr", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAllTalentPublic_args.class, metaDataMap);
        }

        public addAllTalentPublic_args() {
        }

        public addAllTalentPublic_args(
                int hrId,
                java.util.Map<java.lang.String,java.lang.String> params,
                int companyId,
                int isGdpr)
        {
            this();
            this.hrId = hrId;
            setHrIdIsSet(true);
            this.params = params;
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            this.isGdpr = isGdpr;
            setIsGdprIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addAllTalentPublic_args(addAllTalentPublic_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hrId = other.hrId;
            if (other.isSetParams()) {
                java.util.Map<java.lang.String,java.lang.String> __this__params = new java.util.HashMap<java.lang.String,java.lang.String>(other.params);
                this.params = __this__params;
            }
            this.companyId = other.companyId;
            this.isGdpr = other.isGdpr;
        }

        public addAllTalentPublic_args deepCopy() {
            return new addAllTalentPublic_args(this);
        }

        @Override
        public void clear() {
            setHrIdIsSet(false);
            this.hrId = 0;
            this.params = null;
            setCompanyIdIsSet(false);
            this.companyId = 0;
            setIsGdprIsSet(false);
            this.isGdpr = 0;
        }

        public int getHrId() {
            return this.hrId;
        }

        public addAllTalentPublic_args setHrId(int hrId) {
            this.hrId = hrId;
            setHrIdIsSet(true);
            return this;
        }

        public void unsetHrId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HRID_ISSET_ID);
        }

        /** Returns true if field hrId is set (has been assigned a value) and false otherwise */
        public boolean isSetHrId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HRID_ISSET_ID);
        }

        public void setHrIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HRID_ISSET_ID, value);
        }

        public int getParamsSize() {
            return (this.params == null) ? 0 : this.params.size();
        }

        public void putToParams(java.lang.String key, java.lang.String val) {
            if (this.params == null) {
                this.params = new java.util.HashMap<java.lang.String,java.lang.String>();
            }
            this.params.put(key, val);
        }

        public java.util.Map<java.lang.String,java.lang.String> getParams() {
            return this.params;
        }

        public addAllTalentPublic_args setParams(java.util.Map<java.lang.String,java.lang.String> params) {
            this.params = params;
            return this;
        }

        public void unsetParams() {
            this.params = null;
        }

        /** Returns true if field params is set (has been assigned a value) and false otherwise */
        public boolean isSetParams() {
            return this.params != null;
        }

        public void setParamsIsSet(boolean value) {
            if (!value) {
                this.params = null;
            }
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public addAllTalentPublic_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public int getIsGdpr() {
            return this.isGdpr;
        }

        public addAllTalentPublic_args setIsGdpr(int isGdpr) {
            this.isGdpr = isGdpr;
            setIsGdprIsSet(true);
            return this;
        }

        public void unsetIsGdpr() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISGDPR_ISSET_ID);
        }

        /** Returns true if field isGdpr is set (has been assigned a value) and false otherwise */
        public boolean isSetIsGdpr() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISGDPR_ISSET_ID);
        }

        public void setIsGdprIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISGDPR_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHrId();
                    } else {
                        setHrId((java.lang.Integer)value);
                    }
                    break;

                case PARAMS:
                    if (value == null) {
                        unsetParams();
                    } else {
                        setParams((java.util.Map<java.lang.String,java.lang.String>)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

                case IS_GDPR:
                    if (value == null) {
                        unsetIsGdpr();
                    } else {
                        setIsGdpr((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHrId();

                case PARAMS:
                    return getParams();

                case COMPANY_ID:
                    return getCompanyId();

                case IS_GDPR:
                    return getIsGdpr();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHrId();
                case PARAMS:
                    return isSetParams();
                case COMPANY_ID:
                    return isSetCompanyId();
                case IS_GDPR:
                    return isSetIsGdpr();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addAllTalentPublic_args)
                return this.equals((addAllTalentPublic_args)that);
            return false;
        }

        public boolean equals(addAllTalentPublic_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hrId = true;
            boolean that_present_hrId = true;
            if (this_present_hrId || that_present_hrId) {
                if (!(this_present_hrId && that_present_hrId))
                    return false;
                if (this.hrId != that.hrId)
                    return false;
            }

            boolean this_present_params = true && this.isSetParams();
            boolean that_present_params = true && that.isSetParams();
            if (this_present_params || that_present_params) {
                if (!(this_present_params && that_present_params))
                    return false;
                if (!this.params.equals(that.params))
                    return false;
            }

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            boolean this_present_isGdpr = true;
            boolean that_present_isGdpr = true;
            if (this_present_isGdpr || that_present_isGdpr) {
                if (!(this_present_isGdpr && that_present_isGdpr))
                    return false;
                if (this.isGdpr != that.isGdpr)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hrId;

            hashCode = hashCode * 8191 + ((isSetParams()) ? 131071 : 524287);
            if (isSetParams())
                hashCode = hashCode * 8191 + params.hashCode();

            hashCode = hashCode * 8191 + companyId;

            hashCode = hashCode * 8191 + isGdpr;

            return hashCode;
        }

        @Override
        public int compareTo(addAllTalentPublic_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHrId()).compareTo(other.isSetHrId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHrId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrId, other.hrId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetParams()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetIsGdpr()).compareTo(other.isSetIsGdpr());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetIsGdpr()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isGdpr, other.isGdpr);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addAllTalentPublic_args(");
            boolean first = true;

            sb.append("hrId:");
            sb.append(this.hrId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("params:");
            if (this.params == null) {
                sb.append("null");
            } else {
                sb.append(this.params);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("isGdpr:");
            sb.append(this.isGdpr);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addAllTalentPublic_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addAllTalentPublic_argsStandardScheme getScheme() {
                return new addAllTalentPublic_argsStandardScheme();
            }
        }

        private static class addAllTalentPublic_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addAllTalentPublic_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addAllTalentPublic_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hrId = iprot.readI32();
                                struct.setHrIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PARAMS
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map244 = iprot.readMapBegin();
                                    struct.params = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map244.size);
                                    java.lang.String _key245;
                                    java.lang.String _val246;
                                    for (int _i247 = 0; _i247 < _map244.size; ++_i247)
                                    {
                                        _key245 = iprot.readString();
                                        _val246 = iprot.readString();
                                        struct.params.put(_key245, _val246);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setParamsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // IS_GDPR
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.isGdpr = iprot.readI32();
                                struct.setIsGdprIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addAllTalentPublic_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hrId);
                oprot.writeFieldEnd();
                if (struct.params != null) {
                    oprot.writeFieldBegin(PARAMS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
                        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter248 : struct.params.entrySet())
                        {
                            oprot.writeString(_iter248.getKey());
                            oprot.writeString(_iter248.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(IS_GDPR_FIELD_DESC);
                oprot.writeI32(struct.isGdpr);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addAllTalentPublic_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addAllTalentPublic_argsTupleScheme getScheme() {
                return new addAllTalentPublic_argsTupleScheme();
            }
        }

        private static class addAllTalentPublic_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addAllTalentPublic_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addAllTalentPublic_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHrId()) {
                    optionals.set(0);
                }
                if (struct.isSetParams()) {
                    optionals.set(1);
                }
                if (struct.isSetCompanyId()) {
                    optionals.set(2);
                }
                if (struct.isSetIsGdpr()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetHrId()) {
                    oprot.writeI32(struct.hrId);
                }
                if (struct.isSetParams()) {
                    {
                        oprot.writeI32(struct.params.size());
                        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter249 : struct.params.entrySet())
                        {
                            oprot.writeString(_iter249.getKey());
                            oprot.writeString(_iter249.getValue());
                        }
                    }
                }
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
                if (struct.isSetIsGdpr()) {
                    oprot.writeI32(struct.isGdpr);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addAllTalentPublic_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.hrId = iprot.readI32();
                    struct.setHrIdIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TMap _map250 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.params = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map250.size);
                        java.lang.String _key251;
                        java.lang.String _val252;
                        for (int _i253 = 0; _i253 < _map250.size; ++_i253)
                        {
                            _key251 = iprot.readString();
                            _val252 = iprot.readString();
                            struct.params.put(_key251, _val252);
                        }
                    }
                    struct.setParamsIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.isGdpr = iprot.readI32();
                    struct.setIsGdprIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addAllTalentPublic_result implements org.apache.thrift.TBase<addAllTalentPublic_result, addAllTalentPublic_result._Fields>, java.io.Serializable, Cloneable, Comparable<addAllTalentPublic_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAllTalentPublic_result");

        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addAllTalentPublic_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addAllTalentPublic_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAllTalentPublic_result.class, metaDataMap);
        }

        public addAllTalentPublic_result() {
        }

        public addAllTalentPublic_result(
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addAllTalentPublic_result(addAllTalentPublic_result other) {
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public addAllTalentPublic_result deepCopy() {
            return new addAllTalentPublic_result(this);
        }

        @Override
        public void clear() {
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public addAllTalentPublic_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addAllTalentPublic_result)
                return this.equals((addAllTalentPublic_result)that);
            return false;
        }

        public boolean equals(addAllTalentPublic_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(addAllTalentPublic_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addAllTalentPublic_result(");
            boolean first = true;

            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addAllTalentPublic_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addAllTalentPublic_resultStandardScheme getScheme() {
                return new addAllTalentPublic_resultStandardScheme();
            }
        }

        private static class addAllTalentPublic_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addAllTalentPublic_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addAllTalentPublic_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addAllTalentPublic_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addAllTalentPublic_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addAllTalentPublic_resultTupleScheme getScheme() {
                return new addAllTalentPublic_resultTupleScheme();
            }
        }

        private static class addAllTalentPublic_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addAllTalentPublic_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addAllTalentPublic_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetE()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addAllTalentPublic_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addAllTalentPrivate_args implements org.apache.thrift.TBase<addAllTalentPrivate_args, addAllTalentPrivate_args._Fields>, java.io.Serializable, Cloneable, Comparable<addAllTalentPrivate_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAllTalentPrivate_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hrId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)2);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addAllTalentPrivate_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addAllTalentPrivate_argsTupleSchemeFactory();

        public int hrId; // required
        public java.util.Map<java.lang.String,java.lang.String> params; // required
        public int companyId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hrId"),
            PARAMS((short)2, "params"),
            COMPANY_ID((short)3, "companyId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // PARAMS
                        return PARAMS;
                    case 3: // COMPANY_ID
                        return COMPANY_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HRID_ISSET_ID = 0;
        private static final int __COMPANYID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hrId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAllTalentPrivate_args.class, metaDataMap);
        }

        public addAllTalentPrivate_args() {
        }

        public addAllTalentPrivate_args(
                int hrId,
                java.util.Map<java.lang.String,java.lang.String> params,
                int companyId)
        {
            this();
            this.hrId = hrId;
            setHrIdIsSet(true);
            this.params = params;
            this.companyId = companyId;
            setCompanyIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addAllTalentPrivate_args(addAllTalentPrivate_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hrId = other.hrId;
            if (other.isSetParams()) {
                java.util.Map<java.lang.String,java.lang.String> __this__params = new java.util.HashMap<java.lang.String,java.lang.String>(other.params);
                this.params = __this__params;
            }
            this.companyId = other.companyId;
        }

        public addAllTalentPrivate_args deepCopy() {
            return new addAllTalentPrivate_args(this);
        }

        @Override
        public void clear() {
            setHrIdIsSet(false);
            this.hrId = 0;
            this.params = null;
            setCompanyIdIsSet(false);
            this.companyId = 0;
        }

        public int getHrId() {
            return this.hrId;
        }

        public addAllTalentPrivate_args setHrId(int hrId) {
            this.hrId = hrId;
            setHrIdIsSet(true);
            return this;
        }

        public void unsetHrId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HRID_ISSET_ID);
        }

        /** Returns true if field hrId is set (has been assigned a value) and false otherwise */
        public boolean isSetHrId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HRID_ISSET_ID);
        }

        public void setHrIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HRID_ISSET_ID, value);
        }

        public int getParamsSize() {
            return (this.params == null) ? 0 : this.params.size();
        }

        public void putToParams(java.lang.String key, java.lang.String val) {
            if (this.params == null) {
                this.params = new java.util.HashMap<java.lang.String,java.lang.String>();
            }
            this.params.put(key, val);
        }

        public java.util.Map<java.lang.String,java.lang.String> getParams() {
            return this.params;
        }

        public addAllTalentPrivate_args setParams(java.util.Map<java.lang.String,java.lang.String> params) {
            this.params = params;
            return this;
        }

        public void unsetParams() {
            this.params = null;
        }

        /** Returns true if field params is set (has been assigned a value) and false otherwise */
        public boolean isSetParams() {
            return this.params != null;
        }

        public void setParamsIsSet(boolean value) {
            if (!value) {
                this.params = null;
            }
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public addAllTalentPrivate_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHrId();
                    } else {
                        setHrId((java.lang.Integer)value);
                    }
                    break;

                case PARAMS:
                    if (value == null) {
                        unsetParams();
                    } else {
                        setParams((java.util.Map<java.lang.String,java.lang.String>)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHrId();

                case PARAMS:
                    return getParams();

                case COMPANY_ID:
                    return getCompanyId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHrId();
                case PARAMS:
                    return isSetParams();
                case COMPANY_ID:
                    return isSetCompanyId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addAllTalentPrivate_args)
                return this.equals((addAllTalentPrivate_args)that);
            return false;
        }

        public boolean equals(addAllTalentPrivate_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hrId = true;
            boolean that_present_hrId = true;
            if (this_present_hrId || that_present_hrId) {
                if (!(this_present_hrId && that_present_hrId))
                    return false;
                if (this.hrId != that.hrId)
                    return false;
            }

            boolean this_present_params = true && this.isSetParams();
            boolean that_present_params = true && that.isSetParams();
            if (this_present_params || that_present_params) {
                if (!(this_present_params && that_present_params))
                    return false;
                if (!this.params.equals(that.params))
                    return false;
            }

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hrId;

            hashCode = hashCode * 8191 + ((isSetParams()) ? 131071 : 524287);
            if (isSetParams())
                hashCode = hashCode * 8191 + params.hashCode();

            hashCode = hashCode * 8191 + companyId;

            return hashCode;
        }

        @Override
        public int compareTo(addAllTalentPrivate_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHrId()).compareTo(other.isSetHrId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHrId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrId, other.hrId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetParams()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addAllTalentPrivate_args(");
            boolean first = true;

            sb.append("hrId:");
            sb.append(this.hrId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("params:");
            if (this.params == null) {
                sb.append("null");
            } else {
                sb.append(this.params);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addAllTalentPrivate_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addAllTalentPrivate_argsStandardScheme getScheme() {
                return new addAllTalentPrivate_argsStandardScheme();
            }
        }

        private static class addAllTalentPrivate_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addAllTalentPrivate_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addAllTalentPrivate_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hrId = iprot.readI32();
                                struct.setHrIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PARAMS
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map254 = iprot.readMapBegin();
                                    struct.params = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map254.size);
                                    java.lang.String _key255;
                                    java.lang.String _val256;
                                    for (int _i257 = 0; _i257 < _map254.size; ++_i257)
                                    {
                                        _key255 = iprot.readString();
                                        _val256 = iprot.readString();
                                        struct.params.put(_key255, _val256);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setParamsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addAllTalentPrivate_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hrId);
                oprot.writeFieldEnd();
                if (struct.params != null) {
                    oprot.writeFieldBegin(PARAMS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
                        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter258 : struct.params.entrySet())
                        {
                            oprot.writeString(_iter258.getKey());
                            oprot.writeString(_iter258.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addAllTalentPrivate_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addAllTalentPrivate_argsTupleScheme getScheme() {
                return new addAllTalentPrivate_argsTupleScheme();
            }
        }

        private static class addAllTalentPrivate_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addAllTalentPrivate_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addAllTalentPrivate_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHrId()) {
                    optionals.set(0);
                }
                if (struct.isSetParams()) {
                    optionals.set(1);
                }
                if (struct.isSetCompanyId()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHrId()) {
                    oprot.writeI32(struct.hrId);
                }
                if (struct.isSetParams()) {
                    {
                        oprot.writeI32(struct.params.size());
                        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter259 : struct.params.entrySet())
                        {
                            oprot.writeString(_iter259.getKey());
                            oprot.writeString(_iter259.getValue());
                        }
                    }
                }
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addAllTalentPrivate_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hrId = iprot.readI32();
                    struct.setHrIdIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TMap _map260 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.params = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map260.size);
                        java.lang.String _key261;
                        java.lang.String _val262;
                        for (int _i263 = 0; _i263 < _map260.size; ++_i263)
                        {
                            _key261 = iprot.readString();
                            _val262 = iprot.readString();
                            struct.params.put(_key261, _val262);
                        }
                    }
                    struct.setParamsIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addAllTalentPrivate_result implements org.apache.thrift.TBase<addAllTalentPrivate_result, addAllTalentPrivate_result._Fields>, java.io.Serializable, Cloneable, Comparable<addAllTalentPrivate_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAllTalentPrivate_result");

        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addAllTalentPrivate_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addAllTalentPrivate_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAllTalentPrivate_result.class, metaDataMap);
        }

        public addAllTalentPrivate_result() {
        }

        public addAllTalentPrivate_result(
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addAllTalentPrivate_result(addAllTalentPrivate_result other) {
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public addAllTalentPrivate_result deepCopy() {
            return new addAllTalentPrivate_result(this);
        }

        @Override
        public void clear() {
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public addAllTalentPrivate_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addAllTalentPrivate_result)
                return this.equals((addAllTalentPrivate_result)that);
            return false;
        }

        public boolean equals(addAllTalentPrivate_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(addAllTalentPrivate_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addAllTalentPrivate_result(");
            boolean first = true;

            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addAllTalentPrivate_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addAllTalentPrivate_resultStandardScheme getScheme() {
                return new addAllTalentPrivate_resultStandardScheme();
            }
        }

        private static class addAllTalentPrivate_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addAllTalentPrivate_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addAllTalentPrivate_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addAllTalentPrivate_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addAllTalentPrivate_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addAllTalentPrivate_resultTupleScheme getScheme() {
                return new addAllTalentPrivate_resultTupleScheme();
            }
        }

        private static class addAllTalentPrivate_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addAllTalentPrivate_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addAllTalentPrivate_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetE()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addAllTalentPrivate_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class cancleAllTalent_args implements org.apache.thrift.TBase<cancleAllTalent_args, cancleAllTalent_args._Fields>, java.io.Serializable, Cloneable, Comparable<cancleAllTalent_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancleAllTalent_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hrId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)2);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new cancleAllTalent_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new cancleAllTalent_argsTupleSchemeFactory();

        public int hrId; // required
        public java.util.Map<java.lang.String,java.lang.String> params; // required
        public int companyId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hrId"),
            PARAMS((short)2, "params"),
            COMPANY_ID((short)3, "companyId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // PARAMS
                        return PARAMS;
                    case 3: // COMPANY_ID
                        return COMPANY_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HRID_ISSET_ID = 0;
        private static final int __COMPANYID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hrId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancleAllTalent_args.class, metaDataMap);
        }

        public cancleAllTalent_args() {
        }

        public cancleAllTalent_args(
                int hrId,
                java.util.Map<java.lang.String,java.lang.String> params,
                int companyId)
        {
            this();
            this.hrId = hrId;
            setHrIdIsSet(true);
            this.params = params;
            this.companyId = companyId;
            setCompanyIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public cancleAllTalent_args(cancleAllTalent_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hrId = other.hrId;
            if (other.isSetParams()) {
                java.util.Map<java.lang.String,java.lang.String> __this__params = new java.util.HashMap<java.lang.String,java.lang.String>(other.params);
                this.params = __this__params;
            }
            this.companyId = other.companyId;
        }

        public cancleAllTalent_args deepCopy() {
            return new cancleAllTalent_args(this);
        }

        @Override
        public void clear() {
            setHrIdIsSet(false);
            this.hrId = 0;
            this.params = null;
            setCompanyIdIsSet(false);
            this.companyId = 0;
        }

        public int getHrId() {
            return this.hrId;
        }

        public cancleAllTalent_args setHrId(int hrId) {
            this.hrId = hrId;
            setHrIdIsSet(true);
            return this;
        }

        public void unsetHrId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HRID_ISSET_ID);
        }

        /** Returns true if field hrId is set (has been assigned a value) and false otherwise */
        public boolean isSetHrId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HRID_ISSET_ID);
        }

        public void setHrIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HRID_ISSET_ID, value);
        }

        public int getParamsSize() {
            return (this.params == null) ? 0 : this.params.size();
        }

        public void putToParams(java.lang.String key, java.lang.String val) {
            if (this.params == null) {
                this.params = new java.util.HashMap<java.lang.String,java.lang.String>();
            }
            this.params.put(key, val);
        }

        public java.util.Map<java.lang.String,java.lang.String> getParams() {
            return this.params;
        }

        public cancleAllTalent_args setParams(java.util.Map<java.lang.String,java.lang.String> params) {
            this.params = params;
            return this;
        }

        public void unsetParams() {
            this.params = null;
        }

        /** Returns true if field params is set (has been assigned a value) and false otherwise */
        public boolean isSetParams() {
            return this.params != null;
        }

        public void setParamsIsSet(boolean value) {
            if (!value) {
                this.params = null;
            }
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public cancleAllTalent_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHrId();
                    } else {
                        setHrId((java.lang.Integer)value);
                    }
                    break;

                case PARAMS:
                    if (value == null) {
                        unsetParams();
                    } else {
                        setParams((java.util.Map<java.lang.String,java.lang.String>)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHrId();

                case PARAMS:
                    return getParams();

                case COMPANY_ID:
                    return getCompanyId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHrId();
                case PARAMS:
                    return isSetParams();
                case COMPANY_ID:
                    return isSetCompanyId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof cancleAllTalent_args)
                return this.equals((cancleAllTalent_args)that);
            return false;
        }

        public boolean equals(cancleAllTalent_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hrId = true;
            boolean that_present_hrId = true;
            if (this_present_hrId || that_present_hrId) {
                if (!(this_present_hrId && that_present_hrId))
                    return false;
                if (this.hrId != that.hrId)
                    return false;
            }

            boolean this_present_params = true && this.isSetParams();
            boolean that_present_params = true && that.isSetParams();
            if (this_present_params || that_present_params) {
                if (!(this_present_params && that_present_params))
                    return false;
                if (!this.params.equals(that.params))
                    return false;
            }

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hrId;

            hashCode = hashCode * 8191 + ((isSetParams()) ? 131071 : 524287);
            if (isSetParams())
                hashCode = hashCode * 8191 + params.hashCode();

            hashCode = hashCode * 8191 + companyId;

            return hashCode;
        }

        @Override
        public int compareTo(cancleAllTalent_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHrId()).compareTo(other.isSetHrId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHrId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrId, other.hrId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetParams()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("cancleAllTalent_args(");
            boolean first = true;

            sb.append("hrId:");
            sb.append(this.hrId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("params:");
            if (this.params == null) {
                sb.append("null");
            } else {
                sb.append(this.params);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class cancleAllTalent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public cancleAllTalent_argsStandardScheme getScheme() {
                return new cancleAllTalent_argsStandardScheme();
            }
        }

        private static class cancleAllTalent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<cancleAllTalent_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, cancleAllTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hrId = iprot.readI32();
                                struct.setHrIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PARAMS
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map264 = iprot.readMapBegin();
                                    struct.params = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map264.size);
                                    java.lang.String _key265;
                                    java.lang.String _val266;
                                    for (int _i267 = 0; _i267 < _map264.size; ++_i267)
                                    {
                                        _key265 = iprot.readString();
                                        _val266 = iprot.readString();
                                        struct.params.put(_key265, _val266);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setParamsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, cancleAllTalent_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hrId);
                oprot.writeFieldEnd();
                if (struct.params != null) {
                    oprot.writeFieldBegin(PARAMS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
                        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter268 : struct.params.entrySet())
                        {
                            oprot.writeString(_iter268.getKey());
                            oprot.writeString(_iter268.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class cancleAllTalent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public cancleAllTalent_argsTupleScheme getScheme() {
                return new cancleAllTalent_argsTupleScheme();
            }
        }

        private static class cancleAllTalent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<cancleAllTalent_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, cancleAllTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHrId()) {
                    optionals.set(0);
                }
                if (struct.isSetParams()) {
                    optionals.set(1);
                }
                if (struct.isSetCompanyId()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHrId()) {
                    oprot.writeI32(struct.hrId);
                }
                if (struct.isSetParams()) {
                    {
                        oprot.writeI32(struct.params.size());
                        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter269 : struct.params.entrySet())
                        {
                            oprot.writeString(_iter269.getKey());
                            oprot.writeString(_iter269.getValue());
                        }
                    }
                }
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, cancleAllTalent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hrId = iprot.readI32();
                    struct.setHrIdIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TMap _map270 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.params = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map270.size);
                        java.lang.String _key271;
                        java.lang.String _val272;
                        for (int _i273 = 0; _i273 < _map270.size; ++_i273)
                        {
                            _key271 = iprot.readString();
                            _val272 = iprot.readString();
                            struct.params.put(_key271, _val272);
                        }
                    }
                    struct.setParamsIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class cancleAllTalent_result implements org.apache.thrift.TBase<cancleAllTalent_result, cancleAllTalent_result._Fields>, java.io.Serializable, Cloneable, Comparable<cancleAllTalent_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancleAllTalent_result");

        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new cancleAllTalent_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new cancleAllTalent_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancleAllTalent_result.class, metaDataMap);
        }

        public cancleAllTalent_result() {
        }

        public cancleAllTalent_result(
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public cancleAllTalent_result(cancleAllTalent_result other) {
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public cancleAllTalent_result deepCopy() {
            return new cancleAllTalent_result(this);
        }

        @Override
        public void clear() {
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public cancleAllTalent_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof cancleAllTalent_result)
                return this.equals((cancleAllTalent_result)that);
            return false;
        }

        public boolean equals(cancleAllTalent_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(cancleAllTalent_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("cancleAllTalent_result(");
            boolean first = true;

            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class cancleAllTalent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public cancleAllTalent_resultStandardScheme getScheme() {
                return new cancleAllTalent_resultStandardScheme();
            }
        }

        private static class cancleAllTalent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<cancleAllTalent_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, cancleAllTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, cancleAllTalent_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class cancleAllTalent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public cancleAllTalent_resultTupleScheme getScheme() {
                return new cancleAllTalent_resultTupleScheme();
            }
        }

        private static class cancleAllTalent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<cancleAllTalent_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, cancleAllTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetE()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, cancleAllTalent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updateCompanyEmailBalance_args implements org.apache.thrift.TBase<updateCompanyEmailBalance_args, updateCompanyEmailBalance_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateCompanyEmailBalance_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCompanyEmailBalance_args");

        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("balance", org.apache.thrift.protocol.TType.I32, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateCompanyEmailBalance_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateCompanyEmailBalance_argsTupleSchemeFactory();

        public int company_id; // required
        public int balance; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_ID((short)1, "company_id"),
            BALANCE((short)2, "balance");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // COMPANY_ID
                        return COMPANY_ID;
                    case 2: // BALANCE
                        return BALANCE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __COMPANY_ID_ISSET_ID = 0;
        private static final int __BALANCE_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.BALANCE, new org.apache.thrift.meta_data.FieldMetaData("balance", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCompanyEmailBalance_args.class, metaDataMap);
        }

        public updateCompanyEmailBalance_args() {
        }

        public updateCompanyEmailBalance_args(
                int company_id,
                int balance)
        {
            this();
            this.company_id = company_id;
            setCompany_idIsSet(true);
            this.balance = balance;
            setBalanceIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateCompanyEmailBalance_args(updateCompanyEmailBalance_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.company_id = other.company_id;
            this.balance = other.balance;
        }

        public updateCompanyEmailBalance_args deepCopy() {
            return new updateCompanyEmailBalance_args(this);
        }

        @Override
        public void clear() {
            setCompany_idIsSet(false);
            this.company_id = 0;
            setBalanceIsSet(false);
            this.balance = 0;
        }

        public int getCompany_id() {
            return this.company_id;
        }

        public updateCompanyEmailBalance_args setCompany_id(int company_id) {
            this.company_id = company_id;
            setCompany_idIsSet(true);
            return this;
        }

        public void unsetCompany_id() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
        public boolean isSetCompany_id() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
        }

        public void setCompany_idIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
        }

        public int getBalance() {
            return this.balance;
        }

        public updateCompanyEmailBalance_args setBalance(int balance) {
            this.balance = balance;
            setBalanceIsSet(true);
            return this;
        }

        public void unsetBalance() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BALANCE_ISSET_ID);
        }

        /** Returns true if field balance is set (has been assigned a value) and false otherwise */
        public boolean isSetBalance() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BALANCE_ISSET_ID);
        }

        public void setBalanceIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BALANCE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case COMPANY_ID:
                    if (value == null) {
                        unsetCompany_id();
                    } else {
                        setCompany_id((java.lang.Integer)value);
                    }
                    break;

                case BALANCE:
                    if (value == null) {
                        unsetBalance();
                    } else {
                        setBalance((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_ID:
                    return getCompany_id();

                case BALANCE:
                    return getBalance();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_ID:
                    return isSetCompany_id();
                case BALANCE:
                    return isSetBalance();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updateCompanyEmailBalance_args)
                return this.equals((updateCompanyEmailBalance_args)that);
            return false;
        }

        public boolean equals(updateCompanyEmailBalance_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_company_id = true;
            boolean that_present_company_id = true;
            if (this_present_company_id || that_present_company_id) {
                if (!(this_present_company_id && that_present_company_id))
                    return false;
                if (this.company_id != that.company_id)
                    return false;
            }

            boolean this_present_balance = true;
            boolean that_present_balance = true;
            if (this_present_balance || that_present_balance) {
                if (!(this_present_balance && that_present_balance))
                    return false;
                if (this.balance != that.balance)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + company_id;

            hashCode = hashCode * 8191 + balance;

            return hashCode;
        }

        @Override
        public int compareTo(updateCompanyEmailBalance_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompany_id()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetBalance()).compareTo(other.isSetBalance());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetBalance()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balance, other.balance);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updateCompanyEmailBalance_args(");
            boolean first = true;

            sb.append("company_id:");
            sb.append(this.company_id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("balance:");
            sb.append(this.balance);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updateCompanyEmailBalance_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateCompanyEmailBalance_argsStandardScheme getScheme() {
                return new updateCompanyEmailBalance_argsStandardScheme();
            }
        }

        private static class updateCompanyEmailBalance_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateCompanyEmailBalance_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateCompanyEmailBalance_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.company_id = iprot.readI32();
                                struct.setCompany_idIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // BALANCE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.balance = iprot.readI32();
                                struct.setBalanceIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateCompanyEmailBalance_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.company_id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(BALANCE_FIELD_DESC);
                oprot.writeI32(struct.balance);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateCompanyEmailBalance_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateCompanyEmailBalance_argsTupleScheme getScheme() {
                return new updateCompanyEmailBalance_argsTupleScheme();
            }
        }

        private static class updateCompanyEmailBalance_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateCompanyEmailBalance_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateCompanyEmailBalance_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompany_id()) {
                    optionals.set(0);
                }
                if (struct.isSetBalance()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetCompany_id()) {
                    oprot.writeI32(struct.company_id);
                }
                if (struct.isSetBalance()) {
                    oprot.writeI32(struct.balance);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateCompanyEmailBalance_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.company_id = iprot.readI32();
                    struct.setCompany_idIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.balance = iprot.readI32();
                    struct.setBalanceIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class updateCompanyEmailBalance_result implements org.apache.thrift.TBase<updateCompanyEmailBalance_result, updateCompanyEmailBalance_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateCompanyEmailBalance_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCompanyEmailBalance_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateCompanyEmailBalance_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateCompanyEmailBalance_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCompanyEmailBalance_result.class, metaDataMap);
        }

        public updateCompanyEmailBalance_result() {
        }

        public updateCompanyEmailBalance_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateCompanyEmailBalance_result(updateCompanyEmailBalance_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public updateCompanyEmailBalance_result deepCopy() {
            return new updateCompanyEmailBalance_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public updateCompanyEmailBalance_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public updateCompanyEmailBalance_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof updateCompanyEmailBalance_result)
                return this.equals((updateCompanyEmailBalance_result)that);
            return false;
        }

        public boolean equals(updateCompanyEmailBalance_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(updateCompanyEmailBalance_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("updateCompanyEmailBalance_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updateCompanyEmailBalance_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateCompanyEmailBalance_resultStandardScheme getScheme() {
                return new updateCompanyEmailBalance_resultStandardScheme();
            }
        }

        private static class updateCompanyEmailBalance_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateCompanyEmailBalance_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateCompanyEmailBalance_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateCompanyEmailBalance_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateCompanyEmailBalance_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public updateCompanyEmailBalance_resultTupleScheme getScheme() {
                return new updateCompanyEmailBalance_resultTupleScheme();
            }
        }

        private static class updateCompanyEmailBalance_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateCompanyEmailBalance_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateCompanyEmailBalance_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateCompanyEmailBalance_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class sendInviteEmail_args implements org.apache.thrift.TBase<sendInviteEmail_args, sendInviteEmail_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendInviteEmail_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendInviteEmail_args");

        private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)1);
        private static final org.apache.thrift.protocol.TField USER_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("userIdList", org.apache.thrift.protocol.TType.LIST, (short)2);
        private static final org.apache.thrift.protocol.TField POSITION_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("positionIdList", org.apache.thrift.protocol.TType.LIST, (short)3);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)4);
        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hrId", org.apache.thrift.protocol.TType.I32, (short)5);
        private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.I32, (short)6);
        private static final org.apache.thrift.protocol.TField POSITION_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("positionFlag", org.apache.thrift.protocol.TType.I32, (short)7);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendInviteEmail_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendInviteEmail_argsTupleSchemeFactory();

        public java.util.Map<java.lang.String,java.lang.String> params; // required
        public java.util.List<java.lang.Integer> userIdList; // required
        public java.util.List<java.lang.Integer> positionIdList; // required
        public int companyId; // required
        public int hrId; // required
        public int flag; // required
        public int positionFlag; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PARAMS((short)1, "params"),
            USER_ID_LIST((short)2, "userIdList"),
            POSITION_ID_LIST((short)3, "positionIdList"),
            COMPANY_ID((short)4, "companyId"),
            HR_ID((short)5, "hrId"),
            FLAG((short)6, "flag"),
            POSITION_FLAG((short)7, "positionFlag");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PARAMS
                        return PARAMS;
                    case 2: // USER_ID_LIST
                        return USER_ID_LIST;
                    case 3: // POSITION_ID_LIST
                        return POSITION_ID_LIST;
                    case 4: // COMPANY_ID
                        return COMPANY_ID;
                    case 5: // HR_ID
                        return HR_ID;
                    case 6: // FLAG
                        return FLAG;
                    case 7: // POSITION_FLAG
                        return POSITION_FLAG;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __COMPANYID_ISSET_ID = 0;
        private static final int __HRID_ISSET_ID = 1;
        private static final int __FLAG_ISSET_ID = 2;
        private static final int __POSITIONFLAG_ISSET_ID = 3;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
            tmpMap.put(_Fields.USER_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("userIdList", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            tmpMap.put(_Fields.POSITION_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("positionIdList", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hrId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.POSITION_FLAG, new org.apache.thrift.meta_data.FieldMetaData("positionFlag", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendInviteEmail_args.class, metaDataMap);
        }

        public sendInviteEmail_args() {
        }

        public sendInviteEmail_args(
                java.util.Map<java.lang.String,java.lang.String> params,
                java.util.List<java.lang.Integer> userIdList,
                java.util.List<java.lang.Integer> positionIdList,
                int companyId,
                int hrId,
                int flag,
                int positionFlag)
        {
            this();
            this.params = params;
            this.userIdList = userIdList;
            this.positionIdList = positionIdList;
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            this.hrId = hrId;
            setHrIdIsSet(true);
            this.flag = flag;
            setFlagIsSet(true);
            this.positionFlag = positionFlag;
            setPositionFlagIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sendInviteEmail_args(sendInviteEmail_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetParams()) {
                java.util.Map<java.lang.String,java.lang.String> __this__params = new java.util.HashMap<java.lang.String,java.lang.String>(other.params);
                this.params = __this__params;
            }
            if (other.isSetUserIdList()) {
                java.util.List<java.lang.Integer> __this__userIdList = new java.util.ArrayList<java.lang.Integer>(other.userIdList);
                this.userIdList = __this__userIdList;
            }
            if (other.isSetPositionIdList()) {
                java.util.List<java.lang.Integer> __this__positionIdList = new java.util.ArrayList<java.lang.Integer>(other.positionIdList);
                this.positionIdList = __this__positionIdList;
            }
            this.companyId = other.companyId;
            this.hrId = other.hrId;
            this.flag = other.flag;
            this.positionFlag = other.positionFlag;
        }

        public sendInviteEmail_args deepCopy() {
            return new sendInviteEmail_args(this);
        }

        @Override
        public void clear() {
            this.params = null;
            this.userIdList = null;
            this.positionIdList = null;
            setCompanyIdIsSet(false);
            this.companyId = 0;
            setHrIdIsSet(false);
            this.hrId = 0;
            setFlagIsSet(false);
            this.flag = 0;
            setPositionFlagIsSet(false);
            this.positionFlag = 0;
        }

        public int getParamsSize() {
            return (this.params == null) ? 0 : this.params.size();
        }

        public void putToParams(java.lang.String key, java.lang.String val) {
            if (this.params == null) {
                this.params = new java.util.HashMap<java.lang.String,java.lang.String>();
            }
            this.params.put(key, val);
        }

        public java.util.Map<java.lang.String,java.lang.String> getParams() {
            return this.params;
        }

        public sendInviteEmail_args setParams(java.util.Map<java.lang.String,java.lang.String> params) {
            this.params = params;
            return this;
        }

        public void unsetParams() {
            this.params = null;
        }

        /** Returns true if field params is set (has been assigned a value) and false otherwise */
        public boolean isSetParams() {
            return this.params != null;
        }

        public void setParamsIsSet(boolean value) {
            if (!value) {
                this.params = null;
            }
        }

        public int getUserIdListSize() {
            return (this.userIdList == null) ? 0 : this.userIdList.size();
        }

        public java.util.Iterator<java.lang.Integer> getUserIdListIterator() {
            return (this.userIdList == null) ? null : this.userIdList.iterator();
        }

        public void addToUserIdList(int elem) {
            if (this.userIdList == null) {
                this.userIdList = new java.util.ArrayList<java.lang.Integer>();
            }
            this.userIdList.add(elem);
        }

        public java.util.List<java.lang.Integer> getUserIdList() {
            return this.userIdList;
        }

        public sendInviteEmail_args setUserIdList(java.util.List<java.lang.Integer> userIdList) {
            this.userIdList = userIdList;
            return this;
        }

        public void unsetUserIdList() {
            this.userIdList = null;
        }

        /** Returns true if field userIdList is set (has been assigned a value) and false otherwise */
        public boolean isSetUserIdList() {
            return this.userIdList != null;
        }

        public void setUserIdListIsSet(boolean value) {
            if (!value) {
                this.userIdList = null;
            }
        }

        public int getPositionIdListSize() {
            return (this.positionIdList == null) ? 0 : this.positionIdList.size();
        }

        public java.util.Iterator<java.lang.Integer> getPositionIdListIterator() {
            return (this.positionIdList == null) ? null : this.positionIdList.iterator();
        }

        public void addToPositionIdList(int elem) {
            if (this.positionIdList == null) {
                this.positionIdList = new java.util.ArrayList<java.lang.Integer>();
            }
            this.positionIdList.add(elem);
        }

        public java.util.List<java.lang.Integer> getPositionIdList() {
            return this.positionIdList;
        }

        public sendInviteEmail_args setPositionIdList(java.util.List<java.lang.Integer> positionIdList) {
            this.positionIdList = positionIdList;
            return this;
        }

        public void unsetPositionIdList() {
            this.positionIdList = null;
        }

        /** Returns true if field positionIdList is set (has been assigned a value) and false otherwise */
        public boolean isSetPositionIdList() {
            return this.positionIdList != null;
        }

        public void setPositionIdListIsSet(boolean value) {
            if (!value) {
                this.positionIdList = null;
            }
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public sendInviteEmail_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public int getHrId() {
            return this.hrId;
        }

        public sendInviteEmail_args setHrId(int hrId) {
            this.hrId = hrId;
            setHrIdIsSet(true);
            return this;
        }

        public void unsetHrId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HRID_ISSET_ID);
        }

        /** Returns true if field hrId is set (has been assigned a value) and false otherwise */
        public boolean isSetHrId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HRID_ISSET_ID);
        }

        public void setHrIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HRID_ISSET_ID, value);
        }

        public int getFlag() {
            return this.flag;
        }

        public sendInviteEmail_args setFlag(int flag) {
            this.flag = flag;
            setFlagIsSet(true);
            return this;
        }

        public void unsetFlag() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
        }

        /** Returns true if field flag is set (has been assigned a value) and false otherwise */
        public boolean isSetFlag() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
        }

        public void setFlagIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
        }

        public int getPositionFlag() {
            return this.positionFlag;
        }

        public sendInviteEmail_args setPositionFlag(int positionFlag) {
            this.positionFlag = positionFlag;
            setPositionFlagIsSet(true);
            return this;
        }

        public void unsetPositionFlag() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONFLAG_ISSET_ID);
        }

        /** Returns true if field positionFlag is set (has been assigned a value) and false otherwise */
        public boolean isSetPositionFlag() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONFLAG_ISSET_ID);
        }

        public void setPositionFlagIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONFLAG_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case PARAMS:
                    if (value == null) {
                        unsetParams();
                    } else {
                        setParams((java.util.Map<java.lang.String,java.lang.String>)value);
                    }
                    break;

                case USER_ID_LIST:
                    if (value == null) {
                        unsetUserIdList();
                    } else {
                        setUserIdList((java.util.List<java.lang.Integer>)value);
                    }
                    break;

                case POSITION_ID_LIST:
                    if (value == null) {
                        unsetPositionIdList();
                    } else {
                        setPositionIdList((java.util.List<java.lang.Integer>)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

                case HR_ID:
                    if (value == null) {
                        unsetHrId();
                    } else {
                        setHrId((java.lang.Integer)value);
                    }
                    break;

                case FLAG:
                    if (value == null) {
                        unsetFlag();
                    } else {
                        setFlag((java.lang.Integer)value);
                    }
                    break;

                case POSITION_FLAG:
                    if (value == null) {
                        unsetPositionFlag();
                    } else {
                        setPositionFlag((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case PARAMS:
                    return getParams();

                case USER_ID_LIST:
                    return getUserIdList();

                case POSITION_ID_LIST:
                    return getPositionIdList();

                case COMPANY_ID:
                    return getCompanyId();

                case HR_ID:
                    return getHrId();

                case FLAG:
                    return getFlag();

                case POSITION_FLAG:
                    return getPositionFlag();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case PARAMS:
                    return isSetParams();
                case USER_ID_LIST:
                    return isSetUserIdList();
                case POSITION_ID_LIST:
                    return isSetPositionIdList();
                case COMPANY_ID:
                    return isSetCompanyId();
                case HR_ID:
                    return isSetHrId();
                case FLAG:
                    return isSetFlag();
                case POSITION_FLAG:
                    return isSetPositionFlag();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof sendInviteEmail_args)
                return this.equals((sendInviteEmail_args)that);
            return false;
        }

        public boolean equals(sendInviteEmail_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_params = true && this.isSetParams();
            boolean that_present_params = true && that.isSetParams();
            if (this_present_params || that_present_params) {
                if (!(this_present_params && that_present_params))
                    return false;
                if (!this.params.equals(that.params))
                    return false;
            }

            boolean this_present_userIdList = true && this.isSetUserIdList();
            boolean that_present_userIdList = true && that.isSetUserIdList();
            if (this_present_userIdList || that_present_userIdList) {
                if (!(this_present_userIdList && that_present_userIdList))
                    return false;
                if (!this.userIdList.equals(that.userIdList))
                    return false;
            }

            boolean this_present_positionIdList = true && this.isSetPositionIdList();
            boolean that_present_positionIdList = true && that.isSetPositionIdList();
            if (this_present_positionIdList || that_present_positionIdList) {
                if (!(this_present_positionIdList && that_present_positionIdList))
                    return false;
                if (!this.positionIdList.equals(that.positionIdList))
                    return false;
            }

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            boolean this_present_hrId = true;
            boolean that_present_hrId = true;
            if (this_present_hrId || that_present_hrId) {
                if (!(this_present_hrId && that_present_hrId))
                    return false;
                if (this.hrId != that.hrId)
                    return false;
            }

            boolean this_present_flag = true;
            boolean that_present_flag = true;
            if (this_present_flag || that_present_flag) {
                if (!(this_present_flag && that_present_flag))
                    return false;
                if (this.flag != that.flag)
                    return false;
            }

            boolean this_present_positionFlag = true;
            boolean that_present_positionFlag = true;
            if (this_present_positionFlag || that_present_positionFlag) {
                if (!(this_present_positionFlag && that_present_positionFlag))
                    return false;
                if (this.positionFlag != that.positionFlag)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetParams()) ? 131071 : 524287);
            if (isSetParams())
                hashCode = hashCode * 8191 + params.hashCode();

            hashCode = hashCode * 8191 + ((isSetUserIdList()) ? 131071 : 524287);
            if (isSetUserIdList())
                hashCode = hashCode * 8191 + userIdList.hashCode();

            hashCode = hashCode * 8191 + ((isSetPositionIdList()) ? 131071 : 524287);
            if (isSetPositionIdList())
                hashCode = hashCode * 8191 + positionIdList.hashCode();

            hashCode = hashCode * 8191 + companyId;

            hashCode = hashCode * 8191 + hrId;

            hashCode = hashCode * 8191 + flag;

            hashCode = hashCode * 8191 + positionFlag;

            return hashCode;
        }

        @Override
        public int compareTo(sendInviteEmail_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetParams()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUserIdList()).compareTo(other.isSetUserIdList());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserIdList()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIdList, other.userIdList);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPositionIdList()).compareTo(other.isSetPositionIdList());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPositionIdList()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionIdList, other.positionIdList);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetHrId()).compareTo(other.isSetHrId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHrId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrId, other.hrId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFlag()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPositionFlag()).compareTo(other.isSetPositionFlag());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPositionFlag()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionFlag, other.positionFlag);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("sendInviteEmail_args(");
            boolean first = true;

            sb.append("params:");
            if (this.params == null) {
                sb.append("null");
            } else {
                sb.append(this.params);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("userIdList:");
            if (this.userIdList == null) {
                sb.append("null");
            } else {
                sb.append(this.userIdList);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("positionIdList:");
            if (this.positionIdList == null) {
                sb.append("null");
            } else {
                sb.append(this.positionIdList);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("hrId:");
            sb.append(this.hrId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("flag:");
            sb.append(this.flag);
            first = false;
            if (!first) sb.append(", ");
            sb.append("positionFlag:");
            sb.append(this.positionFlag);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class sendInviteEmail_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sendInviteEmail_argsStandardScheme getScheme() {
                return new sendInviteEmail_argsStandardScheme();
            }
        }

        private static class sendInviteEmail_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendInviteEmail_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sendInviteEmail_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PARAMS
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map274 = iprot.readMapBegin();
                                    struct.params = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map274.size);
                                    java.lang.String _key275;
                                    java.lang.String _val276;
                                    for (int _i277 = 0; _i277 < _map274.size; ++_i277)
                                    {
                                        _key275 = iprot.readString();
                                        _val276 = iprot.readString();
                                        struct.params.put(_key275, _val276);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setParamsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // USER_ID_LIST
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list278 = iprot.readListBegin();
                                    struct.userIdList = new java.util.ArrayList<java.lang.Integer>(_list278.size);
                                    int _elem279;
                                    for (int _i280 = 0; _i280 < _list278.size; ++_i280)
                                    {
                                        _elem279 = iprot.readI32();
                                        struct.userIdList.add(_elem279);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setUserIdListIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // POSITION_ID_LIST
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list281 = iprot.readListBegin();
                                    struct.positionIdList = new java.util.ArrayList<java.lang.Integer>(_list281.size);
                                    int _elem282;
                                    for (int _i283 = 0; _i283 < _list281.size; ++_i283)
                                    {
                                        _elem282 = iprot.readI32();
                                        struct.positionIdList.add(_elem282);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setPositionIdListIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 5: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hrId = iprot.readI32();
                                struct.setHrIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 6: // FLAG
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.flag = iprot.readI32();
                                struct.setFlagIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 7: // POSITION_FLAG
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.positionFlag = iprot.readI32();
                                struct.setPositionFlagIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sendInviteEmail_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.params != null) {
                    oprot.writeFieldBegin(PARAMS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
                        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter284 : struct.params.entrySet())
                        {
                            oprot.writeString(_iter284.getKey());
                            oprot.writeString(_iter284.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.userIdList != null) {
                    oprot.writeFieldBegin(USER_ID_LIST_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIdList.size()));
                        for (int _iter285 : struct.userIdList)
                        {
                            oprot.writeI32(_iter285);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.positionIdList != null) {
                    oprot.writeFieldBegin(POSITION_ID_LIST_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.positionIdList.size()));
                        for (int _iter286 : struct.positionIdList)
                        {
                            oprot.writeI32(_iter286);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hrId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(FLAG_FIELD_DESC);
                oprot.writeI32(struct.flag);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(POSITION_FLAG_FIELD_DESC);
                oprot.writeI32(struct.positionFlag);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sendInviteEmail_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sendInviteEmail_argsTupleScheme getScheme() {
                return new sendInviteEmail_argsTupleScheme();
            }
        }

        private static class sendInviteEmail_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendInviteEmail_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sendInviteEmail_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetParams()) {
                    optionals.set(0);
                }
                if (struct.isSetUserIdList()) {
                    optionals.set(1);
                }
                if (struct.isSetPositionIdList()) {
                    optionals.set(2);
                }
                if (struct.isSetCompanyId()) {
                    optionals.set(3);
                }
                if (struct.isSetHrId()) {
                    optionals.set(4);
                }
                if (struct.isSetFlag()) {
                    optionals.set(5);
                }
                if (struct.isSetPositionFlag()) {
                    optionals.set(6);
                }
                oprot.writeBitSet(optionals, 7);
                if (struct.isSetParams()) {
                    {
                        oprot.writeI32(struct.params.size());
                        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter287 : struct.params.entrySet())
                        {
                            oprot.writeString(_iter287.getKey());
                            oprot.writeString(_iter287.getValue());
                        }
                    }
                }
                if (struct.isSetUserIdList()) {
                    {
                        oprot.writeI32(struct.userIdList.size());
                        for (int _iter288 : struct.userIdList)
                        {
                            oprot.writeI32(_iter288);
                        }
                    }
                }
                if (struct.isSetPositionIdList()) {
                    {
                        oprot.writeI32(struct.positionIdList.size());
                        for (int _iter289 : struct.positionIdList)
                        {
                            oprot.writeI32(_iter289);
                        }
                    }
                }
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
                if (struct.isSetHrId()) {
                    oprot.writeI32(struct.hrId);
                }
                if (struct.isSetFlag()) {
                    oprot.writeI32(struct.flag);
                }
                if (struct.isSetPositionFlag()) {
                    oprot.writeI32(struct.positionFlag);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sendInviteEmail_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(7);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TMap _map290 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.params = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map290.size);
                        java.lang.String _key291;
                        java.lang.String _val292;
                        for (int _i293 = 0; _i293 < _map290.size; ++_i293)
                        {
                            _key291 = iprot.readString();
                            _val292 = iprot.readString();
                            struct.params.put(_key291, _val292);
                        }
                    }
                    struct.setParamsIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TList _list294 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.userIdList = new java.util.ArrayList<java.lang.Integer>(_list294.size);
                        int _elem295;
                        for (int _i296 = 0; _i296 < _list294.size; ++_i296)
                        {
                            _elem295 = iprot.readI32();
                            struct.userIdList.add(_elem295);
                        }
                    }
                    struct.setUserIdListIsSet(true);
                }
                if (incoming.get(2)) {
                    {
                        org.apache.thrift.protocol.TList _list297 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.positionIdList = new java.util.ArrayList<java.lang.Integer>(_list297.size);
                        int _elem298;
                        for (int _i299 = 0; _i299 < _list297.size; ++_i299)
                        {
                            _elem298 = iprot.readI32();
                            struct.positionIdList.add(_elem298);
                        }
                    }
                    struct.setPositionIdListIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
                if (incoming.get(4)) {
                    struct.hrId = iprot.readI32();
                    struct.setHrIdIsSet(true);
                }
                if (incoming.get(5)) {
                    struct.flag = iprot.readI32();
                    struct.setFlagIsSet(true);
                }
                if (incoming.get(6)) {
                    struct.positionFlag = iprot.readI32();
                    struct.setPositionFlagIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class sendInviteEmail_result implements org.apache.thrift.TBase<sendInviteEmail_result, sendInviteEmail_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendInviteEmail_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendInviteEmail_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendInviteEmail_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendInviteEmail_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendInviteEmail_result.class, metaDataMap);
        }

        public sendInviteEmail_result() {
        }

        public sendInviteEmail_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sendInviteEmail_result(sendInviteEmail_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public sendInviteEmail_result deepCopy() {
            return new sendInviteEmail_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public sendInviteEmail_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public sendInviteEmail_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof sendInviteEmail_result)
                return this.equals((sendInviteEmail_result)that);
            return false;
        }

        public boolean equals(sendInviteEmail_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(sendInviteEmail_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("sendInviteEmail_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class sendInviteEmail_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sendInviteEmail_resultStandardScheme getScheme() {
                return new sendInviteEmail_resultStandardScheme();
            }
        }

        private static class sendInviteEmail_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendInviteEmail_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sendInviteEmail_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sendInviteEmail_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sendInviteEmail_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sendInviteEmail_resultTupleScheme getScheme() {
                return new sendInviteEmail_resultTupleScheme();
            }
        }

        private static class sendInviteEmail_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendInviteEmail_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sendInviteEmail_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sendInviteEmail_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class sendResumeEmail_args implements org.apache.thrift.TBase<sendResumeEmail_args, sendResumeEmail_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendResumeEmail_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendResumeEmail_args");

        private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)1);
        private static final org.apache.thrift.protocol.TField USER_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("userIdList", org.apache.thrift.protocol.TType.LIST, (short)2);
        private static final org.apache.thrift.protocol.TField ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("idList", org.apache.thrift.protocol.TType.LIST, (short)3);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)4);
        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hrId", org.apache.thrift.protocol.TType.I32, (short)5);
        private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.I32, (short)6);
        private static final org.apache.thrift.protocol.TField EMAIL_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("emailList", org.apache.thrift.protocol.TType.LIST, (short)7);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendResumeEmail_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendResumeEmail_argsTupleSchemeFactory();

        public java.util.Map<java.lang.String,java.lang.String> params; // required
        public java.util.List<java.lang.Integer> userIdList; // required
        public java.util.List<java.lang.Integer> idList; // required
        public int companyId; // required
        public int hrId; // required
        public int flag; // required
        public java.util.List<java.lang.String> emailList; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PARAMS((short)1, "params"),
            USER_ID_LIST((short)2, "userIdList"),
            ID_LIST((short)3, "idList"),
            COMPANY_ID((short)4, "companyId"),
            HR_ID((short)5, "hrId"),
            FLAG((short)6, "flag"),
            EMAIL_LIST((short)7, "emailList");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // PARAMS
                        return PARAMS;
                    case 2: // USER_ID_LIST
                        return USER_ID_LIST;
                    case 3: // ID_LIST
                        return ID_LIST;
                    case 4: // COMPANY_ID
                        return COMPANY_ID;
                    case 5: // HR_ID
                        return HR_ID;
                    case 6: // FLAG
                        return FLAG;
                    case 7: // EMAIL_LIST
                        return EMAIL_LIST;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __COMPANYID_ISSET_ID = 0;
        private static final int __HRID_ISSET_ID = 1;
        private static final int __FLAG_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
            tmpMap.put(_Fields.USER_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("userIdList", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            tmpMap.put(_Fields.ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("idList", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hrId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.EMAIL_LIST, new org.apache.thrift.meta_data.FieldMetaData("emailList", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendResumeEmail_args.class, metaDataMap);
        }

        public sendResumeEmail_args() {
        }

        public sendResumeEmail_args(
                java.util.Map<java.lang.String,java.lang.String> params,
                java.util.List<java.lang.Integer> userIdList,
                java.util.List<java.lang.Integer> idList,
                int companyId,
                int hrId,
                int flag,
                java.util.List<java.lang.String> emailList)
        {
            this();
            this.params = params;
            this.userIdList = userIdList;
            this.idList = idList;
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            this.hrId = hrId;
            setHrIdIsSet(true);
            this.flag = flag;
            setFlagIsSet(true);
            this.emailList = emailList;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sendResumeEmail_args(sendResumeEmail_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetParams()) {
                java.util.Map<java.lang.String,java.lang.String> __this__params = new java.util.HashMap<java.lang.String,java.lang.String>(other.params);
                this.params = __this__params;
            }
            if (other.isSetUserIdList()) {
                java.util.List<java.lang.Integer> __this__userIdList = new java.util.ArrayList<java.lang.Integer>(other.userIdList);
                this.userIdList = __this__userIdList;
            }
            if (other.isSetIdList()) {
                java.util.List<java.lang.Integer> __this__idList = new java.util.ArrayList<java.lang.Integer>(other.idList);
                this.idList = __this__idList;
            }
            this.companyId = other.companyId;
            this.hrId = other.hrId;
            this.flag = other.flag;
            if (other.isSetEmailList()) {
                java.util.List<java.lang.String> __this__emailList = new java.util.ArrayList<java.lang.String>(other.emailList);
                this.emailList = __this__emailList;
            }
        }

        public sendResumeEmail_args deepCopy() {
            return new sendResumeEmail_args(this);
        }

        @Override
        public void clear() {
            this.params = null;
            this.userIdList = null;
            this.idList = null;
            setCompanyIdIsSet(false);
            this.companyId = 0;
            setHrIdIsSet(false);
            this.hrId = 0;
            setFlagIsSet(false);
            this.flag = 0;
            this.emailList = null;
        }

        public int getParamsSize() {
            return (this.params == null) ? 0 : this.params.size();
        }

        public void putToParams(java.lang.String key, java.lang.String val) {
            if (this.params == null) {
                this.params = new java.util.HashMap<java.lang.String,java.lang.String>();
            }
            this.params.put(key, val);
        }

        public java.util.Map<java.lang.String,java.lang.String> getParams() {
            return this.params;
        }

        public sendResumeEmail_args setParams(java.util.Map<java.lang.String,java.lang.String> params) {
            this.params = params;
            return this;
        }

        public void unsetParams() {
            this.params = null;
        }

        /** Returns true if field params is set (has been assigned a value) and false otherwise */
        public boolean isSetParams() {
            return this.params != null;
        }

        public void setParamsIsSet(boolean value) {
            if (!value) {
                this.params = null;
            }
        }

        public int getUserIdListSize() {
            return (this.userIdList == null) ? 0 : this.userIdList.size();
        }

        public java.util.Iterator<java.lang.Integer> getUserIdListIterator() {
            return (this.userIdList == null) ? null : this.userIdList.iterator();
        }

        public void addToUserIdList(int elem) {
            if (this.userIdList == null) {
                this.userIdList = new java.util.ArrayList<java.lang.Integer>();
            }
            this.userIdList.add(elem);
        }

        public java.util.List<java.lang.Integer> getUserIdList() {
            return this.userIdList;
        }

        public sendResumeEmail_args setUserIdList(java.util.List<java.lang.Integer> userIdList) {
            this.userIdList = userIdList;
            return this;
        }

        public void unsetUserIdList() {
            this.userIdList = null;
        }

        /** Returns true if field userIdList is set (has been assigned a value) and false otherwise */
        public boolean isSetUserIdList() {
            return this.userIdList != null;
        }

        public void setUserIdListIsSet(boolean value) {
            if (!value) {
                this.userIdList = null;
            }
        }

        public int getIdListSize() {
            return (this.idList == null) ? 0 : this.idList.size();
        }

        public java.util.Iterator<java.lang.Integer> getIdListIterator() {
            return (this.idList == null) ? null : this.idList.iterator();
        }

        public void addToIdList(int elem) {
            if (this.idList == null) {
                this.idList = new java.util.ArrayList<java.lang.Integer>();
            }
            this.idList.add(elem);
        }

        public java.util.List<java.lang.Integer> getIdList() {
            return this.idList;
        }

        public sendResumeEmail_args setIdList(java.util.List<java.lang.Integer> idList) {
            this.idList = idList;
            return this;
        }

        public void unsetIdList() {
            this.idList = null;
        }

        /** Returns true if field idList is set (has been assigned a value) and false otherwise */
        public boolean isSetIdList() {
            return this.idList != null;
        }

        public void setIdListIsSet(boolean value) {
            if (!value) {
                this.idList = null;
            }
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public sendResumeEmail_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public int getHrId() {
            return this.hrId;
        }

        public sendResumeEmail_args setHrId(int hrId) {
            this.hrId = hrId;
            setHrIdIsSet(true);
            return this;
        }

        public void unsetHrId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HRID_ISSET_ID);
        }

        /** Returns true if field hrId is set (has been assigned a value) and false otherwise */
        public boolean isSetHrId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HRID_ISSET_ID);
        }

        public void setHrIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HRID_ISSET_ID, value);
        }

        public int getFlag() {
            return this.flag;
        }

        public sendResumeEmail_args setFlag(int flag) {
            this.flag = flag;
            setFlagIsSet(true);
            return this;
        }

        public void unsetFlag() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
        }

        /** Returns true if field flag is set (has been assigned a value) and false otherwise */
        public boolean isSetFlag() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
        }

        public void setFlagIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
        }

        public int getEmailListSize() {
            return (this.emailList == null) ? 0 : this.emailList.size();
        }

        public java.util.Iterator<java.lang.String> getEmailListIterator() {
            return (this.emailList == null) ? null : this.emailList.iterator();
        }

        public void addToEmailList(java.lang.String elem) {
            if (this.emailList == null) {
                this.emailList = new java.util.ArrayList<java.lang.String>();
            }
            this.emailList.add(elem);
        }

        public java.util.List<java.lang.String> getEmailList() {
            return this.emailList;
        }

        public sendResumeEmail_args setEmailList(java.util.List<java.lang.String> emailList) {
            this.emailList = emailList;
            return this;
        }

        public void unsetEmailList() {
            this.emailList = null;
        }

        /** Returns true if field emailList is set (has been assigned a value) and false otherwise */
        public boolean isSetEmailList() {
            return this.emailList != null;
        }

        public void setEmailListIsSet(boolean value) {
            if (!value) {
                this.emailList = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case PARAMS:
                    if (value == null) {
                        unsetParams();
                    } else {
                        setParams((java.util.Map<java.lang.String,java.lang.String>)value);
                    }
                    break;

                case USER_ID_LIST:
                    if (value == null) {
                        unsetUserIdList();
                    } else {
                        setUserIdList((java.util.List<java.lang.Integer>)value);
                    }
                    break;

                case ID_LIST:
                    if (value == null) {
                        unsetIdList();
                    } else {
                        setIdList((java.util.List<java.lang.Integer>)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

                case HR_ID:
                    if (value == null) {
                        unsetHrId();
                    } else {
                        setHrId((java.lang.Integer)value);
                    }
                    break;

                case FLAG:
                    if (value == null) {
                        unsetFlag();
                    } else {
                        setFlag((java.lang.Integer)value);
                    }
                    break;

                case EMAIL_LIST:
                    if (value == null) {
                        unsetEmailList();
                    } else {
                        setEmailList((java.util.List<java.lang.String>)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case PARAMS:
                    return getParams();

                case USER_ID_LIST:
                    return getUserIdList();

                case ID_LIST:
                    return getIdList();

                case COMPANY_ID:
                    return getCompanyId();

                case HR_ID:
                    return getHrId();

                case FLAG:
                    return getFlag();

                case EMAIL_LIST:
                    return getEmailList();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case PARAMS:
                    return isSetParams();
                case USER_ID_LIST:
                    return isSetUserIdList();
                case ID_LIST:
                    return isSetIdList();
                case COMPANY_ID:
                    return isSetCompanyId();
                case HR_ID:
                    return isSetHrId();
                case FLAG:
                    return isSetFlag();
                case EMAIL_LIST:
                    return isSetEmailList();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof sendResumeEmail_args)
                return this.equals((sendResumeEmail_args)that);
            return false;
        }

        public boolean equals(sendResumeEmail_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_params = true && this.isSetParams();
            boolean that_present_params = true && that.isSetParams();
            if (this_present_params || that_present_params) {
                if (!(this_present_params && that_present_params))
                    return false;
                if (!this.params.equals(that.params))
                    return false;
            }

            boolean this_present_userIdList = true && this.isSetUserIdList();
            boolean that_present_userIdList = true && that.isSetUserIdList();
            if (this_present_userIdList || that_present_userIdList) {
                if (!(this_present_userIdList && that_present_userIdList))
                    return false;
                if (!this.userIdList.equals(that.userIdList))
                    return false;
            }

            boolean this_present_idList = true && this.isSetIdList();
            boolean that_present_idList = true && that.isSetIdList();
            if (this_present_idList || that_present_idList) {
                if (!(this_present_idList && that_present_idList))
                    return false;
                if (!this.idList.equals(that.idList))
                    return false;
            }

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            boolean this_present_hrId = true;
            boolean that_present_hrId = true;
            if (this_present_hrId || that_present_hrId) {
                if (!(this_present_hrId && that_present_hrId))
                    return false;
                if (this.hrId != that.hrId)
                    return false;
            }

            boolean this_present_flag = true;
            boolean that_present_flag = true;
            if (this_present_flag || that_present_flag) {
                if (!(this_present_flag && that_present_flag))
                    return false;
                if (this.flag != that.flag)
                    return false;
            }

            boolean this_present_emailList = true && this.isSetEmailList();
            boolean that_present_emailList = true && that.isSetEmailList();
            if (this_present_emailList || that_present_emailList) {
                if (!(this_present_emailList && that_present_emailList))
                    return false;
                if (!this.emailList.equals(that.emailList))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetParams()) ? 131071 : 524287);
            if (isSetParams())
                hashCode = hashCode * 8191 + params.hashCode();

            hashCode = hashCode * 8191 + ((isSetUserIdList()) ? 131071 : 524287);
            if (isSetUserIdList())
                hashCode = hashCode * 8191 + userIdList.hashCode();

            hashCode = hashCode * 8191 + ((isSetIdList()) ? 131071 : 524287);
            if (isSetIdList())
                hashCode = hashCode * 8191 + idList.hashCode();

            hashCode = hashCode * 8191 + companyId;

            hashCode = hashCode * 8191 + hrId;

            hashCode = hashCode * 8191 + flag;

            hashCode = hashCode * 8191 + ((isSetEmailList()) ? 131071 : 524287);
            if (isSetEmailList())
                hashCode = hashCode * 8191 + emailList.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(sendResumeEmail_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetParams()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUserIdList()).compareTo(other.isSetUserIdList());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserIdList()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIdList, other.userIdList);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetIdList()).compareTo(other.isSetIdList());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetIdList()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idList, other.idList);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetHrId()).compareTo(other.isSetHrId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHrId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrId, other.hrId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFlag()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetEmailList()).compareTo(other.isSetEmailList());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEmailList()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emailList, other.emailList);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("sendResumeEmail_args(");
            boolean first = true;

            sb.append("params:");
            if (this.params == null) {
                sb.append("null");
            } else {
                sb.append(this.params);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("userIdList:");
            if (this.userIdList == null) {
                sb.append("null");
            } else {
                sb.append(this.userIdList);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("idList:");
            if (this.idList == null) {
                sb.append("null");
            } else {
                sb.append(this.idList);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("hrId:");
            sb.append(this.hrId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("flag:");
            sb.append(this.flag);
            first = false;
            if (!first) sb.append(", ");
            sb.append("emailList:");
            if (this.emailList == null) {
                sb.append("null");
            } else {
                sb.append(this.emailList);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class sendResumeEmail_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sendResumeEmail_argsStandardScheme getScheme() {
                return new sendResumeEmail_argsStandardScheme();
            }
        }

        private static class sendResumeEmail_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendResumeEmail_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sendResumeEmail_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PARAMS
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map300 = iprot.readMapBegin();
                                    struct.params = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map300.size);
                                    java.lang.String _key301;
                                    java.lang.String _val302;
                                    for (int _i303 = 0; _i303 < _map300.size; ++_i303)
                                    {
                                        _key301 = iprot.readString();
                                        _val302 = iprot.readString();
                                        struct.params.put(_key301, _val302);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setParamsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // USER_ID_LIST
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list304 = iprot.readListBegin();
                                    struct.userIdList = new java.util.ArrayList<java.lang.Integer>(_list304.size);
                                    int _elem305;
                                    for (int _i306 = 0; _i306 < _list304.size; ++_i306)
                                    {
                                        _elem305 = iprot.readI32();
                                        struct.userIdList.add(_elem305);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setUserIdListIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // ID_LIST
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list307 = iprot.readListBegin();
                                    struct.idList = new java.util.ArrayList<java.lang.Integer>(_list307.size);
                                    int _elem308;
                                    for (int _i309 = 0; _i309 < _list307.size; ++_i309)
                                    {
                                        _elem308 = iprot.readI32();
                                        struct.idList.add(_elem308);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setIdListIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 5: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hrId = iprot.readI32();
                                struct.setHrIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 6: // FLAG
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.flag = iprot.readI32();
                                struct.setFlagIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 7: // EMAIL_LIST
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list310 = iprot.readListBegin();
                                    struct.emailList = new java.util.ArrayList<java.lang.String>(_list310.size);
                                    java.lang.String _elem311;
                                    for (int _i312 = 0; _i312 < _list310.size; ++_i312)
                                    {
                                        _elem311 = iprot.readString();
                                        struct.emailList.add(_elem311);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setEmailListIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sendResumeEmail_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.params != null) {
                    oprot.writeFieldBegin(PARAMS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
                        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter313 : struct.params.entrySet())
                        {
                            oprot.writeString(_iter313.getKey());
                            oprot.writeString(_iter313.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.userIdList != null) {
                    oprot.writeFieldBegin(USER_ID_LIST_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIdList.size()));
                        for (int _iter314 : struct.userIdList)
                        {
                            oprot.writeI32(_iter314);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.idList != null) {
                    oprot.writeFieldBegin(ID_LIST_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.idList.size()));
                        for (int _iter315 : struct.idList)
                        {
                            oprot.writeI32(_iter315);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hrId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(FLAG_FIELD_DESC);
                oprot.writeI32(struct.flag);
                oprot.writeFieldEnd();
                if (struct.emailList != null) {
                    oprot.writeFieldBegin(EMAIL_LIST_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.emailList.size()));
                        for (java.lang.String _iter316 : struct.emailList)
                        {
                            oprot.writeString(_iter316);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sendResumeEmail_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sendResumeEmail_argsTupleScheme getScheme() {
                return new sendResumeEmail_argsTupleScheme();
            }
        }

        private static class sendResumeEmail_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendResumeEmail_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sendResumeEmail_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetParams()) {
                    optionals.set(0);
                }
                if (struct.isSetUserIdList()) {
                    optionals.set(1);
                }
                if (struct.isSetIdList()) {
                    optionals.set(2);
                }
                if (struct.isSetCompanyId()) {
                    optionals.set(3);
                }
                if (struct.isSetHrId()) {
                    optionals.set(4);
                }
                if (struct.isSetFlag()) {
                    optionals.set(5);
                }
                if (struct.isSetEmailList()) {
                    optionals.set(6);
                }
                oprot.writeBitSet(optionals, 7);
                if (struct.isSetParams()) {
                    {
                        oprot.writeI32(struct.params.size());
                        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter317 : struct.params.entrySet())
                        {
                            oprot.writeString(_iter317.getKey());
                            oprot.writeString(_iter317.getValue());
                        }
                    }
                }
                if (struct.isSetUserIdList()) {
                    {
                        oprot.writeI32(struct.userIdList.size());
                        for (int _iter318 : struct.userIdList)
                        {
                            oprot.writeI32(_iter318);
                        }
                    }
                }
                if (struct.isSetIdList()) {
                    {
                        oprot.writeI32(struct.idList.size());
                        for (int _iter319 : struct.idList)
                        {
                            oprot.writeI32(_iter319);
                        }
                    }
                }
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
                if (struct.isSetHrId()) {
                    oprot.writeI32(struct.hrId);
                }
                if (struct.isSetFlag()) {
                    oprot.writeI32(struct.flag);
                }
                if (struct.isSetEmailList()) {
                    {
                        oprot.writeI32(struct.emailList.size());
                        for (java.lang.String _iter320 : struct.emailList)
                        {
                            oprot.writeString(_iter320);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sendResumeEmail_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(7);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TMap _map321 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.params = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map321.size);
                        java.lang.String _key322;
                        java.lang.String _val323;
                        for (int _i324 = 0; _i324 < _map321.size; ++_i324)
                        {
                            _key322 = iprot.readString();
                            _val323 = iprot.readString();
                            struct.params.put(_key322, _val323);
                        }
                    }
                    struct.setParamsIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TList _list325 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.userIdList = new java.util.ArrayList<java.lang.Integer>(_list325.size);
                        int _elem326;
                        for (int _i327 = 0; _i327 < _list325.size; ++_i327)
                        {
                            _elem326 = iprot.readI32();
                            struct.userIdList.add(_elem326);
                        }
                    }
                    struct.setUserIdListIsSet(true);
                }
                if (incoming.get(2)) {
                    {
                        org.apache.thrift.protocol.TList _list328 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.idList = new java.util.ArrayList<java.lang.Integer>(_list328.size);
                        int _elem329;
                        for (int _i330 = 0; _i330 < _list328.size; ++_i330)
                        {
                            _elem329 = iprot.readI32();
                            struct.idList.add(_elem329);
                        }
                    }
                    struct.setIdListIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
                if (incoming.get(4)) {
                    struct.hrId = iprot.readI32();
                    struct.setHrIdIsSet(true);
                }
                if (incoming.get(5)) {
                    struct.flag = iprot.readI32();
                    struct.setFlagIsSet(true);
                }
                if (incoming.get(6)) {
                    {
                        org.apache.thrift.protocol.TList _list331 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.emailList = new java.util.ArrayList<java.lang.String>(_list331.size);
                        java.lang.String _elem332;
                        for (int _i333 = 0; _i333 < _list331.size; ++_i333)
                        {
                            _elem332 = iprot.readString();
                            struct.emailList.add(_elem332);
                        }
                    }
                    struct.setEmailListIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class sendResumeEmail_result implements org.apache.thrift.TBase<sendResumeEmail_result, sendResumeEmail_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendResumeEmail_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendResumeEmail_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendResumeEmail_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendResumeEmail_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendResumeEmail_result.class, metaDataMap);
        }

        public sendResumeEmail_result() {
        }

        public sendResumeEmail_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sendResumeEmail_result(sendResumeEmail_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public sendResumeEmail_result deepCopy() {
            return new sendResumeEmail_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public sendResumeEmail_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public sendResumeEmail_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof sendResumeEmail_result)
                return this.equals((sendResumeEmail_result)that);
            return false;
        }

        public boolean equals(sendResumeEmail_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(sendResumeEmail_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("sendResumeEmail_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class sendResumeEmail_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sendResumeEmail_resultStandardScheme getScheme() {
                return new sendResumeEmail_resultStandardScheme();
            }
        }

        private static class sendResumeEmail_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendResumeEmail_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sendResumeEmail_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sendResumeEmail_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sendResumeEmail_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sendResumeEmail_resultTupleScheme getScheme() {
                return new sendResumeEmail_resultTupleScheme();
            }
        }

        private static class sendResumeEmail_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendResumeEmail_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sendResumeEmail_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sendResumeEmail_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class sendPositionInviteEmail_args implements org.apache.thrift.TBase<sendPositionInviteEmail_args, sendPositionInviteEmail_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendPositionInviteEmail_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendPositionInviteEmail_args");

        private static final org.apache.thrift.protocol.TField HR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hrId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendPositionInviteEmail_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendPositionInviteEmail_argsTupleSchemeFactory();

        public int hrId; // required
        public int positionId; // required
        public int companyId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HR_ID((short)1, "hrId"),
            POSITION_ID((short)2, "positionId"),
            COMPANY_ID((short)3, "companyId");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // HR_ID
                        return HR_ID;
                    case 2: // POSITION_ID
                        return POSITION_ID;
                    case 3: // COMPANY_ID
                        return COMPANY_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __HRID_ISSET_ID = 0;
        private static final int __POSITIONID_ISSET_ID = 1;
        private static final int __COMPANYID_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HR_ID, new org.apache.thrift.meta_data.FieldMetaData("hrId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendPositionInviteEmail_args.class, metaDataMap);
        }

        public sendPositionInviteEmail_args() {
        }

        public sendPositionInviteEmail_args(
                int hrId,
                int positionId,
                int companyId)
        {
            this();
            this.hrId = hrId;
            setHrIdIsSet(true);
            this.positionId = positionId;
            setPositionIdIsSet(true);
            this.companyId = companyId;
            setCompanyIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sendPositionInviteEmail_args(sendPositionInviteEmail_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.hrId = other.hrId;
            this.positionId = other.positionId;
            this.companyId = other.companyId;
        }

        public sendPositionInviteEmail_args deepCopy() {
            return new sendPositionInviteEmail_args(this);
        }

        @Override
        public void clear() {
            setHrIdIsSet(false);
            this.hrId = 0;
            setPositionIdIsSet(false);
            this.positionId = 0;
            setCompanyIdIsSet(false);
            this.companyId = 0;
        }

        public int getHrId() {
            return this.hrId;
        }

        public sendPositionInviteEmail_args setHrId(int hrId) {
            this.hrId = hrId;
            setHrIdIsSet(true);
            return this;
        }

        public void unsetHrId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HRID_ISSET_ID);
        }

        /** Returns true if field hrId is set (has been assigned a value) and false otherwise */
        public boolean isSetHrId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HRID_ISSET_ID);
        }

        public void setHrIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HRID_ISSET_ID, value);
        }

        public int getPositionId() {
            return this.positionId;
        }

        public sendPositionInviteEmail_args setPositionId(int positionId) {
            this.positionId = positionId;
            setPositionIdIsSet(true);
            return this;
        }

        public void unsetPositionId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
        public boolean isSetPositionId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
        }

        public void setPositionIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public sendPositionInviteEmail_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case HR_ID:
                    if (value == null) {
                        unsetHrId();
                    } else {
                        setHrId((java.lang.Integer)value);
                    }
                    break;

                case POSITION_ID:
                    if (value == null) {
                        unsetPositionId();
                    } else {
                        setPositionId((java.lang.Integer)value);
                    }
                    break;

                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HR_ID:
                    return getHrId();

                case POSITION_ID:
                    return getPositionId();

                case COMPANY_ID:
                    return getCompanyId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HR_ID:
                    return isSetHrId();
                case POSITION_ID:
                    return isSetPositionId();
                case COMPANY_ID:
                    return isSetCompanyId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof sendPositionInviteEmail_args)
                return this.equals((sendPositionInviteEmail_args)that);
            return false;
        }

        public boolean equals(sendPositionInviteEmail_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_hrId = true;
            boolean that_present_hrId = true;
            if (this_present_hrId || that_present_hrId) {
                if (!(this_present_hrId && that_present_hrId))
                    return false;
                if (this.hrId != that.hrId)
                    return false;
            }

            boolean this_present_positionId = true;
            boolean that_present_positionId = true;
            if (this_present_positionId || that_present_positionId) {
                if (!(this_present_positionId && that_present_positionId))
                    return false;
                if (this.positionId != that.positionId)
                    return false;
            }

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + hrId;

            hashCode = hashCode * 8191 + positionId;

            hashCode = hashCode * 8191 + companyId;

            return hashCode;
        }

        @Override
        public int compareTo(sendPositionInviteEmail_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHrId()).compareTo(other.isSetHrId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHrId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrId, other.hrId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPositionId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("sendPositionInviteEmail_args(");
            boolean first = true;

            sb.append("hrId:");
            sb.append(this.hrId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("positionId:");
            sb.append(this.positionId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class sendPositionInviteEmail_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sendPositionInviteEmail_argsStandardScheme getScheme() {
                return new sendPositionInviteEmail_argsStandardScheme();
            }
        }

        private static class sendPositionInviteEmail_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendPositionInviteEmail_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sendPositionInviteEmail_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HR_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.hrId = iprot.readI32();
                                struct.setHrIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // POSITION_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.positionId = iprot.readI32();
                                struct.setPositionIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sendPositionInviteEmail_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(HR_ID_FIELD_DESC);
                oprot.writeI32(struct.hrId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
                oprot.writeI32(struct.positionId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sendPositionInviteEmail_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sendPositionInviteEmail_argsTupleScheme getScheme() {
                return new sendPositionInviteEmail_argsTupleScheme();
            }
        }

        private static class sendPositionInviteEmail_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendPositionInviteEmail_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sendPositionInviteEmail_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHrId()) {
                    optionals.set(0);
                }
                if (struct.isSetPositionId()) {
                    optionals.set(1);
                }
                if (struct.isSetCompanyId()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetHrId()) {
                    oprot.writeI32(struct.hrId);
                }
                if (struct.isSetPositionId()) {
                    oprot.writeI32(struct.positionId);
                }
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sendPositionInviteEmail_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.hrId = iprot.readI32();
                    struct.setHrIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.positionId = iprot.readI32();
                    struct.setPositionIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class sendPositionInviteEmail_result implements org.apache.thrift.TBase<sendPositionInviteEmail_result, sendPositionInviteEmail_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendPositionInviteEmail_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendPositionInviteEmail_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendPositionInviteEmail_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendPositionInviteEmail_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendPositionInviteEmail_result.class, metaDataMap);
        }

        public sendPositionInviteEmail_result() {
        }

        public sendPositionInviteEmail_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sendPositionInviteEmail_result(sendPositionInviteEmail_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public sendPositionInviteEmail_result deepCopy() {
            return new sendPositionInviteEmail_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public sendPositionInviteEmail_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public sendPositionInviteEmail_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof sendPositionInviteEmail_result)
                return this.equals((sendPositionInviteEmail_result)that);
            return false;
        }

        public boolean equals(sendPositionInviteEmail_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(sendPositionInviteEmail_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("sendPositionInviteEmail_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class sendPositionInviteEmail_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sendPositionInviteEmail_resultStandardScheme getScheme() {
                return new sendPositionInviteEmail_resultStandardScheme();
            }
        }

        private static class sendPositionInviteEmail_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendPositionInviteEmail_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sendPositionInviteEmail_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sendPositionInviteEmail_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sendPositionInviteEmail_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public sendPositionInviteEmail_resultTupleScheme getScheme() {
                return new sendPositionInviteEmail_resultTupleScheme();
            }
        }

        private static class sendPositionInviteEmail_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendPositionInviteEmail_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sendPositionInviteEmail_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sendPositionInviteEmail_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getCompanyCommentByUserIdList_args implements org.apache.thrift.TBase<getCompanyCommentByUserIdList_args, getCompanyCommentByUserIdList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCompanyCommentByUserIdList_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompanyCommentByUserIdList_args");

        private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)1);
        private static final org.apache.thrift.protocol.TField USER_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("userIdList", org.apache.thrift.protocol.TType.LIST, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCompanyCommentByUserIdList_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCompanyCommentByUserIdList_argsTupleSchemeFactory();

        public int companyId; // required
        public java.util.List<java.lang.Integer> userIdList; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COMPANY_ID((short)1, "companyId"),
            USER_ID_LIST((short)2, "userIdList");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // COMPANY_ID
                        return COMPANY_ID;
                    case 2: // USER_ID_LIST
                        return USER_ID_LIST;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __COMPANYID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.USER_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("userIdList", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompanyCommentByUserIdList_args.class, metaDataMap);
        }

        public getCompanyCommentByUserIdList_args() {
        }

        public getCompanyCommentByUserIdList_args(
                int companyId,
                java.util.List<java.lang.Integer> userIdList)
        {
            this();
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            this.userIdList = userIdList;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCompanyCommentByUserIdList_args(getCompanyCommentByUserIdList_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.companyId = other.companyId;
            if (other.isSetUserIdList()) {
                java.util.List<java.lang.Integer> __this__userIdList = new java.util.ArrayList<java.lang.Integer>(other.userIdList);
                this.userIdList = __this__userIdList;
            }
        }

        public getCompanyCommentByUserIdList_args deepCopy() {
            return new getCompanyCommentByUserIdList_args(this);
        }

        @Override
        public void clear() {
            setCompanyIdIsSet(false);
            this.companyId = 0;
            this.userIdList = null;
        }

        public int getCompanyId() {
            return this.companyId;
        }

        public getCompanyCommentByUserIdList_args setCompanyId(int companyId) {
            this.companyId = companyId;
            setCompanyIdIsSet(true);
            return this;
        }

        public void unsetCompanyId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
        public boolean isSetCompanyId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
        }

        public void setCompanyIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
        }

        public int getUserIdListSize() {
            return (this.userIdList == null) ? 0 : this.userIdList.size();
        }

        public java.util.Iterator<java.lang.Integer> getUserIdListIterator() {
            return (this.userIdList == null) ? null : this.userIdList.iterator();
        }

        public void addToUserIdList(int elem) {
            if (this.userIdList == null) {
                this.userIdList = new java.util.ArrayList<java.lang.Integer>();
            }
            this.userIdList.add(elem);
        }

        public java.util.List<java.lang.Integer> getUserIdList() {
            return this.userIdList;
        }

        public getCompanyCommentByUserIdList_args setUserIdList(java.util.List<java.lang.Integer> userIdList) {
            this.userIdList = userIdList;
            return this;
        }

        public void unsetUserIdList() {
            this.userIdList = null;
        }

        /** Returns true if field userIdList is set (has been assigned a value) and false otherwise */
        public boolean isSetUserIdList() {
            return this.userIdList != null;
        }

        public void setUserIdListIsSet(boolean value) {
            if (!value) {
                this.userIdList = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case COMPANY_ID:
                    if (value == null) {
                        unsetCompanyId();
                    } else {
                        setCompanyId((java.lang.Integer)value);
                    }
                    break;

                case USER_ID_LIST:
                    if (value == null) {
                        unsetUserIdList();
                    } else {
                        setUserIdList((java.util.List<java.lang.Integer>)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case COMPANY_ID:
                    return getCompanyId();

                case USER_ID_LIST:
                    return getUserIdList();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case COMPANY_ID:
                    return isSetCompanyId();
                case USER_ID_LIST:
                    return isSetUserIdList();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getCompanyCommentByUserIdList_args)
                return this.equals((getCompanyCommentByUserIdList_args)that);
            return false;
        }

        public boolean equals(getCompanyCommentByUserIdList_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_companyId = true;
            boolean that_present_companyId = true;
            if (this_present_companyId || that_present_companyId) {
                if (!(this_present_companyId && that_present_companyId))
                    return false;
                if (this.companyId != that.companyId)
                    return false;
            }

            boolean this_present_userIdList = true && this.isSetUserIdList();
            boolean that_present_userIdList = true && that.isSetUserIdList();
            if (this_present_userIdList || that_present_userIdList) {
                if (!(this_present_userIdList && that_present_userIdList))
                    return false;
                if (!this.userIdList.equals(that.userIdList))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + companyId;

            hashCode = hashCode * 8191 + ((isSetUserIdList()) ? 131071 : 524287);
            if (isSetUserIdList())
                hashCode = hashCode * 8191 + userIdList.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getCompanyCommentByUserIdList_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCompanyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetUserIdList()).compareTo(other.isSetUserIdList());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserIdList()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIdList, other.userIdList);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getCompanyCommentByUserIdList_args(");
            boolean first = true;

            sb.append("companyId:");
            sb.append(this.companyId);
            first = false;
            if (!first) sb.append(", ");
            sb.append("userIdList:");
            if (this.userIdList == null) {
                sb.append("null");
            } else {
                sb.append(this.userIdList);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getCompanyCommentByUserIdList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyCommentByUserIdList_argsStandardScheme getScheme() {
                return new getCompanyCommentByUserIdList_argsStandardScheme();
            }
        }

        private static class getCompanyCommentByUserIdList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCompanyCommentByUserIdList_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getCompanyCommentByUserIdList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // COMPANY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.companyId = iprot.readI32();
                                struct.setCompanyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // USER_ID_LIST
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list334 = iprot.readListBegin();
                                    struct.userIdList = new java.util.ArrayList<java.lang.Integer>(_list334.size);
                                    int _elem335;
                                    for (int _i336 = 0; _i336 < _list334.size; ++_i336)
                                    {
                                        _elem335 = iprot.readI32();
                                        struct.userIdList.add(_elem335);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setUserIdListIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getCompanyCommentByUserIdList_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
                oprot.writeI32(struct.companyId);
                oprot.writeFieldEnd();
                if (struct.userIdList != null) {
                    oprot.writeFieldBegin(USER_ID_LIST_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIdList.size()));
                        for (int _iter337 : struct.userIdList)
                        {
                            oprot.writeI32(_iter337);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getCompanyCommentByUserIdList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyCommentByUserIdList_argsTupleScheme getScheme() {
                return new getCompanyCommentByUserIdList_argsTupleScheme();
            }
        }

        private static class getCompanyCommentByUserIdList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCompanyCommentByUserIdList_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getCompanyCommentByUserIdList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCompanyId()) {
                    optionals.set(0);
                }
                if (struct.isSetUserIdList()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetCompanyId()) {
                    oprot.writeI32(struct.companyId);
                }
                if (struct.isSetUserIdList()) {
                    {
                        oprot.writeI32(struct.userIdList.size());
                        for (int _iter338 : struct.userIdList)
                        {
                            oprot.writeI32(_iter338);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getCompanyCommentByUserIdList_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.companyId = iprot.readI32();
                    struct.setCompanyIdIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TList _list339 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.userIdList = new java.util.ArrayList<java.lang.Integer>(_list339.size);
                        int _elem340;
                        for (int _i341 = 0; _i341 < _list339.size; ++_i341)
                        {
                            _elem340 = iprot.readI32();
                            struct.userIdList.add(_elem340);
                        }
                    }
                    struct.setUserIdListIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getCompanyCommentByUserIdList_result implements org.apache.thrift.TBase<getCompanyCommentByUserIdList_result, getCompanyCommentByUserIdList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCompanyCommentByUserIdList_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompanyCommentByUserIdList_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCompanyCommentByUserIdList_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCompanyCommentByUserIdList_resultTupleSchemeFactory();

        public com.moseeker.thrift.gen.common.struct.Response success; // required
        public com.moseeker.thrift.gen.common.struct.BIZException e; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success"),
            E((short)1, "e");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.Response.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.moseeker.thrift.gen.common.struct.BIZException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompanyCommentByUserIdList_result.class, metaDataMap);
        }

        public getCompanyCommentByUserIdList_result() {
        }

        public getCompanyCommentByUserIdList_result(
                com.moseeker.thrift.gen.common.struct.Response success,
                com.moseeker.thrift.gen.common.struct.BIZException e)
        {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCompanyCommentByUserIdList_result(getCompanyCommentByUserIdList_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.moseeker.thrift.gen.common.struct.Response(other.success);
            }
            if (other.isSetE()) {
                this.e = new com.moseeker.thrift.gen.common.struct.BIZException(other.e);
            }
        }

        public getCompanyCommentByUserIdList_result deepCopy() {
            return new getCompanyCommentByUserIdList_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public com.moseeker.thrift.gen.common.struct.Response getSuccess() {
            return this.success;
        }

        public getCompanyCommentByUserIdList_result setSuccess(com.moseeker.thrift.gen.common.struct.Response success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public com.moseeker.thrift.gen.common.struct.BIZException getE() {
            return this.e;
        }

        public getCompanyCommentByUserIdList_result setE(com.moseeker.thrift.gen.common.struct.BIZException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.moseeker.thrift.gen.common.struct.Response)value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((com.moseeker.thrift.gen.common.struct.BIZException)value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getCompanyCommentByUserIdList_result)
                return this.equals((getCompanyCommentByUserIdList_result)that);
            return false;
        }

        public boolean equals(getCompanyCommentByUserIdList_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
            if (isSetE())
                hashCode = hashCode * 8191 + e.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getCompanyCommentByUserIdList_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("getCompanyCommentByUserIdList_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getCompanyCommentByUserIdList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyCommentByUserIdList_resultStandardScheme getScheme() {
                return new getCompanyCommentByUserIdList_resultStandardScheme();
            }
        }

        private static class getCompanyCommentByUserIdList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCompanyCommentByUserIdList_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getCompanyCommentByUserIdList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getCompanyCommentByUserIdList_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getCompanyCommentByUserIdList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public getCompanyCommentByUserIdList_resultTupleScheme getScheme() {
                return new getCompanyCommentByUserIdList_resultTupleScheme();
            }
        }

        private static class getCompanyCommentByUserIdList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCompanyCommentByUserIdList_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getCompanyCommentByUserIdList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getCompanyCommentByUserIdList_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new com.moseeker.thrift.gen.common.struct.Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new com.moseeker.thrift.gen.common.struct.BIZException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

}
